bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(searchLen!=  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen!=  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen!=  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return	  if(searchLen    ==    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    	non-compiled	[CE]  <identifier>  expected	105	None	replace
2	[BUG]  [BUGGY]  Cearc  {  if(isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  if(isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  if(isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }	  cearcă    {    if(isEmpty(cs)||    ArrayUtils.isEmpty(searchChars))    {    return    inDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	125	None	replace
3	[BUG]  [BUGGY]  cearc  {  if(isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearc  {  if(isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearc  {  if(isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }	  cearcă    {    if(isEmpty(cs)||    ArrayUtils.isEmpty(searchChars))    {    return    inDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	125	None	replace
4	[BUG]  [BUGGY]  if(isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }	  cearcă    {    if(isEmpty(cs)||    ArrayUtils.isEmpty(searchChars))    {    return    inDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	125	None	replace
5	[BUG]  [BUGGY]  cearc  {  if(isEmpty(cs)||  ArrayUtils.isEmpty(searchChars[j]))  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearc  {  if(isEmpty(cs)||  ArrayUtils.isEmpty(searchChars[j]))  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearc  {  if(isEmpty(cs)||  ArrayUtils.isEmpty(searchChars[j]))  {  return  INDEX_NOT_FOUND;  }	  cearcă    {    if(isEmpty(cs)||    ArrayUtils.isEmpty(searchChars))    {    return    inDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	125	None	replace
6	[BUG]  [BUGGY]  cs.set(0,  j,  searchLen);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(0,  j,  searchLen);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(0,  j,  searchLen);	  cs.set(0,    searchLen,    ch);    	non-compiled	[CE]  <identifier>  expected	113	None	replace
7	[BUG]  [BUGGY]  cs.set(i,  searchChars[j-1],  ch);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(i,  searchChars[j-1],  ch);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(i,  searchChars[j-1],  ch);	  cs.set(i,    searchChars[j-1]);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
8	[BUG]  [BUGGY]  cs.set(j,  searchChars[j-1]);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(j,  searchChars[j-1]);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(j,  searchChars[j-1]);	  cs.set(i,    searchChars[j-1]);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
9	[BUG]  [BUGGY]  cs.set(i,  searchChars[j-1]  +  1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(i,  searchChars[j-1]  +  1);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(i,  searchChars[j-1]  +  1);	  cs.set(i,    searchChars[j-1]);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
10	[BUG]  [BUGGY]  cearcn  =  INDEX_NOT_FOUND;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcn  =  INDEX_NOT_FOUND;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearcn  =  INDEX_NOT_FOUND;	  cearcă    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
11	[BUG]  [BUGGY]  cearcn  =  searchChars[j];  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcn  =  searchChars[j];  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearcn  =  searchChars[j];	  cearcă    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
12	[BUG]  [BUGGY]  cearcn  =  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcn  =  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearcn  =  INDEX_NOT_FOUND;  }	  cearcă    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
13	[BUG]  [BUGGY]  cearcn  =  searchChars[j].charAt(j);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcn  =  searchChars[j].charAt(j);  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearcn  =  searchChars[j].charAt(j);	  cearcă    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
14	[BUG]  [BUGGY]  return  j  >=  0;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  j  >=  0;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  j  >=  0;	  return    j    >    0;    	non-compiled	[CE]  <identifier>  expected	151	None	replace
15	[BUG]  [BUGGY]  return  j  ==  0;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  j  ==  0;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  j  ==  0;	  return    j    >    0;    	non-compiled	[CE]  <identifier>  expected	151	None	replace
16	[BUG]  [BUGGY]  return  j!=  0;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  j!=  0;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  j!=  0;	  return    j    >    0;    	non-compiled	[CE]  <identifier>  expected	151	None	replace
17	[BUG]  [BUGGY]  pendingUpdates.add(new  EMPTY(ch,  searchChars[j],  csLen));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  pendingUpdates.add(new  EMPTY(ch,  searchChars[j],  csLen));  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	pendingUpdates.add(new  EMPTY(ch,  searchChars[j],  csLen));	  pendingUpdates.add(new    EMPTY(ch,    searchChars[j]));    	non-compiled	[CE]  <identifier>  expected	37	None	replace
18	[BUG]  [BUGGY]  pendingUpdates.add(new  EMPTY(ch,  searchChars[j]),  csLen);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  pendingUpdates.add(new  EMPTY(ch,  searchChars[j]),  csLen);  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	pendingUpdates.add(new  EMPTY(ch,  searchChars[j]),  csLen);	  pendingUpdates.add(new    EMPTY(ch,    searchChars[j]));    	non-compiled	[CE]  <identifier>  expected	37	None	replace
19	[BUG]  [BUGGY]  ||  ch  ==  'r')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  ch  ==  'r')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  ch  ==  'r')  {  return  INDEX_NOT_FOUND;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
20	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(ch  ==  'n'  ||  ch  ==  'r')return  INDEX_NOT_FOUND;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
21	[BUG]  [BUGGY]  ||  ch  ==  'n')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  ch  ==  'n')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  ch  ==  'n')  {  return  INDEX_NOT_FOUND;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
22	[BUG]  [BUGGY]  pending  ||  j  >  0)  {  return  PAD_LIMIT;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  pending  ||  j  >  0)  {  return  PAD_LIMIT;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	pending  ||  j  >  0)  {  return  PAD_LIMIT;  }	  if(j    >    0)    {    return    PAD_LIMIT;    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
23	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsUnexpectedException( " ");  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.throwAsUnexpectedException( " ");  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	aughtExceptionHandler.throwAsUnexpectedException( " ");	  if(j    >    0)    {    return    PAD_LIMIT;    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
24	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(ch);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.handleMissingName(ch);  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	aughtExceptionHandler.handleMissingName(ch);	  if(j    >    0)    {    return    PAD_LIMIT;    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
25	[BUG]  [BUGGY]  Cearc  {  if(isEmpty(cs)||  searchChars[j]  ==  ch)  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  if(isEmpty(cs)||  searchChars[j]  ==  ch)  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  if(isEmpty(cs)||  searchChars[j]  ==  ch)  {  return  INDEX_NOT_FOUND;  }	  cearcă    {    if(isEmpty(ch)||    searchChars[j]    ==    ch)    {    return    inDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	149	None	replace
26	[BUG]  [BUGGY]  cearc  {  if(isEmpty(cs)||  searchChars[j]  ==  ch)  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearc  {  if(isEmpty(cs)||  searchChars[j]  ==  ch)  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearc  {  if(isEmpty(cs)||  searchChars[j]  ==  ch)  {  return  INDEX_NOT_FOUND;  }	  cearcă    {    if(isEmpty(ch)||    searchChars[j]    ==    ch)    {    return    inDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	149	None	replace
27	[BUG]  [BUGGY]  cearc  {  if(isEmpty(ch)||  searchChars[j]  ==  ch)  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearc  {  if(isEmpty(ch)||  searchChars[j]  ==  ch)  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearc  {  if(isEmpty(ch)||  searchChars[j]  ==  ch)  {  return  INDEX_NOT_FOUND;  }	  cearcă    {    if(isEmpty(ch)||    searchChars[j]    ==    ch)    {    return    inDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	149	None	replace
28	[BUG]  [BUGGY]  Cearc  {  if(isEmpty(ch)||  searchChars[j]  ==  ch)  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  if(isEmpty(ch)||  searchChars[j]  ==  ch)  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  if(isEmpty(ch)||  searchChars[j]  ==  ch)  {  return  INDEX_NOT_FOUND;  }	  cearcă    {    if(isEmpty(ch)||    searchChars[j]    ==    ch)    {    return    inDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	149	None	replace
29	[BUG]  [BUGGY]  char[]  searchChars  =  cs.toArray(new  char[searchLen]);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  char[]  searchChars  =  cs.toArray(new  char[searchLen]);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	char[]  searchChars  =  cs.toArray(new  char[searchLen]);	  CHARS[]    searchChars    =    cs.toArray(new    String[searchLen]);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
30	[BUG]  [BUGGY]  allowStripChars(cs,  j);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  allowStripChars(cs,  j);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	allowStripChars(cs,  j);	  allowStripChars(cs,    searchChars);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
31	[BUG]  [BUGGY]  enableStripChars(cs,  j);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  enableStripChars(cs,  j);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	enableStripChars(cs,  j);	  allowStripChars(cs,    searchChars);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
32	[BUG]  [BUGGY]  allowStripChars(cs,  searchChars,  j);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  allowStripChars(cs,  searchChars,  j);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	allowStripChars(cs,  searchChars,  j);	  allowStripChars(cs,    searchChars);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
33	[BUG]  [BUGGY]  Cearc  {  if(isEmpty(cs)||  ArrayUtils.isEmpty(searchChars[j]))  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  if(isEmpty(cs)||  ArrayUtils.isEmpty(searchChars[j]))  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  if(isEmpty(cs)||  ArrayUtils.isEmpty(searchChars[j]))  {  return  INDEX_NOT_FOUND;  }	  cearcă    {    if(isEmpty(cs)||    ArrayUtils.isEmpty(searchchars))    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
34	[BUG]  [BUGGY]  cearc  {  if(isEmpty(cs)||  ArrayUtils.isEmpty(ch))  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearc  {  if(isEmpty(cs)||  ArrayUtils.isEmpty(ch))  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearc  {  if(isEmpty(cs)||  ArrayUtils.isEmpty(ch))  {  return  INDEX_NOT_FOUND;  }	  cearcă    {    if(isEmpty(cs)||    ArrayUtils.isEmpty(searchchars))    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
35	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX_    	non-compiled	[CE]  <identifier>  expected	80	None	replace
36	[BUG]  [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX_    	non-compiled	[CE]  <identifier>  expected	80	None	replace
37	[BUG]  [BUGGY]  Len  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Len  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Len  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX_    	non-compiled	[CE]  <identifier>  expected	80	None	replace
38	[BUG]  [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX_    	non-compiled	[CE]  <identifier>  expected	80	None	replace
39	[BUG]  [BUGGY]  cs.set(0,  j,  searchChars[j]);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(0,  j,  searchChars[j]);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(0,  j,  searchChars[j]);	  cs.set(0,    j,    ch);    	non-compiled	[CE]  <identifier>  expected	146	None	replace
40	[BUG]  [BUGGY]  cs.set(0,  i,  ch);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(0,  i,  ch);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(0,  i,  ch);	  cs.set(0,    j,    ch);    	non-compiled	[CE]  <identifier>  expected	146	None	replace
41	[BUG]  [BUGGY]  cs.set(0,  j,  ch,  searchChars[j]);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(0,  j,  ch,  searchChars[j]);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(0,  j,  ch,  searchChars[j]);	  cs.set(0,    j,    ch);    	non-compiled	[CE]  <identifier>  expected	146	None	replace
42	[BUG]  [BUGGY]  AlegerResult  <  N,  V>  searchLen  =  cs.length;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  AlegerResult  <  N,  V>  searchLen  =  cs.length;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	AlegerResult  <  N,  V>  searchLen  =  cs.length;	  AlegerResult    <    N,    V>    searchLen    =    searchChars.length;    	non-compiled	[CE]  <identifier>  expected	84	None	replace
43	[BUG]  [BUGGY]  AlegerResult  <  N,  V>  searchLen  =  searchChars.length  -  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  AlegerResult  <  N,  V>  searchLen  =  searchChars.length  -  1;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	AlegerResult  <  N,  V>  searchLen  =  searchChars.length  -  1;	  AlegerResult    <    N,    V>    searchLen    =    searchChars.length;    	non-compiled	[CE]  <identifier>  expected	84	None	replace
44	[BUG]  [BUGGY]  AlegerResult  <  N,  V>  searchLen  =  ch;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  AlegerResult  <  N,  V>  searchLen  =  ch;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	AlegerResult  <  N,  V>  searchLen  =  ch;	  AlegerResult    <    N,    V>    searchLen    =    searchChars.length;    	non-compiled	[CE]  <identifier>  expected	84	None	replace
45	[BUG]  [BUGGY]  AlegerResult  <  N,  V>  searchLen  =  j;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  AlegerResult  <  N,  V>  searchLen  =  j;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	AlegerResult  <  N,  V>  searchLen  =  j;	  AlegerResult    <    N,    V>    searchLen    =    searchChars.length;    	non-compiled	[CE]  <identifier>  expected	84	None	replace
46	[BUG]  [BUGGY]  cs.remove(j);  searchChars[j]  =  ch;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.remove(j);  searchChars[j]  =  ch;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.remove(j);  searchChars[j]  =  ch;	  cs.remove(i);    searchChars[j]    =    ch;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
47	[BUG]  [BUGGY]  cs.remove(ch);  searchChars[j]  =  ch;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.remove(ch);  searchChars[j]  =  ch;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.remove(ch);  searchChars[j]  =  ch;	  cs.remove(i);    searchChars[j]    =    ch;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
48	[BUG]  [BUGGY]  ||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+    	non-compiled	[CE]  <identifier>  expected	67	None	replace
49	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+    	non-compiled	[CE]  <identifier>  expected	67	None	replace
50	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  '+  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  '+  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  '+	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+    	non-compiled	[CE]  <identifier>  expected	67	None	replace
51	[BUG]  [BUGGY]  allowSequence(cs,  j);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  allowSequence(cs,  j);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	allowSequence(cs,  j);	  allowSequence(cs,    searchLen);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
52	[BUG]  [BUGGY]  enableSequence(cs,  j);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  enableSequence(cs,  j);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	enableSequence(cs,  j);	  allowSequence(cs,    searchLen);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
53	[BUG]  [BUGGY]  allowSequence(j,  csLen);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  allowSequence(j,  csLen);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	allowSequence(j,  csLen);	  allowSequence(cs,    searchLen);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
54	[BUG]  [BUGGY]  i  =  j  +  searchLen  +  3;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  i  =  j  +  searchLen  +  3;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	i  =  j  +  searchLen  +  3;	  i    =    j    +    searchLen    +    1;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
55	[BUG]  [BUGGY]  i  =  j  +  searchLen  +  2;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  i  =  j  +  searchLen  +  2;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	i  =  j  +  searchLen  +  2;	  i    =    j    +    searchLen    +    1;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
56	[BUG]  [BUGGY]  i  =  j  +  searchLen  +  4;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  i  =  j  +  searchLen  +  4;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	i  =  j  +  searchLen  +  4;	  i    =    j    +    searchLen    +    1;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
57	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	throw  new  IllegalArgumentException( " ");	  return    0;    	non-compiled	[CE]  <identifier>  expected	108	None	replace
58	[BUG]  [BUGGY]  result[j]  =  cs.charAt(j);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  result[j]  =  cs.charAt(j);  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	result[j]  =  cs.charAt(j);	  return    0;    	non-compiled	[CE]  <identifier>  expected	108	None	replace
59	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	throw  new  IllegalStateException( " ");	  return    0;    	non-compiled	[CE]  <identifier>  expected	108	None	replace
60	[BUG]  [BUGGY]  result.add(ch);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  result.add(ch);  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	result.add(ch);	  return    0;    	non-compiled	[CE]  <identifier>  expected	108	None	replace
61	[BUG]  [BUGGY]  return  j  >  0?  searchChars[j]  :  ch;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  j  >  0?  searchChars[j]  :  ch;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  j  >  0?  searchChars[j]  :  ch;	  return    j    >    0?    PAD_LIMIT    :    ch;    	non-compiled	[CE]  <identifier>  expected	137	None	replace
62	[BUG]  [BUGGY]  return  j  >  0?  ch  :  PAD_LIMIT;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  j  >  0?  ch  :  PAD_LIMIT;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  j  >  0?  ch  :  PAD_LIMIT;	  return    j    >    0?    PAD_LIMIT    :    ch;    	non-compiled	[CE]  <identifier>  expected	137	None	replace
63	[BUG]  [BUGGY]  return  j  >  0?  csLen  :  ch;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  j  >  0?  csLen  :  ch;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  j  >  0?  csLen  :  ch;	  return    j    >    0?    PAD_LIMIT    :    ch;    	non-compiled	[CE]  <identifier>  expected	137	None	replace
64	[BUG]  [BUGGY]  return  j  +  searchLen  +  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  j  +  searchLen  +  1;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  j  +  searchLen  +  1;	  return    i    +    searchLen    +    1;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
65	[BUG]  [BUGGY]  return  i  +  searchLen  +  3;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  i  +  searchLen  +  3;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  i  +  searchLen  +  3;	  return    i    +    searchLen    +    1;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
66	[BUG]  [BUGGY]  return  i  +  searchLen  +  2;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  i  +  searchLen  +  2;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  i  +  searchLen  +  2;	  return    i    +    searchLen    +    1;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
67	[BUG]  [BUGGY]  return  ch  ==  null?  PAD_LIMIT  :  ch;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  ch  ==  null?  PAD_LIMIT  :  ch;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  ch  ==  null?  PAD_LIMIT  :  ch;	  return    ch;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
68	[BUG]  [BUGGY]  return  ch.charAt(j);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  ch.charAt(j);  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  ch.charAt(j);	  return    ch;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
69	[BUG]  [BUGGY]  i  +=  j  +  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  i  +=  j  +  1;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	i  +=  j  +  1;	  i    +=    searchLen    +    1;    	non-compiled	[CE]  <identifier>  expected	102	None	replace
70	[BUG]  [BUGGY]  i  +=  ch  +  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  i  +=  ch  +  1;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	i  +=  ch  +  1;	  i    +=    searchLen    +    1;    	non-compiled	[CE]  <identifier>  expected	102	None	replace
71	[BUG]  [BUGGY]  i  +=  csLen  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  i  +=  csLen  +  1;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	i  +=  csLen  +  1;	  i    +=    searchLen    +    1;    	non-compiled	[CE]  <identifier>  expected	102	None	replace
72	[BUG]  [BUGGY]  rackSequence(cs,  j,  searchChars[j]);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  rackSequence(cs,  j,  searchChars[j]);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	rackSequence(cs,  j,  searchChars[j]);	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '-')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
73	[BUG]  [BUGGY]  rackSequence(cs,  j,  searchChars);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  rackSequence(cs,  j,  searchChars);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	rackSequence(cs,  j,  searchChars);	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '-')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
74	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  INDEX_NOT_FOUND;  }	  cearcă    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '-')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	133	None	replace
75	[BUG]  [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  INDEX_NOT_FOUND;  }	  cearcă    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '-')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	133	None	replace
76	[BUG]  [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  INDEX_NOT_FOUND;  }	  cearcă    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '-')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	133	None	replace
77	[BUG]  [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  i;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  i;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  i;  }	  cearcă    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '-')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	133	None	replace
78	[BUG]  [BUGGY]  i  +=  3;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  i  +=  3;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	i  +=  3;	  i    +=    12;    	non-compiled	[CE]  <identifier>  expected	128	None	replace
79	[BUG]  [BUGGY]  i  +=  4;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  i  +=  4;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	i  +=  4;	  i    +=    12;    	non-compiled	[CE]  <identifier>  expected	128	None	replace
80	[BUG]  [BUGGY]  i  +=  10;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  i  +=  10;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	i  +=  10;	  i    +=    12;    	non-compiled	[CE]  <identifier>  expected	128	None	replace
81	[BUG]  [BUGGY]  allowNonEmpty(j)  {  return  PAD_LIMIT;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  allowNonEmpty(j)  {  return  PAD_LIMIT;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	allowNonEmpty(j)  {  return  PAD_LIMIT;  }	  if(j    ==    0)    {    return    PAD_LIMIT;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
82	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIgnoredException( " ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.throwAsIgnoredException( " ");  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	aughtExceptionHandler.throwAsIgnoredException( " ");	  if(j    ==    0)    {    return    PAD_LIMIT;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
83	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSuccess( "msg.invalid.cs.index.path ");  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.throwAsSuccess( "msg.invalid.cs.index.path ");  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	aughtExceptionHandler.throwAsSuccess( "msg.invalid.cs.index.path ");	  if(j    ==    0)    {    return    PAD_LIMIT;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
84	[BUG]  [BUGGY]  if(searchLen  ==  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  ==  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  ==  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_	  if(searchLen    ==    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX_    	non-compiled	[CE]  <identifier>  expected	49	None	replace
85	[BUG]  [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_NOT_FOUND;  }	  cearcă    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	144	None	replace
86	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_NOT_FOUND;  }	  cearcă    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	144	None	replace
87	[BUG]  [BUGGY]  if(searchChars[j]  ==  ch)  {  cearc  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]  ==  ch)  {  cearc  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchChars[j]  ==  ch)  {  cearc  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_	  cearcă    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	144	None	replace
88	[BUG]  [BUGGY]  Len  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Len  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Len  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_NOT_FOUND;  }	  cearcă    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	144	None	replace
89	[BUG]  [BUGGY]  rackSequence(cs,  searchChars,  j);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  rackSequence(cs,  searchChars,  j);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	rackSequence(cs,  searchChars,  j);	  rackSequence(cs,    searchChars);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
90	[BUG]  [BUGGY]  rackSequence(cs,  j);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  rackSequence(cs,  j);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	rackSequence(cs,  j);	  rackSequence(cs,    searchChars);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
91	[BUG]  [BUGGY]  rackSequence(ch,  searchChars);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  rackSequence(ch,  searchChars);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	rackSequence(ch,  searchChars);	  rackSequence(cs,    searchChars);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
92	[BUG]  [BUGGY]  Character(ch)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Character(ch)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Character(ch)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return	  Character(ch)    ==    searchChars[j])    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    i    	non-compiled	[CE]  <identifier>  expected	11	None	replace
93	[BUG]  [BUGGY]  Character(ch)  ==  searchChars[i])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Character(ch)  ==  searchChars[i])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Character(ch)  ==  searchChars[i])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i	  Character(ch)    ==    searchChars[j])    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    i    	non-compiled	[CE]  <identifier>  expected	11	None	replace
94	[BUG]  [BUGGY]  Character(ch)!=  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Character(ch)!=  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Character(ch)!=  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i	  Character(ch)    ==    searchChars[j])    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    i    	non-compiled	[CE]  <identifier>  expected	11	None	replace
95	[BUG]  [BUGGY]  if(searchChars[j]  ==  ch)  {  cearcFor(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]  ==  ch)  {  cearcFor(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchChars[j]  ==  ch)  {  cearcFor(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_	  cearcăFor(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	131	None	replace
96	[BUG]  [BUGGY]  cearcFor(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcFor(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearcFor(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND;  }	  cearcăFor(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	131	None	replace
97	[BUG]  [BUGGY]  cearcFor(j  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcFor(j  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearcFor(j  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND;  }	  cearcăFor(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	131	None	replace
98	[BUG]  [BUGGY]  cearcFor(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcFor(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearcFor(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_	  cearcăFor(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	131	None	replace
99	[BUG]  [BUGGY]  char[]  searchChars  =  cs.toArray(new  char[j]);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  char[]  searchChars  =  cs.toArray(new  char[j]);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	char[]  searchChars  =  cs.toArray(new  char[j]);	  CHARS[]    searchChars    =    cs.toArray(new    char[searchLen]);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
100	[BUG]  [BUGGY]  if(searchChars[j]  ==  ch)  {  cs.get(j);  searchChars[j]  =  ch;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]  ==  ch)  {  cs.get(j);  searchChars[j]  =  ch;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchChars[j]  ==  ch)  {  cs.get(j);  searchChars[j]  =  ch;  }	  cs.get(j);    searchChars[j]    =    ch;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
101	[BUG]  [BUGGY]  ||(searchLen  ==  0  &&  searchChars[j]!=  ch))  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(searchLen  ==  0  &&  searchChars[j]!=  ch))  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||(searchLen  ==  0  &&  searchChars[j]!=  ch))  {  return  INDEX_NOT_FOUND;  }	  if(searchLen    ==    0)    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
102	[BUG]  [BUGGY]  ||  searchLen  ==  0)  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  ==  0)  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchLen  ==  0)  {  return  INDEX_NOT_FOUND;  }	  if(searchLen    ==    0)    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
103	[BUG]  [BUGGY]  ||(searchLen  ==  0  &&  searchChars[j]  ==  ch))  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(searchLen  ==  0  &&  searchChars[j]  ==  ch))  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||(searchLen  ==  0  &&  searchChars[j]  ==  ch))  {  return  INDEX_NOT_FOUND;  }	  if(searchLen    ==    0)    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
104	[BUG]  [BUGGY]  ||(searchLen  >=  0  &&  searchChars[j]  ==  ch))  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(searchLen  >=  0  &&  searchChars[j]  ==  ch))  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||(searchLen  >=  0  &&  searchChars[j]  ==  ch))  {  return  INDEX_NOT_FOUND;  }	  if(searchLen    ==    0)    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
105	[BUG]  [BUGGY]  ||  j  ==  0)  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  j  ==  0)  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  j  ==  0)  {  return  INDEX_NOT_FOUND;  }	  ||    j    >=    0)    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
106	[BUG]  [BUGGY]  ||  j  <  0)  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  j  <  0)  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  j  <  0)  {  return  INDEX_NOT_FOUND;  }	  ||    j    >=    0)    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
107	[BUG]  [BUGGY]  ||  j  >  0)  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  j  >  0)  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  j  >  0)  {  return  INDEX_NOT_FOUND;  }	  ||    j    >=    0)    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
108	[BUG]  [BUGGY]  if(searchChars[j]!=  null)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]!=  null)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchChars[j]!=  null)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }	  if(searchChars[j]!=    ch)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	126	None	replace
109	[BUG]  [BUGGY]  if(searchChars[j]!=  null)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]!=  null)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchChars[j]!=  null)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }	  if(searchChars[j]!=    ch)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	126	None	replace
110	[BUG]  [BUGGY]  if(searchChars[j]!=  null)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]!=  null)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchChars[j]!=  null)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i	  if(searchChars[j]!=    ch)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	126	None	replace
111	[BUG]  [BUGGY]  aughtExceptionHandler(cs,  j,  searchChars[j],  ch);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler(cs,  j,  searchChars[j],  ch);  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	aughtExceptionHandler(cs,  j,  searchChars[j],  ch);	  aughtExceptionHandler(cs,    j,    searchChars[j]);    	non-compiled	[CE]  <identifier>  expected	121	None	replace
112	[BUG]  [BUGGY]  handleMissingChar(cs,  j,  searchChars[j]);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  handleMissingChar(cs,  j,  searchChars[j]);  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	handleMissingChar(cs,  j,  searchChars[j]);	  aughtExceptionHandler(cs,    j,    searchChars[j]);    	non-compiled	[CE]  <identifier>  expected	121	None	replace
113	[BUG]  [BUGGY]  ||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX    	non-compiled	[CE]  <identifier>  expected	66	None	replace
114	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  '+')  {  return  INDEX  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  '+')  {  return  INDEX  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  '+')  {  return  INDEX	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX    	non-compiled	[CE]  <identifier>  expected	66	None	replace
115	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
116	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDE  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDE  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDE	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
117	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
118	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_NOT_  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_NOT_  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_NOT_	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
119	[BUG]  [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  i;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  i;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  i;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '-')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	132	None	replace
120	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  i;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  i;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  i;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '-')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	132	None	replace
121	[BUG]  [BUGGY]  if(searchLen  >  MAX_NOT_FOUND)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  MAX_NOT_FOUND)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  MAX_NOT_FOUND)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r	  if(searchLen    >    MAX_NOT_FOUND)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    	non-compiled	[CE]  <identifier>  expected	107	None	replace
122	[BUG]  [BUGGY]  if(searchLen  >  MAX_NOT_FOUND)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  MAX_NOT_FOUND)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  MAX_NOT_FOUND)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {	  if(searchLen    >    MAX_NOT_FOUND)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    	non-compiled	[CE]  <identifier>  expected	107	None	replace
123	[BUG]  [BUGGY]  ||  isEmpty(ch)||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  isEmpty(ch)||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  isEmpty(ch)||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;	  ||    isEmpty(cs)||    ArrayUtils.isEmpty(searchChars))    {    return    INDEX_NOT_FOUND;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
124	[BUG]  [BUGGY]  ||  isEmpty(ch)||  ArrayUtils.isEmpty(searchChars))  {  return  i;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  isEmpty(ch)||  ArrayUtils.isEmpty(searchChars))  {  return  i;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  isEmpty(ch)||  ArrayUtils.isEmpty(searchChars))  {  return  i;	  ||    isEmpty(cs)||    ArrayUtils.isEmpty(searchChars))    {    return    INDEX_NOT_FOUND;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
125	[BUG]  [BUGGY]  ||  isEmpty(cs)||  ArrayUtils.isEmpty(searchChars[j]))  {  return  INDEX_NOT_FOUND;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  isEmpty(cs)||  ArrayUtils.isEmpty(searchChars[j]))  {  return  INDEX_NOT_FOUND;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  isEmpty(cs)||  ArrayUtils.isEmpty(searchChars[j]))  {  return  INDEX_NOT_FOUND;	  ||    isEmpty(cs)||    ArrayUtils.isEmpty(searchChars))    {    return    INDEX_NOT_FOUND;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
126	[BUG]  [BUGGY]  ||  isEmpty(cs)&&  ArrayUtils.isEmpty(searchChars[j]))  {  return  INDEX_NOT_FOUND;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  isEmpty(cs)&&  ArrayUtils.isEmpty(searchChars[j]))  {  return  INDEX_NOT_FOUND;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  isEmpty(cs)&&  ArrayUtils.isEmpty(searchChars[j]))  {  return  INDEX_NOT_FOUND;	  ||    isEmpty(cs)||    ArrayUtils.isEmpty(searchChars))    {    return    INDEX_NOT_FOUND;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
127	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
128	[BUG]  [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
129	[BUG]  [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
130	[BUG]  [BUGGY]  if(searchChars[j]  ==  ch)  {  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]  ==  ch)  {  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchChars[j]  ==  ch)  {  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
131	[BUG]  [BUGGY]  if(searchChars[j]  ==  ch)  {  continue  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]  ==  ch)  {  continue  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchChars[j]  ==  ch)  {  continue  INDEX_NOT_FOUND;  }	  if(searchChars[j]    ==    ch)    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
132	[BUG]  [BUGGY]  if(searchChars[j]!=  ch)  {  continue  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]!=  ch)  {  continue  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchChars[j]!=  ch)  {  continue  INDEX_NOT_FOUND;  }	  if(searchChars[j]    ==    ch)    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
133	[BUG]  [BUGGY]  ||  searchChars[j]  ==  ch)  {  continue;  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchChars[j]  ==  ch)  {  continue;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchChars[j]  ==  ch)  {  continue;	  if(searchChars[j]    ==    ch)    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
134	[BUG]  [BUGGY]  return  j  <  0;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  j  <  0;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  j  <  0;	  return    j    <    =    0;    	non-compiled	[CE]  <identifier>  expected	152	None	replace
135	[BUG]  [BUGGY]  ||  isEmpty(cs)&&  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  isEmpty(cs)&&  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  isEmpty(cs)&&  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;	  ||    isEmpty(cs)||    ArrayUtils.isEmpty(searchChars))    {    return    inDEX_NOT_FOUND;    	non-compiled	[CE]  <identifier>  expected	22	None	replace
136	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSuccess( "msg.js.index.no.search ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.throwAsSuccess( "msg.js.index.no.search ");  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	aughtExceptionHandler.throwAsSuccess( "msg.js.index.no.search ");	  if(j!=    0)    {    return    PAD_LIMIT;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
137	[BUG]  [BUGGY]  char[]  searchChars  =  cs.toChars(j,  i);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  char[]  searchChars  =  cs.toChars(j,  i);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	char[]  searchChars  =  cs.toChars(j,  i);	  CHARS[]    searchChars    =    cs.toChars(j,    searchLen);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
138	[BUG]  [BUGGY]  CHARS[]  searchChars  =  cs.toChars(j,  i);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  CHARS[]  searchChars  =  cs.toChars(j,  i);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	CHARS[]  searchChars  =  cs.toChars(j,  i);	  CHARS[]    searchChars    =    cs.toChars(j,    searchLen);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
139	[BUG]  [BUGGY]  CHARS[]  searchChars  =  cs.toChars(j,  0);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  CHARS[]  searchChars  =  cs.toChars(j,  0);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	CHARS[]  searchChars  =  cs.toChars(j,  0);	  CHARS[]    searchChars    =    cs.toChars(j,    searchLen);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
140	[BUG]  [BUGGY]  CHARS[]  searchChars  =  cs.toChars(j,  ch);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  CHARS[]  searchChars  =  cs.toChars(j,  ch);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	CHARS[]  searchChars  =  cs.toChars(j,  ch);	  CHARS[]    searchChars    =    cs.toChars(j,    searchLen);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
141	[BUG]  [BUGGY]  pendingUpdates.add(new  EMPTY(j));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  pendingUpdates.add(new  EMPTY(j));  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	pendingUpdates.add(new  EMPTY(j));	  pendingUpdates.add(new    EMPTY(ch));    	non-compiled	[CE]  <identifier>  expected	38	None	replace
142	[BUG]  [BUGGY]  pendingUpdates.add(new  EMPTY(searchChars[j]));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  pendingUpdates.add(new  EMPTY(searchChars[j]));  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	pendingUpdates.add(new  EMPTY(searchChars[j]));	  pendingUpdates.add(new    EMPTY(ch));    	non-compiled	[CE]  <identifier>  expected	38	None	replace
143	[BUG]  [BUGGY]  if(i  >  0)  {  if(searchChars[j]  ==  ch)  {  cs.get(i);  searchChars[j]  =  ch;  }  else  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(i  >  0)  {  if(searchChars[j]  ==  ch)  {  cs.get(i);  searchChars[j]  =  ch;  }  else  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(i  >  0)  {  if(searchChars[j]  ==  ch)  {  cs.get(i);  searchChars[j]  =  ch;  }  else  {  return  INDEX_NOT_FOUND;  }	  if(searchChars[j]    ==    ch)    {    cs.get(i);    searchChars[j]    =    ch;    }    else    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	123	None	replace
144	[BUG]  [BUGGY]  if(searchChars[j]!=  ch)  {  cs.get(i);  searchChars[j]  =  ch;  }  else  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]!=  ch)  {  cs.get(i);  searchChars[j]  =  ch;  }  else  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchChars[j]!=  ch)  {  cs.get(i);  searchChars[j]  =  ch;  }  else  {  return  INDEX_NOT_FOUND;  }	  if(searchChars[j]    ==    ch)    {    cs.get(i);    searchChars[j]    =    ch;    }    else    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	123	None	replace
145	[BUG]  [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_NOT_FOUND;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	145	None	replace
146	[BUG]  [BUGGY]  if(searchChars[j]  ==  ch)  {  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]  ==  ch)  {  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchChars[j]  ==  ch)  {  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	145	None	replace
147	[BUG]  [BUGGY]  Integer  i  =  indexOfAny(ch,  searchChars);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  i  =  indexOfAny(ch,  searchChars);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Integer  i  =  indexOfAny(ch,  searchChars);	  Integer    i    =    indexOfAny(searchChars,    j);    	non-compiled	[CE]  <identifier>  expected	90	None	replace
148	[BUG]  [BUGGY]  Integer  i  =  indexOfAny(ch,  searchChars[j]);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  i  =  indexOfAny(ch,  searchChars[j]);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Integer  i  =  indexOfAny(ch,  searchChars[j]);	  Integer    i    =    indexOfAny(searchChars,    j);    	non-compiled	[CE]  <identifier>  expected	90	None	replace
149	[BUG]  [BUGGY]  Integer  i  =  indexOfAny(cs,  j);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  i  =  indexOfAny(cs,  j);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Integer  i  =  indexOfAny(cs,  j);	  Integer    i    =    indexOfAny(searchChars,    j);    	non-compiled	[CE]  <identifier>  expected	90	None	replace
150	[BUG]  [BUGGY]  Integer  i  =  indexOfAny(ch,  j);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  i  =  indexOfAny(ch,  j);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Integer  i  =  indexOfAny(ch,  j);	  Integer    i    =    indexOfAny(searchChars,    j);    	non-compiled	[CE]  <identifier>  expected	90	None	replace
151	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    INDEX_NOT_FOUND    	non-compiled	[CE]  <identifier>  expected	75	None	replace
152	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    INDEX_NOT_FOUND    	non-compiled	[CE]  <identifier>  expected	75	None	replace
153	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_NOT_FOUND  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_NOT_FOUND  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_NOT_FOUND	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    INDEX_NOT_FOUND    	non-compiled	[CE]  <identifier>  expected	75	None	replace
154	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_NOT_FO  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_NOT_FO  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_NOT_FO	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    INDEX_NOT_FOUND    	non-compiled	[CE]  <identifier>  expected	75	None	replace
155	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSuccess( "msg.bad.index.search. ");  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.throwAsSuccess( "msg.bad.index.search. ");  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	aughtExceptionHandler.throwAsSuccess( "msg.bad.index.search. ");	  aughtExceptionHandler.throwAsSuccess(   "msg.bad.index.search.char   ");    	non-compiled	[CE]  <identifier>  expected	36	None	replace
156	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSuccess( "msg.bad.index.search ".charAt(j));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.throwAsSuccess( "msg.bad.index.search ".charAt(j));  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	aughtExceptionHandler.throwAsSuccess( "msg.bad.index.search ".charAt(j));	  aughtExceptionHandler.throwAsSuccess(   "msg.bad.index.search.char   ");    	non-compiled	[CE]  <identifier>  expected	36	None	replace
157	[BUG]  [BUGGY]  i  +=  2;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  i  +=  2;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	i  +=  2;	  i    +=    1;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
158	[BUG]  [BUGGY]  return  i  +  2;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  i  +  2;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  i  +  2;	  return    i    +    1;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
159	[BUG]  [BUGGY]  return  i  +  3;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  i  +  3;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  i  +  3;	  return    i    +    1;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
160	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  i  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  i  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  i  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    i    	non-compiled	[CE]  <identifier>  expected	92	None	replace
161	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    i    	non-compiled	[CE]  <identifier>  expected	92	None	replace
162	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  i  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  i  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  i	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    i    	non-compiled	[CE]  <identifier>  expected	92	None	replace
163	[BUG]  [BUGGY]  rackSequence(cs,  searchChars[j],  ch);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  rackSequence(cs,  searchChars[j],  ch);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	rackSequence(cs,  searchChars[j],  ch);	  rackSequence(cs,    searchChars[j]);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
164	[BUG]  [BUGGY]  rackSequence(cs,  searchChars[j]  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  rackSequence(cs,  searchChars[j]  +  1);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	rackSequence(cs,  searchChars[j]  +  1);	  rackSequence(cs,    searchChars[j]);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
165	[BUG]  [BUGGY]  ||  searchLen  >  1)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  1)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchLen  >  1)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    	non-compiled	[CE]  <identifier>  expected	29	None	replace
166	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    	non-compiled	[CE]  <identifier>  expected	29	None	replace
167	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >>  'r')  {  return  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >>  'r')  {  return  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >>  'r')  {  return	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    	non-compiled	[CE]  <identifier>  expected	29	None	replace
168	[BUG]  [BUGGY]  Character(ch)  ==  cs[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Character(ch)  ==  cs[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Character(ch)  ==  cs[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }	  Character(ch)    ==    searchChars[j])    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
169	[BUG]  [BUGGY]  Character(cs)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Character(cs)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Character(cs)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }	  Character(ch)    ==    searchChars[j])    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
170	[BUG]  [BUGGY]  cs.set(j,  i,  searchLen);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(j,  i,  searchLen);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(j,  i,  searchLen);	  cs.set(j,    searchLen,    ch);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
171	[BUG]  [BUGGY]  cs.set(ch,  searchLen,  j);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(ch,  searchLen,  j);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(ch,  searchLen,  j);	  cs.set(j,    searchLen,    ch);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
172	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')return  1;  if(searchChars[j]  ==  ch)  {  return  0;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')return  1;  if(searchChars[j]  ==  ch)  {  return  0;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(ch  ==  'n'  ||  ch  ==  'r')return  1;  if(searchChars[j]  ==  ch)  {  return  0;  }	  if(ch    ==    'n'    ||    ch    ==    'r')return    0;    if(searchChars[j]    ==    ch)    {    return    0;    }    	non-compiled	[CE]  <identifier>  expected	141	None	replace
173	[BUG]  [BUGGY]  if(searchChars[j]!=  ch)  {  cs.get(i);  searchChars[j]  =  ch;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]!=  ch)  {  cs.get(i);  searchChars[j]  =  ch;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchChars[j]!=  ch)  {  cs.get(i);  searchChars[j]  =  ch;  }	  if(searchChars[j]    ==    ch)    {    cs.get(i);    searchChars[j]    =    ch;    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
174	[BUG]  [BUGGY]  if(searchChars[j]!=  0)  {  cs.get(i);  searchChars[j]  =  ch;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]!=  0)  {  cs.get(i);  searchChars[j]  =  ch;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchChars[j]!=  0)  {  cs.get(i);  searchChars[j]  =  ch;  }	  if(searchChars[j]    ==    ch)    {    cs.get(i);    searchChars[j]    =    ch;    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
175	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >=  'r')  {  return  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >=  'r')  {  return  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >=  'r')  {  return	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    	non-compiled	[CE]  <identifier>  expected	117	None	replace
176	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    	non-compiled	[CE]  <identifier>  expected	117	None	replace
177	[BUG]  [BUGGY]  i  =  j  +  2;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  i  =  j  +  2;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	i  =  j  +  2;	  i    =    j    +    3;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
178	[BUG]  [BUGGY]  Aleger  <?>  searchLen  =  searchChars[j  +  1];  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Aleger  <?>  searchLen  =  searchChars[j  +  1];  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Aleger  <?>  searchLen  =  searchChars[j  +  1];	  Aleger    <?>    searchLen    =    searchChars[j];    	non-compiled	[CE]  <identifier>  expected	42	None	replace
179	[BUG]  [BUGGY]  Aleger  <?>  searchLen  =  searchChars[j].length;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Aleger  <?>  searchLen  =  searchChars[j].length;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Aleger  <?>  searchLen  =  searchChars[j].length;	  Aleger    <?>    searchLen    =    searchChars[j];    	non-compiled	[CE]  <identifier>  expected	42	None	replace
180	[BUG]  [BUGGY]  Aleger  <?>  searchLen  =  searchChars[j-1];  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Aleger  <?>  searchLen  =  searchChars[j-1];  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Aleger  <?>  searchLen  =  searchChars[j-1];	  Aleger    <?>    searchLen    =    searchChars[j];    	non-compiled	[CE]  <identifier>  expected	42	None	replace
181	[BUG]  [BUGGY]  if(searchChars[j]  ==  '.')  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]  ==  '.')  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchChars[j]  ==  '.')  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }	  if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
182	[BUG]  [BUGGY]  if(searchChars[j]  ==  ')')  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]  ==  ')')  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchChars[j]  ==  ')')  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }	  if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
183	[BUG]  [BUGGY]  Character(ch)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Character(ch)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Character(ch)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }	  if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
184	[BUG]  [BUGGY]  if(searchChars[j]  ==  '-')  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]  ==  '-')  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchChars[j]  ==  '-')  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }	  if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
185	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  String  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  String  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  String  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    String    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    INDE    	non-compiled	[CE]  <identifier>  expected	97	None	replace
186	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  String  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >=  'r')  {  return  INDE  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  String  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >=  'r')  {  return  INDE  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  String  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >=  'r')  {  return  INDE	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    String    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    INDE    	non-compiled	[CE]  <identifier>  expected	97	None	replace
187	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  String  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  String  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  String  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    String    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    INDE    	non-compiled	[CE]  <identifier>  expected	97	None	replace
188	[BUG]  [BUGGY]  cs.set(0,  searchChars[j],  ch);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(0,  searchChars[j],  ch);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(0,  searchChars[j],  ch);	  cs.set(0,    searchChars[j]);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
189	[BUG]  [BUGGY]  cs.set(0,  searchChars[j]  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(0,  searchChars[j]  +  1);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(0,  searchChars[j]  +  1);	  cs.set(0,    searchChars[j]);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
190	[BUG]  [BUGGY]  cs.set(0,  searchChars[j]  +  1]);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(0,  searchChars[j]  +  1]);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(0,  searchChars[j]  +  1]);	  cs.set(0,    searchChars[j]);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
191	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX_    	non-compiled	[CE]  <identifier>  expected	47	None	replace
192	[BUG]  [BUGGY]  if(searchChars[j]  ==  ch)  {  cearc  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]  ==  ch)  {  cearc  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchChars[j]  ==  ch)  {  cearc  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_	  cearcă    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	142	None	replace
193	[BUG]  [BUGGY]  Integer  i  =  ch.length();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  i  =  ch.length();  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Integer  i  =  ch.length();	  Integer    i    =    searchLen.length();    	non-compiled	[CE]  <identifier>  expected	91	None	replace
194	[BUG]  [BUGGY]  Integer  i  =  j.length();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  i  =  j.length();  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Integer  i  =  j.length();	  Integer    i    =    searchLen.length();    	non-compiled	[CE]  <identifier>  expected	91	None	replace
195	[BUG]  [BUGGY]  Integer  i  =  cs.length();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  i  =  cs.length();  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Integer  i  =  cs.length();	  Integer    i    =    searchLen.length();    	non-compiled	[CE]  <identifier>  expected	91	None	replace
196	[BUG]  [BUGGY]  Integer  i  =  searchLen.length()  +  1;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  i  =  searchLen.length()  +  1;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Integer  i  =  searchLen.length()  +  1;	  Integer    i    =    searchLen.length();    	non-compiled	[CE]  <identifier>  expected	91	None	replace
197	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FO  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FO  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FO	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX_NOT_FOUND    	non-compiled	[CE]  <identifier>  expected	48	None	replace
198	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX_NOT_FOUND    	non-compiled	[CE]  <identifier>  expected	48	None	replace
199	[BUG]  [BUGGY]  cs.set(i,  searchChars[j],  ch  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(i,  searchChars[j],  ch  +  1);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(i,  searchChars[j],  ch  +  1);	  cs.set(i,    searchChars[j]    +    1);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
200	[BUG]  [BUGGY]  cs.set(i,  searchChars[j]  +  1],  ch);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(i,  searchChars[j]  +  1],  ch);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(i,  searchChars[j]  +  1],  ch);	  cs.set(i,    searchChars[j]    +    1);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
201	[BUG]  [BUGGY]  cs.set(i,  searchChars[j]  -  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(i,  searchChars[j]  -  1);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(i,  searchChars[j]  -  1);	  cs.set(i,    searchChars[j]    +    1);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
202	[BUG]  [BUGGY]  cs.set(i,  j,  searchChars[j]);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(i,  j,  searchChars[j]);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(i,  j,  searchChars[j]);	  cs.set(i,    j,    searchLen);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
203	[BUG]  [BUGGY]  cs.set(i,  j,  searchLen,  ch);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(i,  j,  searchLen,  ch);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(i,  j,  searchLen,  ch);	  cs.set(i,    j,    searchLen);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
204	[BUG]  [BUGGY]  cs.set(i,  j,  searchLen,  PAD_LIMIT);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(i,  j,  searchLen,  PAD_LIMIT);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(i,  j,  searchLen,  PAD_LIMIT);	  cs.set(i,    j,    searchLen);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
205	[BUG]  [BUGGY]  if(searchLen  >  MAX_NOT_FOUND)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >=  'r')  {  return  INDE  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  MAX_NOT_FOUND)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >=  'r')  {  return  INDE  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  MAX_NOT_FOUND)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >=  'r')  {  return  INDE	  if(searchLen    >    MAX_NOT_FOUND)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    INDE    	non-compiled	[CE]  <identifier>  expected	96	None	replace
206	[BUG]  [BUGGY]  ||  ch  ==  'r'  ||  ch  ==  't')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  ch  ==  'r'  ||  ch  ==  't')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  ch  ==  'r'  ||  ch  ==  't')  {  return  INDEX_NOT_FOUND;  }	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
207	[BUG]  [BUGGY]  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  return  INDEX_NOT_FOUND;  }	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
208	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')return  INDEX_NOT_FOUND;  }	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
209	[BUG]  [BUGGY]  allowSequence(cs,  searchChars);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  allowSequence(cs,  searchChars);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	allowSequence(cs,  searchChars);	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
210	[BUG]  [BUGGY]  ||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDE  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDE  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDE	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDE    	non-compiled	[CE]  <identifier>  expected	65	None	replace
211	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  '+')  {  return  INDE  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  '+')  {  return  INDE  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  '+')  {  return  INDE	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDE    	non-compiled	[CE]  <identifier>  expected	65	None	replace
212	[BUG]  [BUGGY]  ||  searchLen  ==  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDE  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  ==  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDE  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchLen  ==  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDE	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDE    	non-compiled	[CE]  <identifier>  expected	65	None	replace
213	[BUG]  [BUGGY]  Aleger  <?>  searchChars  =  ArrayUtils.isEmpty(ch);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Aleger  <?>  searchChars  =  ArrayUtils.isEmpty(ch);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Aleger  <?>  searchChars  =  ArrayUtils.isEmpty(ch);	  Aleger    <?>    searchChars    =    ArrayUtils.isEmpty(searchChars);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
214	[BUG]  [BUGGY]  Aleger  <?>  searchChars  =  ArrayUtils.isEmpty(searchChars,  j);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Aleger  <?>  searchChars  =  ArrayUtils.isEmpty(searchChars,  j);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Aleger  <?>  searchChars  =  ArrayUtils.isEmpty(searchChars,  j);	  Aleger    <?>    searchChars    =    ArrayUtils.isEmpty(searchChars);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
215	[BUG]  [BUGGY]  Aleger  <?>  searchChars  =  ArrayUtils.isEmpty(searchChars[j]);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Aleger  <?>  searchChars  =  ArrayUtils.isEmpty(searchChars[j]);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Aleger  <?>  searchChars  =  ArrayUtils.isEmpty(searchChars[j]);	  Aleger    <?>    searchChars    =    ArrayUtils.isEmpty(searchChars);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
216	[BUG]  [BUGGY]  Aleger  <?>  searchChars  =  ArrayUtils.isEmpty(cs);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Aleger  <?>  searchChars  =  ArrayUtils.isEmpty(cs);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Aleger  <?>  searchChars  =  ArrayUtils.isEmpty(cs);	  Aleger    <?>    searchChars    =    ArrayUtils.isEmpty(searchChars);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
217	[BUG]  [BUGGY]  if(searchLen  >  MAX_ARRAY)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >=  'r')  {  return  INDE  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  MAX_ARRAY)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >=  'r')  {  return  INDE  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  MAX_ARRAY)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >=  'r')  {  return  INDE	  if(searchLen    >    MAX_ARRAY)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    INDE    	non-compiled	[CE]  <identifier>  expected	119	None	replace
218	[BUG]  [BUGGY]  if(searchLen  >  MAX_ARRAY  ||  searchLen  >  MAX_ARRAY)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  MAX_ARRAY  ||  searchLen  >  MAX_ARRAY)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  MAX_ARRAY  ||  searchLen  >  MAX_ARRAY)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  	  if(searchLen    >    MAX_ARRAY)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    INDE    	non-compiled	[CE]  <identifier>  expected	119	None	replace
219	[BUG]  [BUGGY]  rackSequence(cs,  searchLen,  j);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  rackSequence(cs,  searchLen,  j);  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	rackSequence(cs,  searchLen,  j);	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '-')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
220	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >=  'r')  {  return  IN  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >=  'r')  {  return  IN  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >=  'r')  {  return  IN	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    IN    	non-compiled	[CE]  <identifier>  expected	98	None	replace
221	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  IN  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  IN  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  IN	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    IN    	non-compiled	[CE]  <identifier>  expected	98	None	replace
222	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  IN  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  IN  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  IN	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    IN    	non-compiled	[CE]  <identifier>  expected	98	None	replace
223	[BUG]  [BUGGY]  cs.get(i  +  1);  searchChars[j]  =  ch;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.get(i  +  1);  searchChars[j]  =  ch;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.get(i  +  1);  searchChars[j]  =  ch;	  cs.get(i    +    searchLen);    searchChars[j]    =    ch;    	non-compiled	[CE]  <identifier>  expected	85	None	replace
224	[BUG]  [BUGGY]  cs.get(j  +  searchLen);  searchChars[j]  =  ch;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.get(j  +  searchLen);  searchChars[j]  =  ch;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.get(j  +  searchLen);  searchChars[j]  =  ch;	  cs.get(i    +    searchLen);    searchChars[j]    =    ch;    	non-compiled	[CE]  <identifier>  expected	85	None	replace
225	[BUG]  [BUGGY]  cs.get(i  +  1,  searchCharsLen);  searchChars[j]  =  ch;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.get(i  +  1,  searchCharsLen);  searchChars[j]  =  ch;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.get(i  +  1,  searchCharsLen);  searchChars[j]  =  ch;	  cs.get(i    +    searchLen);    searchChars[j]    =    ch;    	non-compiled	[CE]  <identifier>  expected	85	None	replace
226	[BUG]  [BUGGY]  ||  searchChars[j]  ==  ch)  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchChars[j]  ==  ch)  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchChars[j]  ==  ch)  {  return  INDEX_NOT_FOUND;  }	  if(searchChars[j]    ==    ch)    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
227	[BUG]  [BUGGY]  ||(searchChars[j]  ==  ch))  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(searchChars[j]  ==  ch))  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||(searchChars[j]  ==  ch))  {  return  INDEX_NOT_FOUND;  }	  if(searchChars[j]    ==    ch)    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
228	[BUG]  [BUGGY]  ||(searchChars[j]  ==  ch)&&  isEmpty(cs,  searchChars[j]))  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(searchChars[j]  ==  ch)&&  isEmpty(cs,  searchChars[j]))  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||(searchChars[j]  ==  ch)&&  isEmpty(cs,  searchChars[j]))  {  return  INDEX_NOT_FOUND;  }	  if(searchChars[j]    ==    ch)    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
229	[BUG]  [BUGGY]  ||  searchChars[j]  ==  ch)  {  return  INDEX_NOT_FOUND;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchChars[j]  ==  ch)  {  return  INDEX_NOT_FOUND;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchChars[j]  ==  ch)  {  return  INDEX_NOT_FOUND;	  if(searchChars[j]    ==    ch)    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
230	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
231	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
232	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
233	[BUG]  [BUGGY]  Integer  i  =  indexOfAny(ch,  cs.length());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  i  =  indexOfAny(ch,  cs.length());  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Integer  i  =  indexOfAny(ch,  cs.length());	  Integer    i    =    indexOfAny(searchChars,    cs.length());    	non-compiled	[CE]  <identifier>  expected	89	None	replace
234	[BUG]  [BUGGY]  Integer  i  =  indexOfAny(cs,  searchChars.length());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  i  =  indexOfAny(cs,  searchChars.length());  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Integer  i  =  indexOfAny(cs,  searchChars.length());	  Integer    i    =    indexOfAny(searchChars,    cs.length());    	non-compiled	[CE]  <identifier>  expected	89	None	replace
235	[BUG]  [BUGGY]  Integer  i  =  indexOfAny(ch,  searchChars.length());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  i  =  indexOfAny(ch,  searchChars.length());  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Integer  i  =  indexOfAny(ch,  searchChars.length());	  Integer    i    =    indexOfAny(searchChars,    cs.length());    	non-compiled	[CE]  <identifier>  expected	89	None	replace
236	[BUG]  [BUGGY]  cs.get(i,  searchChars[j]  =  ch  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.get(i,  searchChars[j]  =  ch  +  1;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.get(i,  searchChars[j]  =  ch  +  1;	  cs.get(i,    searchChars[j]    =    ch;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
237	[BUG]  [BUGGY]  cs.get(i,  searchChars[j]  =  ch  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.get(i,  searchChars[j]  =  ch  +  1);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.get(i,  searchChars[j]  =  ch  +  1);	  cs.get(i,    searchChars[j]    =    ch;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
238	[BUG]  [BUGGY]  cs.get(i,  searchChars[j]  =  ch);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.get(i,  searchChars[j]  =  ch);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.get(i,  searchChars[j]  =  ch);	  cs.get(i,    searchChars[j]    =    ch;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
239	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    INDE    	non-compiled	[CE]  <identifier>  expected	118	None	replace
240	[BUG]  [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    INDE    	non-compiled	[CE]  <identifier>  expected	118	None	replace
241	[BUG]  [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    INDE    	non-compiled	[CE]  <identifier>  expected	118	None	replace
242	[BUG]  [BUGGY]  Len  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Len  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Len  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    INDE    	non-compiled	[CE]  <identifier>  expected	118	None	replace
243	[BUG]  [BUGGY]  return  j  +  searchLen  +  JSON_NOT_FOUND;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  j  +  searchLen  +  JSON_NOT_FOUND;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  j  +  searchLen  +  JSON_NOT_FOUND;	  return    i    +    searchLen    +    JSON_NOT_FOUND;    	non-compiled	[CE]  <identifier>  expected	112	None	replace
244	[BUG]  [BUGGY]  return  i  +  searchLen  +(j  >  0?  JSON_NOT_FOUND  :  ch);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  i  +  searchLen  +(j  >  0?  JSON_NOT_FOUND  :  ch);  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  i  +  searchLen  +(j  >  0?  JSON_NOT_FOUND  :  ch);	  return    i    +    searchLen    +    JSON_NOT_FOUND;    	non-compiled	[CE]  <identifier>  expected	112	None	replace
245	[BUG]  [BUGGY]  return  i  +  searchLen  +  j;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  i  +  searchLen  +  j;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  i  +  searchLen  +  j;	  return    i    +    searchLen    +    JSON_NOT_FOUND;    	non-compiled	[CE]  <identifier>  expected	112	None	replace
246	[BUG]  [BUGGY]  cs.set(i,  j);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(i,  j);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(i,  j);	  cs.set(i,    ch);    	non-compiled	[CE]  <identifier>  expected	127	None	replace
247	[BUG]  [BUGGY]  cs.set(j,  ch);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(j,  ch);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(j,  ch);	  cs.set(i,    ch);    	non-compiled	[CE]  <identifier>  expected	127	None	replace
248	[BUG]  [BUGGY]  cs.set(i,  ch,  searchChars[j]);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(i,  ch,  searchChars[j]);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(i,  ch,  searchChars[j]);	  cs.set(i,    ch);    	non-compiled	[CE]  <identifier>  expected	127	None	replace
249	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >>  'r')  {  return  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >>  'r')  {  return  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >>  'r')  {  return	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch    >=    'r')    {    return    	non-compiled	[CE]  <identifier>  expected	30	None	replace
250	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  i  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  i  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  i  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '-')    {    return    i    	non-compiled	[CE]  <identifier>  expected	110	None	replace
251	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '-')    {    return    i    	non-compiled	[CE]  <identifier>  expected	110	None	replace
252	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(cs,  j,  searchChars[j]);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.handleMissingName(cs,  j,  searchChars[j]);  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	aughtExceptionHandler.handleMissingName(cs,  j,  searchChars[j]);	  aughtExceptionHandler.handleMissingName(cs,    j,    searchLen);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
253	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(cs,  i,  searchLen);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.handleMissingName(cs,  i,  searchLen);  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	aughtExceptionHandler.handleMissingName(cs,  i,  searchLen);	  aughtExceptionHandler.handleMissingName(cs,    j,    searchLen);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
254	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(cs,  j,  searchLen,  ch);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.handleMissingName(cs,  j,  searchLen,  ch);  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	aughtExceptionHandler.handleMissingName(cs,  j,  searchLen,  ch);	  aughtExceptionHandler.handleMissingName(cs,    j,    searchLen);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
255	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	129	None	replace
256	[BUG]  [BUGGY]  return  j  +  i;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  j  +  i;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  j  +  i;	  return    i    +    j;    	non-compiled	[CE]  <identifier>  expected	139	None	replace
257	[BUG]  [BUGGY]  return  i  *  j;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  i  *  j;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  i  *  j;	  return    i    +    j;    	non-compiled	[CE]  <identifier>  expected	139	None	replace
258	[BUG]  [BUGGY]  Aleger  <?>  searchLen  =  cs.length;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Aleger  <?>  searchLen  =  cs.length;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Aleger  <?>  searchLen  =  cs.length;	  Aleger    <?>    searchLen    =    searchChars.length;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
259	[BUG]  [BUGGY]  Aleger  <?>  searchLen  =  searchChars.length  -  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Aleger  <?>  searchLen  =  searchChars.length  -  1;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Aleger  <?>  searchLen  =  searchChars.length  -  1;	  Aleger    <?>    searchLen    =    searchChars.length;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
260	[BUG]  [BUGGY]  Aleger  <?>  searchLen  =  ch;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Aleger  <?>  searchLen  =  ch;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Aleger  <?>  searchLen  =  ch;	  Aleger    <?>    searchLen    =    searchChars.length;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
261	[BUG]  [BUGGY]  Aleger  <?>  searchLen  =  searchChars.length  +  1;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Aleger  <?>  searchLen  =  searchChars.length  +  1;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Aleger  <?>  searchLen  =  searchChars.length  +  1;	  Aleger    <?>    searchLen    =    searchChars.length;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
262	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >=  '+')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >=  '+')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >=  '+')  {  return  INDEX_NOT_FOUND;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    >=    '+')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
263	[BUG]  [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >=  '+')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >=  '+')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >=  '+')  {  return  INDEX_NOT_FOUND;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    >=    '+')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
264	[BUG]  [BUGGY]  CHARS[]  searchChars  =  cs.get(ch);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  CHARS[]  searchChars  =  cs.get(ch);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	CHARS[]  searchChars  =  cs.get(ch);	  CHARS[]    searchChars    =    cs.get(j);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
265	[BUG]  [BUGGY]  CHARS[]  searchChars  =  cs.get(i);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  CHARS[]  searchChars  =  cs.get(i);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	CHARS[]  searchChars  =  cs.get(i);	  CHARS[]    searchChars    =    cs.get(j);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
266	[BUG]  [BUGGY]  char[]  searchChars  =  cs.get(j);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  char[]  searchChars  =  cs.get(j);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	char[]  searchChars  =  cs.get(j);	  CHARS[]    searchChars    =    cs.get(j);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
267	[BUG]  [BUGGY]  CHARS[]  searchChars  =  cs.get(j  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  CHARS[]  searchChars  =  cs.get(j  +  1);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	CHARS[]  searchChars  =  cs.get(j  +  1);	  CHARS[]    searchChars    =    cs.get(j);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
268	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(ch,  searchChars[j],  csLen);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.handleMissingName(ch,  searchChars[j],  csLen);  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	aughtExceptionHandler.handleMissingName(ch,  searchChars[j],  csLen);	  aughtExceptionHandler.handleMissingName(ch,    searchChars[j]);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
269	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(cs,  searchChars[j]);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.handleMissingName(cs,  searchChars[j]);  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	aughtExceptionHandler.handleMissingName(cs,  searchChars[j]);	  aughtExceptionHandler.handleMissingName(ch,    searchChars[j]);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
270	[BUG]  [BUGGY]  ||  isEmpty(ch)||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  isEmpty(ch)||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  isEmpty(ch)||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }	  ||    isEmpty(cs)||    ArrayUtils.isEmpty(searchChars))    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
271	[BUG]  [BUGGY]  ||  isEmpty(cs)||  ArrayUtils.isEmpty(searchChars[j]))  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  isEmpty(cs)||  ArrayUtils.isEmpty(searchChars[j]))  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  isEmpty(cs)||  ArrayUtils.isEmpty(searchChars[j]))  {  return  INDEX_NOT_FOUND;  }	  ||    isEmpty(cs)||    ArrayUtils.isEmpty(searchChars))    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
272	[BUG]  [BUGGY]  ||  isEmpty(cs)&&  ArrayUtils.isEmpty(searchChars[j]))  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  isEmpty(cs)&&  ArrayUtils.isEmpty(searchChars[j]))  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  isEmpty(cs)&&  ArrayUtils.isEmpty(searchChars[j]))  {  return  INDEX_NOT_FOUND;  }	  ||    isEmpty(cs)||    ArrayUtils.isEmpty(searchChars))    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
273	[BUG]  [BUGGY]  ||  isEmpty(cs)||  ArrayUtils.isEmpty(ch))  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  isEmpty(cs)||  ArrayUtils.isEmpty(ch))  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  isEmpty(cs)||  ArrayUtils.isEmpty(ch))  {  return  INDEX_NOT_FOUND;  }	  ||    isEmpty(cs)||    ArrayUtils.isEmpty(searchChars))    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
274	[BUG]  [BUGGY]  return  j  +  csLen;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  j  +  csLen;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  j  +  csLen;	  return    j    +    searchLen;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
275	[BUG]  [BUGGY]  return  j  +  ch;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  j  +  ch;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  j  +  ch;	  return    j    +    searchLen;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
276	[BUG]  [BUGGY]  Aleger  <  K,  V>  searchLen  =  searchChars[j  -  1];  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Aleger  <  K,  V>  searchLen  =  searchChars[j  -  1];  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Aleger  <  K,  V>  searchLen  =  searchChars[j  -  1];	  Aleger    <    K,    V>    searchLen    =    searchChars[j];    	non-compiled	[CE]  <identifier>  expected	43	None	replace
277	[BUG]  [BUGGY]  Aleger  <  K,  V>  searchLen  =  searchChars[j  +  1];  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Aleger  <  K,  V>  searchLen  =  searchChars[j  +  1];  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Aleger  <  K,  V>  searchLen  =  searchChars[j  +  1];	  Aleger    <    K,    V>    searchLen    =    searchChars[j];    	non-compiled	[CE]  <identifier>  expected	43	None	replace
278	[BUG]  [BUGGY]  Aleger  <  K,  V>  searchLen  =  cs.charAt(j];  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Aleger  <  K,  V>  searchLen  =  cs.charAt(j];  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Aleger  <  K,  V>  searchLen  =  cs.charAt(j];	  Aleger    <    K,    V>    searchLen    =    searchChars[j];    	non-compiled	[CE]  <identifier>  expected	43	None	replace
279	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  INDEX_NOT_FOUND;  }	  cearcă    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '-')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	135	None	replace
280	[BUG]  [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  INDEX_NOT_FOUND;  }	  cearcă    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '-')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	135	None	replace
281	[BUG]  [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  INDEX_NOT_FOUND;  }	  cearcă    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '-')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	135	None	replace
282	[BUG]  [BUGGY]  if(searchChars[j]  ==  ch)  {  cearc  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  INDEX_  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]  ==  ch)  {  cearc  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  INDEX_  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchChars[j]  ==  ch)  {  cearc  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  INDEX_	  cearcă    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '-')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	135	None	replace
283	[BUG]  [BUGGY]  assistExceptionHandler(cs,  j,  searchChars[j]).throwException( " ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  assistExceptionHandler(cs,  j,  searchChars[j]).throwException( " ");  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	assistExceptionHandler(cs,  j,  searchChars[j]).throwException( " ");	  aughtExceptionHandler(cs,    j,    searchChars[j]).throwException(   "   ");    	non-compiled	[CE]  <identifier>  expected	120	None	replace
284	[BUG]  [BUGGY]  aughtExceptionHandler(cs,  j,  searchChars[j]).throwException( "msg.missing.char ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler(cs,  j,  searchChars[j]).throwException( "msg.missing.char ");  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	aughtExceptionHandler(cs,  j,  searchChars[j]).throwException( "msg.missing.char ");	  aughtExceptionHandler(cs,    j,    searchChars[j]).throwException(   "   ");    	non-compiled	[CE]  <identifier>  expected	120	None	replace
285	[BUG]  [BUGGY]  if(searchLen  ==  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  i  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  ==  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  i  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  ==  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  i	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '-')    {    return    i    	non-compiled	[CE]  <identifier>  expected	111	None	replace
286	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    	non-compiled	[CE]  <identifier>  expected	116	None	replace
287	[BUG]  [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    	non-compiled	[CE]  <identifier>  expected	116	None	replace
288	[BUG]  [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    	non-compiled	[CE]  <identifier>  expected	116	None	replace
289	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  'n'  ||  ch!=  'r')  {  return	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    	non-compiled	[CE]  <identifier>  expected	116	None	replace
290	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >>  'r')  {  return  INDE  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >>  'r')  {  return  INDE  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >>  'r')  {  return  INDE	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch    >=    'r')    {    return    INDE    	non-compiled	[CE]  <identifier>  expected	70	None	replace
291	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  [Delete]  'r')  {  return  INDE  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  [Delete]  'r')  {  return  INDE  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  [Delete]  'r')  {  return  INDE	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch    >=    'r')    {    return    INDE    	non-compiled	[CE]  <identifier>  expected	70	None	replace
292	[BUG]  [BUGGY]  Integer  i  =  indexOfAny(ch);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  i  =  indexOfAny(ch);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Integer  i  =  indexOfAny(ch);	  Integer    i    =    indexOfAny(searchChars);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
293	[BUG]  [BUGGY]  Integer  i  =  indexOf(ch);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  i  =  indexOf(ch);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Integer  i  =  indexOf(ch);	  Integer    i    =    indexOfAny(searchChars);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
294	[BUG]  [BUGGY]  Integer  i  =  indexOfAny(ch,  searchCharsLen);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  i  =  indexOfAny(ch,  searchCharsLen);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Integer  i  =  indexOfAny(ch,  searchCharsLen);	  Integer    i    =    indexOfAny(searchChars);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
295	[BUG]  [BUGGY]  Integer  i  =  indexOf(searchChars[j]);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  i  =  indexOf(searchChars[j]);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Integer  i  =  indexOf(searchChars[j]);	  Integer    i    =    indexOfAny(searchChars);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
296	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX_    	non-compiled	[CE]  <identifier>  expected	46	None	replace
297	[BUG]  [BUGGY]  return  j  >  0?  searchChars[j]  :  j  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  j  >  0?  searchChars[j]  :  j  +  1;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  j  >  0?  searchChars[j]  :  j  +  1;	  return    j    >    0?    PAD_LIMIT    :    j    +    1;    	non-compiled	[CE]  <identifier>  expected	138	None	replace
298	[BUG]  [BUGGY]  return  j  >  0?  csLen  :  j  +  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  j  >  0?  csLen  :  j  +  1;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  j  >  0?  csLen  :  j  +  1;	  return    j    >    0?    PAD_LIMIT    :    j    +    1;    	non-compiled	[CE]  <identifier>  expected	138	None	replace
299	[BUG]  [BUGGY]  return  j  >  0?  ch  :  j  +  1;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  j  >  0?  ch  :  j  +  1;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  j  >  0?  ch  :  j  +  1;	  return    j    >    0?    PAD_LIMIT    :    j    +    1;    	non-compiled	[CE]  <identifier>  expected	138	None	replace
300	[BUG]  [BUGGY]  return  j  +  3;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  j  +  3;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  j  +  3;	  return    j    +    1;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
301	[BUG]  [BUGGY]  return  j  +  4;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  j  +  4;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  j  +  4;	  return    j    +    1;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
302	[BUG]  [BUGGY]  bucket  ==  null  ||  searchChars[j]  ==  ch)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  bucket  ==  null  ||  searchChars[j]  ==  ch)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	bucket  ==  null  ||  searchChars[j]  ==  ch)  {  throw  new  IllegalArgumentException( " ");  }	  if(searchChars[j]    ==    ch)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
303	[BUG]  [BUGGY]  bucket!=  null  ||  searchChars[j]  ==  ch)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  bucket!=  null  ||  searchChars[j]  ==  ch)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	bucket!=  null  ||  searchChars[j]  ==  ch)  {  throw  new  IllegalArgumentException( " ");  }	  if(searchChars[j]    ==    ch)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
304	[BUG]  [BUGGY]  bucket  ==  null  &&  searchChars[j]  ==  ch)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  bucket  ==  null  &&  searchChars[j]  ==  ch)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	bucket  ==  null  &&  searchChars[j]  ==  ch)  {  throw  new  IllegalArgumentException( " ");  }	  if(searchChars[j]    ==    ch)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
305	[BUG]  [BUGGY]  allowStripChars(ch,  searchChars[j])  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  allowStripChars(ch,  searchChars[j])  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	allowStripChars(ch,  searchChars[j])  {  throw  new  IllegalArgumentException( " ");  }	  if(searchChars[j]    ==    ch)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
306	[BUG]  [BUGGY]  ||  searchLen  >  1)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  1)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchLen  >  1)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    INDE    	non-compiled	[CE]  <identifier>  expected	71	None	replace
307	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    INDE    	non-compiled	[CE]  <identifier>  expected	71	None	replace
308	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >>  'r')  {  return  INDE  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >>  'r')  {  return  INDE  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >>  'r')  {  return  INDE	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    INDE    	non-compiled	[CE]  <identifier>  expected	71	None	replace
309	[BUG]  [BUGGY]  if(searchLen  ==  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  ==  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  ==  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    INDE    	non-compiled	[CE]  <identifier>  expected	72	None	replace
310	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >=  'r')  {  return  INDE  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >=  'r')  {  return  INDE  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >=  'r')  {  return  INDE	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    INDE    	non-compiled	[CE]  <identifier>  expected	72	None	replace
311	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    INDE    	non-compiled	[CE]  <identifier>  expected	72	None	replace
312	[BUG]  [BUGGY]  Len  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Len  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Len  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND;  }	  cearcă    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	143	None	replace
313	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX_NOT_FOUND    	non-compiled	[CE]  <identifier>  expected	79	None	replace
314	[BUG]  [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX_NOT_FOUND    	non-compiled	[CE]  <identifier>  expected	79	None	replace
315	[BUG]  [BUGGY]  Len  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Len  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Len  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX_NOT_FOUND    	non-compiled	[CE]  <identifier>  expected	79	None	replace
316	[BUG]  [BUGGY]  if(searchChars[j]  ==  ch)  {  return  INDEX_NOT_FOUND;  }  else  {  searchChars[j]  =  ch;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]  ==  ch)  {  return  INDEX_NOT_FOUND;  }  else  {  searchChars[j]  =  ch;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchChars[j]  ==  ch)  {  return  INDEX_NOT_FOUND;  }  else  {  searchChars[j]  =  ch;  }	  [Delete]    	non-compiled	[CE]  <identifier>  expected	16	None	replace
317	[BUG]  [BUGGY]  char[]  searchChars  =  cs.getStrings();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  char[]  searchChars  =  cs.getStrings();  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	char[]  searchChars  =  cs.getStrings();	  CHARS[]    searchChars    =    cs.getStrings();    	non-compiled	[CE]  <identifier>  expected	57	None	replace
318	[BUG]  [BUGGY]  CHARS[]  searchChars  =  cs.getStrings(j);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  CHARS[]  searchChars  =  cs.getStrings(j);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	CHARS[]  searchChars  =  cs.getStrings(j);	  CHARS[]    searchChars    =    cs.getStrings();    	non-compiled	[CE]  <identifier>  expected	57	None	replace
319	[BUG]  [BUGGY]  return  j  >  0?  searchChars[j]  :  j;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  j  >  0?  searchChars[j]  :  j;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  j  >  0?  searchChars[j]  :  j;	  return    j    >    0?    PAD_LIMIT    :    j;    	non-compiled	[CE]  <identifier>  expected	136	None	replace
320	[BUG]  [BUGGY]  return  j  >  0?  csLen  :  j;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  j  >  0?  csLen  :  j;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  j  >  0?  csLen  :  j;	  return    j    >    0?    PAD_LIMIT    :    j;    	non-compiled	[CE]  <identifier>  expected	136	None	replace
321	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')return  1;  if(searchChars[j]  ==  ch)  {  return  0;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')return  1;  if(searchChars[j]  ==  ch)  {  return  0;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')return  1;  if(searchChars[j]  ==  ch)  {  return  0;  }	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    't')return    0;    if(searchChars[j]    ==    ch)    {    return    0;    }    	non-compiled	[CE]  <identifier>  expected	140	None	replace
322	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')return  0;  if(searchChars[j]  ==  ch)  {  return  0;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')return  0;  if(searchChars[j]  ==  ch)  {  return  0;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')return  0;  if(searchChars[j]  ==  ch)  {  return  0;  }	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    't')return    0;    if(searchChars[j]    ==    ch)    {    return    0;    }    	non-compiled	[CE]  <identifier>  expected	140	None	replace
323	[BUG]  [BUGGY]  cs.add(ch,  j,  searchLen);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.add(ch,  j,  searchLen);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.add(ch,  j,  searchLen);	  cs.add(ch,    searchLen,    i);    	non-compiled	[CE]  <identifier>  expected	147	None	replace
324	[BUG]  [BUGGY]  cs.add(ch,  i,  searchLen);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.add(ch,  i,  searchLen);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.add(ch,  i,  searchLen);	  cs.add(ch,    searchLen,    i);    	non-compiled	[CE]  <identifier>  expected	147	None	replace
325	[BUG]  [BUGGY]  cs.add(i,  searchLen,  ch);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.add(i,  searchLen,  ch);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.add(i,  searchLen,  ch);	  cs.add(ch,    searchLen,    i);    	non-compiled	[CE]  <identifier>  expected	147	None	replace
326	[BUG]  [BUGGY]  cs.add(ch,  searchChars[j],  i);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.add(ch,  searchChars[j],  i);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.add(ch,  searchChars[j],  i);	  cs.add(ch,    searchLen,    i);    	non-compiled	[CE]  <identifier>  expected	147	None	replace
327	[BUG]  [BUGGY]  if(searchChars[j]  ==  ch)  {  cearcFor(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  i;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]  ==  ch)  {  cearcFor(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  i;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchChars[j]  ==  ch)  {  cearcFor(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  i;  }	  cearcăFor(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	130	None	replace
328	[BUG]  [BUGGY]  cearcFor(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  i;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcFor(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  i;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearcFor(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  i;  }	  cearcăFor(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	130	None	replace
329	[BUG]  [BUGGY]  if(searchChars[j]  ==  '.')  {  cearcFor(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  i;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]  ==  '.')  {  cearcFor(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  i;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchChars[j]  ==  '.')  {  cearcFor(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  i;  }	  cearcăFor(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	130	None	replace
330	[BUG]  [BUGGY]  cearcFor(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  '+')  {  return  i;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcFor(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  '+')  {  return  i;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearcFor(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  '+')  {  return  i;  }	  cearcăFor(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	130	None	replace
331	[BUG]  [BUGGY]  cs.set(i,  searchChars[j],  ch,  PAD_LIMIT);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(i,  searchChars[j],  ch,  PAD_LIMIT);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(i,  searchChars[j],  ch,  PAD_LIMIT);	  cs.set(i,    searchChars[j],    ch);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
332	[BUG]  [BUGGY]  cs.set(i,  searchChars[j],  ch,  MAX_LIMIT);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(i,  searchChars[j],  ch,  MAX_LIMIT);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(i,  searchChars[j],  ch,  MAX_LIMIT);	  cs.set(i,    searchChars[j],    ch);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
333	[BUG]  [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  i;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  i;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  i;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '-')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	134	None	replace
334	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  i;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  i;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  i;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '-')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	134	None	replace
335	[BUG]  [BUGGY]  i  +=  JSON_NOT_FOUND  +  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  i  +=  JSON_NOT_FOUND  +  1;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	i  +=  JSON_NOT_FOUND  +  1;	  i    +=    JSON_NOT_FOUND;    	non-compiled	[CE]  <identifier>  expected	101	None	replace
336	[BUG]  [BUGGY]  i  +=  JSON_NOT_FOUND  +  searchLen;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  i  +=  JSON_NOT_FOUND  +  searchLen;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	i  +=  JSON_NOT_FOUND  +  searchLen;	  i    +=    JSON_NOT_FOUND;    	non-compiled	[CE]  <identifier>  expected	101	None	replace
337	[BUG]  [BUGGY]  ||(searchLen  >  0  &&  searchChars[j]!=  ch))  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(searchLen  >  0  &&  searchChars[j]!=  ch))  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||(searchLen  >  0  &&  searchChars[j]!=  ch))  {  return  INDEX_NOT_FOUND;  }	  if(searchLen    >    0)    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	103	None	replace
338	[BUG]  [BUGGY]  ||(searchLen  >  0  &&  searchChars[j]  ==  ch))  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(searchLen  >  0  &&  searchChars[j]  ==  ch))  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||(searchLen  >  0  &&  searchChars[j]  ==  ch))  {  return  INDEX_NOT_FOUND;  }	  if(searchLen    >    0)    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	103	None	replace
339	[BUG]  [BUGGY]  ||(searchLen  >  0  &&  searchChars[j]!=  ch))  {  return  INDEX_NOT_FOUND;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(searchLen  >  0  &&  searchChars[j]!=  ch))  {  return  INDEX_NOT_FOUND;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||(searchLen  >  0  &&  searchChars[j]!=  ch))  {  return  INDEX_NOT_FOUND;	  if(searchLen    >    0)    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	103	None	replace
340	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchLen  >  0)  {  return  INDEX_NOT_FOUND;  }	  if(searchLen    >    0)    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	103	None	replace
341	[BUG]  [BUGGY]  ||  searchChars[j]!=  ch)  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchChars[j]!=  ch)  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchChars[j]!=  ch)  {  return  INDEX_NOT_FOUND;  }	  if(searchChars[j]!=    ch)    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
342	[BUG]  [BUGGY]  ||(searchChars[j]!=  ch))  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(searchChars[j]!=  ch))  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||(searchChars[j]!=  ch))  {  return  INDEX_NOT_FOUND;  }	  if(searchChars[j]!=    ch)    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
343	[BUG]  [BUGGY]  rackSequence(ch,  searchChars[j]);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  rackSequence(ch,  searchChars[j]);  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	rackSequence(ch,  searchChars[j]);	  if(searchChars[j]!=    ch)    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
344	[BUG]  [BUGGY]  aughtExceptionHandler(cs,  searchChars[j],  ch))  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler(cs,  searchChars[j],  ch))  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	aughtExceptionHandler(cs,  searchChars[j],  ch))  {  return  INDEX_NOT_FOUND;  }	  aughtExceptionHandler(cs,    j,    searchChars[j]))    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	124	None	replace
345	[BUG]  [BUGGY]  aughtExceptionHandler(cs,  j,  searchChars[j],  ch))  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler(cs,  j,  searchChars[j],  ch))  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	aughtExceptionHandler(cs,  j,  searchChars[j],  ch))  {  return  INDEX_NOT_FOUND;  }	  aughtExceptionHandler(cs,    j,    searchChars[j]))    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	124	None	replace
346	[BUG]  [BUGGY]  aughtExceptionHandler(cs,  searchChars[j]))  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler(cs,  searchChars[j]))  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	aughtExceptionHandler(cs,  searchChars[j]))  {  return  INDEX_NOT_FOUND;  }	  aughtExceptionHandler(cs,    j,    searchChars[j]))    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	124	None	replace
347	[BUG]  [BUGGY]  Aleger  <?>  searchLen  =  searchChars.length  -  j  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Aleger  <?>  searchLen  =  searchChars.length  -  j  +  1;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Aleger  <?>  searchLen  =  searchChars.length  -  j  +  1;	  Aleger    <?>    searchLen    =    searchChars.length    -    j;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
348	[BUG]  [BUGGY]  Aleger  <?>  searchLen  =  searchChars.length  -  ch;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Aleger  <?>  searchLen  =  searchChars.length  -  ch;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Aleger  <?>  searchLen  =  searchChars.length  -  ch;	  Aleger    <?>    searchLen    =    searchChars.length    -    j;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
349	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX    	non-compiled	[CE]  <identifier>  expected	99	None	replace
350	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX    	non-compiled	[CE]  <identifier>  expected	99	None	replace
351	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDE  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDE  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDE	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX    	non-compiled	[CE]  <identifier>  expected	99	None	replace
352	[BUG]  [BUGGY]  cs.set(j,  searchLen,  searchChars[j]);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(j,  searchLen,  searchChars[j]);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(j,  searchLen,  searchChars[j]);	  cs.set(i,    searchLen,    j);    	non-compiled	[CE]  <identifier>  expected	114	None	replace
353	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    i    	non-compiled	[CE]  <identifier>  expected	76	None	replace
354	[BUG]  [BUGGY]  if(searchLen  ==  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  ==  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  ==  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    i    	non-compiled	[CE]  <identifier>  expected	76	None	replace
355	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    i    	non-compiled	[CE]  <identifier>  expected	76	None	replace
356	[BUG]  [BUGGY]  ||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX_    	non-compiled	[CE]  <identifier>  expected	64	None	replace
357	[BUG]  [BUGGY]  if(searchLen  ==  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  ==  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  ==  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    	non-compiled	[CE]  <identifier>  expected	28	None	replace
358	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    	non-compiled	[CE]  <identifier>  expected	28	None	replace
359	[BUG]  [BUGGY]  cs.set(i,  j,  searchChars[j],  ch);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(i,  j,  searchChars[j],  ch);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(i,  j,  searchChars[j],  ch);	  cs.set(i,    j,    ch);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
360	[BUG]  [BUGGY]  cs.set(i,  j,  findChars[j]);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(i,  j,  findChars[j]);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(i,  j,  findChars[j]);	  cs.set(i,    j,    ch);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
361	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDE  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDE  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDE	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
362	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FO  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FO  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FO	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
363	[BUG]  [BUGGY]  cs.set(0,  j,  searchChars[j],  ch);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(0,  j,  searchChars[j],  ch);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(0,  j,  searchChars[j],  ch);	  cs.set(0,    j,    ch);    	non-compiled	[CE]  <identifier>  expected	146	None	replace
364	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    	non-compiled	[CE]  <identifier>  expected	29	None	replace
365	[BUG]  [BUGGY]  aughtExceptionHandler(cs,  i,  searchChars[j],  ch).throwException( " ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler(cs,  i,  searchChars[j],  ch).throwException( " ");  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	aughtExceptionHandler(cs,  i,  searchChars[j],  ch).throwException( " ");	  aughtExceptionHandler(cs,    i,    searchChars[j]).throwException(   "   ");    	non-compiled	[CE]  <identifier>  expected	150	None	replace
366	[BUG]  [BUGGY]  if(searchLen  >=  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >=  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >=  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return	  if(searchLen    ==    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    	non-compiled	[CE]  <identifier>  expected	105	None	replace
367	[BUG]  [BUGGY]  ||  isEmpty(cs)||  ArrayUtils.isEmpty(searchLen))  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  isEmpty(cs)||  ArrayUtils.isEmpty(searchLen))  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  isEmpty(cs)||  ArrayUtils.isEmpty(searchLen))  {  return  INDEX_NOT_FOUND;  }	  ||    isEmpty(cs)||    ArrayUtils.isEmpty(searchChars))    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
368	[BUG]  [BUGGY]  ||  ArrayUtils.isEmpty(searchChars[j]))  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  ArrayUtils.isEmpty(searchChars[j]))  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  ArrayUtils.isEmpty(searchChars[j]))  {  return  INDEX_NOT_FOUND;  }	  ||    isEmpty(cs)||    ArrayUtils.isEmpty(searchChars))    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
369	[BUG]  [BUGGY]  if(searchLen  ==  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  ==  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  ==  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
370	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(cs,  j,  searchLen,  i);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.handleMissingName(cs,  j,  searchLen,  i);  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	aughtExceptionHandler.handleMissingName(cs,  j,  searchLen,  i);	  aughtExceptionHandler.handleMissingName(cs,    j,    searchLen);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
371	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(ch,  j,  searchLen);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.handleMissingName(ch,  j,  searchLen);  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	aughtExceptionHandler.handleMissingName(ch,  j,  searchLen);	  aughtExceptionHandler.handleMissingName(cs,    j,    searchLen);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
372	[BUG]  [BUGGY]  ||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+    	non-compiled	[CE]  <identifier>  expected	67	None	replace
373	[BUG]  [BUGGY]  cs.add(ch,  searchLen,  JSON_NOT_FOUND);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.add(ch,  searchLen,  JSON_NOT_FOUND);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.add(ch,  searchLen,  JSON_NOT_FOUND);	  cs.add(ch,    searchLen,    i);    	non-compiled	[CE]  <identifier>  expected	147	None	replace
374	[BUG]  [BUGGY]  cs.add(ch,  j,  i);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.add(ch,  j,  i);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.add(ch,  j,  i);	  cs.add(ch,    searchLen,    i);    	non-compiled	[CE]  <identifier>  expected	147	None	replace
375	[BUG]  [BUGGY]  safeIndex(searchLen)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  INDEX_  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  safeIndex(searchLen)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  INDEX_  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	safeIndex(searchLen)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  INDEX_	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '-')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
376	[BUG]  [BUGGY]  safeIndex(searchLen)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  INDEX  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  safeIndex(searchLen)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  INDEX  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	safeIndex(searchLen)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  INDEX	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '-')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
377	[BUG]  [BUGGY]  safeIndex(searchLen)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  INDE  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  safeIndex(searchLen)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  INDE  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	safeIndex(searchLen)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  INDE	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '-')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
378	[BUG]  [BUGGY]  safeIndex(searchLen)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  INDEX_NO  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  safeIndex(searchLen)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  INDEX_NO  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	safeIndex(searchLen)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  INDEX_NO	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '-')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
379	[BUG]  [BUGGY]  cs.set(0,  searchChars[j].length);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(0,  searchChars[j].length);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(0,  searchChars[j].length);	  cs.set(0,    searchChars[j]);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
380	[BUG]  [BUGGY]  cs.set(0,  searchChars[j]  +  ch);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(0,  searchChars[j]  +  ch);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(0,  searchChars[j]  +  ch);	  cs.set(0,    searchChars[j]);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
381	[BUG]  [BUGGY]  Integer  i  =  indexOfAny(searchChars,  j,  csLen);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  i  =  indexOfAny(searchChars,  j,  csLen);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Integer  i  =  indexOfAny(searchChars,  j,  csLen);	  Integer    i    =    indexOfAny(searchChars,    j);    	non-compiled	[CE]  <identifier>  expected	90	None	replace
382	[BUG]  [BUGGY]  Integer  i  =  indexOfAny(searchChars,  j,  ch);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  i  =  indexOfAny(searchChars,  j,  ch);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Integer  i  =  indexOfAny(searchChars,  j,  ch);	  Integer    i    =    indexOfAny(searchChars,    j);    	non-compiled	[CE]  <identifier>  expected	90	None	replace
383	[BUG]  [BUGGY]  Integer  i  =  indexOfAny(searchChars,  j  +  1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  i  =  indexOfAny(searchChars,  j  +  1);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Integer  i  =  indexOfAny(searchChars,  j  +  1);	  Integer    i    =    indexOfAny(searchChars,    j);    	non-compiled	[CE]  <identifier>  expected	90	None	replace
384	[BUG]  [BUGGY]  Len  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Len  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Len  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  INDEX_NOT_FOUND;  }	  cearcă    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '-')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	133	None	replace
385	[BUG]  [BUGGY]  cs.set(i,  searchLen);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(i,  searchLen);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(i,  searchLen);	  cs.set(i,    ch);    	non-compiled	[CE]  <identifier>  expected	127	None	replace
386	[BUG]  [BUGGY]  char[]  searchChars  =  cs.toArray(new  String[searchLen]);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  char[]  searchChars  =  cs.toArray(new  String[searchLen]);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	char[]  searchChars  =  cs.toArray(new  String[searchLen]);	  CHARS[]    searchChars    =    cs.toArray(new    String[searchLen]);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
387	[BUG]  [BUGGY]  if(searchLen  >  MAX_NOT_FOUND)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  IN  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  MAX_NOT_FOUND)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  IN  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  MAX_NOT_FOUND)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  IN	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    IN    	non-compiled	[CE]  <identifier>  expected	98	None	replace
388	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  String  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  IN  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  String  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  IN  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  String  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  IN	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    IN    	non-compiled	[CE]  <identifier>  expected	98	None	replace
389	[BUG]  [BUGGY]  Len  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Len  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Len  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  INDEX_NOT_FOUND;  }	  cearcă    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '-')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	135	None	replace
390	[BUG]  [BUGGY]  cs.set(i,  searchChars[j]  +  ch);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(i,  searchChars[j]  +  ch);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(i,  searchChars[j]  +  ch);	  cs.set(i,    searchChars[j]    +    1);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
391	[BUG]  [BUGGY]  allowNegate(searchChars[j])  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  allowNegate(searchChars[j])  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	allowNegate(searchChars[j])  {  throw  new  IllegalArgumentException( " ");  }	  if(searchChars[j]    ==    ch)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
392	[BUG]  [BUGGY]  allowNull(searchChars[j])  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  allowNull(searchChars[j])  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	allowNull(searchChars[j])  {  throw  new  IllegalArgumentException( " ");  }	  if(searchChars[j]    ==    ch)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
393	[BUG]  [BUGGY]  allowNonEmpty(searchChars[j])  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  allowNonEmpty(searchChars[j])  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	allowNonEmpty(searchChars[j])  {  throw  new  IllegalArgumentException( " ");  }	  if(searchChars[j]    ==    ch)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
394	[BUG]  [BUGGY]  allowNonEmpty(searchChars[j],  ch)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  allowNonEmpty(searchChars[j],  ch)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	allowNonEmpty(searchChars[j],  ch)  {  throw  new  IllegalArgumentException( " ");  }	  if(searchChars[j]    ==    ch)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
395	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs[i];  if(ch  ==  ch)  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs[i];  if(ch  ==  ch)  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs[i];  if(ch  ==  ch)  {  return  INDEX_NOT_FOUND;  }	  ==    [Delete]    	non-compiled	[CE]  <identifier>  expected	18	None	replace
396	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND  +  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND  +  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND  +	  ==    [Delete]    	non-compiled	[CE]  <identifier>  expected	18	None	replace
397	[BUG]  [BUGGY]  if(searchLen  >  MAX_NOT_FOUND)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  MAX_NOT_FOUND)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  MAX_NOT_FOUND)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    INDE    	non-compiled	[CE]  <identifier>  expected	72	None	replace
398	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  String  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  String  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  String  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    INDE    	non-compiled	[CE]  <identifier>  expected	72	None	replace
399	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '%')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '%')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '%')  {  return  INDEX_NOT_FOUND;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '%')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
400	[BUG]  [BUGGY]  safeIndex(searchLen)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '%')  {  return  INDEX_  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  safeIndex(searchLen)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '%')  {  return  INDEX_  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	safeIndex(searchLen)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '%')  {  return  INDEX_	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '%')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
401	[BUG]  [BUGGY]  safeIndex(searchLen)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '%')  {  return  INDEX  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  safeIndex(searchLen)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '%')  {  return  INDEX  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	safeIndex(searchLen)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '%')  {  return  INDEX	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '%')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
402	[BUG]  [BUGGY]  safeIndex(searchLen)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '%')  {  return  INDE  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  safeIndex(searchLen)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '%')  {  return  INDE  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	safeIndex(searchLen)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '%')  {  return  INDE	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '%')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
403	[BUG]  [BUGGY]  rackSequence(cs,  searchChars[j],  i);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  rackSequence(cs,  searchChars[j],  i);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	rackSequence(cs,  searchChars[j],  i);	  rackSequence(cs,    searchChars[j]);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
404	[BUG]  [BUGGY]  rackSequence(searchChars,  cs[j]);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  rackSequence(searchChars,  cs[j]);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	rackSequence(searchChars,  cs[j]);	  rackSequence(cs,    searchChars[j]);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
405	[BUG]  [BUGGY]  if(searchLen  ==  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  ==  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  ==  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    	non-compiled	[CE]  <identifier>  expected	117	None	replace
406	[BUG]  [BUGGY]  if(searchLen  >  MAX_NOT_FOUND)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  MAX_NOT_FOUND)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  MAX_NOT_FOUND)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    	non-compiled	[CE]  <identifier>  expected	117	None	replace
407	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
408	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >=  '+')  {  return  i;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >=  '+')  {  return  i;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >=  '+')  {  return  i;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
409	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '+')  {  return  i;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '+')  {  return  i;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '+')  {  return  i;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
410	[BUG]  [BUGGY]  Aleger  <  K,  V>  searchLen  =  searchChars[j].length;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Aleger  <  K,  V>  searchLen  =  searchChars[j].length;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Aleger  <  K,  V>  searchLen  =  searchChars[j].length;	  Aleger    <    K,    V>    searchLen    =    searchChars[j];    	non-compiled	[CE]  <identifier>  expected	43	None	replace
411	[BUG]  [BUGGY]  allowStripChars(ch,  searchChars);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  allowStripChars(ch,  searchChars);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	allowStripChars(ch,  searchChars);	  allowStripChars(cs,    searchChars);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
412	[BUG]  [BUGGY]  allowStripChars(cs,  ch);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  allowStripChars(cs,  ch);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	allowStripChars(cs,  ch);	  allowStripChars(cs,    searchChars);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
413	[BUG]  [BUGGY]  return  i  +  findChars.length;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  i  +  findChars.length;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  i  +  findChars.length;	  return    i    +    j;    	non-compiled	[CE]  <identifier>  expected	139	None	replace
414	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX    	non-compiled	[CE]  <identifier>  expected	66	None	replace
415	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >=  '+')  {  return  INDEX_  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >=  '+')  {  return  INDEX_  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >=  '+')  {  return  INDEX_	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    >=    '+')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
416	[BUG]  [BUGGY]  pendingUpdates.add(new  EMPTY(searchChars,  j));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  pendingUpdates.add(new  EMPTY(searchChars,  j));  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	pendingUpdates.add(new  EMPTY(searchChars,  j));	  pendingUpdates.add(new    EMPTY(ch));    	non-compiled	[CE]  <identifier>  expected	38	None	replace
417	[BUG]  [BUGGY]  pendingUpdates.add(new  EMPTY(ch,  searchLen));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  pendingUpdates.add(new  EMPTY(ch,  searchLen));  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	pendingUpdates.add(new  EMPTY(ch,  searchLen));	  pendingUpdates.add(new    EMPTY(ch));    	non-compiled	[CE]  <identifier>  expected	38	None	replace
418	[BUG]  [BUGGY]  safeIndex(searchChars[j])  {  return  i;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  safeIndex(searchChars[j])  {  return  i;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	safeIndex(searchChars[j])  {  return  i;  }	  if(searchChars[j]    ==    ch)    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
419	[BUG]  [BUGGY]  safeIndex(searchChars[j])  {  return  0;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  safeIndex(searchChars[j])  {  return  0;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	safeIndex(searchChars[j])  {  return  0;  }	  if(searchChars[j]    ==    ch)    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
420	[BUG]  [BUGGY]  found[j]  =  ch;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  found[j]  =  ch;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	found[j]  =  ch;	  if(searchChars[j]    ==    ch)    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
421	[BUG]  [BUGGY]  found[j]  =  searchChars[j].charAt(j);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  found[j]  =  searchChars[j].charAt(j);  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	found[j]  =  searchChars[j].charAt(j);	  if(searchChars[j]    ==    ch)    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
422	[BUG]  [BUGGY]  char[]  searchChars  =  cs.toChars(j,  ch);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  char[]  searchChars  =  cs.toChars(j,  ch);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	char[]  searchChars  =  cs.toChars(j,  ch);	  CHARS[]    searchChars    =    cs.toChars(j,    searchLen);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
423	[BUG]  [BUGGY]  CHARS[]  searchChars  =  cs.toArray(searchChars,  new  char[searchLen]);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  CHARS[]  searchChars  =  cs.toArray(searchChars,  new  char[searchLen]);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	CHARS[]  searchChars  =  cs.toArray(searchChars,  new  char[searchLen]);	  CHARS[]    searchChars    =    cs.toArray(new    char[searchLen]);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
424	[BUG]  [BUGGY]  Cearc  {  if(isEmpty(ch)||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  if(isEmpty(ch)||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  if(isEmpty(ch)||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }	  cearcă    {    if(isEmpty(cs)||    ArrayUtils.isEmpty(searchChars))    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
425	[BUG]  [BUGGY]  cearc  {  if(isEmpty(ch)||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearc  {  if(isEmpty(ch)||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearc  {  if(isEmpty(ch)||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }	  cearcă    {    if(isEmpty(cs)||    ArrayUtils.isEmpty(searchChars))    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
426	[BUG]  [BUGGY]  cs.get(i,  searchChars[j],  ch);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.get(i,  searchChars[j],  ch);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.get(i,  searchChars[j],  ch);	  cs.get(i,    searchChars[j]    =    ch;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
427	[BUG]  [BUGGY]  if(searchLen  >  MAX_NOT_FOUND)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  i  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  MAX_NOT_FOUND)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  i  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  MAX_NOT_FOUND)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  i	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '-')    {    return    i    	non-compiled	[CE]  <identifier>  expected	110	None	replace
428	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	145	None	replace
429	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingSource(cs,  j,  searchLen);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.handleMissingSource(cs,  j,  searchLen);  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	aughtExceptionHandler.handleMissingSource(cs,  j,  searchLen);	  if(j    >    0)    {    return    PAD_LIMIT;    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
430	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingSource(cs,  j);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.handleMissingSource(cs,  j);  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	aughtExceptionHandler.handleMissingSource(cs,  j);	  if(j    >    0)    {    return    PAD_LIMIT;    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
431	[BUG]  [BUGGY]  Aleger  <?>  searchChars  =  ArrayUtils.isEmpty(searchChars,  ch);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Aleger  <?>  searchChars  =  ArrayUtils.isEmpty(searchChars,  ch);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Aleger  <?>  searchChars  =  ArrayUtils.isEmpty(searchChars,  ch);	  Aleger    <?>    searchChars    =    ArrayUtils.isEmpty(searchChars);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
432	[BUG]  [BUGGY]  cs.get(i  +  searchLen,  searchChars[j]  =  ch;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.get(i  +  searchLen,  searchChars[j]  =  ch;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.get(i  +  searchLen,  searchChars[j]  =  ch;	  cs.get(i    +    searchLen);    searchChars[j]    =    ch;    	non-compiled	[CE]  <identifier>  expected	85	None	replace
433	[BUG]  [BUGGY]  Character(ch)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Character(ch)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Character(ch)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {	  Character(ch)    ==    searchChars[j])    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    i    	non-compiled	[CE]  <identifier>  expected	11	None	replace
434	[BUG]  [BUGGY]  Character(ch)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Character(ch)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Character(ch)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '	  Character(ch)    ==    searchChars[j])    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    i    	non-compiled	[CE]  <identifier>  expected	11	None	replace
435	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    INDEX_NOT_FOUND    	non-compiled	[CE]  <identifier>  expected	75	None	replace
436	[BUG]  [BUGGY]  aughtExceptionHandler(cs,  j,  searchChars[j],  ch).throwException( " ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler(cs,  j,  searchChars[j],  ch).throwException( " ");  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	aughtExceptionHandler(cs,  j,  searchChars[j],  ch).throwException( " ");	  aughtExceptionHandler(cs,    j,    searchChars[j]).throwException(   "   ");    	non-compiled	[CE]  <identifier>  expected	120	None	replace
437	[BUG]  [BUGGY]  return  j  >  0?  searchLen  :  j  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  j  >  0?  searchLen  :  j  +  1;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  j  >  0?  searchLen  :  j  +  1;	  return    j    >    0?    PAD_LIMIT    :    j    +    1;    	non-compiled	[CE]  <identifier>  expected	138	None	replace
438	[BUG]  [BUGGY]  CearcFor(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  CearcFor(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	CearcFor(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_	  cearcăFor(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	131	None	replace
439	[BUG]  [BUGGY]  CearcFor(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  CearcFor(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	CearcFor(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND;  }	  cearcăFor(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	131	None	replace
440	[BUG]  [BUGGY]  return  i  +  searchLen  +  JSON_NOT_FOUND  +  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  i  +  searchLen  +  JSON_NOT_FOUND  +  1;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  i  +  searchLen  +  JSON_NOT_FOUND  +  1;	  return    i    +    searchLen    +    JSON_NOT_FOUND;    	non-compiled	[CE]  <identifier>  expected	112	None	replace
441	[BUG]  [BUGGY]  return  i  +  searchLen  +  JSON_NOT_FOUND  +  j;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  i  +  searchLen  +  JSON_NOT_FOUND  +  j;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  i  +  searchLen  +  JSON_NOT_FOUND  +  j;	  return    i    +    searchLen    +    JSON_NOT_FOUND;    	non-compiled	[CE]  <identifier>  expected	112	None	replace
442	[BUG]  [BUGGY]  if(searchLen  >  MAX_NOT_FOUND)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  String  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  MAX_NOT_FOUND)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  String  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  MAX_NOT_FOUND)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  String  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    String    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    INDE    	non-compiled	[CE]  <identifier>  expected	97	None	replace
443	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  String  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >>  'r')  {  return  INDE  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  String  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >>  'r')  {  return  INDE  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  String  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >>  'r')  {  return  INDE	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    String    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    INDE    	non-compiled	[CE]  <identifier>  expected	97	None	replace
444	[BUG]  [BUGGY]  if(searchLen  >  MAX_ARRAY)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  MAX_ARRAY)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  MAX_ARRAY)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {	  if(searchLen    >    MAX_ARRAY)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    INDE    	non-compiled	[CE]  <identifier>  expected	119	None	replace
445	[BUG]  [BUGGY]  if(searchLen  >  MAX_ARRAY)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  MAX_ARRAY)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  MAX_ARRAY)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r	  if(searchLen    >    MAX_ARRAY)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    INDE    	non-compiled	[CE]  <identifier>  expected	119	None	replace
446	[BUG]  [BUGGY]  if(searchLen  >  MAX_ARRAY)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  IN  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  MAX_ARRAY)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  IN  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  MAX_ARRAY)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  IN	  if(searchLen    >    MAX_ARRAY)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    INDE    	non-compiled	[CE]  <identifier>  expected	119	None	replace
447	[BUG]  [BUGGY]  ||  isEmpty(ch)||  ArrayUtils.isEmpty(searchChars))  {  return  0;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  isEmpty(ch)||  ArrayUtils.isEmpty(searchChars))  {  return  0;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  isEmpty(ch)||  ArrayUtils.isEmpty(searchChars))  {  return  0;	  ||    isEmpty(cs)||    ArrayUtils.isEmpty(searchChars))    {    return    INDEX_NOT_FOUND;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
448	[BUG]  [BUGGY]  cs.set(i,  searchChars[j],  ch,  indexOfAny);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(i,  searchChars[j],  ch,  indexOfAny);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(i,  searchChars[j],  ch,  indexOfAny);	  cs.set(i,    searchChars[j],    ch);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
449	[BUG]  [BUGGY]  cearcă  {  if(j!=  0)  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  if(j!=  0)  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearcă  {  if(j!=  0)  {  return  INDEX_NOT_FOUND;  }	  if(j!=    0)    {    return    PAD_LIMIT;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
450	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingSource(i,  searchChars[j]);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.handleMissingSource(i,  searchChars[j]);  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	aughtExceptionHandler.handleMissingSource(i,  searchChars[j]);	  if(j!=    0)    {    return    PAD_LIMIT;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
451	[BUG]  [BUGGY]  if(searchLen  >  MAX_LIMIT)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  MAX_LIMIT)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  MAX_LIMIT)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return	  if(searchLen    >    MAX_NOT_FOUND)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    	non-compiled	[CE]  <identifier>  expected	107	None	replace
452	[BUG]  [BUGGY]  cs.put(ch,  searchChars[j]);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.put(ch,  searchChars[j]);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.put(ch,  searchChars[j]);	  cs.get(j);    searchChars[j]    =    ch;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
453	[BUG]  [BUGGY]  ||  isEmpty(cs)||  ArrayUtils.isEmpty(searchLen))  {  return  INDEX_NOT_FOUND;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  isEmpty(cs)||  ArrayUtils.isEmpty(searchLen))  {  return  INDEX_NOT_FOUND;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  isEmpty(cs)||  ArrayUtils.isEmpty(searchLen))  {  return  INDEX_NOT_FOUND;	  ||    isEmpty(cs)||    ArrayUtils.isEmpty(searchChars))    {    return    inDEX_NOT_FOUND;    	non-compiled	[CE]  <identifier>  expected	22	None	replace
454	[BUG]  [BUGGY]  ||  ArrayUtils.isEmpty(searchChars[j]))  {  return  INDEX_NOT_FOUND;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  ArrayUtils.isEmpty(searchChars[j]))  {  return  INDEX_NOT_FOUND;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  ArrayUtils.isEmpty(searchChars[j]))  {  return  INDEX_NOT_FOUND;	  ||    isEmpty(cs)||    ArrayUtils.isEmpty(searchChars))    {    return    inDEX_NOT_FOUND;    	non-compiled	[CE]  <identifier>  expected	22	None	replace
455	[BUG]  [BUGGY]  Integer  i  =  indexOfAny(searchChars,  j,  cs.length());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  i  =  indexOfAny(searchChars,  j,  cs.length());  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Integer  i  =  indexOfAny(searchChars,  j,  cs.length());	  Integer    i    =    indexOfAny(searchChars,    cs.length());    	non-compiled	[CE]  <identifier>  expected	89	None	replace
456	[BUG]  [BUGGY]  Integer  i  =  indexOf(searchChars,  j);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  i  =  indexOf(searchChars,  j);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Integer  i  =  indexOf(searchChars,  j);	  Integer    i    =    indexOfAny(searchChars,    cs.length());    	non-compiled	[CE]  <identifier>  expected	89	None	replace
457	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE	  [Delete]    	non-compiled	[CE]  <identifier>  expected	16	None	replace
458	[BUG]  [BUGGY]  if(searchLen  ==  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >=  'r')  {  return  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  ==  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >=  'r')  {  return  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  ==  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >=  'r')  {  return	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch    >=    'r')    {    return    	non-compiled	[CE]  <identifier>  expected	30	None	replace
459	[BUG]  [BUGGY]  Aleger  <?>  searchLen  =  searchChars.length  -  j-1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Aleger  <?>  searchLen  =  searchChars.length  -  j-1;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Aleger  <?>  searchLen  =  searchChars.length  -  j-1;	  Aleger    <?>    searchLen    =    searchChars.length    -    j;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
460	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')return  INDEX_NOT_FOUND;  if(searchChars[j]  ==  ch)  {  return  0;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')return  INDEX_NOT_FOUND;  if(searchChars[j]  ==  ch)  {  return  0;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(ch  ==  'n'  ||  ch  ==  'r')return  INDEX_NOT_FOUND;  if(searchChars[j]  ==  ch)  {  return  0;  }	  if(ch    ==    'n'    ||    ch    ==    'r')return    0;    if(searchChars[j]    ==    ch)    {    return    0;    }    	non-compiled	[CE]  <identifier>  expected	141	None	replace
461	[BUG]  [BUGGY]  return  j  +  2;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  j  +  2;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  j  +  2;	  return    j    +    1;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
462	[BUG]  [BUGGY]  cearcă  {  if(j  ==  0)  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  if(j  ==  0)  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearcă  {  if(j  ==  0)  {  return  INDEX_NOT_FOUND;  }	  if(j    ==    0)    {    return    PAD_LIMIT;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
463	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX_    	non-compiled	[CE]  <identifier>  expected	80	None	replace
464	[BUG]  [BUGGY]  cs.set(0,  searchLen,  j);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(0,  searchLen,  j);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(0,  searchLen,  j);	  cs.set(0,    searchLen,    ch);    	non-compiled	[CE]  <identifier>  expected	113	None	replace
465	[BUG]  [BUGGY]  return  j  <  =  0L;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  j  <  =  0L;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  j  <  =  0L;	  return    j    <    =    0;    	non-compiled	[CE]  <identifier>  expected	152	None	replace
466	[BUG]  [BUGGY]  cs.set(i,  ch,  j);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(i,  ch,  j);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(i,  ch,  j);	  cs.set(i,    j,    ch);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
467	[BUG]  [BUGGY]  if(searchLen  >  0)  {  if(searchChars[j]  ==  ch)  {  cs.get(i);  searchChars[j]  =  ch;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  if(searchChars[j]  ==  ch)  {  cs.get(i);  searchChars[j]  =  ch;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  if(searchChars[j]  ==  ch)  {  cs.get(i);  searchChars[j]  =  ch;  }	  if(searchChars[j]    ==    ch)    {    cs.get(i);    searchChars[j]    =    ch;    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
468	[BUG]  [BUGGY]  cs.get(i);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.get(i);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.get(i);	  if(searchChars[j]    ==    ch)    {    cs.get(i);    searchChars[j]    =    ch;    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
469	[BUG]  [BUGGY]  if(searchLen  >  0)  {  if(searchChars[j]  ==  ch)  {  cs.get(i);  searchChars[j]  =  ch;  }  else  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  if(searchChars[j]  ==  ch)  {  cs.get(i);  searchChars[j]  =  ch;  }  else  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  if(searchChars[j]  ==  ch)  {  cs.get(i);  searchChars[j]  =  ch;  }  else  {  return  INDEX_NOT_FOUND;  }	  if(searchChars[j]    ==    ch)    {    cs.get(i);    searchChars[j]    =    ch;    }    else    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	123	None	replace
470	[BUG]  [BUGGY]  ||(searchLen  >  0  &&  searchChars[j]  ==  ch))  {  return  INDEX_NOT_FOUND;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(searchLen  >  0  &&  searchChars[j]  ==  ch))  {  return  INDEX_NOT_FOUND;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||(searchLen  >  0  &&  searchChars[j]  ==  ch))  {  return  INDEX_NOT_FOUND;	  if(searchLen    >    0)    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	103	None	replace
471	[BUG]  [BUGGY]  allowSequence(ch,  searchLen);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  allowSequence(ch,  searchLen);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	allowSequence(ch,  searchLen);	  allowSequence(cs,    searchLen);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
472	[BUG]  [BUGGY]  i  +=  searchLen  +  3;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  i  +=  searchLen  +  3;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	i  +=  searchLen  +  3;	  i    +=    searchLen    +    1;    	non-compiled	[CE]  <identifier>  expected	102	None	replace
473	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX    	non-compiled	[CE]  <identifier>  expected	99	None	replace
474	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  String  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  String  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  String  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX    	non-compiled	[CE]  <identifier>  expected	99	None	replace
475	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch  ==  '+')  {  return  INDEX  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch  ==  '+')  {  return  INDEX  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch  ==  '+')  {  return  INDEX	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX    	non-compiled	[CE]  <identifier>  expected	99	None	replace
476	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  String  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  String  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  String  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX_    	non-compiled	[CE]  <identifier>  expected	47	None	replace
477	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch  ==  '+')  {  return  INDEX_  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch  ==  '+')  {  return  INDEX_  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch  ==  '+')  {  return  INDEX_	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX_    	non-compiled	[CE]  <identifier>  expected	47	None	replace
478	[BUG]  [BUGGY]  cs.set(0,  searchChars[j-1]);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(0,  searchChars[j-1]);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(0,  searchChars[j-1]);	  cs.set(i,    searchChars[j-1]);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
479	[BUG]  [BUGGY]  rackSequence(cs,  searchChars,  i);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  rackSequence(cs,  searchChars,  i);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	rackSequence(cs,  searchChars,  i);	  rackSequence(cs,    searchChars);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
480	[BUG]  [BUGGY]  cs.set(j,  searchLen,  searchChars);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(j,  searchLen,  searchChars);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(j,  searchLen,  searchChars);	  cs.set(i,    searchLen,    j);    	non-compiled	[CE]  <identifier>  expected	114	None	replace
481	[BUG]  [BUGGY]  ||  searchChars[j]!=  ch)  {  return  INDEX_NOT_FOUND;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchChars[j]!=  ch)  {  return  INDEX_NOT_FOUND;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchChars[j]!=  ch)  {  return  INDEX_NOT_FOUND;	  if(searchChars[j]!=    ch)    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
482	[BUG]  [BUGGY]  CHARS[]  searchChars  =  cs.getSearchChars();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  CHARS[]  searchChars  =  cs.getSearchChars();  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	CHARS[]  searchChars  =  cs.getSearchChars();	  CHARS[]    searchChars    =    cs.getStrings();    	non-compiled	[CE]  <identifier>  expected	57	None	replace
483	[BUG]  [BUGGY]  AlegerResult  <  N,  V>  searchLen  =  searchChars.length  +  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  AlegerResult  <  N,  V>  searchLen  =  searchChars.length  +  1;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	AlegerResult  <  N,  V>  searchLen  =  searchChars.length  +  1;	  AlegerResult    <    N,    V>    searchLen    =    searchChars.length;    	non-compiled	[CE]  <identifier>  expected	84	None	replace
484	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_NOT_FOUND  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_NOT_FOUND  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_NOT_FOUND	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
485	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
486	[BUG]  [BUGGY]  if(searchLen  >  MAX_LIMIT)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  MAX_LIMIT)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  MAX_LIMIT)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE	  if(searchLen    >    MAX_NOT_FOUND)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    INDE    	non-compiled	[CE]  <identifier>  expected	96	None	replace
487	[BUG]  [BUGGY]  if(searchLen  >  MAX_LIMIT)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  MAX_LIMIT)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  MAX_LIMIT)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {	  if(searchLen    >    MAX_NOT_FOUND)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    INDE    	non-compiled	[CE]  <identifier>  expected	96	None	replace
488	[BUG]  [BUGGY]  cs.remove(searchChars[j]);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.remove(searchChars[j]);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.remove(searchChars[j]);	  cs.remove(i);    searchChars[j]    =    ch;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
489	[BUG]  [BUGGY]  cs.remove(searchChars[j]);  searchChars[j]  =  ch;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.remove(searchChars[j]);  searchChars[j]  =  ch;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.remove(searchChars[j]);  searchChars[j]  =  ch;	  cs.remove(i);    searchChars[j]    =    ch;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
490	[BUG]  [BUGGY]  parent  ==  'n'  ||  ch  ==  'r')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  parent  ==  'n'  ||  ch  ==  'r')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	parent  ==  'n'  ||  ch  ==  'r')  {  return  INDEX_NOT_FOUND;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
491	[BUG]  [BUGGY]  if(searchLen  >  MAX_NOT_FOUND)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  i  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  MAX_NOT_FOUND)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  i  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  MAX_NOT_FOUND)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  i	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    i    	non-compiled	[CE]  <identifier>  expected	92	None	replace
492	[BUG]  [BUGGY]  return  j  >  0?  searchLen  :  j;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  j  >  0?  searchLen  :  j;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  j  >  0?  searchLen  :  j;	  return    j    >    0?    PAD_LIMIT    :    j;    	non-compiled	[CE]  <identifier>  expected	136	None	replace
493	[BUG]  [BUGGY]  aughtExceptionHandler(cs,  i,  searchChars[j]))  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler(cs,  i,  searchChars[j]))  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	aughtExceptionHandler(cs,  i,  searchChars[j]))  {  return  INDEX_NOT_FOUND;  }	  aughtExceptionHandler(cs,    j,    searchChars[j]))    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	124	None	replace
494	[BUG]  [BUGGY]  cearc  {  return  j;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearc  {  return  j;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearc  {  return  j;  }	  cearcă    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
495	[BUG]  [BUGGY]  Cearc  {  return  j;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  return  j;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  return  j;  }	  cearcă    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
496	[BUG]  [BUGGY]  Cearc  {  return  ch;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  return  ch;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  return  ch;  }	  cearcă    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
497	[BUG]  [BUGGY]  Cearc  {  return  cs;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  return  cs;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  return  cs;  }	  cearcă    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
498	[BUG]  [BUGGY]  if(searchChars[j]  ==  ch  ||  searchChars[j]  ==  0)  {  continue;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]  ==  ch  ||  searchChars[j]  ==  0)  {  continue;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchChars[j]  ==  ch  ||  searchChars[j]  ==  0)  {  continue;  }	  if(searchChars[j]    ==    ch)    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
499	[BUG]  [BUGGY]  if(searchChars[j]  ==  ch  ||  searchChars[j]!=  0)  {  continue;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]  ==  ch  ||  searchChars[j]!=  0)  {  continue;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchChars[j]  ==  ch  ||  searchChars[j]!=  0)  {  continue;  }	  if(searchChars[j]    ==    ch)    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
500	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    i    	non-compiled	[CE]  <identifier>  expected	76	None	replace
501	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSuccess( "msg.bad.index.search ");  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.throwAsSuccess( "msg.bad.index.search ");  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	aughtExceptionHandler.throwAsSuccess( "msg.bad.index.search ");	  aughtExceptionHandler.throwAsSuccess(   "msg.bad.index.search.char   ");    	non-compiled	[CE]  <identifier>  expected	36	None	replace
502	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSuccess( "msg.bad.index.search ",  ch);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.throwAsSuccess( "msg.bad.index.search ",  ch);  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	aughtExceptionHandler.throwAsSuccess( "msg.bad.index.search ",  ch);	  aughtExceptionHandler.throwAsSuccess(   "msg.bad.index.search.char   ");    	non-compiled	[CE]  <identifier>  expected	36	None	replace
503	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(ch,  searchChars[j],  i);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.handleMissingName(ch,  searchChars[j],  i);  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	aughtExceptionHandler.handleMissingName(ch,  searchChars[j],  i);	  aughtExceptionHandler.handleMissingName(ch,    searchChars[j]);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
504	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(searchChars[j],  ch);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.handleMissingName(searchChars[j],  ch);  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	aughtExceptionHandler.handleMissingName(searchChars[j],  ch);	  aughtExceptionHandler.handleMissingName(ch,    searchChars[j]);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
505	[BUG]  [BUGGY]  i  +=  JsonStringEncoder.getInstance().quoteAsString(ch);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  i  +=  JsonStringEncoder.getInstance().quoteAsString(ch);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	i  +=  JsonStringEncoder.getInstance().quoteAsString(ch);	  i    +=    ch;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
506	[BUG]  [BUGGY]  CHARS[]  searchChars  =  cs.get(searchLen);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  CHARS[]  searchChars  =  cs.get(searchLen);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	CHARS[]  searchChars  =  cs.get(searchLen);	  CHARS[]    searchChars    =    cs.get(j);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
507	[BUG]  [BUGGY]  pendingUpdates.add(new  EMPTY(ch,  searchChars[j],  i));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  pendingUpdates.add(new  EMPTY(ch,  searchChars[j],  i));  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	pendingUpdates.add(new  EMPTY(ch,  searchChars[j],  i));	  pendingUpdates.add(new    EMPTY(ch,    searchChars[j]));    	non-compiled	[CE]  <identifier>  expected	37	None	replace
508	[BUG]  [BUGGY]  pendingUpdates.add(new  EMPTY(searchChars[j],  ch));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  pendingUpdates.add(new  EMPTY(searchChars[j],  ch));  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	pendingUpdates.add(new  EMPTY(searchChars[j],  ch));	  pendingUpdates.add(new    EMPTY(ch,    searchChars[j]));    	non-compiled	[CE]  <identifier>  expected	37	None	replace
509	[BUG]  [BUGGY]  cs.set(i,  j,  searchLen  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(i,  j,  searchLen  +  1);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(i,  j,  searchLen  +  1);	  cs.set(i,    j,    searchLen);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
510	[BUG]  [BUGGY]  return  ch!=  null?  INDEX_NOT_FOUND  :  ch;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  ch!=  null?  INDEX_NOT_FOUND  :  ch;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  ch!=  null?  INDEX_NOT_FOUND  :  ch;	  return    ch;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
511	[BUG]  [BUGGY]  return  ch  ==  null?  INDEX_NOT_FOUND  :  ch;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  ch  ==  null?  INDEX_NOT_FOUND  :  ch;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  ch  ==  null?  INDEX_NOT_FOUND  :  ch;	  return    ch;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
512	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }	  if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
513	[BUG]  [BUGGY]  if(searchLen  ==  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  ==  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  ==  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }	  if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
514	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_NOT_FOUND;  }	  if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
515	[BUG]  [BUGGY]  CearcFor(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  i;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  CearcFor(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  i;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	CearcFor(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  i;  }	  cearcăFor(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	130	None	replace
516	[BUG]  [BUGGY]  Character(ch)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Character(ch)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Character(ch)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+	  Character(ch)    ==    searchChars[j])    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
517	[BUG]  [BUGGY]  if(searchChars[j]!=  ch)  {  aughtExceptionHandler(cs,  j,  searchChars[j]);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]!=  ch)  {  aughtExceptionHandler(cs,  j,  searchChars[j]);  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchChars[j]!=  ch)  {  aughtExceptionHandler(cs,  j,  searchChars[j]);  }	  aughtExceptionHandler(cs,    j,    searchChars[j]);    	non-compiled	[CE]  <identifier>  expected	121	None	replace
518	[BUG]  [BUGGY]  if(searchChars[j]!=  null)  {  aughtExceptionHandler(cs,  j,  searchChars[j]);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]!=  null)  {  aughtExceptionHandler(cs,  j,  searchChars[j]);  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchChars[j]!=  null)  {  aughtExceptionHandler(cs,  j,  searchChars[j]);  }	  aughtExceptionHandler(cs,    j,    searchChars[j]);    	non-compiled	[CE]  <identifier>  expected	121	None	replace
519	[BUG]  [BUGGY]  if(searchChars[j]!=  ch)  {  aughtExceptionHandler(cs,  j,  searchChars[j]);  }  else  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]!=  ch)  {  aughtExceptionHandler(cs,  j,  searchChars[j]);  }  else  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchChars[j]!=  ch)  {  aughtExceptionHandler(cs,  j,  searchChars[j]);  }  else  {  return  INDEX_NOT_FOUND;  }	  aughtExceptionHandler(cs,    j,    searchChars[j]);    	non-compiled	[CE]  <identifier>  expected	121	None	replace
520	[BUG]  [BUGGY]  if(searchChars[j]!=  ch)  {  aughtExceptionHandler(cs,  j,  searchChars[j]);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]!=  ch)  {  aughtExceptionHandler(cs,  j,  searchChars[j]);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchChars[j]!=  ch)  {  aughtExceptionHandler(cs,  j,  searchChars[j]);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  aughtExceptionHandler(cs,    j,    searchChars[j]);    	non-compiled	[CE]  <identifier>  expected	121	None	replace
521	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  j  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  j  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  for(int  i  =  0;  j  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND;  }	  cearcă    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	143	None	replace
522	[BUG]  [BUGGY]  this.cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  this.cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	this.cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND;  }	  cearcă    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	143	None	replace
523	[BUG]  [BUGGY]  if(searchLen  >  MAX_ARRAY)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  MAX_ARRAY)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  MAX_ARRAY)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    INDE    	non-compiled	[CE]  <identifier>  expected	72	None	replace
524	[BUG]  [BUGGY]  allowSequence(ch,  searchChars[j])  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  allowSequence(ch,  searchChars[j])  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	allowSequence(ch,  searchChars[j])  {  throw  new  IllegalArgumentException( " ");  }	  if(searchChars[j]    ==    ch)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
525	[BUG]  [BUGGY]  allowSecurity(ch)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  allowSecurity(ch)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	allowSecurity(ch)  {  throw  new  IllegalArgumentException( " ");  }	  if(searchChars[j]    ==    ch)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
526	[BUG]  [BUGGY]  allowSequence(ch,  searchChars[j]);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  allowSequence(ch,  searchChars[j]);  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	allowSequence(ch,  searchChars[j]);	  if(searchChars[j]    ==    ch)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
527	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX    	non-compiled	[CE]  <identifier>  expected	99	None	replace
528	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX  >>  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX  >>  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX  >>	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX    	non-compiled	[CE]  <identifier>  expected	99	None	replace
529	[BUG]  [BUGGY]  return  i  +  j  +  searchLen;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  i  +  j  +  searchLen;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  i  +  j  +  searchLen;	  return    i    +    searchLen    +    JSON_NOT_FOUND;    	non-compiled	[CE]  <identifier>  expected	112	None	replace
530	[BUG]  [BUGGY]  ||  searchLen  >  MAX_LIMIT)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  MAX_LIMIT)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchLen  >  MAX_LIMIT)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    	non-compiled	[CE]  <identifier>  expected	29	None	replace
531	[BUG]  [BUGGY]  Character(ch)!=  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Character(ch)!=  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Character(ch)!=  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }	  Character(ch)    ==    searchChars[j])    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
532	[BUG]  [BUGGY]  Character(ch)  ==  cs.charAt(j]))  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Character(ch)  ==  cs.charAt(j]))  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Character(ch)  ==  cs.charAt(j]))  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return	  Character(ch)    ==    searchChars[j])    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
533	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
534	[BUG]  [BUGGY]  aughtExceptionHandler(cs,  j,  searchChars[j]),  ch)  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler(cs,  j,  searchChars[j]),  ch)  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	aughtExceptionHandler(cs,  j,  searchChars[j]),  ch)  {  return  INDEX_NOT_FOUND;  }	  aughtExceptionHandler(cs,    j,    searchChars[j]))    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	124	None	replace
535	[BUG]  [BUGGY]  aughtExceptionHandler(cs,  j,  searchChars[j]),  i)  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler(cs,  j,  searchChars[j]),  i)  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	aughtExceptionHandler(cs,  j,  searchChars[j]),  i)  {  return  INDEX_NOT_FOUND;  }	  aughtExceptionHandler(cs,    j,    searchChars[j]))    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	124	None	replace
536	[BUG]  [BUGGY]  aughtExceptionHandler(cs,  j,  searchChars[j]))  {  return  i;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler(cs,  j,  searchChars[j]))  {  return  i;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	aughtExceptionHandler(cs,  j,  searchChars[j]))  {  return  i;  }	  aughtExceptionHandler(cs,    j,    searchChars[j]))    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	124	None	replace
537	[BUG]  [BUGGY]  if(searchLen  >  MAX_ARRAY  ||  searchLen  >  MAX_ARRAY)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  MAX_ARRAY  ||  searchLen  >  MAX_ARRAY)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  MAX_ARRAY  ||  searchLen  >  MAX_ARRAY)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n	  if(searchLen    >    MAX_ARRAY)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    INDE    	non-compiled	[CE]  <identifier>  expected	119	None	replace
538	[BUG]  [BUGGY]  if(searchChars[j]!=  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]!=  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchChars[j]!=  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }	  if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
539	[BUG]  [BUGGY]  if(searchChars[j]!=  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]!=  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchChars[j]!=  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }  }	  if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
540	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(ch,  searchChars[j]));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.handleMissingName(ch,  searchChars[j]));  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	aughtExceptionHandler.handleMissingName(ch,  searchChars[j]));	  if(searchChars[j]    ==    ch)    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
541	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(ch,  searchChars[j]))  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.handleMissingName(ch,  searchChars[j]))  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	aughtExceptionHandler.handleMissingName(ch,  searchChars[j]))  {  return  INDEX_NOT_FOUND;  }	  if(searchChars[j]    ==    ch)    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
542	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  'n'  ||  ch  ==  'r')  {  return  INDE  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  'n'  ||  ch  ==  'r')  {  return  INDE  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  'n'  ||  ch  ==  'r')  {  return  INDE	  >=    [Delete]    	non-compiled	[CE]  <identifier>  expected	19	None	replace
543	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  ch;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  ch;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  ch;  }	  >=    [Delete]    	non-compiled	[CE]  <identifier>  expected	19	None	replace
544	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '%')  {  return  INDEX_NOT_FOUND  +  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '%')  {  return  INDEX_NOT_FOUND  +  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '%')  {  return  INDEX_NOT_FOUND  +	  >=    [Delete]    	non-compiled	[CE]  <identifier>  expected	19	None	replace
545	[BUG]  [BUGGY]  if(searchChars[j]  ==  ch)  {  cs.get(i  +  1,  searchChars[j]  =  ch;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]  ==  ch)  {  cs.get(i  +  1,  searchChars[j]  =  ch;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchChars[j]  ==  ch)  {  cs.get(i  +  1,  searchChars[j]  =  ch;  }	  if(searchChars[j]    ==    ch)    {    cs.get(i);    searchChars[j]    =    ch;    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
546	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  j  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  j  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  for(int  i  =  0;  j  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  INDEX_NOT_FOUND;  }	  cearcă    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '-')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	133	None	replace
547	[BUG]  [BUGGY]  ||  ArrayUtils.isEmpty(ch))  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  ArrayUtils.isEmpty(ch))  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  ArrayUtils.isEmpty(ch))  {  return  INDEX_NOT_FOUND;  }	  ||    isEmpty(cs)||    ArrayUtils.isEmpty(searchChars))    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
548	[BUG]  [BUGGY]  if(searchChars[j]  ==  ch)  {  aughtExceptionHandler(cs,  j,  searchChars[j]);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]  ==  ch)  {  aughtExceptionHandler(cs,  j,  searchChars[j]);  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchChars[j]  ==  ch)  {  aughtExceptionHandler(cs,  j,  searchChars[j]);  }	  aughtExceptionHandler(cs,    j,    searchChars[j]);    	non-compiled	[CE]  <identifier>  expected	121	None	replace
549	[BUG]  [BUGGY]  Character(ch)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Character(ch)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Character(ch)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i  }	  Character(ch)    ==    searchChars[j])    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    i    	non-compiled	[CE]  <identifier>  expected	11	None	replace
550	[BUG]  [BUGGY]  char[]  searchChars  =  cs.toArray(new  char[searchLen],  ch);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  char[]  searchChars  =  cs.toArray(new  char[searchLen],  ch);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	char[]  searchChars  =  cs.toArray(new  char[searchLen],  ch);	  CHARS[]    searchChars    =    cs.toArray(new    char[searchLen]);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
551	[BUG]  [BUGGY]  return  i  +  len;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  i  +  len;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  i  +  len;	  return    i    +    j;    	non-compiled	[CE]  <identifier>  expected	139	None	replace
552	[BUG]  [BUGGY]  return  j  <  =  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  j  <  =  1;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  j  <  =  1;	  return    j    <    =    0;    	non-compiled	[CE]  <identifier>  expected	152	None	replace
553	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  j  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  j  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  for(int  i  =  0;  j  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_NOT_FOUND;  }	  cearcă    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	144	None	replace
554	[BUG]  [BUGGY]  cearcFor(int  i  =  0;  j  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  i;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcFor(int  i  =  0;  j  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  i;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearcFor(int  i  =  0;  j  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  i;  }	  cearcăFor(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	130	None	replace
555	[BUG]  [BUGGY]  rackSequence(searchChars,  cs);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  rackSequence(searchChars,  cs);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	rackSequence(searchChars,  cs);	  rackSequence(cs,    searchChars);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
556	[BUG]  [BUGGY]  cs.add(0,  j,  ch);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.add(0,  j,  ch);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.add(0,  j,  ch);	  cs.set(0,    searchLen,    ch);    	non-compiled	[CE]  <identifier>  expected	113	None	replace
557	[BUG]  [BUGGY]  cs.add(ch,  i);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.add(ch,  i);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.add(ch,  i);	  cs.set(i,    ch);    	non-compiled	[CE]  <identifier>  expected	127	None	replace
558	[BUG]  [BUGGY]  cs.set(0,  ch);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(0,  ch);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(0,  ch);	  cs.set(i,    ch);    	non-compiled	[CE]  <identifier>  expected	127	None	replace
559	[BUG]  [BUGGY]  cs.set(i,  ch,  searchLen);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(i,  ch,  searchLen);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(i,  ch,  searchLen);	  cs.set(j,    searchLen,    ch);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
560	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  j  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  j  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  for(int  i  =  0;  j  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  INDEX_NOT_FOUND;  }	  cearcă    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '-')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	135	None	replace
561	[BUG]  [BUGGY]  ||  searchLen  >  MAX_LIMIT)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  MAX_LIMIT)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchLen  >  MAX_LIMIT)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX    	non-compiled	[CE]  <identifier>  expected	66	None	replace
562	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  j  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  j  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  for(int  i  =  0;  j  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    	non-compiled	[CE]  <identifier>  expected	116	None	replace
563	[BUG]  [BUGGY]  return  i  +  j  +  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  i  +  j  +  1;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  i  +  j  +  1;	  return    i    +    searchLen    +    1;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
564	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  j  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  j  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  for(int  i  =  0;  j  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    INDE    	non-compiled	[CE]  <identifier>  expected	118	None	replace
565	[BUG]  [BUGGY]  i  =  j  +  csLen  +  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  i  =  j  +  csLen  +  1;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	i  =  j  +  csLen  +  1;	  i    =    j    +    searchLen    +    1;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
566	[BUG]  [BUGGY]  i  =  j  +  ch  +  1;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  i  =  j  +  ch  +  1;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	i  =  j  +  ch  +  1;	  i    =    j    +    searchLen    +    1;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
567	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  String  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  String  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  String  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  INDE	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    String    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    INDE    	non-compiled	[CE]  <identifier>  expected	97	None	replace
568	[BUG]  [BUGGY]  CHARS[]  searchChars  =  cs.getStrings(ch);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  CHARS[]  searchChars  =  cs.getStrings(ch);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	CHARS[]  searchChars  =  cs.getStrings(ch);	  CHARS[]    searchChars    =    cs.getStrings();    	non-compiled	[CE]  <identifier>  expected	57	None	replace
569	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearcă  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
570	[BUG]  [BUGGY]  if(ch  ==  '0'  ||  ch  ==  'r'  ||  ch  ==  't')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(ch  ==  '0'  ||  ch  ==  'r'  ||  ch  ==  't')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(ch  ==  '0'  ||  ch  ==  'r'  ||  ch  ==  't')  {  return  INDEX_NOT_FOUND;  }	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
571	[BUG]  [BUGGY]  cearcăFor(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  i;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcăFor(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  i;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearcăFor(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  i;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '-')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
572	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  INDEX_NOT_FOUND;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '-')    {    return    i;    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
573	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearcă  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  INDEX_NOT_FOUND;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '-')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
574	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  INDEX_NOT_FOUND;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '-')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
575	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearcă  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  INDEX_NOT_FOUND;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '-')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
576	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+  }	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+    	non-compiled	[CE]  <identifier>  expected	67	None	replace
577	[BUG]  [BUGGY]  if(searchChars[j]  ==  ch  ||  cs[j]  ==  ch)  {  continue;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]  ==  ch  ||  cs[j]  ==  ch)  {  continue;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchChars[j]  ==  ch  ||  cs[j]  ==  ch)  {  continue;  }	  if(searchChars[j]    ==    ch)    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
578	[BUG]  [BUGGY]  if(searchChars[j]!=  ch)  {  continue;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]!=  ch)  {  continue;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchChars[j]!=  ch)  {  continue;  }	  if(searchChars[j]    ==    ch)    {    continue;    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
579	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  IN  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  IN  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  IN	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    IN    	non-compiled	[CE]  <identifier>  expected	98	None	replace
580	[BUG]  [BUGGY]  i  +=  JsonStringEncoder.getInstance().quoteAsString(ch));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  i  +=  JsonStringEncoder.getInstance().quoteAsString(ch));  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	i  +=  JsonStringEncoder.getInstance().quoteAsString(ch));	  i    +=    ch;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
581	[BUG]  [BUGGY]  i  +=  JsonStringEncoder.getInstance().encodeAsString(ch);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  i  +=  JsonStringEncoder.getInstance().encodeAsString(ch);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	i  +=  JsonStringEncoder.getInstance().encodeAsString(ch);	  i    +=    ch;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
582	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(ch,  searchLen);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.handleMissingName(ch,  searchLen);  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	aughtExceptionHandler.handleMissingName(ch,  searchLen);	  if(searchLen    ==    0)    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
583	[BUG]  [BUGGY]  aughtExceptionHandler(cs,  j,  searchLen);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler(cs,  j,  searchLen);  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	aughtExceptionHandler(cs,  j,  searchLen);	  if(searchLen    ==    0)    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
584	[BUG]  [BUGGY]  cs.get(ch);  searchChars[j]  =  ch;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.get(ch);  searchChars[j]  =  ch;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.get(ch);  searchChars[j]  =  ch;	  cs.get(j);    searchChars[j]    =    ch;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
585	[BUG]  [BUGGY]  cs.set(i,  j,  ch,  PAD_LIMIT);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(i,  j,  ch,  PAD_LIMIT);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(i,  j,  ch,  PAD_LIMIT);	  cs.set(i,    j,    ch);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
586	[BUG]  [BUGGY]  cs.set(i,  j,  ch,  searchChars[j]);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(i,  j,  ch,  searchChars[j]);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(i,  j,  ch,  searchChars[j]);	  cs.set(i,    j,    ch);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
587	[BUG]  [BUGGY]  char[]  searchChars  =  cs.get(ch);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  char[]  searchChars  =  cs.get(ch);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	char[]  searchChars  =  cs.get(ch);	  CHARS[]    searchChars    =    cs.get(j);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
588	[BUG]  [BUGGY]  this.cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  this.cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	this.cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_NOT_FOUND;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	145	None	replace
589	[BUG]  [BUGGY]  cs.set(0,  j,  ch,  PAD_LIMIT);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(0,  j,  ch,  PAD_LIMIT);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(0,  j,  ch,  PAD_LIMIT);	  cs.set(0,    j,    ch);    	non-compiled	[CE]  <identifier>  expected	146	None	replace
590	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  i  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    i    	non-compiled	[CE]  <identifier>  expected	76	None	replace
591	[BUG]  [BUGGY]  Cearc  {  if(isEmpty(cs)||  ArrayUtils.isEmpty(ch))  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  if(isEmpty(cs)||  ArrayUtils.isEmpty(ch))  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  if(isEmpty(cs)||  ArrayUtils.isEmpty(ch))  {  return  INDEX_NOT_FOUND;  }	  cearcă    {    if(isEmpty(cs)||    ArrayUtils.isEmpty(searchchars))    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
592	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '%')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '%')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearcă  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '%')  {  return  INDEX_NOT_FOUND;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '%')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
593	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '%')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '%')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '%')  {  return  INDEX_NOT_FOUND;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '%')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
594	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '%')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '%')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearcă  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '%')  {  return  INDEX_NOT_FOUND;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '%')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
595	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  i  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  i  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  i  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '-')    {    return    i    	non-compiled	[CE]  <identifier>  expected	111	None	replace
596	[BUG]  [BUGGY]  aughtExceptionHandler(cs,  j,  searchChars[j]).throwException( " ",  i);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler(cs,  j,  searchChars[j]).throwException( " ",  i);  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	aughtExceptionHandler(cs,  j,  searchChars[j]).throwException( " ",  i);	  aughtExceptionHandler(cs,    j,    searchChars[j]).throwException(   "   ");    	non-compiled	[CE]  <identifier>  expected	120	None	replace
597	[BUG]  [BUGGY]  cearc  {  return  PAD_LIMIT;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearc  {  return  PAD_LIMIT;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearc  {  return  PAD_LIMIT;  }	  cearcă    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
598	[BUG]  [BUGGY]  cearc  {  j  =  0;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearc  {  j  =  0;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearc  {  j  =  0;  }	  cearcă    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
599	[BUG]  [BUGGY]  cearc  {  0;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearc  {  0;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearc  {  0;  }	  cearcă    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
600	[BUG]  [BUGGY]  Integer  i  =  indexOfSupported(searchChars);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  i  =  indexOfSupported(searchChars);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Integer  i  =  indexOfSupported(searchChars);	  Integer    i    =    indexOfAny(searchChars);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
601	[BUG]  [BUGGY]  return  j  >  0?  cs.charAt(j):  ch;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  j  >  0?  cs.charAt(j):  ch;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  j  >  0?  cs.charAt(j):  ch;	  return    j    >    0?    PAD_LIMIT    :    ch;    	non-compiled	[CE]  <identifier>  expected	137	None	replace
602	[BUG]  [BUGGY]  CHARS[]  searchChars  =  cs.toChars(i,  searchLen);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  CHARS[]  searchChars  =  cs.toChars(i,  searchLen);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	CHARS[]  searchChars  =  cs.toChars(i,  searchLen);	  CHARS[]    searchChars    =    cs.toChars(j,    searchLen);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
603	[BUG]  [BUGGY]  cs.add(ch,  searchLen,  j);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.add(ch,  searchLen,  j);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.add(ch,  searchLen,  j);	  cs.set(i,    searchLen,    j);    	non-compiled	[CE]  <identifier>  expected	114	None	replace
604	[BUG]  [BUGGY]  cs.set(i,  ch[j],  searchChars[j]);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.set(i,  ch[j],  searchChars[j]);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.set(i,  ch[j],  searchChars[j]);	  cs.set(i,    searchChars[j],    ch);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
605	[BUG]  [BUGGY]  return  j  >  0?  ch  :  j;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  j  >  0?  ch  :  j;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  j  >  0?  ch  :  j;	  return    j    >    0?    PAD_LIMIT    :    j;    	non-compiled	[CE]  <identifier>  expected	136	None	replace
606	[BUG]  [BUGGY]  return  j  >  0?  cs.length  :  j;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  j  >  0?  cs.length  :  j;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  j  >  0?  cs.length  :  j;	  return    j    >    0?    PAD_LIMIT    :    j;    	non-compiled	[CE]  <identifier>  expected	136	None	replace
607	[BUG]  [BUGGY]  ||  ArrayUtils.isEmpty(ch))  {  return  INDEX_NOT_FOUND;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  ArrayUtils.isEmpty(ch))  {  return  INDEX_NOT_FOUND;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  ArrayUtils.isEmpty(ch))  {  return  INDEX_NOT_FOUND;	  ||    isEmpty(cs)||    ArrayUtils.isEmpty(searchChars))    {    return    INDEX_NOT_FOUND;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
608	[BUG]  [BUGGY]  ||  isEmpty(cs)||  ArrayUtils.isEmpty(ch))  {  return  INDEX_NOT_FOUND;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  isEmpty(cs)||  ArrayUtils.isEmpty(ch))  {  return  INDEX_NOT_FOUND;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  isEmpty(cs)||  ArrayUtils.isEmpty(ch))  {  return  INDEX_NOT_FOUND;	  ||    isEmpty(cs)||    ArrayUtils.isEmpty(searchChars))    {    return    INDEX_NOT_FOUND;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
609	[BUG]  [BUGGY]  ||  isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  i;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  i;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  i;	  ||    isEmpty(cs)||    ArrayUtils.isEmpty(searchChars))    {    return    INDEX_NOT_FOUND;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
610	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  i!=  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  i!=  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  i!=	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    i    	non-compiled	[CE]  <identifier>  expected	92	None	replace
611	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  i!=  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  i!=  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  i!=	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    i    	non-compiled	[CE]  <identifier>  expected	92	None	replace
612	[BUG]  [BUGGY]  pendingUpdates.add(new  EMPTY(ch,  searchChars[j]),  i);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  pendingUpdates.add(new  EMPTY(ch,  searchChars[j]),  i);  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	pendingUpdates.add(new  EMPTY(ch,  searchChars[j]),  i);	  pendingUpdates.add(new    EMPTY(ch,    searchChars[j]));    	non-compiled	[CE]  <identifier>  expected	37	None	replace
613	[BUG]  [BUGGY]  pendingUpdates.add(new  EMPTY(ch,  searchChars[j]),  cs);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  pendingUpdates.add(new  EMPTY(ch,  searchChars[j]),  cs);  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	pendingUpdates.add(new  EMPTY(ch,  searchChars[j]),  cs);	  pendingUpdates.add(new    EMPTY(ch,    searchChars[j]));    	non-compiled	[CE]  <identifier>  expected	37	None	replace
614	[BUG]  [BUGGY]  Aleger  <?>  searchLen  =  searchChars[i];  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Aleger  <?>  searchLen  =  searchChars[i];  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Aleger  <?>  searchLen  =  searchChars[i];	  Aleger    <?>    searchLen    =    searchChars[j];    	non-compiled	[CE]  <identifier>  expected	42	None	replace
615	[BUG]  [BUGGY]  Aleger  <?>  searchLen  =  searchChars[j].getValue();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Aleger  <?>  searchLen  =  searchChars[j].getValue();  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Aleger  <?>  searchLen  =  searchChars[j].getValue();	  Aleger    <?>    searchLen    =    searchChars[j];    	non-compiled	[CE]  <identifier>  expected	42	None	replace
616	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '+')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '+')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '+')  {  return  INDEX_NOT_FOUND;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
617	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '+')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '+')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearcă  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '+')  {  return  INDEX_NOT_FOUND;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
618	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FO  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FO  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FO	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX_NOT_FO    	non-compiled	[CE]  <identifier>  expected	153	None	replace
619	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  i!=  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  i!=  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  i!=	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '-')    {    return    i    	non-compiled	[CE]  <identifier>  expected	110	None	replace
620	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  i  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  i  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  i  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '-')    {    return    i    	non-compiled	[CE]  <identifier>  expected	110	None	replace
621	[BUG]  [BUGGY]  if(searchChars[j]  ==  ch)  {  cs.get(i  +  searchLen);  searchChars[j]  =  ch;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]  ==  ch)  {  cs.get(i  +  searchLen);  searchChars[j]  =  ch;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchChars[j]  ==  ch)  {  cs.get(i  +  searchLen);  searchChars[j]  =  ch;  }	  cs.get(i    +    searchLen);    searchChars[j]    =    ch;    	non-compiled	[CE]  <identifier>  expected	85	None	replace
622	[BUG]  [BUGGY]  if(searchChars[j]  ==  ch)  {  cs.get(i  +  searchLen);  searchChars[j]  =  ch;  }  else  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]  ==  ch)  {  cs.get(i  +  searchLen);  searchChars[j]  =  ch;  }  else  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchChars[j]  ==  ch)  {  cs.get(i  +  searchLen);  searchChars[j]  =  ch;  }  else  {  return  INDEX_NOT_FOUND;  }	  cs.get(i    +    searchLen);    searchChars[j]    =    ch;    	non-compiled	[CE]  <identifier>  expected	85	None	replace
623	[BUG]  [BUGGY]  cearcFor(int  i  =  0;  j  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcFor(int  i  =  0;  j  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearcFor(int  i  =  0;  j  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND;  }	  cearcăFor(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	131	None	replace
624	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  '+')  {  return  INDEX_  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  '+')  {  return  INDEX_  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  '+')  {  return  INDEX_	  if(searchLen    ==    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX_    	non-compiled	[CE]  <identifier>  expected	49	None	replace
625	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >=  '+')  {  return  INDEX_  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >=  '+')  {  return  INDEX_  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >=  '+')  {  return  INDEX_	  if(searchLen    ==    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX_    	non-compiled	[CE]  <identifier>  expected	49	None	replace
626	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >=  'r')  {  return  INDE  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >=  'r')  {  return  INDE  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >=  'r')  {  return  INDE	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch    >=    'r')    {    return    INDE    	non-compiled	[CE]  <identifier>  expected	70	None	replace
627	[BUG]  [BUGGY]  Integer  i  =  indexOf(ch,  j);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  i  =  indexOf(ch,  j);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Integer  i  =  indexOf(ch,  j);	  Integer    i    =    indexOfAny(searchChars,    j);    	non-compiled	[CE]  <identifier>  expected	90	None	replace
628	[BUG]  [BUGGY]  AlegerResult  <  N,  V>  searchLen  =  searchChars.length  +  j;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  AlegerResult  <  N,  V>  searchLen  =  searchChars.length  +  j;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	AlegerResult  <  N,  V>  searchLen  =  searchChars.length  +  j;	  AlegerResult    <    N,    V>    searchLen    =    searchChars.length;    	non-compiled	[CE]  <identifier>  expected	84	None	replace
629	[BUG]  [BUGGY]  pendingUpdates.add(new  EMPTY(ch,  j));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  pendingUpdates.add(new  EMPTY(ch,  j));  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	pendingUpdates.add(new  EMPTY(ch,  j));	  pendingUpdates.add(new    EMPTY(ch));    	non-compiled	[CE]  <identifier>  expected	38	None	replace
630	[BUG]  [BUGGY]  pendingUpdates.add(new  EMPTY(ch,  searchChars));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  pendingUpdates.add(new  EMPTY(ch,  searchChars));  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	pendingUpdates.add(new  EMPTY(ch,  searchChars));	  pendingUpdates.add(new    EMPTY(ch));    	non-compiled	[CE]  <identifier>  expected	38	None	replace
631	[BUG]  [BUGGY]  return  ch  ==  EMPTY?  INDEX_NOT_FOUND  :  ch;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  ch  ==  EMPTY?  INDEX_NOT_FOUND  :  ch;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  ch  ==  EMPTY?  INDEX_NOT_FOUND  :  ch;	  return    ch;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
632	[BUG]  [BUGGY]  return  ch!=  EMPTY?  INDEX_NOT_FOUND  :  ch;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  ch!=  EMPTY?  INDEX_NOT_FOUND  :  ch;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  ch!=  EMPTY?  INDEX_NOT_FOUND  :  ch;	  return    ch;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
633	[BUG]  [BUGGY]  rackSequence(cs,  ch,  searchChars[j]);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  rackSequence(cs,  ch,  searchChars[j]);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	rackSequence(cs,  ch,  searchChars[j]);	  rackSequence(cs,    searchChars[j]);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
634	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(ch,  searchChars[i]);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.handleMissingName(ch,  searchChars[i]);  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	aughtExceptionHandler.handleMissingName(ch,  searchChars[i]);	  aughtExceptionHandler.handleMissingName(ch,    searchChars[j]);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
635	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(ch,  searchChars[j],  cs[i]);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.handleMissingName(ch,  searchChars[j],  cs[i]);  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	aughtExceptionHandler.handleMissingName(ch,  searchChars[j],  cs[i]);	  aughtExceptionHandler.handleMissingName(ch,    searchChars[j]);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
636	[BUG]  [BUGGY]  return  i  +  1,  searchLen;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  i  +  1,  searchLen;  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	return  i  +  1,  searchLen;	  return    i    +    1;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
637	[BUG]  [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  INDEX_NOT_FOUND	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX_NOT_FOUND    	non-compiled	[CE]  <identifier>  expected	79	None	replace
638	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_NOT_FOUND  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_NOT_FOUND  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  INDEX_NOT_FOUND	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    INDEX_NOT_FOUND    	non-compiled	[CE]  <identifier>  expected	79	None	replace
639	[BUG]  [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >=  '+')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >=  '+')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >=  '+')  {  return  INDEX_NOT_FOUND;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    >=    '+')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
640	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  }  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch!=  'r')  {  return  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    	non-compiled	[CE]  <identifier>  expected	117	None	replace
641	[BUG]  [BUGGY]  ||(searchLen  >  0  &&  searchChars.length  >  0)||(searchChars[j]  ==  ch))  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(searchLen  >  0  &&  searchChars.length  >  0)||(searchChars[j]  ==  ch))  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||(searchLen  >  0  &&  searchChars.length  >  0)||(searchChars[j]  ==  ch))  {  return  INDEX_NOT_FOUND;  }	  if(searchLen    >    0)    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	103	None	replace
642	[BUG]  [BUGGY]  if(ch  ==  '0'  ||  ch  ==  'r')  {  return  INDEX_NOT_FOUND;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(ch  ==  '0'  ||  ch  ==  'r')  {  return  INDEX_NOT_FOUND;  }  [BUGGY]      }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(ch  ==  '0'  ||  ch  ==  'r')  {  return  INDEX_NOT_FOUND;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    return    INDEX_NOT_FOUND;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
643	[BUG]  [BUGGY]  Integer  i  =  indexOf(ch,  cs.length());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  i  =  indexOf(ch,  cs.length());  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Integer  i  =  indexOf(ch,  cs.length());	  Integer    i    =    indexOfAny(searchChars,    cs.length());    	non-compiled	[CE]  <identifier>  expected	89	None	replace
644	[BUG]  [BUGGY]  Integer  i  =  indexOfAny(searchChars,  cs.length()  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  i  =  indexOfAny(searchChars,  cs.length()  -  1);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	Integer  i  =  indexOfAny(searchChars,  cs.length()  -  1);	  Integer    i    =    indexOfAny(searchChars,    cs.length());    	non-compiled	[CE]  <identifier>  expected	89	None	replace
645	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >=  'r')  {  return  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >=  'r')  {  return  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  'n'  ||  ch  >=  'r')  {  return	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch    >=    'r')    {    return    	non-compiled	[CE]  <identifier>  expected	30	None	replace
646	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  'n'  ||  ch!=  'r')  {  return  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  'n'  ||  ch!=  'r')  {  return  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  'n'  ||  ch!=  'r')  {  return	  if(searchLen    ==    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    	non-compiled	[CE]  <identifier>  expected	105	None	replace
647	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >=  'n'  ||  ch!=  'r')  {  return  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >=  'n'  ||  ch!=  'r')  {  return  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >=  'n'  ||  ch!=  'r')  {  return	  if(searchLen    ==    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    'n'    ||    ch!=    'r')    {    return    	non-compiled	[CE]  <identifier>  expected	105	None	replace
648	[BUG]  [BUGGY]  cs.get(i,  searchChars[j]);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cs.get(i,  searchChars[j]);  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	cs.get(i,  searchChars[j]);	  cs.get(i,    searchChars[j]    =    ch;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
649	[BUG]  [BUGGY]  ||  isEmpty(ch)||  ArrayUtils.isEmpty(searchChars))  {  return  inDEX_NOT_FOUND;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  isEmpty(ch)||  ArrayUtils.isEmpty(searchChars))  {  return  inDEX_NOT_FOUND;  [BUGGY]      return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1382	1382	10	replace	||  isEmpty(ch)||  ArrayUtils.isEmpty(searchChars))  {  return  inDEX_NOT_FOUND;	  ||    isEmpty(cs)||    ArrayUtils.isEmpty(searchChars))    {    return    inDEX_NOT_FOUND;    	non-compiled	[CE]  <identifier>  expected	22	None	replace
