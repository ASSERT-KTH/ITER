bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  searchLimit  =  searchLength  /  3;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  int  searchLimit  =  searchLength  /  3;  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	int  searchLimit  =  searchLength  /  3;	  int    searchLimit    =    searchLength    -    3;    	non-compiled	[CE]  <identifier>  expected	48	None	replace
2	[BUG]  [BUGGY]  if(searchLength  ==  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  true  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  ==  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  ==  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  true	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch!=    EMPTY)    {    return    true    	non-compiled	[CE]  <identifier>  expected	14	None	replace
3	[BUG]  [BUGGY]  if(searchLength  >  1)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  true  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  1)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  1)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  true	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch!=    EMPTY)    {    return    true    	non-compiled	[CE]  <identifier>  expected	14	None	replace
4	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  csLength;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  for(int  j  =  0;  j  <  csLength;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	for(int  j  =  0;  j  <  csLength;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }	  for(int    j    =    0;    j    <    searchLength;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
5	[BUG]  [BUGGY]  if(searchLength  >  0)  {  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true;  }	  for(int    j    =    0;    j    <    searchLength;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
6	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  csLength;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  for(int  j  =  0;  j  <  csLength;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	for(int  j  =  0;  j  <  csLength;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true;  }	  for(int    j    =    0;    j    <    searchLength;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
7	[BUG]  [BUGGY]  if(searchLast!=  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  true  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast!=  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast!=  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  true	  if(searchLast    ==    0)    {    for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch!=    EMPTY)    {    return    true    	non-compiled	[CE]  <identifier>  expected	70	None	replace
8	[BUG]  [BUGGY]  if(searchLength  >  0)  {  if(searchLast  ==  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMP  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  if(searchLast  ==  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMP  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  if(searchLast  ==  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMP	  if(searchLast    ==    0)    {    for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch!=    EMPTY)    {    return    true    	non-compiled	[CE]  <identifier>  expected	70	None	replace
9	[BUG]  [BUGGY]  if(searchLast  >  0)  {  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!Character.isDigit(ch))  {  return  true  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  >  0)  {  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!Character.isDigit(ch))  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  >  0)  {  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!Character.isDigit(ch))  {  return  true	  if(searchLength    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!Character.isDigit(ch))    {    return    true    	non-compiled	[CE]  <identifier>  expected	23	None	replace
10	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!Character.isDigit(ch))  {  return  true  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!Character.isDigit(ch))  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!Character.isDigit(ch))  {  return  true	  if(searchLength    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!Character.isDigit(ch))    {    return    true    	non-compiled	[CE]  <identifier>  expected	23	None	replace
11	[BUG]  [BUGGY]  if(searchLast  >  0)  {  for(int  i  =  0;  i  <  csLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  >  0)  {  for(int  i  =  0;  i  <  csLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  >  0)  {  for(int  i  =  0;  i  <  csLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    csLast;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch!=    EMPTY)    {    return    	non-compiled	[CE]  <identifier>  expected	31	None	replace
12	[BUG]  [BUGGY]  if(searchLength  >  0)  {  for(int  i  =  0;  i  <  searchLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  for(int  i  =  0;  i  <  searchLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  for(int  i  =  0;  i  <  searchLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    csLast;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch!=    EMPTY)    {    return    	non-compiled	[CE]  <identifier>  expected	31	None	replace
13	[BUG]  [BUGGY]  if(searchLength  >  1)  {  for(int  i  =  0;  i  <  csLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  1)  {  for(int  i  =  0;  i  <  csLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  1)  {  for(int  i  =  0;  i  <  csLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    csLast;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch!=    EMPTY)    {    return    	non-compiled	[CE]  <identifier>  expected	31	None	replace
14	[BUG]  [BUGGY]  ||  searchLength  >  1)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  true  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  ||  searchLength  >  1)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	||  searchLength  >  1)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  true	  ||    searchLength    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!Character.isDigit(ch))    {    return    true    	non-compiled	[CE]  <identifier>  expected	22	None	replace
15	[BUG]  [BUGGY]  ||  searchLength  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  true  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  ||  searchLength  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	||  searchLength  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  true	  ||    searchLength    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!Character.isDigit(ch))    {    return    true    	non-compiled	[CE]  <identifier>  expected	22	None	replace
16	[BUG]  [BUGGY]  ||  searchLength  >  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  false  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  ||  searchLength  >  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  false  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	||  searchLength  >  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  false	  ||    searchLength    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!Character.isDigit(ch))    {    return    true    	non-compiled	[CE]  <identifier>  expected	22	None	replace
17	[BUG]  [BUGGY]  char  ch  =  cs.charAt(searchLast);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  char  ch  =  cs.charAt(searchLast);  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	char  ch  =  cs.charAt(searchLast);	  char    ch    =    cs.charAt(searchLength);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
18	[BUG]  [BUGGY]  char  ch  =  searchChars.charAt(csLast);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  char  ch  =  searchChars.charAt(csLast);  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	char  ch  =  searchChars.charAt(csLast);	  char    ch    =    cs.charAt(searchLength);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
19	[BUG]  [BUGGY]  char  ch  =  searchChars.charAt(csLength);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  char  ch  =  searchChars.charAt(csLength);  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	char  ch  =  searchChars.charAt(csLength);	  char    ch    =    cs.charAt(searchLength);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
20	[BUG]  [BUGGY]  if(searchLast  >  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  >  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  >  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch    ==    EMPTY)    {    return    	non-compiled	[CE]  <identifier>  expected	43	None	replace
21	[BUG]  [BUGGY]  if(searchLength  >  1)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  1)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  1)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch    ==    EMPTY)    {    return    	non-compiled	[CE]  <identifier>  expected	43	None	replace
22	[BUG]  [BUGGY]  if(searchLength  >  0)  {  for(int  j  =  0;  j  <  csLength;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  for(int  j  =  0;  j  <  csLength;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  for(int  j  =  0;  j  <  csLength;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }	  if(searchLength    >    0)    {    for(int    j    =    0;    j    <    searchLast;    j++)    {    if(!Character.isDigit(ch))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
23	[BUG]  [BUGGY]  if(searchLength  ==  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  true  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  ==  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  ==  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  true	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    csLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch!=    EMPTY)    {    return    true    	non-compiled	[CE]  <identifier>  expected	15	None	replace
24	[BUG]  [BUGGY]  ||  searchLength  >  1)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  ||  searchLength  >  1)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	||  searchLength  >  1)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }	  ||    searchLength    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
25	[BUG]  [BUGGY]  ||  searchLength  >  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  ||  searchLength  >  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	||  searchLength  >  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false	  ||    searchLength    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
26	[BUG]  [BUGGY]  ||  searchLength  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  ||  searchLength  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	||  searchLength  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }	  ||    searchLength    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
27	[BUG]  [BUGGY]  if(searchLength  ==  cs.length)  {  if(!containsAny(cs,  searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  ==  cs.length)  {  if(!containsAny(cs,  searchChars))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  ==  cs.length)  {  if(!containsAny(cs,  searchChars))  {  return  false;  }	  if(searchLength    >    csLength)    {    if(!containsAny(cs,    searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	80	None	replace
28	[BUG]  [BUGGY]  if(searchLast  >  csLast)  {  if(!containsAny(cs,  searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  >  csLast)  {  if(!containsAny(cs,  searchChars))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  >  csLast)  {  if(!containsAny(cs,  searchChars))  {  return  false;  }	  if(searchLength    >    csLast)    {    if(!containsAny(cs,    searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
29	[BUG]  [BUGGY]  if(searchLength  >  csLast)  {  if(containsAny(cs,  searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  csLast)  {  if(containsAny(cs,  searchChars))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  csLast)  {  if(containsAny(cs,  searchChars))  {  return  false;  }	  if(searchLength    >    csLast)    {    if(!containsAny(cs,    searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
30	[BUG]  [BUGGY]  if(searchLength  >  0)  {  if(!isEmpty(cs))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  if(!isEmpty(cs))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  if(!isEmpty(cs))  {  return  false;  }	  if(searchLength    >    csLast)    {    if(!isEmpty(cs))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
31	[BUG]  [BUGGY]  if(searchLength  ==  csLast)  {  if(!isEmpty(cs))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  ==  csLast)  {  if(!isEmpty(cs))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  ==  csLast)  {  if(!isEmpty(cs))  {  return  false;  }	  if(searchLength    >    csLast)    {    if(!isEmpty(cs))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
32	[BUG]  [BUGGY]  if(searchLength  >  csLast)  {  if(!isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  csLast)  {  if(!isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  csLast)  {  if(!isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }	  if(searchLength    >    csLast)    {    if(!isEmpty(cs))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
33	[BUG]  [BUGGY]  if(searchLength!=  csLast)  {  if(!containsAny(cs,  searchChars))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength!=  csLast)  {  if(!containsAny(cs,  searchChars))  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength!=  csLast)  {  if(!containsAny(cs,  searchChars))  {  return  true;  }	  if(searchLast!=    csLength)    {    if(!containsAny(cs,    searchChars))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
34	[BUG]  [BUGGY]  if(searchLength!=  csLast)  {  if(!isEmpty(cs))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength!=  csLast)  {  if(!isEmpty(cs))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength!=  csLast)  {  if(!isEmpty(cs))  {  return  false;  }	  if(searchLast!=    csLength)    {    if(!isEmpty(cs))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
35	[BUG]  [BUGGY]  if(searchLast  ==  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  true  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  ==  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  ==  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  true	  if(searchLast    >    0)    {    for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch    ==    EMPTY)    {    return    true    	non-compiled	[CE]  <identifier>  expected	56	None	replace
36	[BUG]  [BUGGY]  if(searchLength  >  1)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  1)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  1)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true;  }	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    csLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
37	[BUG]  [BUGGY]  if(searchLength  >  1)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  true  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  1)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  1)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  true	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch    ==    EMPTY)    {    return    true    	non-compiled	[CE]  <identifier>  expected	41	None	replace
38	[BUG]  [BUGGY]  if(searchLength  ==  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  true  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  ==  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  ==  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  true	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch    ==    EMPTY)    {    return    true    	non-compiled	[CE]  <identifier>  expected	41	None	replace
39	[BUG]  [BUGGY]  if(searchLast  >  cs.length())  {  if(!containsAny(cs,  searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  >  cs.length())  {  if(!containsAny(cs,  searchChars))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  >  cs.length())  {  if(!containsAny(cs,  searchChars))  {  return  false;  }	  if(searchLast    >=    cs.length())    {    if(!containsAny(cs,    searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
40	[BUG]  [BUGGY]  char  ch  =  cs.charAt(i  +  2);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  char  ch  =  cs.charAt(i  +  2);  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	char  ch  =  cs.charAt(i  +  2);	  char    ch    =    cs.charAt(i    +    1);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
41	[BUG]  [BUGGY]  char  ch  =  cs.charAt(i  +  1,  searchLength);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  char  ch  =  cs.charAt(i  +  1,  searchLength);  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	char  ch  =  cs.charAt(i  +  1,  searchLength);	  char    ch    =    cs.charAt(i    +    1);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
42	[BUG]  [BUGGY]  if(searchLength  >  0)  {  for(int  i  =  0;  i  <  csLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  false  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  for(int  i  =  0;  i  <  csLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  false  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  for(int  i  =  0;  i  <  csLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  false	  if(searchLength    ==    0)    {    for(int    i    =    0;    i    <    csLast;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch!=    EMPTY)    {    return    true    	non-compiled	[CE]  <identifier>  expected	67	None	replace
43	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true;  }	  if(searchLast    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!contains(cs,    searchChars[j]))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
44	[BUG]  [BUGGY]  if(searchChars  ==  null)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchChars  ==  null)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchChars  ==  null)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true;  }	  for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
45	[BUG]  [BUGGY]  int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true;  }	  for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
46	[BUG]  [BUGGY]  ||  searchLength  >  1)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  ||  searchLength  >  1)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	||  searchLength  >  1)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }	  ||    searchLength    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!Character.isDigit(ch))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
47	[BUG]  [BUGGY]  ||  searchLength  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  ||  searchLength  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	||  searchLength  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }	  ||    searchLength    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!Character.isDigit(ch))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
48	[BUG]  [BUGGY]  ||  searchLength  >=  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  ||  searchLength  >=  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	||  searchLength  >=  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }	  ||    searchLength    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!Character.isDigit(ch))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
49	[BUG]  [BUGGY]  if(searchLength  ==  cs.length())  {  if(!containsAny(cs,  searchChars))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  ==  cs.length())  {  if(!containsAny(cs,  searchChars))  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  ==  cs.length())  {  if(!containsAny(cs,  searchChars))  {  return  true;  }	  if(searchLength!=    cs.length())    {    if(!containsAny(cs,    searchChars))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
50	[BUG]  [BUGGY]  if(searchLength  >  cs.length())  {  if(!containsAny(cs,  searchChars))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  cs.length())  {  if(!containsAny(cs,  searchChars))  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  cs.length())  {  if(!containsAny(cs,  searchChars))  {  return  true;  }	  if(searchLength!=    cs.length())    {    if(!containsAny(cs,    searchChars))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
51	[BUG]  [BUGGY]  if(searchLength  >=  cs.length())  {  if(!containsAny(cs,  searchChars))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >=  cs.length())  {  if(!containsAny(cs,  searchChars))  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >=  cs.length())  {  if(!containsAny(cs,  searchChars))  {  return  true;  }	  if(searchLength!=    cs.length())    {    if(!containsAny(cs,    searchChars))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
52	[BUG]  [BUGGY]  if(searchLast  ==  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  ==  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  ==  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true	  if(searchLast    >    0)    {    for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY)    {    return    true    	non-compiled	[CE]  <identifier>  expected	58	None	replace
53	[BUG]  [BUGGY]  if(searchLength  >  0)  {  for(int  i  =  0;  i  <  searchLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  for(int  i  =  0;  i  <  searchLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  for(int  i  =  0;  i  <  searchLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true	  if(searchLast    >    0)    {    for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY)    {    return    true    	non-compiled	[CE]  <identifier>  expected	58	None	replace
54	[BUG]  [BUGGY]  if(searchLast!=  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast!=  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast!=  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true	  if(searchLast    >    0)    {    for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY)    {    return    true    	non-compiled	[CE]  <identifier>  expected	58	None	replace
55	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!Character.isDigit(ch))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!Character.isDigit(ch))  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!Character.isDigit(ch))  {  return  true;  }	  if(searchLast    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!Character.isDigit(ch))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
56	[BUG]  [BUGGY]  if(searchLength  >  0)  {  if(searchLength  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  if(searchLength  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  if(searchLength  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }	  if(searchLength    ==    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
57	[BUG]  [BUGGY]  if(searchLast  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }	  if(searchLength    ==    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
58	[BUG]  [BUGGY]  if(searchLast  ==  0)  {  if(!containsAny(cs,  searchChars))  {  return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  ==  0)  {  if(!containsAny(cs,  searchChars))  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  ==  0)  {  if(!containsAny(cs,  searchChars))  {  return  true;  }	  if(searchLast    >    0)    {    if(!containsAny(cs,    searchChars))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
59	[BUG]  [BUGGY]  ||!containsAny(cs,  searchChars))  {  return  true;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  ||!containsAny(cs,  searchChars))  {  return  true;  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	||!containsAny(cs,  searchChars))  {  return  true;	  if(searchLast    >    0)    {    if(!containsAny(cs,    searchChars))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
60	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  csLength;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  for(int  j  =  0;  j  <  csLength;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	for(int  j  =  0;  j  <  csLength;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true;  }	  for(int    j    =    0;    j    <    searchLength;    j++)    {    if(!contains(cs,    searchChars[j]))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
61	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  csLength;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  for(int  j  =  0;  j  <  csLength;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	for(int  j  =  0;  j  <  csLength;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  false;  }	  for(int    j    =    0;    j    <    searchLength;    j++)    {    if(!contains(cs,    searchChars[j]))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
62	[BUG]  [BUGGY]  if(searchLength  >  0)  {  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true;  }	  for(int    j    =    0;    j    <    searchLength;    j++)    {    if(!contains(cs,    searchChars[j]))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
63	[BUG]  [BUGGY]  int  j  =  0;  j  <  searchLength;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  int  j  =  0;  j  <  searchLength;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	int  j  =  0;  j  <  searchLength;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true;  }	  for(int    j    =    0;    j    <    searchLength;    j++)    {    if(!contains(cs,    searchChars[j]))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
64	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }	  if(searchLast    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!Character.isDigit(ch))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
65	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }	  if(searchLast    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!Character.isDigit(ch))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
66	[BUG]  [BUGGY]  char  j  =  cs.charAt(i  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  char  j  =  cs.charAt(i  +  1);  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	char  j  =  cs.charAt(i  +  1);	  char    j    =    cs.charAt(i);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
67	[BUG]  [BUGGY]  char  j  =  cs.charAt(0);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  char  j  =  cs.charAt(0);  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	char  j  =  cs.charAt(0);	  char    j    =    cs.charAt(i);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
68	[BUG]  [BUGGY]  char  j  =  cs.charAt(i  +  2);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  char  j  =  cs.charAt(i  +  2);  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	char  j  =  cs.charAt(i  +  2);	  char    j    =    cs.charAt(i);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
69	[BUG]  [BUGGY]  char  j  =  cs.charAt(searchLength);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  char  j  =  cs.charAt(searchLength);  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	char  j  =  cs.charAt(searchLength);	  char    j    =    cs.charAt(i);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
70	[BUG]  [BUGGY]  if(searchLength  ==  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  true  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  ==  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  ==  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  true	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    csLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch    ==    EMPTY)    {    return    true    	non-compiled	[CE]  <identifier>  expected	42	None	replace
71	[BUG]  [BUGGY]  if(searchLength  >  0)  {  if(containsAny(cs,  searchChars))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  if(containsAny(cs,  searchChars))  {  return  true;  }  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  if(containsAny(cs,  searchChars))  {  return  true;  }	  if(searchLength    >    0)    {    if(!containsAny(cs,    searchChars))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
72	[BUG]  [BUGGY]  if(searchLength  >  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  false;  }	  if(searchLength    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!contains(cs,    searchChars[j]))    {    return    true    	non-compiled	[CE]  <identifier>  expected	46	None	replace
73	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true	  if(searchLength    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!contains(cs,    searchChars[j]))    {    return    true    	non-compiled	[CE]  <identifier>  expected	46	None	replace
74	[BUG]  [BUGGY]  if(searchLength  >  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(Character.isDigit(ch))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(Character.isDigit(ch))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(Character.isDigit(ch))  {  return  false;  }	  if(searchLast    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(Character.isDigit(ch))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
75	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(Character.isDigit(ch))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(Character.isDigit(ch))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	for(int  j  =  0;  j  <  searchLength;  j++)  {  if(Character.isDigit(ch))  {  return  false;  }	  if(searchLast    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(Character.isDigit(ch))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
76	[BUG]  [BUGGY]  if(searchLast  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(Character.isDigit(ch))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(Character.isDigit(ch))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(Character.isDigit(ch))  {  return  false;  }	  if(searchLast    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(Character.isDigit(ch))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
77	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  searchLast;  j++)  {  if(Character.isDigit(ch))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  for(int  j  =  0;  j  <  searchLast;  j++)  {  if(Character.isDigit(ch))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	for(int  j  =  0;  j  <  searchLast;  j++)  {  if(Character.isDigit(ch))  {  return  false;  }	  if(searchLast    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(Character.isDigit(ch))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
78	[BUG]  [BUGGY]  if(searchLength  >  1)  {  for(int  i  =  0;  i  <  searchLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  true  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  1)  {  for(int  i  =  0;  i  <  searchLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  1)  {  for(int  i  =  0;  i  <  searchLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  true	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    searchLast;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch!=    EMPTY)    {    return    true    	non-compiled	[CE]  <identifier>  expected	68	None	replace
79	[BUG]  [BUGGY]  if(searchLength  >  0)  {  for(int  i  =  0;  i  <  searchLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  false  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  for(int  i  =  0;  i  <  searchLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  false  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  for(int  i  =  0;  i  <  searchLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  false	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    searchLast;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch!=    EMPTY)    {    return    true    	non-compiled	[CE]  <identifier>  expected	68	None	replace
80	[BUG]  [BUGGY]  if(searchLength  ==  cs.length)  {  if(!containsAny(cs,  searchChars))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  ==  cs.length)  {  if(!containsAny(cs,  searchChars))  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  ==  cs.length)  {  if(!containsAny(cs,  searchChars))  {  return  true;  }	  if(searchLength    >    csLength)    {    if(!containsAny(cs,    searchChars))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
81	[BUG]  [BUGGY]  int  searchLimit  =  searchChars.length  -  1;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  int  searchLimit  =  searchChars.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	int  searchLimit  =  searchChars.length  -  1;	  int    searchLimit    =    csLast    -    1;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
82	[BUG]  [BUGGY]  int  searchLimit  =  searchLast  -  1;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  int  searchLimit  =  searchLast  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	int  searchLimit  =  searchLast  -  1;	  int    searchLimit    =    csLast    -    1;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
83	[BUG]  [BUGGY]  int  j  =  0;  j  <  searchLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  int  j  =  0;  j  <  searchLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	int  j  =  0;  j  <  searchLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }	  for(int    j    =    0;    j    <    searchLast;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
84	[BUG]  [BUGGY]  if(searchLength  >  0)  {  for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }	  for(int    j    =    0;    j    <    searchLast;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
85	[BUG]  [BUGGY]  if(searchLength  ==  cs.length())  {  if(!containsAny(cs,  searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  ==  cs.length())  {  if(!containsAny(cs,  searchChars))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  ==  cs.length())  {  if(!containsAny(cs,  searchChars))  {  return  false;  }	  if(searchLast    ==    cs.length())    {    if(!containsAny(cs,    searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
86	[BUG]  [BUGGY]  if(searchLast  ==  cs.length())  {  if(containsAny(cs,  searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  ==  cs.length())  {  if(containsAny(cs,  searchChars))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  ==  cs.length())  {  if(containsAny(cs,  searchChars))  {  return  false;  }	  if(searchLast    ==    cs.length())    {    if(!containsAny(cs,    searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
87	[BUG]  [BUGGY]  int  searchLimit  =  cs.length();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  int  searchLimit  =  cs.length();  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	int  searchLimit  =  cs.length();	  int    searchLimit    =    cs.length    -    1;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
88	[BUG]  [BUGGY]  if(searchLast  >  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  >  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  >  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch!=    EMPTY)    {    return    	non-compiled	[CE]  <identifier>  expected	16	None	replace
89	[BUG]  [BUGGY]  if(searchLength  >  1)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  1)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  1)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch!=    EMPTY)    {    return    	non-compiled	[CE]  <identifier>  expected	16	None	replace
90	[BUG]  [BUGGY]  if(searchLength  >  cs.length())  {  if(!containsAny(cs,  searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  cs.length())  {  if(!containsAny(cs,  searchChars))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  cs.length())  {  if(!containsAny(cs,  searchChars))  {  return  false;  }	  if(searchLength!=    cs.length())    {    if(!containsAny(cs,    searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
91	[BUG]  [BUGGY]  if(searchLength  >=  cs.length())  {  if(!containsAny(cs,  searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >=  cs.length())  {  if(!containsAny(cs,  searchChars))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >=  cs.length())  {  if(!containsAny(cs,  searchChars))  {  return  false;  }	  if(searchLength!=    cs.length())    {    if(!containsAny(cs,    searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
92	[BUG]  [BUGGY]  if(searchLength  >  0)  {  char  ch  =  cs.charAt(0);  if(ch  ==  ' "')  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  char  ch  =  cs.charAt(0);  if(ch  ==  ' "')  {  return  false;  }  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  char  ch  =  cs.charAt(0);  if(ch  ==  ' "')  {  return  false;  }	  if(searchLength    >    0)    {    char    ch    =    cs.charAt(0);    if(ch    ==    '   "')    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
93	[BUG]  [BUGGY]  if(searchLength  >  0)  {  char  ch  =  cs.charAt(1);  if(ch  ==  ' "')  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  char  ch  =  cs.charAt(1);  if(ch  ==  ' "')  {  return  true;  }  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  char  ch  =  cs.charAt(1);  if(ch  ==  ' "')  {  return  true;  }	  if(searchLength    >    0)    {    char    ch    =    cs.charAt(0);    if(ch    ==    '   "')    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
94	[BUG]  [BUGGY]  if(searchLast  >  0)  {  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!Character.isDigit(ch))  {  return  false  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  >  0)  {  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!Character.isDigit(ch))  {  return  false  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  >  0)  {  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!Character.isDigit(ch))  {  return  false	  if(searchLength    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!Character.isDigit(ch))    {    return    false    	non-compiled	[CE]  <identifier>  expected	72	None	replace
95	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true	  if(searchLast    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!contains(cs,    searchChars[j]))    {    return    true    	non-compiled	[CE]  <identifier>  expected	65	None	replace
96	[BUG]  [BUGGY]  if(searchLength  >  0)  {  for(int  i  =  0;  i  <  csLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  for(int  i  =  0;  i  <  csLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  true;  }  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  for(int  i  =  0;  i  <  csLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  true;  }	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
97	[BUG]  [BUGGY]  if(searchLength  >  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  true  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  true  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  true	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
98	[BUG]  [BUGGY]  if(searchLength  ==  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  true;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  ==  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  true;  }  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  ==  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  true;  }	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
99	[BUG]  [BUGGY]  if(searchLast  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  true  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  true	  if(searchLast    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!Character.isDigit(ch))    {    return    true    	non-compiled	[CE]  <identifier>  expected	61	None	replace
100	[BUG]  [BUGGY]  char  ch  =  searchChars.charAt(i);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  char  ch  =  searchChars.charAt(i);  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	char  ch  =  searchChars.charAt(i);	  char    ch    =    cs.charAt(i);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
101	[BUG]  [BUGGY]  if(searchLength  ==  csLast)  {  if(!containsAny(cs,  searchChars))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  ==  csLast)  {  if(!containsAny(cs,  searchChars))  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  ==  csLast)  {  if(!containsAny(cs,  searchChars))  {  return  true;  }	  if(searchLast    ==    csLength)    {    if(!containsAny(cs,    searchChars))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
102	[BUG]  [BUGGY]  if(searchLast  ==  0)  {  for(int  i  =  0;  i  <  csLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  true  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  ==  0)  {  for(int  i  =  0;  i  <  csLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  ==  0)  {  for(int  i  =  0;  i  <  csLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  true	  if(searchLast    >    0)    {    for(int    i    =    0;    i    <    csLast;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch!=    EMPTY)    {    return    true    	non-compiled	[CE]  <identifier>  expected	76	None	replace
103	[BUG]  [BUGGY]  if(searchLength  >  0)  {  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }	  for(int    j    =    0;    j    <    searchLength;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
104	[BUG]  [BUGGY]  int  j  =  0;  j  <  searchLength;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  int  j  =  0;  j  <  searchLength;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	int  j  =  0;  j  <  searchLength;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }	  for(int    j    =    0;    j    <    searchLength;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
105	[BUG]  [BUGGY]  if(searchLast  ==  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  true  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  ==  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  ==  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  true	  if(searchLast    >    0)    {    for(int    i    =    0;    i    <    csLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch    ==    EMPTY)    {    return    true    	non-compiled	[CE]  <identifier>  expected	57	None	replace
106	[BUG]  [BUGGY]  if(searchLength  >  0)  {  for(int  i  =  0;  i  <  searchLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  true  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  for(int  i  =  0;  i  <  searchLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  for(int  i  =  0;  i  <  searchLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  true	  if(searchLast    >    0)    {    for(int    i    =    0;    i    <    csLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch    ==    EMPTY)    {    return    true    	non-compiled	[CE]  <identifier>  expected	57	None	replace
107	[BUG]  [BUGGY]  if(searchLast  >  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  >  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  >  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false	  if(searchLength    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    false    	non-compiled	[CE]  <identifier>  expected	85	None	replace
108	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false	  if(searchLength    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    false    	non-compiled	[CE]  <identifier>  expected	85	None	replace
109	[BUG]  [BUGGY]  if(searchLast  >  0)  {  for(int  j  =  0;  j  <  csLength;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  >  0)  {  for(int  j  =  0;  j  <  csLength;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  >  0)  {  for(int  j  =  0;  j  <  csLength;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }	  if(searchLast    >    0)    {    for(int    j    =    0;    j    <    searchLength;    j++)    {    if(!Character.isDigit(ch))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
110	[BUG]  [BUGGY]  if(searchLast  ==  0)  {  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  ==  0)  {  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  ==  0)  {  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }	  if(searchLast    >    0)    {    for(int    j    =    0;    j    <    searchLength;    j++)    {    if(!Character.isDigit(ch))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
111	[BUG]  [BUGGY]  int  searchLimit  =  searchLength  /  2;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  int  searchLimit  =  searchLength  /  2;  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	int  searchLimit  =  searchLength  /  2;	  int    searchLimit    =    searchLength    -    2;    	non-compiled	[CE]  <identifier>  expected	47	None	replace
112	[BUG]  [BUGGY]  if(searchLength  ==  csLast)  {  if(!containsAny(cs,  searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  ==  csLast)  {  if(!containsAny(cs,  searchChars))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  ==  csLast)  {  if(!containsAny(cs,  searchChars))  {  return  false;  }	  if(searchLast    ==    csLength)    {    if(!containsAny(cs,    searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
113	[BUG]  [BUGGY]  if(searchLength  ==  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  ==  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  ==  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    csLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY)    {    return    true    	non-compiled	[CE]  <identifier>  expected	77	None	replace
114	[BUG]  [BUGGY]  if(searchLength  >  1)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  1)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  1)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    csLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY)    {    return    true    	non-compiled	[CE]  <identifier>  expected	77	None	replace
115	[BUG]  [BUGGY]  int  j  =  0;  j  <  searchLast;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  int  j  =  0;  j  <  searchLast;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	int  j  =  0;  j  <  searchLast;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true;  }	  for(int    j    =    0;    j    <    csLast;    j++)    {    if(!contains(cs,    searchChars[j]))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
116	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  false;  }	  for(int    j    =    0;    j    <    csLast;    j++)    {    if(!contains(cs,    searchChars[j]))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
117	[BUG]  [BUGGY]  if(searchLength  ==  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  ==  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  ==  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    csLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch!=    EMPTY)    {    return    	non-compiled	[CE]  <identifier>  expected	84	None	replace
118	[BUG]  [BUGGY]  if(searchLength  >  1)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  1)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  1)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    csLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch!=    EMPTY)    {    return    	non-compiled	[CE]  <identifier>  expected	84	None	replace
119	[BUG]  [BUGGY]  if(searchLength  ==  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  ==  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  ==  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    csLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch    ==    EMPTY)    {    return    	non-compiled	[CE]  <identifier>  expected	92	None	replace
120	[BUG]  [BUGGY]  if(searchLength  >  1)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  1)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  1)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    csLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch    ==    EMPTY)    {    return    	non-compiled	[CE]  <identifier>  expected	92	None	replace
121	[BUG]  [BUGGY]  if(searchLength  >  0)  {  for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true;  }	  for(int    j    =    0;    j    <    searchLast;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
122	[BUG]  [BUGGY]  if(searchLast  ==  csLen)  {  if(!isEmpty(cs))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  ==  csLen)  {  if(!isEmpty(cs))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  ==  csLen)  {  if(!isEmpty(cs))  {  return  false;  }	  if(searchLast    ==    csLength)    {    if(!isEmpty(cs))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
123	[BUG]  [BUGGY]  if(searchLast  >  csLast)  {  if(!containsAny(cs,  searchChars))  {  return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  >  csLast)  {  if(!containsAny(cs,  searchChars))  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  >  csLast)  {  if(!containsAny(cs,  searchChars))  {  return  true;  }	  if(searchLength    >    csLast)    {    if(!containsAny(cs,    searchChars))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
124	[BUG]  [BUGGY]  if(searchLength!=  csLast)  {  if(!containsAny(cs,  searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength!=  csLast)  {  if(!containsAny(cs,  searchChars))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength!=  csLast)  {  if(!containsAny(cs,  searchChars))  {  return  false;  }	  if(searchLast!=    csLength)    {    if(!containsAny(cs,    searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
125	[BUG]  [BUGGY]  if(searchLength  >  0)  {  if(containsAny(cs,  searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  if(containsAny(cs,  searchChars))  {  return  false;  }  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  if(containsAny(cs,  searchChars))  {  return  false;  }	  if(searchLength    >    0)    {    if(!containsAny(cs,    searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
126	[BUG]  [BUGGY]  if(!containsAny(cs,  searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(!containsAny(cs,  searchChars))  {  return  false;  }  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(!containsAny(cs,  searchChars))  {  return  false;  }	  if(searchLength    >    0)    {    if(!containsAny(cs,    searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
127	[BUG]  [BUGGY]  if(searchLast  ==  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  ==  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  ==  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true;  }	  if(searchLast    >    0)    {    for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
128	[BUG]  [BUGGY]  if(searchLength  >  1)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  1)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  1)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY)    {    return    true    	non-compiled	[CE]  <identifier>  expected	3	None	replace
129	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	for(int  i  =  0;  i  <  searchChars.length;  i++)  {	  for(int    i    =    0;    i    <    cs.length;    i++)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
130	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cs.length();  i++)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  for(int  i  =  0;  i  <  cs.length();  i++)  {  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	for(int  i  =  0;  i  <  cs.length();  i++)  {	  for(int    i    =    0;    i    <    cs.length;    i++)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
131	[BUG]  [BUGGY]  if(searchLast  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true	  if(searchLast    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    true    	non-compiled	[CE]  <identifier>  expected	63	None	replace
132	[BUG]  [BUGGY]  char  ch  =  cs.charAt(0);  if(ch!=  ' "')  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  char  ch  =  cs.charAt(0);  if(ch!=  ' "')  {  return  true;  }  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	char  ch  =  cs.charAt(0);  if(ch!=  ' "')  {  return  true;  }	  if(searchLength    >    0)    {    char    ch    =    cs.charAt(0);    if(ch!=    '   "')    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
133	[BUG]  [BUGGY]  if(searchLength  >  0)  {  char  ch  =  cs.charAt(1);  if(ch!=  ' "')  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  char  ch  =  cs.charAt(1);  if(ch!=  ' "')  {  return  true;  }  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  char  ch  =  cs.charAt(1);  if(ch!=  ' "')  {  return  true;  }	  if(searchLength    >    0)    {    char    ch    =    cs.charAt(0);    if(ch!=    '   "')    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
134	[BUG]  [BUGGY]  if(searchLast  ==  0)  {  if(!containsAny(cs,  searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  ==  0)  {  if(!containsAny(cs,  searchChars))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  ==  0)  {  if(!containsAny(cs,  searchChars))  {  return  false;  }	  if(searchLast    >    0)    {    if(!containsAny(cs,    searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
135	[BUG]  [BUGGY]  if(searchLast!=  0)  {  if(!containsAny(cs,  searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast!=  0)  {  if(!containsAny(cs,  searchChars))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast!=  0)  {  if(!containsAny(cs,  searchChars))  {  return  false;  }	  if(searchLast    >    0)    {    if(!containsAny(cs,    searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
136	[BUG]  [BUGGY]  ||!containsAny(cs,  searchChars))  {  return  false;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  ||!containsAny(cs,  searchChars))  {  return  false;  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	||!containsAny(cs,  searchChars))  {  return  false;	  if(searchLast    >    0)    {    if(!containsAny(cs,    searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
137	[BUG]  [BUGGY]  if(searchLength  >  0)  {  char  ch  =  cs.charAt(0);  if(ch  ==  '+')  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  char  ch  =  cs.charAt(0);  if(ch  ==  '+')  {  return  false;  }  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  char  ch  =  cs.charAt(0);  if(ch  ==  '+')  {  return  false;  }	  if(searchLength    >    0)    {    char    ch    =    cs.charAt(0);    if(ch    ==    '+')    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
138	[BUG]  [BUGGY]  if(searchLength  >  0)  {  char  ch  =  cs.charAt(1);  if(ch  ==  '+')  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  char  ch  =  cs.charAt(1);  if(ch  ==  '+')  {  return  true;  }  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  char  ch  =  cs.charAt(1);  if(ch  ==  '+')  {  return  true;  }	  if(searchLength    >    0)    {    char    ch    =    cs.charAt(0);    if(ch    ==    '+')    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
139	[BUG]  [BUGGY]  char  ch  =  cs.charAt(0);  if(ch  ==  '+')  {  return  true;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  char  ch  =  cs.charAt(0);  if(ch  ==  '+')  {  return  true;  }  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	char  ch  =  cs.charAt(0);  if(ch  ==  '+')  {  return  true;  }	  if(searchLength    >    0)    {    char    ch    =    cs.charAt(0);    if(ch    ==    '+')    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
140	[BUG]  [BUGGY]  if(searchLast  ==  0)  {  if(!isEmpty(cs))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  ==  0)  {  if(!isEmpty(cs))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  ==  0)  {  if(!isEmpty(cs))  {  return  false;  }	  if(searchLast    >    0)    {    if(!isEmpty(cs))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
141	[BUG]  [BUGGY]  ||!isEmpty(cs))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  ||!isEmpty(cs))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	||!isEmpty(cs))  {  return  false;  }	  if(searchLast    >    0)    {    if(!isEmpty(cs))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
142	[BUG]  [BUGGY]  if(searchLength  ==  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  ==  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true;  }  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  ==  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true;  }	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
143	[BUG]  [BUGGY]  if(searchLength  >  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
144	[BUG]  [BUGGY]  if(searchLength  >  0)  {  for(int  i  =  0;  i  <  csLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  for(int  i  =  0;  i  <  csLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true;  }  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  for(int  i  =  0;  i  <  csLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true;  }	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
145	[BUG]  [BUGGY]  if(searchLength  >  0)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  true;  }  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  true;  }	  if(searchLength    >    0)    {    char    ch    =    cs.charAt(0);    if(ch    ==    '+')    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
146	[BUG]  [BUGGY]  if(searchLast  >  0)  {  char  ch  =  cs.charAt(0);  if(ch  ==  '+')  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  >  0)  {  char  ch  =  cs.charAt(0);  if(ch  ==  '+')  {  return  true;  }  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  >  0)  {  char  ch  =  cs.charAt(0);  if(ch  ==  '+')  {  return  true;  }	  if(searchLength    >    0)    {    char    ch    =    cs.charAt(0);    if(ch    ==    '+')    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
147	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!Character.isDigit(ch))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!Character.isDigit(ch))  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!Character.isDigit(ch))  {  return  true;  }	  if(searchLast    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!Character.isDigit(ch))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
148	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  true;  }	  if(searchLast    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!Character.isDigit(ch))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
149	[BUG]  [BUGGY]  if(searchLast!=  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  true  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast!=  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast!=  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  true	  if(searchLast    >    0)    {    for(int    i    =    0;    i    <    csLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch    ==    EMPTY)    {    return    true    	non-compiled	[CE]  <identifier>  expected	57	None	replace
150	[BUG]  [BUGGY]  int  j  =  0;  j  <  searchLength;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  int  j  =  0;  j  <  searchLength;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	int  j  =  0;  j  <  searchLength;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true;  }	  for(int    j    =    0;    j    <    searchLength;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
151	[BUG]  [BUGGY]  int  searchLimit  =  searchLen  -  1;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  int  searchLimit  =  searchLen  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	int  searchLimit  =  searchLen  -  1;	  int    searchLimit    =    csLast    -    1;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
152	[BUG]  [BUGGY]  ||  searchLast  >  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  true  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  ||  searchLast  >  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	||  searchLast  >  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  true	  ||    searchLength    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!Character.isDigit(ch))    {    return    true    	non-compiled	[CE]  <identifier>  expected	22	None	replace
153	[BUG]  [BUGGY]  &&  searchLength  >  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  true  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  &&  searchLength  >  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	&&  searchLength  >  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  true	  ||    searchLength    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!Character.isDigit(ch))    {    return    true    	non-compiled	[CE]  <identifier>  expected	22	None	replace
154	[BUG]  [BUGGY]  char  ch  =  cs.charAt(searchLength  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  char  ch  =  cs.charAt(searchLength  +  1);  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	char  ch  =  cs.charAt(searchLength  +  1);	  char    ch    =    cs.charAt(i    +    1);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
155	[BUG]  [BUGGY]  char  ch  =  cs.charAt(searchLast  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  char  ch  =  cs.charAt(searchLast  +  1);  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	char  ch  =  cs.charAt(searchLast  +  1);	  char    ch    =    cs.charAt(i    +    1);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
156	[BUG]  [BUGGY]  if(searchLast!=  0)  {  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast!=  0)  {  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast!=  0)  {  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }	  if(searchLast    >    0)    {    for(int    j    =    0;    j    <    searchLength;    j++)    {    if(!Character.isDigit(ch))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
157	[BUG]  [BUGGY]  if(searchLast!=  0)  {  for(int  j  =  0;  j  <  csLength;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast!=  0)  {  for(int  j  =  0;  j  <  csLength;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast!=  0)  {  for(int  j  =  0;  j  <  csLength;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }	  if(searchLast    >    0)    {    for(int    j    =    0;    j    <    searchLength;    j++)    {    if(!Character.isDigit(ch))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
158	[BUG]  [BUGGY]  if(searchLast  >  0)  {  for(int  i  =  0;  i  <  searchLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  true  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  >  0)  {  for(int  i  =  0;  i  <  searchLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  >  0)  {  for(int  i  =  0;  i  <  searchLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  true	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    searchLast;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch!=    EMPTY)    {    return    true    	non-compiled	[CE]  <identifier>  expected	68	None	replace
159	[BUG]  [BUGGY]  if(searchLength  ==  0)  {  for(int  i  =  0;  i  <  searchLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  true  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  ==  0)  {  for(int  i  =  0;  i  <  searchLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  ==  0)  {  for(int  i  =  0;  i  <  searchLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  true	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    searchLast;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch!=    EMPTY)    {    return    true    	non-compiled	[CE]  <identifier>  expected	68	None	replace
160	[BUG]  [BUGGY]  if(searchLast  >=  0)  {  if(!isEmpty(cs))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  >=  0)  {  if(!isEmpty(cs))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  >=  0)  {  if(!isEmpty(cs))  {  return  false;  }	  if(searchLast    >    0)    {    if(!isEmpty(cs))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
161	[BUG]  [BUGGY]  if(searchLength  >  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i  +  1);  if(ch  ==  EMPTY)  {  return  true  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i  +  1);  if(ch  ==  EMPTY)  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i  +  1);  if(ch  ==  EMPTY)  {  return  true	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY)    {    return    true    	non-compiled	[CE]  <identifier>  expected	3	None	replace
162	[BUG]  [BUGGY]  if(searchLast!=  0)  {  for(int  i  =  0;  i  <  csLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  true  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast!=  0)  {  for(int  i  =  0;  i  <  csLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast!=  0)  {  for(int  i  =  0;  i  <  csLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  true	  if(searchLast    >    0)    {    for(int    i    =    0;    i    <    csLast;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch!=    EMPTY)    {    return    true    	non-compiled	[CE]  <identifier>  expected	76	None	replace
163	[BUG]  [BUGGY]  if(searchLength  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false	  if(searchLength    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    false    	non-compiled	[CE]  <identifier>  expected	85	None	replace
164	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false	  if(searchLength    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    false    	non-compiled	[CE]  <identifier>  expected	85	None	replace
165	[BUG]  [BUGGY]  if(searchLength  >  0)  {  char  ch  =  cs.charAt(i);  if(ch  ==' "')  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  char  ch  =  cs.charAt(i);  if(ch  ==' "')  {  return  true;  }  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  char  ch  =  cs.charAt(i);  if(ch  ==' "')  {  return  true;  }	  if(searchLength    >    0)    {    char    ch    =    cs.charAt(0);    if(ch    ==    '   "')    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
166	[BUG]  [BUGGY]  if(searchLast  >  0)  {  char  ch  =  cs.charAt(0);  if(ch  ==' "')  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  >  0)  {  char  ch  =  cs.charAt(0);  if(ch  ==' "')  {  return  true;  }  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  >  0)  {  char  ch  =  cs.charAt(0);  if(ch  ==' "')  {  return  true;  }	  if(searchLength    >    0)    {    char    ch    =    cs.charAt(0);    if(ch    ==    '   "')    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
167	[BUG]  [BUGGY]  if(searchLast  >  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  >  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  >  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    csLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY)    {    return    true    	non-compiled	[CE]  <identifier>  expected	77	None	replace
168	[BUG]  [BUGGY]  char  j  =  cs.charAt(searchLast);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  char  j  =  cs.charAt(searchLast);  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	char  j  =  cs.charAt(searchLast);	  char    j    =    cs.charAt(i);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
169	[BUG]  [BUGGY]  int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true	  for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
170	[BUG]  [BUGGY]  if(searchLast  ==  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  ==  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  ==  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch!=    EMPTY)    {    return    	non-compiled	[CE]  <identifier>  expected	16	None	replace
171	[BUG]  [BUGGY]  if(searchLast  >  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  >  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  >  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch!=    EMPTY)    {    return    	non-compiled	[CE]  <identifier>  expected	16	None	replace
172	[BUG]  [BUGGY]  if(searchLength  >  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(Character.isDigit(ch))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(Character.isDigit(ch))  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(Character.isDigit(ch))  {  return  true;  }	  if(searchLast    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(Character.isDigit(ch))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
173	[BUG]  [BUGGY]  if(searchLength  >  0)  {  for(int  j  =  0;  j  <  searchLast;  j++)  {  if(Character.isDigit(ch))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  for(int  j  =  0;  j  <  searchLast;  j++)  {  if(Character.isDigit(ch))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  for(int  j  =  0;  j  <  searchLast;  j++)  {  if(Character.isDigit(ch))  {  return  false;  }	  if(searchLast    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(Character.isDigit(ch))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
174	[BUG]  [BUGGY]  int  searchLength  >  csLength)  {  if(!containsAny(cs,  searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  int  searchLength  >  csLength)  {  if(!containsAny(cs,  searchChars))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	int  searchLength  >  csLength)  {  if(!containsAny(cs,  searchChars))  {  return  false;  }	  if(searchLength    >    csLength)    {    if(!containsAny(cs,    searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	80	None	replace
175	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }	  for(int    j    =    0;    j    <    searchLast;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
176	[BUG]  [BUGGY]  if(searchLength  ==  0)  {  for(int  i  =  0;  i  <  csLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  ==  0)  {  for(int  i  =  0;  i  <  csLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  ==  0)  {  for(int  i  =  0;  i  <  csLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    csLast;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch!=    EMPTY)    {    return    	non-compiled	[CE]  <identifier>  expected	31	None	replace
177	[BUG]  [BUGGY]  if(searchLast  >  0)  {  for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  >  0)  {  for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  >  0)  {  for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }	  if(searchLength    >    0)    {    for(int    j    =    0;    j    <    searchLast;    j++)    {    if(!Character.isDigit(ch))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
178	[BUG]  [BUGGY]  ||  searchLength  >  1)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  ||  searchLength  >  1)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	||  searchLength  >  1)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false	  ||    searchLength    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
179	[BUG]  [BUGGY]  ||  searchLength  >  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j])  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  ||  searchLength  >  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j])  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	||  searchLength  >  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j])	  ||    searchLength    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
180	[BUG]  [BUGGY]  if(searchLast  ==  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  ==  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  ==  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch    ==    EMPTY)    {    return    	non-compiled	[CE]  <identifier>  expected	43	None	replace
181	[BUG]  [BUGGY]  if(searchLast  >  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  >  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  >  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch    ==    EMPTY)    {    return    	non-compiled	[CE]  <identifier>  expected	43	None	replace
182	[BUG]  [BUGGY]  if(searchLength  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true	  if(searchLength    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!contains(cs,    searchChars[j]))    {    return    true    	non-compiled	[CE]  <identifier>  expected	46	None	replace
183	[BUG]  [BUGGY]  if(searchLast  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true	  if(searchLast    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!contains(cs,    searchChars[j]))    {    return    true    	non-compiled	[CE]  <identifier>  expected	65	None	replace
184	[BUG]  [BUGGY]  if(searchLast  >  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  >  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  >  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
185	[BUG]  [BUGGY]  if(searchLast  >  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  >  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true;  }  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  >  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true;  }	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
186	[BUG]  [BUGGY]  if(searchLast!=  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast!=  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast!=  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }	  if(searchLast    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
187	[BUG]  [BUGGY]  if(searchLast  ==  csLast)  {  if(!isEmpty(cs))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  ==  csLast)  {  if(!isEmpty(cs))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  ==  csLast)  {  if(!isEmpty(cs))  {  return  false;  }	  if(searchLast    ==    csLength)    {    if(!isEmpty(cs))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
188	[BUG]  [BUGGY]  if(searchLast  >  csLast)  {  if(!isEmpty(cs))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  >  csLast)  {  if(!isEmpty(cs))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  >  csLast)  {  if(!isEmpty(cs))  {  return  false;  }	  if(searchLength    >    csLast)    {    if(!isEmpty(cs))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
189	[BUG]  [BUGGY]  if(searchLength  >  0)  {  if(isEmpty(cs,  searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  if(isEmpty(cs,  searchChars))  {  return  false;  }  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  if(isEmpty(cs,  searchChars))  {  return  false;  }	  if(searchLength    >    0)    {    if(!containsAny(cs,    searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
190	[BUG]  [BUGGY]  &&  searchLength  >  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  &&  searchLength  >  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	&&  searchLength  >  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }	  ||    searchLength    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!Character.isDigit(ch))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
191	[BUG]  [BUGGY]  if(searchLength  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  true  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  true	  if(searchLength    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!Character.isDigit(ch))    {    return    true    	non-compiled	[CE]  <identifier>  expected	23	None	replace
192	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!Character.isDigit(ch))  {  return  true  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!Character.isDigit(ch))  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!Character.isDigit(ch))  {  return  true	  if(searchLength    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!Character.isDigit(ch))    {    return    true    	non-compiled	[CE]  <identifier>  expected	23	None	replace
193	[BUG]  [BUGGY]  if(searchLength  >  0)  {  char  ch  =  cs.charAt(i);  if(ch!=' "')  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  char  ch  =  cs.charAt(i);  if(ch!=' "')  {  return  true;  }  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  char  ch  =  cs.charAt(i);  if(ch!=' "')  {  return  true;  }	  if(searchLength    >    0)    {    char    ch    =    cs.charAt(0);    if(ch!=    '   "')    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
194	[BUG]  [BUGGY]  if(searchLast  >  0)  {  char  ch  =  cs.charAt(0);  if(ch!=' "')  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  >  0)  {  char  ch  =  cs.charAt(0);  if(ch!=' "')  {  return  true;  }  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  >  0)  {  char  ch  =  cs.charAt(0);  if(ch!=' "')  {  return  true;  }	  if(searchLength    >    0)    {    char    ch    =    cs.charAt(0);    if(ch!=    '   "')    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
195	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true;  }	  for(int    j    =    0;    j    <    searchLast;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
196	[BUG]  [BUGGY]  int  j  =  0;  j  <  searchLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  int  j  =  0;  j  <  searchLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	int  j  =  0;  j  <  searchLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true;  }	  for(int    j    =    0;    j    <    searchLast;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
197	[BUG]  [BUGGY]  if(searchLength  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true	  if(searchLength    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    true    	non-compiled	[CE]  <identifier>  expected	37	None	replace
198	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true	  if(searchLength    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    true    	non-compiled	[CE]  <identifier>  expected	37	None	replace
199	[BUG]  [BUGGY]  if(searchLast!=  0)  {  if(!containsAny(cs,  searchChars))  {  return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast!=  0)  {  if(!containsAny(cs,  searchChars))  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast!=  0)  {  if(!containsAny(cs,  searchChars))  {  return  true;  }	  if(searchLast    >    0)    {    if(!containsAny(cs,    searchChars))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
200	[BUG]  [BUGGY]  if(searchLast  >  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  true  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  >  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  >  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  true	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    csLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch!=    EMPTY)    {    return    true    	non-compiled	[CE]  <identifier>  expected	15	None	replace
201	[BUG]  [BUGGY]  if(searchLast!=  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  true  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast!=  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast!=  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  true	  if(searchLast    >    0)    {    for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch    ==    EMPTY)    {    return    true    	non-compiled	[CE]  <identifier>  expected	56	None	replace
202	[BUG]  [BUGGY]  if(searchLength  >  csLast)  {  if(containsAny(cs,  searchChars))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  csLast)  {  if(containsAny(cs,  searchChars))  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  csLast)  {  if(containsAny(cs,  searchChars))  {  return  true;  }	  if(searchLength    >    csLength)    {    if(!containsAny(cs,    searchChars))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
203	[BUG]  [BUGGY]  if(searchLength  >  0)  {  if(isEmpty(cs,  searchChars))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  if(isEmpty(cs,  searchChars))  {  return  true;  }  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  if(isEmpty(cs,  searchChars))  {  return  true;  }	  if(searchLength    >    0)    {    if(!containsAny(cs,    searchChars))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
204	[BUG]  [BUGGY]  char  ch  =  cs.charAt(searchLength  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  char  ch  =  cs.charAt(searchLength  -  1);  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	char  ch  =  cs.charAt(searchLength  -  1);	  char    ch    =    cs.charAt(searchLength);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
205	[BUG]  [BUGGY]  if(searchLast  >  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  true  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  >  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  true  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  >  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  true	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
206	[BUG]  [BUGGY]  if(searchLast  >  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  >  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  true;  }  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  >  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  true;  }	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
207	[BUG]  [BUGGY]  if(searchLast  >  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  >  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  >  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    csLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch    ==    EMPTY)    {    return    	non-compiled	[CE]  <identifier>  expected	92	None	replace
208	[BUG]  [BUGGY]  if(searchLast  >  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  false  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  >  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  false  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  >  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  false	  if(searchLength    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!Character.isDigit(ch))    {    return    false    	non-compiled	[CE]  <identifier>  expected	72	None	replace
209	[BUG]  [BUGGY]  if(searchLength  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  false  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  false  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  false	  if(searchLength    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!Character.isDigit(ch))    {    return    false    	non-compiled	[CE]  <identifier>  expected	72	None	replace
210	[BUG]  [BUGGY]  if(searchLast!=  cs.length)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  true  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast!=  cs.length)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast!=  cs.length)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  true	  if(searchLast    >    0)    {    for(int    i    =    0;    i    <    csLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch    ==    EMPTY)    {    return    true    	non-compiled	[CE]  <identifier>  expected	57	None	replace
211	[BUG]  [BUGGY]  if(searchLast!=  cs.length)  {  for(int  i  =  0;  i  <  csLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  true  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast!=  cs.length)  {  for(int  i  =  0;  i  <  csLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast!=  cs.length)  {  for(int  i  =  0;  i  <  csLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  true	  if(searchLast    >    0)    {    for(int    i    =    0;    i    <    csLast;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch!=    EMPTY)    {    return    true    	non-compiled	[CE]  <identifier>  expected	76	None	replace
212	[BUG]  [BUGGY]  if(searchLast!=  cs.length)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  true  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast!=  cs.length)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast!=  cs.length)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  true	  if(searchLast    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!Character.isDigit(ch))    {    return    true    	non-compiled	[CE]  <identifier>  expected	61	None	replace
213	[BUG]  [BUGGY]  if(searchLast!=  cs.length)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast!=  cs.length)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast!=  cs.length)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true	  if(searchLast    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!contains(cs,    searchChars[j]))    {    return    true    	non-compiled	[CE]  <identifier>  expected	65	None	replace
214	[BUG]  [BUGGY]  if(searchLength  <  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  <  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  <  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true	  if(searchLength    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!contains(cs,    searchChars[j]))    {    return    true    	non-compiled	[CE]  <identifier>  expected	46	None	replace
215	[BUG]  [BUGGY]  if(searchLength  >=  csLength)  {  if(!containsAny(cs,  searchChars))  {  return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >=  csLength)  {  if(!containsAny(cs,  searchChars))  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >=  csLength)  {  if(!containsAny(cs,  searchChars))  {  return  true;  }	  if(searchLast    >=    csLength)    {    if(!containsAny(cs,    searchChars))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
216	[BUG]  [BUGGY]  if(searchLast!=  cs.length)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast!=  cs.length)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast!=  cs.length)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }	  if(searchLast    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!Character.isDigit(ch))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
217	[BUG]  [BUGGY]  if(searchLast  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }	  if(searchLast    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!Character.isDigit(ch))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
218	[BUG]  [BUGGY]  if(searchLength  >  0)  {  for(int  i  =  0;  i  <  csLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  for(int  i  =  0;  i  <  csLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  for(int  i  =  0;  i  <  csLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY)    {    return    true    	non-compiled	[CE]  <identifier>  expected	3	None	replace
219	[BUG]  [BUGGY]  if(searchLength  >  0)  {  if(isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  if(isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  if(isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }	  if(searchLength    >    0)    {    if(!containsAny(cs,    searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
220	[BUG]  [BUGGY]  if(searchLast  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true;  }	  if(searchLast    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!contains(cs,    searchChars[j]))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
221	[BUG]  [BUGGY]  int  searchLimit  =  SearchChars.length  -  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  int  searchLimit  =  SearchChars.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	int  searchLimit  =  SearchChars.length  -  1;	  int    searchLimit    =    cs.length    -    1;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
222	[BUG]  [BUGGY]  if(searchLast!=  cs.length)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast!=  cs.length)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast!=  cs.length)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true	  if(searchLast    >    0)    {    for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY)    {    return    true    	non-compiled	[CE]  <identifier>  expected	58	None	replace
223	[BUG]  [BUGGY]  if(searchLast!=  cs.length)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(Character.isDigit(ch))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast!=  cs.length)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(Character.isDigit(ch))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast!=  cs.length)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(Character.isDigit(ch))  {  return  false;  }	  if(searchLast    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(Character.isDigit(ch))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
224	[BUG]  [BUGGY]  if(searchLast!=  cs.length)  {  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast!=  cs.length)  {  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast!=  cs.length)  {  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!Character.isDigit(ch))  {  return  false;  }	  if(searchLast    >    0)    {    for(int    j    =    0;    j    <    searchLength;    j++)    {    if(!Character.isDigit(ch))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
225	[BUG]  [BUGGY]  if(searchLength  >=  csLength)  {  if(!containsAny(cs,  searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >=  csLength)  {  if(!containsAny(cs,  searchChars))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >=  csLength)  {  if(!containsAny(cs,  searchChars))  {  return  false;  }	  if(searchLast    >=    csLength)    {    if(!containsAny(cs,    searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
226	[BUG]  [BUGGY]  if(searchLast  >  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  >  0)  {  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  >  0)  {	  if(searchLast    >    0)    {    if(!isEmpty(cs))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
227	[BUG]  [BUGGY]  if(searchLast!=  cs.length)  {  if(!isEmpty(cs))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast!=  cs.length)  {  if(!isEmpty(cs))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast!=  cs.length)  {  if(!isEmpty(cs))  {  return  false;  }	  if(searchLast    >    0)    {    if(!isEmpty(cs))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
228	[BUG]  [BUGGY]  &&  searchLength  >  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  &&  searchLength  >  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	&&  searchLength  >  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }	  ||    searchLength    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
229	[BUG]  [BUGGY]  ||  searchLength  <  =  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  true  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  ||  searchLength  <  =  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	||  searchLength  <  =  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  true	  ||    searchLength    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!Character.isDigit(ch))    {    return    true    	non-compiled	[CE]  <identifier>  expected	22	None	replace
230	[BUG]  [BUGGY]  if(searchLast  ==  cs.length)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  ==  cs.length)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  ==  cs.length)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true;  }	  for(int    j    =    0;    j    <    csLast;    j++)    {    if(!contains(cs,    searchChars[j]))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
231	[BUG]  [BUGGY]  if(searchLast  >  cs.length())  {  if(!containsAny(cs,  searchChars))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  >  cs.length())  {  if(!containsAny(cs,  searchChars))  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  >  cs.length())  {  if(!containsAny(cs,  searchChars))  {  return  true;  }	  if(searchLast    >=    cs.length())    {    if(!containsAny(cs,    searchChars))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
232	[BUG]  [BUGGY]  if(searchLength  <  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  <  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  <  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true	  if(searchLength    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    true    	non-compiled	[CE]  <identifier>  expected	37	None	replace
233	[BUG]  [BUGGY]  if(searchLength  >  0)  {  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true;  }  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true;  }  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true;  }  }	  for(int    j    =    0;    j    <    searchLength;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
234	[BUG]  [BUGGY]  if(searchLast  ==  cs.length())  {  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  ==  cs.length())  {  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  ==  cs.length())  {  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true;  }	  for(int    j    =    0;    j    <    searchLength;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
235	[BUG]  [BUGGY]  if(searchLast!=  cs.length)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast!=  cs.length)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast!=  cs.length)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }	  if(searchLast    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
236	[BUG]  [BUGGY]  if(searchLast!=  cs.length)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast!=  cs.length)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast!=  cs.length)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true;  }	  if(searchLast    >    0)    {    for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
237	[BUG]  [BUGGY]  if(searchLast  >  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  >  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  >  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true;  }	  if(searchLast    >    0)    {    for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
238	[BUG]  [BUGGY]  if(searchLast!=  cs.length)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  true  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast!=  cs.length)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast!=  cs.length)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  true	  if(searchLast    ==    0)    {    for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch!=    EMPTY)    {    return    true    	non-compiled	[CE]  <identifier>  expected	70	None	replace
239	[BUG]  [BUGGY]  if(searchLast  >  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(Character.isDigit(ch))  {  return  true  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  >  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(Character.isDigit(ch))  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  >  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(Character.isDigit(ch))  {  return  true	  if(searchLength    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!Character.isDigit(ch))    {    return    true    	non-compiled	[CE]  <identifier>  expected	23	None	replace
240	[BUG]  [BUGGY]  if(searchLast  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  true;  }	  if(searchLast    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!Character.isDigit(ch))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
241	[BUG]  [BUGGY]  if(searchLast!=  cs.length)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast!=  cs.length)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast!=  cs.length)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!Character.isDigit(ch))  {  return  true;  }	  if(searchLast    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!Character.isDigit(ch))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
242	[BUG]  [BUGGY]  if(searchLast  >=  0)  {  if(!containsAny(cs,  searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  >=  0)  {  if(!containsAny(cs,  searchChars))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  >=  0)  {  if(!containsAny(cs,  searchChars))  {  return  false;  }	  if(searchLast    >    0)    {    if(!containsAny(cs,    searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
243	[BUG]  [BUGGY]  if(searchLength  >  0)  {  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }  }	  for(int    j    =    0;    j    <    searchLength;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
244	[BUG]  [BUGGY]  if(searchLast!=  cs.length)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast!=  cs.length)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast!=  cs.length)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true	  if(searchLast    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    true    	non-compiled	[CE]  <identifier>  expected	63	None	replace
245	[BUG]  [BUGGY]  if(searchLast!=  cs.length)  {  for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast!=  cs.length)  {  for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast!=  cs.length)  {  for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }	  for(int    j    =    0;    j    <    searchLast;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
246	[BUG]  [BUGGY]  if(searchLast  ==  cs.length)  {  for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  ==  cs.length)  {  for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  ==  cs.length)  {  for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false;  }	  for(int    j    =    0;    j    <    searchLast;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
247	[BUG]  [BUGGY]  if(searchLength!=  csLength)  {  if(!isEmpty(cs))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength!=  csLength)  {  if(!isEmpty(cs))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength!=  csLength)  {  if(!isEmpty(cs))  {  return  false;  }	  if(searchLast!=    csLength)    {    if(!isEmpty(cs))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
248	[BUG]  [BUGGY]  if(searchLength  >  0)  {  for(int  i  =  0;  i  <  csLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  for(int  i  =  0;  i  <  csLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  for(int  i  =  0;  i  <  csLast;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch    ==    EMPTY)    {    return    	non-compiled	[CE]  <identifier>  expected	43	None	replace
249	[BUG]  [BUGGY]  if(searchLast  ==  cs.length())  {  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  ==  cs.length())  {  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  ==  cs.length())  {  for(int  j  =  0;  j  <  searchLength;  j++)  {  if(!contains(cs,  searchChars[j]))  {  return  true;  }	  for(int    j    =    0;    j    <    searchLength;    j++)    {    if(!contains(cs,    searchChars[j]))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
250	[BUG]  [BUGGY]  if(searchLast  >=  0)  {  if(!containsAny(cs,  searchChars))  {  return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  >=  0)  {  if(!containsAny(cs,  searchChars))  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  >=  0)  {  if(!containsAny(cs,  searchChars))  {  return  true;  }	  if(searchLast    >    0)    {    if(!containsAny(cs,    searchChars))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
251	[BUG]  [BUGGY]  char  ch  =  cs.charAt(0,  searchLength);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  char  ch  =  cs.charAt(0,  searchLength);  [BUGGY]      char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	char  ch  =  cs.charAt(0,  searchLength);	  char    ch    =    cs.charAt(searchLength);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
252	[BUG]  [BUGGY]  if(searchLength  >  csLast)  {  if(isEmpty(cs))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  csLast)  {  if(isEmpty(cs))  {  return  false;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  csLast)  {  if(isEmpty(cs))  {  return  false;  }	  if(searchLength    >    csLast)    {    if(!isEmpty(cs))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
253	[BUG]  [BUGGY]  if(searchLast!=  cs.length)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  true  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast!=  cs.length)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast!=  cs.length)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch  ==  EMPTY)  {  return  true	  if(searchLast    >    0)    {    for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch    ==    EMPTY)    {    return    true    	non-compiled	[CE]  <identifier>  expected	56	None	replace
254	[BUG]  [BUGGY]  if(searchLast!=  cs.length)  {  for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast!=  cs.length)  {  for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast!=  cs.length)  {  for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true;  }	  for(int    j    =    0;    j    <    searchLast;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
255	[BUG]  [BUGGY]  if(searchLast  ==  cs.length)  {  for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  ==  cs.length)  {  for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  ==  cs.length)  {  for(int  j  =  0;  j  <  searchLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true;  }	  for(int    j    =    0;    j    <    searchLast;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
256	[BUG]  [BUGGY]  if(searchLength  ==  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  ==  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  ==  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY  ||  ch!=  EMPTY)  {  return	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY    ||    ch!=    EMPTY)    {    return    	non-compiled	[CE]  <identifier>  expected	16	None	replace
257	[BUG]  [BUGGY]  if(searchLength  >  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true;  }  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  >  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true;  }  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  >  0)  {  for(int  i  =  0;  i  <  searchLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true;  }  }	  for(int    i    =    0;    i    <    searchLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
258	[BUG]  [BUGGY]  if(searchLast!=  cs.length)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast!=  cs.length)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast!=  cs.length)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true;  }	  if(searchLast    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
259	[BUG]  [BUGGY]  if(searchLast  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  ==  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  true;  }	  if(searchLast    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
260	[BUG]  [BUGGY]  if(searchLast  ==  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLast  ==  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLast  ==  0)  {  for(int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true	  if(searchLength    >    0)    {    for(int    i    =    0;    i    <    csLength;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY)    {    return    true    	non-compiled	[CE]  <identifier>  expected	77	None	replace
261	[BUG]  [BUGGY]  if(searchLength  <  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;      [BUGGY]  if(searchLength  <  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false  [BUGGY]      for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1451	1451	10	replace	if(searchLength  <  0)  {  for(int  j  =  0;  j  <  csLast;  j++)  {  if(!isEmpty(cs,  searchChars[j]))  {  return  false	  if(searchLength    >    0)    {    for(int    j    =    0;    j    <    csLast;    j++)    {    if(!isEmpty(cs,    searchChars[j]))    {    return    false    	non-compiled	[CE]  <identifier>  expected	85	None	replace
