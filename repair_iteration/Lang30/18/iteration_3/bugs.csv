bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  CharSequence  cs  =  searchChars[j].charAt(i  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  cs  =  searchChars[j].charAt(i  +  1);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  cs  =  searchChars[j].charAt(i  +  1);	  CharSequence    cs    =    searchChars[j].charAt(i);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
2	[BUG]  [BUGGY]  CharSequence  cs  =  searchChars[j].charAt(j);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  cs  =  searchChars[j].charAt(j);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  cs  =  searchChars[j].charAt(j);	  CharSequence    cs    =    searchChars[j].charAt(i);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
3	[BUG]  [BUGGY]  CharSequence  cs  =  searchChars[j].charAt(j  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  cs  =  searchChars[j].charAt(j  +  1);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  cs  =  searchChars[j].charAt(j  +  1);	  CharSequence    cs    =    searchChars[j].charAt(i);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
4	[BUG]  [BUGGY]  char[]  searchChars  =  cs.toCharArray(i);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char[]  searchChars  =  cs.toCharArray(i);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char[]  searchChars  =  cs.toCharArray(i);	  char[]    searchChars    =    cs.toCharArray(searchLen);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
5	[BUG]  [BUGGY]  char  ch  =  cs.charAt(j).charAt(i);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  cs.charAt(j).charAt(i);  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  cs.charAt(j).charAt(i);	  char    ch    =    cs.charAt(j).charAt(j);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
6	[BUG]  [BUGGY]  char  ch  =  cs.charAt(i).charAt(j);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  cs.charAt(i).charAt(j);  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  cs.charAt(i).charAt(j);	  char    ch    =    cs.charAt(j).charAt(j);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
7	[BUG]  [BUGGY]  char  ch  =  cs.charAt(j).charAt(j  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  cs.charAt(j).charAt(j  +  1);  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  cs.charAt(j).charAt(j  +  1);	  char    ch    =    cs.charAt(j).charAt(j);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
8	[BUG]  [BUGGY]  char  ch  =  searchChars[j].charAt(j)+  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  searchChars[j].charAt(j)+  1;  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  searchChars[j].charAt(j)+  1;	  char    ch    =    searchChars[j].charAt(j    +    1);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
9	[BUG]  [BUGGY]  char  ch  =  cs.charAt(j,  i  +  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  cs.charAt(j,  i  +  1);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  cs.charAt(j,  i  +  1);	  char    ch    =    cs.charAt(j,    i);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
10	[BUG]  [BUGGY]  char  ch  =  cs.charAt(i,  j);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  cs.charAt(i,  j);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  cs.charAt(i,  j);	  char    ch    =    cs.charAt(j,    i);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
11	[BUG]  [BUGGY]  char  ch  =  cs.charAt(j,  j  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  cs.charAt(j,  j  +  1);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  cs.charAt(j,  j  +  1);	  char    ch    =    cs.charAt(j,    i);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
12	[BUG]  [BUGGY]  char  ch  =  cs.charAt(j,  0);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  cs.charAt(j,  0);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  cs.charAt(j,  0);	  char    ch    =    cs.charAt(j,    i);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
13	[BUG]  [BUGGY]  CharSequence  str  =  cs.charAt(j  +  2);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  str  =  cs.charAt(j  +  2);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  str  =  cs.charAt(j  +  2);	  CharSequence    str    =    cs.charAt(j    +    1);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
14	[BUG]  [BUGGY]  CharSequence  str  =  cs.charAt(j  +  3);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  str  =  cs.charAt(j  +  3);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  str  =  cs.charAt(j  +  3);	  CharSequence    str    =    cs.charAt(j    +    1);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
15	[BUG]  [BUGGY]  CharSequence  str  =  cs.charAt(i  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  str  =  cs.charAt(i  +  1);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  str  =  cs.charAt(i  +  1);	  CharSequence    str    =    cs.charAt(j    +    1);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
16	[BUG]  [BUGGY]  if(ch  ==  searchChars[j]  ||  searchChars[j]  ==  cs[j])  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  if(ch  ==  searchChars[j]  ||  searchChars[j]  ==  cs[j])  {  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	if(ch  ==  searchChars[j]  ||  searchChars[j]  ==  cs[j])  {	  if(ch    ==    searchChars[j]    ||    searchChars[j]    ==    ch)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
17	[BUG]  [BUGGY]  if(ch  ==  searchChars[i]  ||  searchChars[j]  ==  ch)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  if(ch  ==  searchChars[i]  ||  searchChars[j]  ==  ch)  {  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	if(ch  ==  searchChars[i]  ||  searchChars[j]  ==  ch)  {	  if(ch    ==    searchChars[j]    ||    searchChars[j]    ==    ch)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
18	[BUG]  [BUGGY]  if(ch  ==  searchChars[j]  ||  searchChars[j]!=  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  if(ch  ==  searchChars[j]  ||  searchChars[j]!=  0)  {  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	if(ch  ==  searchChars[j]  ||  searchChars[j]!=  0)  {	  if(ch    ==    searchChars[j]    ||    searchChars[j]    ==    ch)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
19	[BUG]  [BUGGY]  char  ch  =  searchChars[j].trim().charAt(j);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  searchChars[j].trim().charAt(j);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  searchChars[j].trim().charAt(j);	  char    ch    =    searchChars[j].trim();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
20	[BUG]  [BUGGY]  char  ch  =  searchChars[j].trim().charAt(0);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  searchChars[j].trim().charAt(0);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  searchChars[j].trim().charAt(0);	  char    ch    =    searchChars[j].trim();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
21	[BUG]  [BUGGY]  char  ch  =  searchChars[j].trim().charAt(i);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  searchChars[j].trim().charAt(i);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  searchChars[j].trim().charAt(i);	  char    ch    =    searchChars[j].trim();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
22	[BUG]  [BUGGY]  char  ch  =  searchChars.charAt(j  +  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  searchChars.charAt(j  +  1);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  searchChars.charAt(j  +  1);	  char    ch    =    searchChars.charAt(j);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
23	[BUG]  [BUGGY]  char  ch  =  searchChars.charAt(i);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  searchChars.charAt(i);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  searchChars.charAt(i);	  char    ch    =    searchChars.charAt(j);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
24	[BUG]  [BUGGY]  char  ch  =  cs.charAt(i);  for(int  j  =  0;  j  <  searchLen;  j++)  {  ch  =  ch.charAt(j);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  cs.charAt(i);  for(int  j  =  0;  j  <  searchLen;  j++)  {  ch  =  ch.charAt(j);  }  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  cs.charAt(i);  for(int  j  =  0;  j  <  searchLen;  j++)  {  ch  =  ch.charAt(j);  }	  char    ch    =    cs.charAt(j);    for(int    j    =    0;    j    <    searchLen;    j++)    {    ch    =    ch.charAt(j);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
25	[BUG]  [BUGGY]  CharSequence  ch  =  cs.charAt(i);  for(int  j  =  0;  j  <  searchLen;  j++)  {  ch  =  ch.charAt(j);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  ch  =  cs.charAt(i);  for(int  j  =  0;  j  <  searchLen;  j++)  {  ch  =  ch.charAt(j);  }  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  ch  =  cs.charAt(i);  for(int  j  =  0;  j  <  searchLen;  j++)  {  ch  =  ch.charAt(j);  }	  char    ch    =    cs.charAt(j);    for(int    j    =    0;    j    <    searchLen;    j++)    {    ch    =    ch.charAt(j);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
26	[BUG]  [BUGGY]  char  ch  =  cs.charAt(i);  for(int  i  =  0;  i  <  searchLen;  i++)  {  ch  =  ch.charAt(i);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  cs.charAt(i);  for(int  i  =  0;  i  <  searchLen;  i++)  {  ch  =  ch.charAt(i);  }  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  cs.charAt(i);  for(int  i  =  0;  i  <  searchLen;  i++)  {  ch  =  ch.charAt(i);  }	  char    ch    =    cs.charAt(j);    for(int    i    =    0;    i    <    searchLen;    i++)    {    ch    =    ch.charAt(i);    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
27	[BUG]  [BUGGY]  if(ch!=  searchChars[j]  ||  searchChars[j].equals(ch))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  if(ch!=  searchChars[j]  ||  searchChars[j].equals(ch))  {  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	if(ch!=  searchChars[j]  ||  searchChars[j].equals(ch))  {	  if(searchChars[j]!=    ch    ||    searchChars[j].equals(ch))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
28	[BUG]  [BUGGY]  if(searchChars[j]!=  ch  ||  searchChars[j].startsWith(ch))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  if(searchChars[j]!=  ch  ||  searchChars[j].startsWith(ch))  {  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	if(searchChars[j]!=  ch  ||  searchChars[j].startsWith(ch))  {	  if(searchChars[j]!=    ch    ||    searchChars[j].equals(ch))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
29	[BUG]  [BUGGY]  char  ch  =  searchChars[j]  *  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  searchChars[j]  *  1;  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  searchChars[j]  *  1;	  char    ch    =    searchChars[j]    +    1;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
30	[BUG]  [BUGGY]  char  ch  =  searchChars[j]  +  3;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  searchChars[j]  +  3;  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  searchChars[j]  +  3;	  char    ch    =    searchChars[j]    +    1;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
31	[BUG]  [BUGGY]  CharSequence  str  =  cs.charAt(j,  i  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  str  =  cs.charAt(j,  i  +  1);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  str  =  cs.charAt(j,  i  +  1);	  CharSequence    str    =    cs.charAt(j,    i);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
32	[BUG]  [BUGGY]  CharSequence  str  =  cs.charAt(i,  j);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  str  =  cs.charAt(i,  j);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  str  =  cs.charAt(i,  j);	  CharSequence    str    =    cs.charAt(j,    i);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
33	[BUG]  [BUGGY]  CharSequence  str  =  cs.charAt(j,  0);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  str  =  cs.charAt(j,  0);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  str  =  cs.charAt(j,  0);	  CharSequence    str    =    cs.charAt(j,    i);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
34	[BUG]  [BUGGY]  CharSequence  str  =  cs.charAt(j,  j  +  1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  str  =  cs.charAt(j,  j  +  1);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  str  =  cs.charAt(j,  j  +  1);	  CharSequence    str    =    cs.charAt(j,    i);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
35	[BUG]  [BUGGY]  char  cs  =  searchChars.charAt(j);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  cs  =  searchChars.charAt(j);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  cs  =  searchChars.charAt(j);	  CharSequence    cs    =    searchChars.charAt(i);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
36	[BUG]  [BUGGY]  char  ch  =  searchChars[j].charAt(i).charAt(j  +  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  searchChars[j].charAt(i).charAt(j  +  1);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  searchChars[j].charAt(i).charAt(j  +  1);	  char    ch    =    searchChars[j].charAt(i).charAt(j);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
37	[BUG]  [BUGGY]  char  ch  =  searchChars[j].charAt(i).charAt(j];  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  searchChars[j].charAt(i).charAt(j];  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  searchChars[j].charAt(i).charAt(j];	  char    ch    =    searchChars[j].charAt(i).charAt(j);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
38	[BUG]  [BUGGY]  char  ch  =  searchChars[j].charAt(j]);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  searchChars[j].charAt(j]);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  searchChars[j].charAt(j]);	  char    ch    =    searchChars[j].charAt(j);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
39	[BUG]  [BUGGY]  char  ch  =  searchChars[j]  +  csLen;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  searchChars[j]  +  csLen;  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  searchChars[j]  +  csLen;	  char    ch    =    searchChars[j]    +    i;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
40	[BUG]  [BUGGY]  char  ch  =  searchChars[j]  +  cs.charAt(j);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  searchChars[j]  +  cs.charAt(j);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  searchChars[j]  +  cs.charAt(j);	  char    ch    =    searchChars[j]    +    i;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
41	[BUG]  [BUGGY]  char  ch  =  searchChars[j]  +  i  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  searchChars[j]  +  i  +  1;  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  searchChars[j]  +  i  +  1;	  char    ch    =    searchChars[j]    +    i;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
42	[BUG]  [BUGGY]  char  ch  =  searchChars[j]  +  cs.length;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  searchChars[j]  +  cs.length;  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  searchChars[j]  +  cs.length;	  char    ch    =    searchChars[j]    +    i;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
43	[BUG]  [BUGGY]  if(searchChars[j]  ==  ch  ||  searchChars[j].indexOf(ch)  >=  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  if(searchChars[j]  ==  ch  ||  searchChars[j].indexOf(ch)  >=  0)  {  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	if(searchChars[j]  ==  ch  ||  searchChars[j].indexOf(ch)  >=  0)  {	  if(searchChars[j]    ==    ch    ||    searchChars[j].indexOf(ch)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
44	[BUG]  [BUGGY]  if(searchChars[j]  ==  ch  ||  searchChars[j].indexOf(ch)  ==  0)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  if(searchChars[j]  ==  ch  ||  searchChars[j].indexOf(ch)  ==  0)  {  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	if(searchChars[j]  ==  ch  ||  searchChars[j].indexOf(ch)  ==  0)  {	  if(searchChars[j]    ==    ch    ||    searchChars[j].indexOf(ch)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
45	[BUG]  [BUGGY]  if(searchChars[j]  ==  cs[j]  ||  searchChars[j]  ==  ch)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  if(searchChars[j]  ==  cs[j]  ||  searchChars[j]  ==  ch)  {  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	if(searchChars[j]  ==  cs[j]  ||  searchChars[j]  ==  ch)  {	  if(searchChars[j]    ==    ch    ||    searchChars[j]    ==    cs[j])    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
46	[BUG]  [BUGGY]  if(searchChars[j]  ==  ch  ||  searchChars[j]!=  cs[j])  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  if(searchChars[j]  ==  ch  ||  searchChars[j]!=  cs[j])  {  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	if(searchChars[j]  ==  ch  ||  searchChars[j]!=  cs[j])  {	  if(searchChars[j]    ==    ch    ||    searchChars[j]    ==    cs[j])    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
47	[BUG]  [BUGGY]  char[]  searchChars  =  cs.toCharArray(searchChars,  j);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char[]  searchChars  =  cs.toCharArray(searchChars,  j);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char[]  searchChars  =  cs.toCharArray(searchChars,  j);	  char[]    searchChars    =    cs.toCharArray(searchChars);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
48	[BUG]  [BUGGY]  char[]  searchChars  =  cs.toCharArray(searchChars,  i);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char[]  searchChars  =  cs.toCharArray(searchChars,  i);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char[]  searchChars  =  cs.toCharArray(searchChars,  i);	  char[]    searchChars    =    cs.toCharArray(searchChars);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
49	[BUG]  [BUGGY]  CharSequence  ch  =  searchChars.charAt(j  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  ch  =  searchChars.charAt(j  +  1);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  ch  =  searchChars.charAt(j  +  1);	  CharSequence    ch    =    searchChars.charAt(j);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
50	[BUG]  [BUGGY]  char[]  searchChars  =  cs.toCharArray(j,  searchLen);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char[]  searchChars  =  cs.toCharArray(j,  searchLen);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char[]  searchChars  =  cs.toCharArray(j,  searchLen);	  char[]    searchChars    =    cs.toCharArray(j);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
51	[BUG]  [BUGGY]  char[]  searchChars  =  cs.toCharArray(j  +  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char[]  searchChars  =  cs.toCharArray(j  +  1);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char[]  searchChars  =  cs.toCharArray(j  +  1);	  char[]    searchChars    =    cs.toCharArray(j);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
52	[BUG]  [BUGGY]  if(ch  ==  searchChars[j]  ||  searchChars[j]  ==  PAD_LIMIT)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  if(ch  ==  searchChars[j]  ||  searchChars[j]  ==  PAD_LIMIT)  {  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	if(ch  ==  searchChars[j]  ||  searchChars[j]  ==  PAD_LIMIT)  {	  if(searchChars[j]    ==    ch    ||    searchChars[j]    ==    PAD_LIMIT)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
53	[BUG]  [BUGGY]  if(searchChars[j]  ==  ch  ||  searchChars[j]  ==  EMPTY)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  if(searchChars[j]  ==  ch  ||  searchChars[j]  ==  EMPTY)  {  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	if(searchChars[j]  ==  ch  ||  searchChars[j]  ==  EMPTY)  {	  if(searchChars[j]    ==    ch    ||    searchChars[j]    ==    PAD_LIMIT)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
54	[BUG]  [BUGGY]  char  ch  =  cs.charAt(j  +  2);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  cs.charAt(j  +  2);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  cs.charAt(j  +  2);	  char    ch    =    cs.charAt(j    +    1);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
55	[BUG]  [BUGGY]  char  ch  =  cs.charAt(j  +  3);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  cs.charAt(j  +  3);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  cs.charAt(j  +  3);	  char    ch    =    cs.charAt(j    +    1);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
56	[BUG]  [BUGGY]  CharSequence  cs  =  chars.charAt(j);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  cs  =  chars.charAt(j);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  cs  =  chars.charAt(j);	  CharSequence    cs    =    chars.charAt(i);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
57	[BUG]  [BUGGY]  char  cs  =  cs.charAt(i);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  cs  =  cs.charAt(i);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  cs  =  cs.charAt(i);	  CharSequence    cs    =    chars.charAt(i);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
58	[BUG]  [BUGGY]  if(searchChars[j]  ==  ch  ||  searchChars[j].charAt(j))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  if(searchChars[j]  ==  ch  ||  searchChars[j].charAt(j))  {  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	if(searchChars[j]  ==  ch  ||  searchChars[j].charAt(j))  {	  if(searchChars[j]    ==    ch    ||    searchChars[j].startsWith(ch))    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
59	[BUG]  [BUGGY]  CharSequence  cs  =  searchChars.charAt(j  +  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  cs  =  searchChars.charAt(j  +  1);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  cs  =  searchChars.charAt(j  +  1);	  CharSequence    cs    =    searchChars.charAt(j);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
60	[BUG]  [BUGGY]  int  i  =  indexOfAny(cs,  searchChars[i]);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  int  i  =  indexOfAny(cs,  searchChars[i]);  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	int  i  =  indexOfAny(cs,  searchChars[i]);	  int    i    =    indexOfAny(ch,    searchChars[i]);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
61	[BUG]  [BUGGY]  int  i  =  indexOfAny(ch,  searchChars[j]);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  int  i  =  indexOfAny(ch,  searchChars[j]);  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	int  i  =  indexOfAny(ch,  searchChars[j]);	  int    i    =    indexOfAny(ch,    searchChars[i]);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
62	[BUG]  [BUGGY]  char  i  =  indexOfAny(ch,  searchChars[i]);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  i  =  indexOfAny(ch,  searchChars[i]);  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  i  =  indexOfAny(ch,  searchChars[i]);	  int    i    =    indexOfAny(ch,    searchChars[i]);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
63	[BUG]  [BUGGY]  int  i  =  indexOf(ch,  searchChars[j]);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  int  i  =  indexOf(ch,  searchChars[j]);  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	int  i  =  indexOf(ch,  searchChars[j]);	  int    i    =    indexOfAny(ch,    searchChars[i]);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
64	[BUG]  [BUGGY]  CharSequence  ch  =  cs.charAt(i++);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  ch  =  cs.charAt(i++);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  ch  =  cs.charAt(i++);	  CharSequence    ch    =    cs.charAt(j++);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
65	[BUG]  [BUGGY]  CharSequence  ch  =  cs.charAt(j,  i  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  ch  =  cs.charAt(j,  i  +  1);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  ch  =  cs.charAt(j,  i  +  1);	  CharSequence    ch    =    cs.charAt(j,    i);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
66	[BUG]  [BUGGY]  CharSequence  ch  =  cs.charAt(j,  j  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  ch  =  cs.charAt(j,  j  +  1);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  ch  =  cs.charAt(j,  j  +  1);	  CharSequence    ch    =    cs.charAt(j,    i);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
67	[BUG]  [BUGGY]  CharSequence  ch  =  cs.charAt(j,  i  +  searchLen);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  ch  =  cs.charAt(j,  i  +  searchLen);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  ch  =  cs.charAt(j,  i  +  searchLen);	  CharSequence    ch    =    cs.charAt(j,    i);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
68	[BUG]  [BUGGY]  cs  =  cs.charAt(i);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  cs  =  cs.charAt(i);  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	cs  =  cs.charAt(i);	  cs    =    cs.charAt(j);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
69	[BUG]  [BUGGY]  cs  =  cs.charAt(j  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  cs  =  cs.charAt(j  +  1);  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	cs  =  cs.charAt(j  +  1);	  cs    =    cs.charAt(j);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
70	[BUG]  [BUGGY]  cs  =  cs.charAt(j,  i);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  cs  =  cs.charAt(j,  i);  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	cs  =  cs.charAt(j,  i);	  cs    =    cs.charAt(j);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
71	[BUG]  [BUGGY]  char  cs  =  cs.charAt(j  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  cs  =  cs.charAt(j  +  1);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  cs  =  cs.charAt(j  +  1);	  char    cs    =    cs.charAt(j);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
72	[BUG]  [BUGGY]  if(searchChars[j]!=  ch  ||  searchChars[j]  ==  PAD_LIMIT)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  if(searchChars[j]!=  ch  ||  searchChars[j]  ==  PAD_LIMIT)  {  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	if(searchChars[j]!=  ch  ||  searchChars[j]  ==  PAD_LIMIT)  {	  if(searchChars[j]!=    ch    ||    searchChars[j]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
73	[BUG]  [BUGGY]  CharSequence  cs  =  cs.charAt(i  +  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  cs  =  cs.charAt(i  +  1);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  cs  =  cs.charAt(i  +  1);	  CharSequence    cs    =    cs.charAt(j    +    1);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
74	[BUG]  [BUGGY]  CharSequence  cs  =  cs.charAt(j  +  2);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  cs  =  cs.charAt(j  +  2);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  cs  =  cs.charAt(j  +  2);	  CharSequence    cs    =    cs.charAt(j    +    1);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
75	[BUG]  [BUGGY]  if(searchChars[j]  ==  ch  ||  searchChars[j].charAt(j)!=  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  if(searchChars[j]  ==  ch  ||  searchChars[j].charAt(j)!=  0)  {  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	if(searchChars[j]  ==  ch  ||  searchChars[j].charAt(j)!=  0)  {	  if(searchChars[j]    ==    ch    ||    searchChars[j].indexOf(ch)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
76	[BUG]  [BUGGY]  if(searchChars[j]!=  ch  ||  searchChars[j]  ==  null)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  if(searchChars[j]!=  ch  ||  searchChars[j]  ==  null)  {  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	if(searchChars[j]!=  ch  ||  searchChars[j]  ==  null)  {	  if(searchChars[j]!=    ch    ||    searchChars[j]!=    null)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
77	[BUG]  [BUGGY]  if(searchChars[j]  ==  ch  ||  searchChars[j]!=  null)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  if(searchChars[j]  ==  ch  ||  searchChars[j]!=  null)  {  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	if(searchChars[j]  ==  ch  ||  searchChars[j]!=  null)  {	  if(searchChars[j]!=    ch    ||    searchChars[j]!=    null)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
78	[BUG]  [BUGGY]  if(ch!=  searchChars[j]  ||  searchChars[j]!=  null)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  if(ch!=  searchChars[j]  ||  searchChars[j]!=  null)  {  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	if(ch!=  searchChars[j]  ||  searchChars[j]!=  null)  {	  if(searchChars[j]!=    ch    ||    searchChars[j]!=    null)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
79	[BUG]  [BUGGY]  if(j  ==  searchChars[j]  ||  searchChars[j].equals(ch))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  if(j  ==  searchChars[j]  ||  searchChars[j].equals(ch))  {  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	if(j  ==  searchChars[j]  ||  searchChars[j].equals(ch))  {	  if(ch    ==    searchChars[j]    ||    searchChars[j].equals(ch))    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
80	[BUG]  [BUGGY]  CharSequence  ch  =  cs.charAt(i,  j  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  ch  =  cs.charAt(i,  j  +  1);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  ch  =  cs.charAt(i,  j  +  1);	  CharSequence    ch    =    cs.charAt(i,    j);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
81	[BUG]  [BUGGY]  if(ch  ==  searchChars[j]  ||  searchChars[j]!=  PAD_LIMIT)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  if(ch  ==  searchChars[j]  ||  searchChars[j]!=  PAD_LIMIT)  {  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	if(ch  ==  searchChars[j]  ||  searchChars[j]!=  PAD_LIMIT)  {	  if(searchChars[j]    ==    ch    ||    searchChars[j]!=    PAD_LIMIT)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
82	[BUG]  [BUGGY]  if(ch  ==  searchChars[j]  ||  searchChars[j]  ==  null)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  if(ch  ==  searchChars[j]  ||  searchChars[j]  ==  null)  {  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	if(ch  ==  searchChars[j]  ||  searchChars[j]  ==  null)  {	  if(searchChars[j]    ==    ch    ||    searchChars[j]    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
83	[BUG]  [BUGGY]  CharSequence  str  =  cs.charAt(j  -  2);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  str  =  cs.charAt(j  -  2);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  str  =  cs.charAt(j  -  2);	  CharSequence    str    =    cs.charAt(j    -    1);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
84	[BUG]  [BUGGY]  CharSequence  str  =  cs.charAt(i  -  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  str  =  cs.charAt(i  -  1);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  str  =  cs.charAt(i  -  1);	  CharSequence    str    =    cs.charAt(j    -    1);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
85	[BUG]  [BUGGY]  char  ch  =  cs.charAt(i++);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  cs.charAt(i++);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  cs.charAt(i++);	  char    ch    =    cs.charAt(j++);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
86	[BUG]  [BUGGY]  int  len  =  searchChars.length  -  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  int  len  =  searchChars.length  -  1;  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	int  len  =  searchChars.length  -  1;	  int    len    =    searchChars.length();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
87	[BUG]  [BUGGY]  int  len  =  ch.length();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  int  len  =  ch.length();  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	int  len  =  ch.length();	  int    len    =    searchChars.length();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
88	[BUG]  [BUGGY]  int  len  =  searchChars.length  -  2;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  int  len  =  searchChars.length  -  2;  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	int  len  =  searchChars.length  -  2;	  int    len    =    searchChars.length();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
89	[BUG]  [BUGGY]  if(ch  ==  searchChars[i]  ||  searchChars[j]  ==  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  if(ch  ==  searchChars[i]  ||  searchChars[j]  ==  0)  {  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	if(ch  ==  searchChars[i]  ||  searchChars[j]  ==  0)  {	  if(ch    ==    searchChars[j]    ||    searchChars[j]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
90	[BUG]  [BUGGY]  CharSequence  str  =  searchChars.charAt(j);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  str  =  searchChars.charAt(j);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  str  =  searchChars.charAt(j);	  CharSequence    str    =    cs.charAt(i);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
91	[BUG]  [BUGGY]  CharSequence  str  =  searchChars.charAt(i);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  str  =  searchChars.charAt(i);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  str  =  searchChars.charAt(i);	  CharSequence    str    =    cs.charAt(i);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
92	[BUG]  [BUGGY]  char  cs  =  searchChars.charAt(i);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  cs  =  searchChars.charAt(i);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  cs  =  searchChars.charAt(i);	  CharSequence    cs    =    searchChars.charAt(i);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
93	[BUG]  [BUGGY]  char  ch  =  searchChars[j]  *  i;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  searchChars[j]  *  i;  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  searchChars[j]  *  i;	  char    ch    =    searchChars[j]    +    i;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
94	[BUG]  [BUGGY]  CharSequence  ch  =  cs.charAt(i,  j  +  searchLen);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  ch  =  cs.charAt(i,  j  +  searchLen);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  ch  =  cs.charAt(i,  j  +  searchLen);	  CharSequence    ch    =    cs.charAt(i,    j);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
95	[BUG]  [BUGGY]  if(searchChars[j]  ==  ch  ||  searchChars[j].length()  ==  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  if(searchChars[j]  ==  ch  ||  searchChars[j].length()  ==  0)  {  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	if(searchChars[j]  ==  ch  ||  searchChars[j].length()  ==  0)  {	  if(searchChars[j]    ==    ch    ||    searchChars[j]    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
96	[BUG]  [BUGGY]  int  i  =  indexOfAny(searchChars[i],  ch);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  int  i  =  indexOfAny(searchChars[i],  ch);  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	int  i  =  indexOfAny(searchChars[i],  ch);	  int    i    =    indexOfAny(ch,    searchChars[i]);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
97	[BUG]  [BUGGY]  int  i  =  indexOf(ch,  searchChars[i]);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  int  i  =  indexOf(ch,  searchChars[i]);  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	int  i  =  indexOf(ch,  searchChars[i]);	  int    i    =    indexOfAny(ch,    searchChars[i]);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
98	[BUG]  [BUGGY]  if(searchChars[j]!=  ch  ||  searchChars[j]  ==  cs[j])  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  if(searchChars[j]!=  ch  ||  searchChars[j]  ==  cs[j])  {  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	if(searchChars[j]!=  ch  ||  searchChars[j]  ==  cs[j])  {	  if(searchChars[j]    ==    ch    ||    searchChars[j]    ==    cs[j])    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
99	[BUG]  [BUGGY]  if(searchChars  ==  null)  {  char  ch  =  cs.charAt(j);  for(int  j  =  0;  j  <  searchLen;  j++)  {  ch  =  ch.charAt(j);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  if(searchChars  ==  null)  {  char  ch  =  cs.charAt(j);  for(int  j  =  0;  j  <  searchLen;  j++)  {  ch  =  ch.charAt(j);  }  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	if(searchChars  ==  null)  {  char  ch  =  cs.charAt(j);  for(int  j  =  0;  j  <  searchLen;  j++)  {  ch  =  ch.charAt(j);  }	  char    ch    =    cs.charAt(j);    for(int    j    =    0;    j    <    searchLen;    j++)    {    ch    =    ch.charAt(j);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
100	[BUG]  [BUGGY]  if(searchChars!=  null)  {  char  ch  =  cs.charAt(j);  for(int  j  =  0;  j  <  searchLen;  j++)  {  ch  =  ch.charAt(j);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  if(searchChars!=  null)  {  char  ch  =  cs.charAt(j);  for(int  j  =  0;  j  <  searchLen;  j++)  {  ch  =  ch.charAt(j);  }  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	if(searchChars!=  null)  {  char  ch  =  cs.charAt(j);  for(int  j  =  0;  j  <  searchLen;  j++)  {  ch  =  ch.charAt(j);  }	  char    ch    =    cs.charAt(j);    for(int    j    =    0;    j    <    searchLen;    j++)    {    ch    =    ch.charAt(j);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
101	[BUG]  [BUGGY]  int  len  =  searchChars.length()  +  j;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  int  len  =  searchChars.length()  +  j;  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	int  len  =  searchChars.length()  +  j;	  int    len    =    searchChars.length();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
102	[BUG]  [BUGGY]  int  len  =  searchChars.length;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  int  len  =  searchChars.length;  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	int  len  =  searchChars.length;	  int    len    =    searchChars.length();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
103	[BUG]  [BUGGY]  CharSequence  str  =  cs.charAt(j,  i  +  searchLen);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  str  =  cs.charAt(j,  i  +  searchLen);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  str  =  cs.charAt(j,  i  +  searchLen);	  CharSequence    str    =    cs.charAt(j,    i);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
104	[BUG]  [BUGGY]  if(searchChars[j]  ==  ch  ||  searchChars[j].charAt(j)!=  '-')  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  if(searchChars[j]  ==  ch  ||  searchChars[j].charAt(j)!=  '-')  {  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	if(searchChars[j]  ==  ch  ||  searchChars[j].charAt(j)!=  '-')  {	  if(searchChars[j]    ==    ch    ||    searchChars[j].startsWith(ch))    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
105	[BUG]  [BUGGY]  CharSequence  ch  =  searchChars.charAt(i);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  ch  =  searchChars.charAt(i);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  ch  =  searchChars.charAt(i);	  CharSequence    ch    =    searchChars.charAt(j);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
106	[BUG]  [BUGGY]  CharSequence  str  =  cs.charAt(j  -  1  +  ch);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  str  =  cs.charAt(j  -  1  +  ch);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  str  =  cs.charAt(j  -  1  +  ch);	  CharSequence    str    =    cs.charAt(j    -    1);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
107	[BUG]  [BUGGY]  char  ch  =  searchChars[j].trim(i);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  searchChars[j].trim(i);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  searchChars[j].trim(i);	  char    ch    =    searchChars[j].trim();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
108	[BUG]  [BUGGY]  char  ch  =  searchChars[j].trim()  +  i;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  searchChars[j].trim()  +  i;  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  searchChars[j].trim()  +  i;	  char    ch    =    searchChars[j].trim();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
109	[BUG]  [BUGGY]  if(searchChars[j]  ==  ch  ||  searchChars[j].charAt(j)  <  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  if(searchChars[j]  ==  ch  ||  searchChars[j].charAt(j)  <  0)  {  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	if(searchChars[j]  ==  ch  ||  searchChars[j].charAt(j)  <  0)  {	  if(searchChars[j]    ==    ch    ||    searchChars[j].indexOf(ch)    <    0)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
110	[BUG]  [BUGGY]  if(searchChars[j]!=  ch  &&  searchChars[j].equals(ch))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  if(searchChars[j]!=  ch  &&  searchChars[j].equals(ch))  {  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	if(searchChars[j]!=  ch  &&  searchChars[j].equals(ch))  {	  if(searchChars[j]!=    ch    ||    searchChars[j].equals(ch))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
111	[BUG]  [BUGGY]  if(searchChars[j]!=  ch  ||  searchChars[j].indexOf(ch)  ==  0)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  if(searchChars[j]!=  ch  ||  searchChars[j].indexOf(ch)  ==  0)  {  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	if(searchChars[j]!=  ch  ||  searchChars[j].indexOf(ch)  ==  0)  {	  if(searchChars[j]!=    ch    ||    searchChars[j].equals(ch))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
112	[BUG]  [BUGGY]  char  ch  =  searchChars[j].charAt(j++);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  searchChars[j].charAt(j++);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  searchChars[j].charAt(j++);	  char    ch    =    searchChars[j].charAt(j    +    1);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
113	[BUG]  [BUGGY]  char  ch  =  cs.charAt(j,  i  +  searchLen);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  cs.charAt(j,  i  +  searchLen);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  cs.charAt(j,  i  +  searchLen);	  char    ch    =    cs.charAt(j,    i);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
114	[BUG]  [BUGGY]  char  ch  =  cs.charAt(j,  j);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  cs.charAt(j,  j);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  cs.charAt(j,  j);	  char    ch    =    cs.charAt(j,    i);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
115	[BUG]  [BUGGY]  char[]  searchChars  =  cs.toCharArray(searchLen,  j);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char[]  searchChars  =  cs.toCharArray(searchLen,  j);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char[]  searchChars  =  cs.toCharArray(searchLen,  j);	  char[]    searchChars    =    cs.toCharArray(searchLen);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
116	[BUG]  [BUGGY]  char  ch  =  searchChars[j].charAt(i).charAt(j++);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  searchChars[j].charAt(i).charAt(j++);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  searchChars[j].charAt(i).charAt(j++);	  char    ch    =    searchChars[j].charAt(i).charAt(j);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
117	[BUG]  [BUGGY]  CharSequence  ch  =  cs.charAt(j,  0);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  ch  =  cs.charAt(j,  0);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  ch  =  cs.charAt(j,  0);	  CharSequence    ch    =    cs.charAt(j,    i);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
118	[BUG]  [BUGGY]  int  i  =  indexOfAny(searchChars,  cs[i]);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  int  i  =  indexOfAny(searchChars,  cs[i]);  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	int  i  =  indexOfAny(searchChars,  cs[i]);	  int    i    =    indexOfAny(ch,    searchChars[i]);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
119	[BUG]  [BUGGY]  int  i  =  indexOfAny(searchChars,  j);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  int  i  =  indexOfAny(searchChars,  j);  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	int  i  =  indexOfAny(searchChars,  j);	  int    i    =    indexOfAny(ch,    searchChars[i]);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
120	[BUG]  [BUGGY]  CharSequence  str  =  cs.charAt(j,  i  +  1,  searchCharsLen);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  str  =  cs.charAt(j,  i  +  1,  searchCharsLen);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  str  =  cs.charAt(j,  i  +  1,  searchCharsLen);	  CharSequence    str    =    cs.charAt(j,    i);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
121	[BUG]  [BUGGY]  CharSequence  cs  =  searchChars[j].charAt(i  +  1,  ch);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  cs  =  searchChars[j].charAt(i  +  1,  ch);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  cs  =  searchChars[j].charAt(i  +  1,  ch);	  CharSequence    cs    =    searchChars[j].charAt(i);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
122	[BUG]  [BUGGY]  int  len  =  cs.length();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  int  len  =  cs.length();  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	int  len  =  cs.length();	  int    len    =    searchChars.length();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
123	[BUG]  [BUGGY]  char  ch  =  searchChars[j]  &  i;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  searchChars[j]  &  i;  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  searchChars[j]  &  i;	  char    ch    =    searchChars[j]    +    i;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
124	[BUG]  [BUGGY]  char[]  searchChars  =  cs.toCharArray(j,  i);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char[]  searchChars  =  cs.toCharArray(j,  i);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char[]  searchChars  =  cs.toCharArray(j,  i);	  char[]    searchChars    =    cs.toCharArray(j);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
125	[BUG]  [BUGGY]  if(ch  ==  searchChars[j]  ||  ch.equals(searchChars[j]))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  if(ch  ==  searchChars[j]  ||  ch.equals(searchChars[j]))  {  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	if(ch  ==  searchChars[j]  ||  ch.equals(searchChars[j]))  {	  if(ch    ==    searchChars[j]    ||    searchChars[j].equals(ch))    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
126	[BUG]  [BUGGY]  char  ch  =  cs.charAt(j  +  11);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  cs.charAt(j  +  11);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  cs.charAt(j  +  11);	  char    ch    =    cs.charAt(j    +    1);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
127	[BUG]  [BUGGY]  char  ch  =  cs.charAt(j  +  1,  searchLen);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  cs.charAt(j  +  1,  searchLen);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  cs.charAt(j  +  1,  searchLen);	  char    ch    =    cs.charAt(j    +    1);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
128	[BUG]  [BUGGY]  char  ch  =  cs.charAt(j].charAt(i);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  cs.charAt(j].charAt(i);  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  cs.charAt(j].charAt(i);	  char    ch    =    cs.charAt(j).charAt(j);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
129	[BUG]  [BUGGY]  CharSequence  ch  =  cs.charAt(i  +  1,  searchLen);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  ch  =  cs.charAt(i  +  1,  searchLen);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  ch  =  cs.charAt(i  +  1,  searchLen);	  CharSequence    ch    =    cs.charAt(i    +    1);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
130	[BUG]  [BUGGY]  CharSequence  ch  =  cs.charAt(j  +  11);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  ch  =  cs.charAt(j  +  11);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  ch  =  cs.charAt(j  +  11);	  CharSequence    ch    =    cs.charAt(j    +    1);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
131	[BUG]  [BUGGY]  if(searchChars[j]  ==  ch  ||  searchChars[j].equals(cs[j]))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  if(searchChars[j]  ==  ch  ||  searchChars[j].equals(cs[j]))  {  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	if(searchChars[j]  ==  ch  ||  searchChars[j].equals(cs[j]))  {	  if(searchChars[j]    ==    ch    ||    searchChars[j]    ==    cs[j])    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
132	[BUG]  [BUGGY]  CharSequence  cs  =  cs.charAt(j  +  1,  searchCharsLen);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  cs  =  cs.charAt(j  +  1,  searchCharsLen);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  cs  =  cs.charAt(j  +  1,  searchCharsLen);	  CharSequence    cs    =    cs.charAt(j    +    1);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
133	[BUG]  [BUGGY]  CharSequence  cs  =  cs.charAt(j  +  11);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  cs  =  cs.charAt(j  +  11);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  cs  =  cs.charAt(j  +  11);	  CharSequence    cs    =    cs.charAt(j    +    1);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
134	[BUG]  [BUGGY]  if(ch  ==  searchChars[j]  ||  ch  ==  'n'  ||  ch  ==  'r')  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  if(ch  ==  searchChars[j]  ||  ch  ==  'n'  ||  ch  ==  'r')  {  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	if(ch  ==  searchChars[j]  ||  ch  ==  'n'  ||  ch  ==  'r')  {	  if(ch    ==    searchChars[j]    ||    searchChars[j]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
135	[BUG]  [BUGGY]  if(ch  ==  searchChars[j]  ||  ch  ==  '0')  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  if(ch  ==  searchChars[j]  ||  ch  ==  '0')  {  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	if(ch  ==  searchChars[j]  ||  ch  ==  '0')  {	  if(ch    ==    searchChars[j]    ||    searchChars[j]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
136	[BUG]  [BUGGY]  cs  =  cs.charAt(j  +  1,  ch);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  cs  =  cs.charAt(j  +  1,  ch);  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	cs  =  cs.charAt(j  +  1,  ch);	  cs    =    cs.charAt(j);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
137	[BUG]  [BUGGY]  if(ch  ==  searchChars[j]  ||  ch  ==  EMPTY)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  if(ch  ==  searchChars[j]  ||  ch  ==  EMPTY)  {  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	if(ch  ==  searchChars[j]  ||  ch  ==  EMPTY)  {	  if(ch    ==    searchChars[j]    ||    searchChars[j]    ==    ch)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
138	[BUG]  [BUGGY]  if(ch  ==  searchChars[j]  ||  ch  ==  '/')  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  if(ch  ==  searchChars[j]  ||  ch  ==  '/')  {  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	if(ch  ==  searchChars[j]  ||  ch  ==  '/')  {	  if(ch    ==    searchChars[j]    ||    searchChars[j]    ==    ch)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
139	[BUG]  [BUGGY]  char  ch  =  searchChars[j].charAt(0);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  searchChars[j].charAt(0);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  searchChars[j].charAt(0);	  char    ch    =    searchChars[j].charAt(j);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
140	[BUG]  [BUGGY]  char  ch  =  searchChars[i].charAt(j);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  searchChars[i].charAt(j);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  searchChars[i].charAt(j);	  char    ch    =    searchChars[j].charAt(j);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
141	[BUG]  [BUGGY]  CharSequence  cs  =  cs.toCharArray(j);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  cs  =  cs.toCharArray(j);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  cs  =  cs.toCharArray(j);	  char[]    searchChars    =    cs.toCharArray(searchLen);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
142	[BUG]  [BUGGY]  if(searchChars[j].equals(ch)||  searchChars[j].equals(ch))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  if(searchChars[j].equals(ch)||  searchChars[j].equals(ch))  {  [BUGGY]        return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	if(searchChars[j].equals(ch)||  searchChars[j].equals(ch))  {	  if(searchChars[j]!=    ch    ||    searchChars[j].equals(ch))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
143	[BUG]  [BUGGY]  char  ch  =  cs.charAt(i  +  1,  j);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  char  ch  =  cs.charAt(i  +  1,  j);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	char  ch  =  cs.charAt(i  +  1,  j);	  char    ch    =    cs.charAt(i    +    1);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
144	[BUG]  [BUGGY]  CharSequence  str  =  cs.charAt(j  +  1,  searchCharsLen);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  str  =  cs.charAt(j  +  1,  searchCharsLen);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  str  =  cs.charAt(j  +  1,  searchCharsLen);	  CharSequence    str    =    cs.charAt(j    +    1);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
145	[BUG]  [BUGGY]  CharSequence  str  =  cs.charAt(j  +  1,  searchLen);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  str  =  cs.charAt(j  +  1,  searchLen);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  str  =  cs.charAt(j  +  1,  searchLen);	  CharSequence    str    =    cs.charAt(j    +    1);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
146	[BUG]  [BUGGY]  CharSequence  str  =  cs.charAt(j  +  11);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  str  =  cs.charAt(j  +  11);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  str  =  cs.charAt(j  +  11);	  CharSequence    str    =    cs.charAt(j    +    1);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
147	[BUG]  [BUGGY]  CharSequence  ch  =  cs.charAt(j,  i  +  1,  searchChars.length);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  int  indexOfAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  INDEX_NOT_FOUND;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {      [BUGGY]  CharSequence  ch  =  cs.charAt(j,  i  +  1,  searchChars.length);  [BUGGY]      if  (searchChars[j]  ==  ch)  {  return  i;  }  }  }  return  INDEX_NOT_FOUND;  }  [CLASS]  StringUtils  [METHOD]  indexOfAny  [RETURN_TYPE]  int  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLen  end  endLimit  found  i  index  j  len  max  ordinal  searchLen  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.31622776601683794	1380	1380	10	replace	CharSequence  ch  =  cs.charAt(j,  i  +  1,  searchChars.length);	  CharSequence    ch    =    cs.charAt(j,    i);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
