bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(cs  ==  null  ||!isEmpty(searchChars)&&  ArrayUtils.isEmpty(searchChars))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(cs  ==  null  ||!isEmpty(searchChars)&&  ArrayUtils.isEmpty(searchChars))  {  [BUGGY]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(cs  ==  null  ||!isEmpty(searchChars)&&  ArrayUtils.isEmpty(searchChars))  {	  if(searchChars    ==    null    ||!isEmpty(cs)&&    ArrayUtils.isEmpty(searchChars))    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
2	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  0  ||!isEmpty(cs)&&  ArrayUtils.isEmpty(searchChars))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  0  ||!isEmpty(cs)&&  ArrayUtils.isEmpty(searchChars))  {  [BUGGY]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null  ||  searchChars.length  <  0  ||!isEmpty(cs)&&  ArrayUtils.isEmpty(searchChars))  {	  if(searchChars    ==    null    ||!isEmpty(cs)&&    ArrayUtils.isEmpty(searchChars))    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
3	[BUG]  [BUGGY]  ||!isEmpty(cs))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ||!isEmpty(cs))  {  return  true;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	||!isEmpty(cs))  {  return  true;  }	  ||!isEmpty(cs))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
4	[BUG]  [BUGGY]  if(!isEmpty(cs)&&  searchChars.length  >  0  ||  ArrayUtils.isEmpty(searchChars[0]))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(!isEmpty(cs)&&  searchChars.length  >  0  ||  ArrayUtils.isEmpty(searchChars[0]))  {  [BUGGY]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(!isEmpty(cs)&&  searchChars.length  >  0  ||  ArrayUtils.isEmpty(searchChars[0]))  {	  if(!isEmpty(cs)&&    searchChars.length    >    0    ||    ArrayUtils.isEmpty(searchChars))    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
5	[BUG]  [BUGGY]  if(isEmpty(cs)||  searchChars.length!=  1  ||  ArrayUtils.isEmpty(searchChars))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(isEmpty(cs)||  searchChars.length!=  1  ||  ArrayUtils.isEmpty(searchChars))  {  [BUGGY]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(isEmpty(cs)||  searchChars.length!=  1  ||  ArrayUtils.isEmpty(searchChars))  {	  if(isEmpty(cs)||    searchChars.length!=    0    ||    ArrayUtils.isEmpty(searchChars))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
6	[BUG]  [BUGGY]  if(isEmpty(cs)||  searchChars.length  ==  1  ||  ArrayUtils.isEmpty(searchChars))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(isEmpty(cs)||  searchChars.length  ==  1  ||  ArrayUtils.isEmpty(searchChars))  {  [BUGGY]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(isEmpty(cs)||  searchChars.length  ==  1  ||  ArrayUtils.isEmpty(searchChars))  {	  if(isEmpty(cs)||    searchChars.length!=    0    ||    ArrayUtils.isEmpty(searchChars))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
7	[BUG]  [BUGGY]  ArrayUtils.setCurrentSequence(cs,  searchChars);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.setCurrentSequence(cs,  searchChars);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.setCurrentSequence(cs,  searchChars);	  ArrayUtils.copyCurrentSequence(cs);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
8	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  cs.length()!=  searchChars.length)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  cs.length()!=  searchChars.length)  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null  ||  cs.length()!=  searchChars.length)  {  return  false;  }	  if(cs    ==    null    ||    cs.length()!=    searchChars.length)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
9	[BUG]  [BUGGY]  if(cs  ==  null  ||  cs.length()!=  searchChars.length)return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(cs  ==  null  ||  cs.length()!=  searchChars.length)return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(cs  ==  null  ||  cs.length()!=  searchChars.length)return  false;  }	  if(cs    ==    null    ||    cs.length()!=    searchChars.length)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
10	[BUG]  [BUGGY]  if(searchChars!=  null  ||  cs.length()!=  searchChars.length)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars!=  null  ||  cs.length()!=  searchChars.length)  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars!=  null  ||  cs.length()!=  searchChars.length)  {  return  false;  }	  if(cs    ==    null    ||    cs.length()!=    searchChars.length)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
11	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  cs.length()  ==  searchChars.length)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  cs.length()  ==  searchChars.length)  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null  ||  cs.length()  ==  searchChars.length)  {  return  false;  }	  if(cs    ==    null    ||    cs.length()    ==    searchChars.length)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
12	[BUG]  [BUGGY]  ArrayUtils.copyCurrentSequence(cs,  searchChars,  index  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.copyCurrentSequence(cs,  searchChars,  index  +  1);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.copyCurrentSequence(cs,  searchChars,  index  +  1);	  ArrayUtils.copyCurrentSequence(cs,    searchChars,    index);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
13	[BUG]  [BUGGY]  ArrayUtils.copyCurrentSequence(cs,  searchChars,  this.index);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.copyCurrentSequence(cs,  searchChars,  this.index);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.copyCurrentSequence(cs,  searchChars,  this.index);	  ArrayUtils.copyCurrentSequence(cs,    searchChars,    index);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
14	[BUG]  [BUGGY]  ArrayUtils.copyCurrentSequence(cs,  searchChars,  index,  searchChars.length);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.copyCurrentSequence(cs,  searchChars,  index,  searchChars.length);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.copyCurrentSequence(cs,  searchChars,  index,  searchChars.length);	  ArrayUtils.copyCurrentSequence(cs,    searchChars,    index);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
15	[BUG]  [BUGGY]  ArrayUtils.arrayCurrentSequence(cs,  searchChars,  true);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.arrayCurrentSequence(cs,  searchChars,  true);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.arrayCurrentSequence(cs,  searchChars,  true);	  ArrayUtils.arrayCurrentSequence(cs,    searchChars);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
16	[BUG]  [BUGGY]  ArrayUtils.arrayCurrentSequence(cs,  searchChars,  false);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.arrayCurrentSequence(cs,  searchChars,  false);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.arrayCurrentSequence(cs,  searchChars,  false);	  ArrayUtils.arrayCurrentSequence(cs,    searchChars);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
17	[BUG]  [BUGGY]  ArrayUtils.arrayCurrentSequence(cs,  searchChars,  null);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.arrayCurrentSequence(cs,  searchChars,  null);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.arrayCurrentSequence(cs,  searchChars,  null);	  ArrayUtils.arrayCurrentSequence(cs,    searchChars);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
18	[BUG]  [BUGGY]  ArrayUtils.arrayCurrentSequence(cs,  searchChars,  DECOMPOSE);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.arrayCurrentSequence(cs,  searchChars,  DECOMPOSE);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.arrayCurrentSequence(cs,  searchChars,  DECOMPOSE);	  ArrayUtils.arrayCurrentSequence(cs,    searchChars);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
19	[BUG]  [BUGGY]  if(isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }	  if(!isEmpty(cs))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
20	[BUG]  [BUGGY]  if(isEmpty(cs))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(isEmpty(cs))  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(isEmpty(cs))  {  return  false;  }	  if(!isEmpty(cs))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
21	[BUG]  [BUGGY]  ArrayUtils.copyCurrentSequence(cs,  searchChars,  INDEX_NOT_FOUND);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.copyCurrentSequence(cs,  searchChars,  INDEX_NOT_FOUND);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.copyCurrentSequence(cs,  searchChars,  INDEX_NOT_FOUND);	  ArrayUtils.copyCurrentSequence(cs,    searchChars,    DECOMPOSE);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
22	[BUG]  [BUGGY]  ArrayUtils.copyCurrentSequence(cs,  searchChars,  DECOMPOSE,  DECOMPOSE);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.copyCurrentSequence(cs,  searchChars,  DECOMPOSE,  DECOMPOSE);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.copyCurrentSequence(cs,  searchChars,  DECOMPOSE,  DECOMPOSE);	  ArrayUtils.copyCurrentSequence(cs,    searchChars,    DECOMPOSE);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
23	[BUG]  [BUGGY]  if(searchChars!=  null)  {  if(!isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars!=  null)  {  if(!isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars!=  null)  {  if(!isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }	  if(searchChars    ==    null)    {    if(!isEmpty(cs)||    ArrayUtils.isEmpty(searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
24	[BUG]  [BUGGY]  if(!isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(!isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(!isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }	  if(searchChars    ==    null)    {    if(!isEmpty(cs)||    ArrayUtils.isEmpty(searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
25	[BUG]  [BUGGY]  if(searchChars  ==  null)  {  if(cs.length()!=  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null)  {  if(cs.length()!=  0)  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null)  {  if(cs.length()!=  0)  {  return  false;  }	  if(searchChars    ==    null)    {    if(cs.length()    ==    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
26	[BUG]  [BUGGY]  if(searchChars!=  null)  {  if(cs.length()  ==  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars!=  null)  {  if(cs.length()  ==  0)  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars!=  null)  {  if(cs.length()  ==  0)  {  return  false;  }	  if(searchChars    ==    null)    {    if(cs.length()    ==    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
27	[BUG]  [BUGGY]  ArrayUtils.remove(searchChars.length  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.remove(searchChars.length  -  1);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.remove(searchChars.length  -  1);	  ArrayUtils.remove(searchChars.length);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
28	[BUG]  [BUGGY]  ArrayUtils.remove(searchChars.length  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.remove(searchChars.length  +  1);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.remove(searchChars.length  +  1);	  ArrayUtils.remove(searchChars.length);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
29	[BUG]  [BUGGY]  ArrayUtils.remove(cs.length);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.remove(cs.length);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.remove(cs.length);	  ArrayUtils.remove(searchChars.length);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
30	[BUG]  [BUGGY]  ArrayUtils.remove(searchChars.length,  cs.length);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.remove(searchChars.length,  cs.length);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.remove(searchChars.length,  cs.length);	  ArrayUtils.remove(searchChars.length);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
31	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  0)  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null  ||  searchChars.length  <  0)  {  return  false;  }	  if(searchChars    ==    null    ||    searchChars.length    <    2)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
32	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length!=  2)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length!=  2)  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null  ||  searchChars.length!=  2)  {  return  false;  }	  if(searchChars    ==    null    ||    searchChars.length    <    2)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
33	[BUG]  [BUGGY]  ArrayUtils.fill(searchChars,  cs);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.fill(searchChars,  cs);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.fill(searchChars,  cs);	  ArrayUtils.fill(searchChars);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
34	[BUG]  [BUGGY]  ArrayUtils.fill(cs,  searchChars);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.fill(cs,  searchChars);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.fill(cs,  searchChars);	  ArrayUtils.fill(searchChars);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
35	[BUG]  [BUGGY]  ArrayUtils.fill(index,  searchChars);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.fill(index,  searchChars);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.fill(index,  searchChars);	  ArrayUtils.fill(searchChars);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
36	[BUG]  [BUGGY]  ArrayUtils.fill(this.searchChars);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.fill(this.searchChars);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.fill(this.searchChars);	  ArrayUtils.fill(searchChars);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
37	[BUG]  [BUGGY]  ||(searchChars  ==  null  &&  searchChars.length  >  0)||(cs.charAt(searchChars.length  -  1)!=  '/'))  {  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ||(searchChars  ==  null  &&  searchChars.length  >  0)||(cs.charAt(searchChars.length  -  1)!=  '/'))  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	||(searchChars  ==  null  &&  searchChars.length  >  0)||(cs.charAt(searchChars.length  -  1)!=  '/'))  {  return  false;  }	  if(searchChars    ==    null)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
38	[BUG]  [BUGGY]  ||(searchChars  ==  null  &&  searchChars.length  >  0)||(cs.charAt(searchChars.length  -  1)!=  '/'))  {  return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ||(searchChars  ==  null  &&  searchChars.length  >  0)||(cs.charAt(searchChars.length  -  1)!=  '/'))  {  return  true;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	||(searchChars  ==  null  &&  searchChars.length  >  0)||(cs.charAt(searchChars.length  -  1)!=  '/'))  {  return  true;  }	  if(searchChars    ==    null)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
39	[BUG]  [BUGGY]  if(!isEmpty(cs)||  searchChars.length  ==  0  ||  ArrayUtils.isEmpty(searchChars))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(!isEmpty(cs)||  searchChars.length  ==  0  ||  ArrayUtils.isEmpty(searchChars))  {  [BUGGY]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(!isEmpty(cs)||  searchChars.length  ==  0  ||  ArrayUtils.isEmpty(searchChars))  {	  if(!isEmpty(cs)||    searchChars.length    >    0    ||    ArrayUtils.isEmpty(searchChars))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
40	[BUG]  [BUGGY]  if(!isEmpty(cs)||  searchChars.length  >  1  ||  ArrayUtils.isEmpty(searchChars))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(!isEmpty(cs)||  searchChars.length  >  1  ||  ArrayUtils.isEmpty(searchChars))  {  [BUGGY]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(!isEmpty(cs)||  searchChars.length  >  1  ||  ArrayUtils.isEmpty(searchChars))  {	  if(!isEmpty(cs)||    searchChars.length    >    0    ||    ArrayUtils.isEmpty(searchChars))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
41	[BUG]  [BUGGY]  ArrayUtils.copyCurrentSequence(cs,  searchChars,  this);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.copyCurrentSequence(cs,  searchChars,  this);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.copyCurrentSequence(cs,  searchChars,  this);	  ArrayUtils.copyCurrentSequence(cs,    searchChars,    null);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
42	[BUG]  [BUGGY]  ArrayUtils.copyCurrentSequence(cs,  searchChars,  null,  false);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.copyCurrentSequence(cs,  searchChars,  null,  false);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.copyCurrentSequence(cs,  searchChars,  null,  false);	  ArrayUtils.copyCurrentSequence(cs,    searchChars,    null);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
43	[BUG]  [BUGGY]  ArrayUtils.copyCurrentSequence(searchChars,  false);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.copyCurrentSequence(searchChars,  false);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.copyCurrentSequence(searchChars,  false);	  ArrayUtils.copyCurrentSequence(searchChars,    true);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
44	[BUG]  [BUGGY]  ArrayUtils.copyCurrentSequence(cs,  true);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.copyCurrentSequence(cs,  true);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.copyCurrentSequence(cs,  true);	  ArrayUtils.copyCurrentSequence(searchChars,    true);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
45	[BUG]  [BUGGY]  ArrayUtils.copyCurrentSequence(searchchars,  false);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.copyCurrentSequence(searchchars,  false);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.copyCurrentSequence(searchchars,  false);	  ArrayUtils.copyCurrentSequence(searchChars,    true);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
46	[BUG]  [BUGGY]  int  searchLength  =  searchChars.length  /  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  int  searchLength  =  searchChars.length  /  1;  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	int  searchLength  =  searchChars.length  /  1;	  int    searchLength    =    searchChars.length    +    1;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
47	[BUG]  [BUGGY]  int  searchLength  =  cs.length  +  1;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  int  searchLength  =  cs.length  +  1;  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	int  searchLength  =  cs.length  +  1;	  int    searchLength    =    searchChars.length    +    1;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
48	[BUG]  [BUGGY]  int  searchLength  =  searchChars.length  -  1  +  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  int  searchLength  =  searchChars.length  -  1  +  1;  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	int  searchLength  =  searchChars.length  -  1  +  1;	  int    searchLength    =    searchChars.length    -    1;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
49	[BUG]  [BUGGY]  int  searchLength  =  searchChars.length  -  3;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  int  searchLength  =  searchChars.length  -  3;  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	int  searchLength  =  searchChars.length  -  3;	  int    searchLength    =    searchChars.length    -    1;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
50	[BUG]  [BUGGY]  int  searchLength  =  cs.length();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  int  searchLength  =  cs.length();  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	int  searchLength  =  cs.length();	  int    searchLength    =    cs.length;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
51	[BUG]  [BUGGY]  char  searchLength  =  cs.length;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char  searchLength  =  cs.length;  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	char  searchLength  =  cs.length;	  int    searchLength    =    cs.length;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
52	[BUG]  [BUGGY]  char  ch  =  cs.charAt(searchChars.length  -  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char  ch  =  cs.charAt(searchChars.length  -  1);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	char  ch  =  cs.charAt(searchChars.length  -  1);	  char    ch    =    cs.charAt(searchChars.length);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
53	[BUG]  [BUGGY]  char  ch  =  cs.charAt(searchChars.length  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char  ch  =  cs.charAt(searchChars.length  +  1);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	char  ch  =  cs.charAt(searchChars.length  +  1);	  char    ch    =    cs.charAt(searchChars.length);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
54	[BUG]  [BUGGY]  char  ch  =  cs.charAt(searchLength);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char  ch  =  cs.charAt(searchLength);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	char  ch  =  cs.charAt(searchLength);	  char    ch    =    cs.charAt(searchChars.length);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
55	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  >=  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  >=  0)  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null  ||  searchChars.length  >=  0)  {  return  false;  }	  if(searchChars    ==    null    ||    searchChars.length    ==    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
56	[BUG]  [BUGGY]  if(searchChars!=  null  ||  searchChars.length  ==  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars!=  null  ||  searchChars.length  ==  0)  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars!=  null  ||  searchChars.length  ==  0)  {  return  false;  }	  if(searchChars    ==    null    ||    searchChars.length    ==    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
57	[BUG]  [BUGGY]  ArrayUtils.copyCurrentSequence(cs,  searchChars,  true,  false);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.copyCurrentSequence(cs,  searchChars,  true,  false);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.copyCurrentSequence(cs,  searchChars,  true,  false);	  ArrayUtils.copyCurrentSequence(cs,    searchChars,    true);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
58	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length()!=  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length()!=  0)  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null  ||  searchChars.length()!=  0)  {  return  false;  }	  if(cs    ==    null    ||    searchChars.length()!=    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
59	[BUG]  [BUGGY]  if(cs  ==  null  ||  searchChars.length()  >=  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(cs  ==  null  ||  searchChars.length()  >=  0)  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(cs  ==  null  ||  searchChars.length()  >=  0)  {  return  false;  }	  if(cs    ==    null    ||    searchChars.length()!=    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
60	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length!=  1)  {  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length!=  1)  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null  ||  searchChars.length!=  1)  {  return  false;  }	  if(searchChars    ==    null    ||    searchChars.length    <    1)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
61	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  >  1)  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  >  1)  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null  ||  searchChars.length  >  1)  {  return  false;  }	  if(searchChars    ==    null    ||    searchChars.length    <    1)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
62	[BUG]  [BUGGY]  char  ch  =  cs.charAt(i  +  2);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char  ch  =  cs.charAt(i  +  2);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	char  ch  =  cs.charAt(i  +  2);	  char    ch    =    cs.charAt(i    +    1);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
63	[BUG]  [BUGGY]  char  ch  =  cs.charAt(i  +  3);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char  ch  =  cs.charAt(i  +  3);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	char  ch  =  cs.charAt(i  +  3);	  char    ch    =    cs.charAt(i    +    1);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
64	[BUG]  [BUGGY]  if(cs!=  null  ||!isEmpty(cs))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(cs!=  null  ||!isEmpty(cs))  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(cs!=  null  ||!isEmpty(cs))  {  return  false;  }	  if(cs    ==    null    ||!isEmpty(cs))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
65	[BUG]  [BUGGY]  if(searchChars  ==  null)  {  if(isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null)  {  if(isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null)  {  if(isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }	  if(searchChars    ==    null)    {    if(isEmpty(cs))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
66	[BUG]  [BUGGY]  ||  isEmpty(cs))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ||  isEmpty(cs))  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	||  isEmpty(cs))  {  return  false;  }	  if(searchChars    ==    null)    {    if(isEmpty(cs))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
67	[BUG]  [BUGGY]  if(isEmpty(cs)||  searchChars.length  ==  2  ||  ArrayUtils.isEmpty(searchChars))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(isEmpty(cs)||  searchChars.length  ==  2  ||  ArrayUtils.isEmpty(searchChars))  {  [BUGGY]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(isEmpty(cs)||  searchChars.length  ==  2  ||  ArrayUtils.isEmpty(searchChars))  {	  if(isEmpty(cs)||    searchChars.length    ==    0    ||    ArrayUtils.isEmpty(searchChars))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
68	[BUG]  [BUGGY]  ArrayUtils.copyCurrentSequence(str,  searchChars);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.copyCurrentSequence(str,  searchChars);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.copyCurrentSequence(str,  searchChars);	  ArrayUtils.copyCurrentSequence(searchChars,    searchChars);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
69	[BUG]  [BUGGY]  if(cs  ==  null  ||  searchChars.length  <  0  ||!isEmpty(cs)&&  ArrayUtils.isEmpty(searchChars))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(cs  ==  null  ||  searchChars.length  <  0  ||!isEmpty(cs)&&  ArrayUtils.isEmpty(searchChars))  {  [BUGGY]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(cs  ==  null  ||  searchChars.length  <  0  ||!isEmpty(cs)&&  ArrayUtils.isEmpty(searchChars))  {	  if(cs    ==    null    ||!isEmpty(cs)&&    ArrayUtils.isEmpty(searchChars))    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
70	[BUG]  [BUGGY]  ArrayUtils.clear(cs);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.clear(cs);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.clear(cs);	  ArrayUtils.clear(searchChars);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
71	[BUG]  [BUGGY]  ArrayUtils.clear(searchChars,  cs);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.clear(searchChars,  cs);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.clear(searchChars,  cs);	  ArrayUtils.clear(searchChars);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
72	[BUG]  [BUGGY]  ArrayUtils.remove(searchChars,  cs);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.remove(searchChars,  cs);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.remove(searchChars,  cs);	  ArrayUtils.remove(cs,    searchChars);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
73	[BUG]  [BUGGY]  ArrayUtils.remove(cs,  searchChars,  DECOMPOSE);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.remove(cs,  searchChars,  DECOMPOSE);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.remove(cs,  searchChars,  DECOMPOSE);	  ArrayUtils.remove(cs,    searchChars);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
74	[BUG]  [BUGGY]  ArrayUtils.remove(cs,  searchChars,  DECOMPOSED);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.remove(cs,  searchChars,  DECOMPOSED);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.remove(cs,  searchChars,  DECOMPOSED);	  ArrayUtils.remove(cs,    searchChars);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
75	[BUG]  [BUGGY]  ArrayUtils.remove(cs,  searchChars,  false);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.remove(cs,  searchChars,  false);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.remove(cs,  searchChars,  false);	  ArrayUtils.remove(cs,    searchChars);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
76	[BUG]  [BUGGY]  if(isEmpty(cs)||  searchChars.length  <  =  0  ||  ArrayUtils.isEmpty(searchChars))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(isEmpty(cs)||  searchChars.length  <  =  0  ||  ArrayUtils.isEmpty(searchChars))  {  [BUGGY]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(isEmpty(cs)||  searchChars.length  <  =  0  ||  ArrayUtils.isEmpty(searchChars))  {	  if(isEmpty(cs)||    searchChars.length    <    0    ||    ArrayUtils.isEmpty(searchChars))    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
77	[BUG]  [BUGGY]  ArrayUtils.isEmpty(searchChars)||  ArrayUtils.isEmpty(cs);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.isEmpty(searchChars)||  ArrayUtils.isEmpty(cs);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.isEmpty(searchChars)||  ArrayUtils.isEmpty(cs);	  ArrayUtils.isEmpty(cs)||    ArrayUtils.isEmpty(searchChars);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
78	[BUG]  [BUGGY]  ArrayUtils.isEmpty(cs)&&  ArrayUtils.isEmpty(searchChars);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.isEmpty(cs)&&  ArrayUtils.isEmpty(searchChars);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.isEmpty(cs)&&  ArrayUtils.isEmpty(searchChars);	  ArrayUtils.isEmpty(cs)||    ArrayUtils.isEmpty(searchChars);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
79	[BUG]  [BUGGY]  ArrayUtils.isEmpty(cs,  searchChars)||  ArrayUtils.isEmpty(searchChars);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.isEmpty(cs,  searchChars)||  ArrayUtils.isEmpty(searchChars);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.isEmpty(cs,  searchChars)||  ArrayUtils.isEmpty(searchChars);	  ArrayUtils.isEmpty(cs)||    ArrayUtils.isEmpty(searchChars);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
80	[BUG]  [BUGGY]  int  searchLength  =  searchChars.length  /  2;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  int  searchLength  =  searchChars.length  /  2;  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	int  searchLength  =  searchChars.length  /  2;	  int    searchLength    =    searchChars.length    -    2;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
81	[BUG]  [BUGGY]  if(!isEmpty(cs)||  searchChars.length  >  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(!isEmpty(cs)||  searchChars.length  >  0)  {  [BUGGY]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(!isEmpty(cs)||  searchChars.length  >  0)  {	  if(!isEmpty(cs)&&    searchChars.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
82	[BUG]  [BUGGY]  if(isEmpty(cs)||  searchChars.length  >  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(isEmpty(cs)||  searchChars.length  >  0)  {  [BUGGY]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(isEmpty(cs)||  searchChars.length  >  0)  {	  if(!isEmpty(cs)&&    searchChars.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
83	[BUG]  [BUGGY]  if(!isEmpty(cs)&&  searchChars.length  ==  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(!isEmpty(cs)&&  searchChars.length  ==  0)  {  [BUGGY]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(!isEmpty(cs)&&  searchChars.length  ==  0)  {	  if(!isEmpty(cs)&&    searchChars.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
84	[BUG]  [BUGGY]  if(!isEmpty(cs)&&  searchChars.length  >  1)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(!isEmpty(cs)&&  searchChars.length  >  1)  {  [BUGGY]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(!isEmpty(cs)&&  searchChars.length  >  1)  {	  if(!isEmpty(cs)&&    searchChars.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
85	[BUG]  [BUGGY]  char  ch  =  cs.charAt(i  +  1,  searchChars.length  -  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char  ch  =  cs.charAt(i  +  1,  searchChars.length  -  1);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	char  ch  =  cs.charAt(i  +  1,  searchChars.length  -  1);	  char    ch    =    cs.charAt(i    +    1,    searchChars.length);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
86	[BUG]  [BUGGY]  char  ch  =  cs.charAt(i  +  1,  searchChars.length,  searchChars.length);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char  ch  =  cs.charAt(i  +  1,  searchChars.length,  searchChars.length);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	char  ch  =  cs.charAt(i  +  1,  searchChars.length,  searchChars.length);	  char    ch    =    cs.charAt(i    +    1,    searchChars.length);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
87	[BUG]  [BUGGY]  char  ch  =  cs.charAt(i  +  1,  searchChars.length,  searchLength);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char  ch  =  cs.charAt(i  +  1,  searchChars.length,  searchLength);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	char  ch  =  cs.charAt(i  +  1,  searchChars.length,  searchLength);	  char    ch    =    cs.charAt(i    +    1,    searchChars.length);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
88	[BUG]  [BUGGY]  if(searchChars  ==  null)  {  if(searchChars.length()!=  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null)  {  if(searchChars.length()!=  0)  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null)  {  if(searchChars.length()!=  0)  {  return  false;  }	  if(cs    ==    null)    {    if(searchChars.length()!=    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
89	[BUG]  [BUGGY]  if(searchChars!=  null)  {  if(searchChars.length()!=  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars!=  null)  {  if(searchChars.length()!=  0)  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars!=  null)  {  if(searchChars.length()!=  0)  {  return  false;  }	  if(cs    ==    null)    {    if(searchChars.length()!=    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
90	[BUG]  [BUGGY]  if(cs.length()!=  searchChars.length)return  false;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(cs.length()!=  searchChars.length)return  false;  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(cs.length()!=  searchChars.length)return  false;	  if(searchChars    ==    null)    {    if(cs.length()!=    searchChars.length)return    false;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
91	[BUG]  [BUGGY]  if(searchChars  ==  null)return  false;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null)return  false;  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null)return  false;	  if(searchChars    ==    null)    {    if(cs.length()!=    searchChars.length)return    false;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
92	[BUG]  [BUGGY]  if(cs.length()  ==  searchChars.length)return  false;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(cs.length()  ==  searchChars.length)return  false;  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(cs.length()  ==  searchChars.length)return  false;	  if(searchChars    ==    null)    {    if(cs.length()!=    searchChars.length)return    false;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
93	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  2)  {  if(!isEmpty(cs))  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  2)  {  if(!isEmpty(cs))  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null  ||  searchChars.length  <  2)  {  if(!isEmpty(cs))  {  return  false;  }	  if(cs    ==    null    ||    searchChars.length    <    2)    {    if(!isEmpty(cs))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
94	[BUG]  [BUGGY]  if(cs  ==  null  ||  searchChars.length  <  1)  {  if(!isEmpty(cs))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(cs  ==  null  ||  searchChars.length  <  1)  {  if(!isEmpty(cs))  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(cs  ==  null  ||  searchChars.length  <  1)  {  if(!isEmpty(cs))  {  return  false;  }	  if(cs    ==    null    ||    searchChars.length    <    2)    {    if(!isEmpty(cs))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
95	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  1)  {  if(!isEmpty(cs))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  1)  {  if(!isEmpty(cs))  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null  ||  searchChars.length  <  1)  {  if(!isEmpty(cs))  {  return  false;  }	  if(cs    ==    null    ||    searchChars.length    <    2)    {    if(!isEmpty(cs))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
96	[BUG]  [BUGGY]  char  ch  =  cs.charAt(0,  searchChars.length  -  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char  ch  =  cs.charAt(0,  searchChars.length  -  1);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	char  ch  =  cs.charAt(0,  searchChars.length  -  1);	  char    ch    =    cs.charAt(0,    searchChars.length);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
97	[BUG]  [BUGGY]  char  ch  =  cs.charAt(0,  searchChars.length  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char  ch  =  cs.charAt(0,  searchChars.length  +  1);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	char  ch  =  cs.charAt(0,  searchChars.length  +  1);	  char    ch    =    cs.charAt(0,    searchChars.length);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
98	[BUG]  [BUGGY]  char  ch  =  cs.charAt(i,  searchChars.length);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char  ch  =  cs.charAt(i,  searchChars.length);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	char  ch  =  cs.charAt(i,  searchChars.length);	  char    ch    =    cs.charAt(0,    searchChars.length);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
99	[BUG]  [BUGGY]  if(cs  ==  null  ||  searchChars.length!=  0  ||  isEmpty(searchChars)||  ArrayUtils.isEmpty(searchChars))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(cs  ==  null  ||  searchChars.length!=  0  ||  isEmpty(searchChars)||  ArrayUtils.isEmpty(searchChars))  {  [BUGGY]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(cs  ==  null  ||  searchChars.length!=  0  ||  isEmpty(searchChars)||  ArrayUtils.isEmpty(searchChars))  {	  if(cs    ==    null    ||    isEmpty(searchChars)||    ArrayUtils.isEmpty(searchChars))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
100	[BUG]  [BUGGY]  ArrayUtils.set(searchChars,  cs);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.set(searchChars,  cs);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.set(searchChars,  cs);	  ArrayUtils.remove(cs);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
101	[BUG]  [BUGGY]  if(searchChars  ==  null)return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null)return  true;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null)return  true;  }	  if(searchChars    ==    null)return    false;    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
102	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length!=  0)return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length!=  0)return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null  ||  searchChars.length!=  0)return  false;  }	  if(searchChars    ==    null)return    false;    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
103	[BUG]  [BUGGY]  if(cs!=  null)  {  if(!isEmpty(cs))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(cs!=  null)  {  if(!isEmpty(cs))  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(cs!=  null)  {  if(!isEmpty(cs))  {  return  false;  }	  if(cs    ==    null)    {    if(!isEmpty(cs))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
104	[BUG]  [BUGGY]  ArrayUtils.isEmpty(searchChars,  cs);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.isEmpty(searchChars,  cs);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.isEmpty(searchChars,  cs);	  ArrayUtils.isEmpty(cs,    searchChars);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
105	[BUG]  [BUGGY]  ArrayUtils.isEmpty(cs,  searchChars,  true);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.isEmpty(cs,  searchChars,  true);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.isEmpty(cs,  searchChars,  true);	  ArrayUtils.isEmpty(cs,    searchChars);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
106	[BUG]  [BUGGY]  if(cs  ==  null  ||!isEmpty(searchChars)||  ArrayUtils.isEmpty(searchChars))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(cs  ==  null  ||!isEmpty(searchChars)||  ArrayUtils.isEmpty(searchChars))  {  [BUGGY]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(cs  ==  null  ||!isEmpty(searchChars)||  ArrayUtils.isEmpty(searchChars))  {	  if(searchChars    ==    null    ||!isEmpty(cs)||    ArrayUtils.isEmpty(searchChars))    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
107	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  0  ||!isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  0  ||!isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  [BUGGY]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null  ||  searchChars.length  <  0  ||!isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {	  if(searchChars    ==    null    ||!isEmpty(cs)||    ArrayUtils.isEmpty(searchChars))    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
108	[BUG]  [BUGGY]  if(cs  ==  null  ||  isEmpty(searchChars)&&  ArrayUtils.isEmpty(searchChars))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(cs  ==  null  ||  isEmpty(searchChars)&&  ArrayUtils.isEmpty(searchChars))  {  [BUGGY]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(cs  ==  null  ||  isEmpty(searchChars)&&  ArrayUtils.isEmpty(searchChars))  {	  if(searchChars    ==    null    ||    isEmpty(cs)&&    ArrayUtils.isEmpty(searchChars))    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
109	[BUG]  [BUGGY]  if(searchChars!=  null  ||  isEmpty(cs)&&  ArrayUtils.isEmpty(searchChars))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars!=  null  ||  isEmpty(cs)&&  ArrayUtils.isEmpty(searchChars))  {  [BUGGY]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars!=  null  ||  isEmpty(cs)&&  ArrayUtils.isEmpty(searchChars))  {	  if(searchChars    ==    null    ||    isEmpty(cs)&&    ArrayUtils.isEmpty(searchChars))    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
110	[BUG]  [BUGGY]  if(searchChars  ==  null)  {  if(cs.length()  ==  searchChars.length)return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null)  {  if(cs.length()  ==  searchChars.length)return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null)  {  if(cs.length()  ==  searchChars.length)return  false;  }	  if(searchChars!=    null)    {    if(cs.length()    ==    searchChars.length)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
111	[BUG]  [BUGGY]  char  ch  =  cs.charAt(i  +  searchChars.length  -  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char  ch  =  cs.charAt(i  +  searchChars.length  -  1);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	char  ch  =  cs.charAt(i  +  searchChars.length  -  1);	  char    ch    =    cs.charAt(i    +    searchChars.length);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
112	[BUG]  [BUGGY]  char  ch  =  cs.charAt(i  +  searchChars.length,  searchChars.length);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char  ch  =  cs.charAt(i  +  searchChars.length,  searchChars.length);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	char  ch  =  cs.charAt(i  +  searchChars.length,  searchChars.length);	  char    ch    =    cs.charAt(i    +    searchChars.length);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
113	[BUG]  [BUGGY]  if(cs  ==  null  ||  searchChars.length  <  0  ||!isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(cs  ==  null  ||  searchChars.length  <  0  ||!isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  [BUGGY]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(cs  ==  null  ||  searchChars.length  <  0  ||!isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {	  if(cs    ==    null    ||!isEmpty(cs)||    ArrayUtils.isEmpty(searchChars))    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
114	[BUG]  [BUGGY]  char  ch  =  searchChars.charAt(i);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char  ch  =  searchChars.charAt(i);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	char  ch  =  searchChars.charAt(i);	  char    ch    =    searchChars.charAt(0);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
115	[BUG]  [BUGGY]  ArrayUtils.copyCurrentSequence(searchChars,  index  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.copyCurrentSequence(searchChars,  index  +  1);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.copyCurrentSequence(searchChars,  index  +  1);	  ArrayUtils.copyCurrentSequence(searchChars,    index);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
116	[BUG]  [BUGGY]  ArrayUtils.copyCurrentSequence(cs,  index);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.copyCurrentSequence(cs,  index);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.copyCurrentSequence(cs,  index);	  ArrayUtils.copyCurrentSequence(searchChars,    index);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
117	[BUG]  [BUGGY]  ArrayUtils.copyCurrentSequence(searchChars,  searchChars.length);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.copyCurrentSequence(searchChars,  searchChars.length);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.copyCurrentSequence(searchChars,  searchChars.length);	  ArrayUtils.copyCurrentSequence(searchChars,    index);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
118	[BUG]  [BUGGY]  ArrayUtils.copyCurrentSequence(searchChars,  index,  searchChars.length);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.copyCurrentSequence(searchChars,  index,  searchChars.length);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.copyCurrentSequence(searchChars,  index,  searchChars.length);	  ArrayUtils.copyCurrentSequence(searchChars,    index);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
119	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length()  ==  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length()  ==  0)  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null  ||  searchChars.length()  ==  0)  {  return  false;  }	  if(cs    ==    null    ||    searchChars.length()    ==    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
120	[BUG]  [BUGGY]  ||  searchChars.length()  ==  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ||  searchChars.length()  ==  0)  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	||  searchChars.length()  ==  0)  {  return  false;  }	  if(cs    ==    null    ||    searchChars.length()    ==    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
121	[BUG]  [BUGGY]  int  searchLength  =  searchChars.length  +  2;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  int  searchLength  =  searchChars.length  +  2;  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	int  searchLength  =  searchChars.length  +  2;	  int    searchLength    =    searchChars.length    +    1;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
122	[BUG]  [BUGGY]  ArrayUtils.clear(searchChars.length);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.clear(searchChars.length);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.clear(searchChars.length);	  ArrayUtils.clear(searchChars);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
123	[BUG]  [BUGGY]  ArrayUtils.arrayCurrentSequence(searchChars,  cs);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.arrayCurrentSequence(searchChars,  cs);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.arrayCurrentSequence(searchChars,  cs);	  ArrayUtils.arrayCurrentSequence(cs,    searchChars);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
124	[BUG]  [BUGGY]  ArrayUtils.arrayCurrentSequence(cs,  searchChars,  0);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.arrayCurrentSequence(cs,  searchChars,  0);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.arrayCurrentSequence(cs,  searchChars,  0);	  ArrayUtils.arrayCurrentSequence(cs,    searchChars);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
125	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length()  ==  cs.length)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length()  ==  cs.length)  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null  ||  searchChars.length()  ==  cs.length)  {  return  false;  }	  if(cs    ==    null    ||    cs.length()    ==    searchChars.length)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
126	[BUG]  [BUGGY]  if(searchChars!=  null  ||  searchChars.length  <  2)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars!=  null  ||  searchChars.length  <  2)  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars!=  null  ||  searchChars.length  <  2)  {  return  false;  }	  if(searchChars    ==    null    ||    searchChars.length    <    2)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
127	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  >=  1)  {  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  >=  1)  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null  ||  searchChars.length  >=  1)  {  return  false;  }	  if(searchChars    ==    null    ||    searchChars.length    <    1)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
128	[BUG]  [BUGGY]  char  ch  =  cs.charAt(i  *  searchChars.length);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char  ch  =  cs.charAt(i  *  searchChars.length);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	char  ch  =  cs.charAt(i  *  searchChars.length);	  char    ch    =    cs.charAt(i    +    searchChars.length);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
129	[BUG]  [BUGGY]  ArrayUtils.copyCurrentSequence(cs,  searchChars,  0,  searchChars.length);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.copyCurrentSequence(cs,  searchChars,  0,  searchChars.length);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.copyCurrentSequence(cs,  searchChars,  0,  searchChars.length);	  ArrayUtils.copyCurrentSequence(cs,    searchChars,    DECOMPOSED);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
130	[BUG]  [BUGGY]  if(cs!=  null)  {  if(searchChars.length()  ==  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(cs!=  null)  {  if(searchChars.length()  ==  0)  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(cs!=  null)  {  if(searchChars.length()  ==  0)  {  return  false;  }	  if(searchChars!=    null)    {    if(cs.length()    ==    searchChars.length)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
131	[BUG]  [BUGGY]  if(cs  ==  null)  {  if(!isEmpty(searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(cs  ==  null)  {  if(!isEmpty(searchChars))  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(cs  ==  null)  {  if(!isEmpty(searchChars))  {  return  false;  }	  if(searchChars!=    null)    {    if(!isEmpty(cs))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
132	[BUG]  [BUGGY]  if(cs!=  null)  {  if(!isEmpty(searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(cs!=  null)  {  if(!isEmpty(searchChars))  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(cs!=  null)  {  if(!isEmpty(searchChars))  {  return  false;  }	  if(searchChars!=    null)    {    if(!isEmpty(cs))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
133	[BUG]  [BUGGY]  if(!isEmpty(cs)&&  searchChars.length  ==  0  ||  ArrayUtils.isEmpty(searchChars))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(!isEmpty(cs)&&  searchChars.length  ==  0  ||  ArrayUtils.isEmpty(searchChars))  {  [BUGGY]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(!isEmpty(cs)&&  searchChars.length  ==  0  ||  ArrayUtils.isEmpty(searchChars))  {	  if(!isEmpty(cs)&&    searchChars.length    >    0    ||    ArrayUtils.isEmpty(searchChars))    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
134	[BUG]  [BUGGY]  if(!isEmpty(cs)&&  searchChars.length!=  0  ||  ArrayUtils.isEmpty(searchChars))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(!isEmpty(cs)&&  searchChars.length!=  0  ||  ArrayUtils.isEmpty(searchChars))  {  [BUGGY]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(!isEmpty(cs)&&  searchChars.length!=  0  ||  ArrayUtils.isEmpty(searchChars))  {	  if(!isEmpty(cs)&&    searchChars.length    >    0    ||    ArrayUtils.isEmpty(searchChars))    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
135	[BUG]  [BUGGY]  if(searchChars!=  null)  {  if(cs.length()!=  searchChars.length)return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars!=  null)  {  if(cs.length()!=  searchChars.length)return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars!=  null)  {  if(cs.length()!=  searchChars.length)return  false;  }	  if(searchChars    ==    null)    {    if(cs.length()!=    searchChars.length)return    false;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
136	[BUG]  [BUGGY]  if(searchChars  ==  null)  {  if(cs.length()  >=  searchChars.length)return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null)  {  if(cs.length()  >=  searchChars.length)return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null)  {  if(cs.length()  >=  searchChars.length)return  false;  }	  if(searchChars    ==    null)    {    if(cs.length()!=    searchChars.length)return    false;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
137	[BUG]  [BUGGY]  if(searchChars  ==  null  ||!isEmpty(cs))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||!isEmpty(cs))  {  return  true;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null  ||!isEmpty(cs))  {  return  true;  }	  if(searchChars    ==    null    ||!isEmpty(cs))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
138	[BUG]  [BUGGY]  if(searchChars!=  null)  {  if(isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars!=  null)  {  if(isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars!=  null)  {  if(isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }	  if(searchChars    ==    null)    {    if(isEmpty(cs))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
139	[BUG]  [BUGGY]  if(searchChars!=  null)  {  if(isEmpty(cs))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars!=  null)  {  if(isEmpty(cs))  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars!=  null)  {  if(isEmpty(cs))  {  return  false;  }	  if(searchChars    ==    null)    {    if(isEmpty(cs))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
140	[BUG]  [BUGGY]  ArrayUtils.copyCurrentSequence(searchChars,  cs,  null);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.copyCurrentSequence(searchChars,  cs,  null);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.copyCurrentSequence(searchChars,  cs,  null);	  ArrayUtils.copyCurrentSequence(cs,    searchChars,    null);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
141	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  ==  0  ||!isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  ==  0  ||!isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  [BUGGY]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null  ||  searchChars.length  ==  0  ||!isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {	  if(searchChars    ==    null    ||!isEmpty(cs)||    ArrayUtils.isEmpty(searchChars))    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
142	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length!=  0  ||!isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length!=  0  ||!isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  [BUGGY]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null  ||  searchChars.length!=  0  ||!isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {	  if(searchChars    ==    null    ||!isEmpty(cs)||    ArrayUtils.isEmpty(searchChars))    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
143	[BUG]  [BUGGY]  if(cs  ==  null  ||!isEmpty(searchChars))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(cs  ==  null  ||!isEmpty(searchChars))  {  [BUGGY]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(cs  ==  null  ||!isEmpty(searchChars))  {	  if(cs    ==    null    ||!isEmpty(cs)&&    ArrayUtils.isEmpty(searchChars))    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
144	[BUG]  [BUGGY]  if(cs  ==  null  ||  searchChars.length  ==  0  ||!isEmpty(cs)&&  ArrayUtils.isEmpty(searchChars))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(cs  ==  null  ||  searchChars.length  ==  0  ||!isEmpty(cs)&&  ArrayUtils.isEmpty(searchChars))  {  [BUGGY]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(cs  ==  null  ||  searchChars.length  ==  0  ||!isEmpty(cs)&&  ArrayUtils.isEmpty(searchChars))  {	  if(cs    ==    null    ||!isEmpty(cs)&&    ArrayUtils.isEmpty(searchChars))    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
145	[BUG]  [BUGGY]  if(searchChars  ==  null)  {  if(searchChars.length()  ==  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null)  {  if(searchChars.length()  ==  0)  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null)  {  if(searchChars.length()  ==  0)  {  return  false;  }	  if(searchChars    ==    null)    {    if(cs.length()    ==    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
146	[BUG]  [BUGGY]  ArrayUtils.copyCurrentSequence(cs,  searchChars,  0);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.copyCurrentSequence(cs,  searchChars,  0);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.copyCurrentSequence(cs,  searchChars,  0);	  ArrayUtils.copyCurrentSequence(cs,    searchChars,    DECOMPOSE);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
147	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length()!=  cs.length)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length()!=  cs.length)  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null  ||  searchChars.length()!=  cs.length)  {  return  false;  }	  if(cs    ==    null    ||    cs.length()!=    searchChars.length)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
148	[BUG]  [BUGGY]  if(!isEmpty(cs)||  searchChars.length!=  0  ||  ArrayUtils.isEmpty(searchChars))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(!isEmpty(cs)||  searchChars.length!=  0  ||  ArrayUtils.isEmpty(searchChars))  {  [BUGGY]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(!isEmpty(cs)||  searchChars.length!=  0  ||  ArrayUtils.isEmpty(searchChars))  {	  if(!isEmpty(cs)||    searchChars.length    >    0    ||    ArrayUtils.isEmpty(searchChars))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
149	[BUG]  [BUGGY]  if(!isEmpty(cs)&&  searchChars.length!=  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(!isEmpty(cs)&&  searchChars.length!=  0)  {  [BUGGY]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(!isEmpty(cs)&&  searchChars.length!=  0)  {	  if(!isEmpty(cs)&&    searchChars.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
150	[BUG]  [BUGGY]  ArrayUtils.isBlank(searchChars)||  ArrayUtils.isEmpty(cs);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.isBlank(searchChars)||  ArrayUtils.isEmpty(cs);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.isBlank(searchChars)||  ArrayUtils.isEmpty(cs);	  ArrayUtils.isEmpty(cs)||    ArrayUtils.isEmpty(searchChars);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
151	[BUG]  [BUGGY]  ArrayUtils.setCurrentSequence(searchChars);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.setCurrentSequence(searchChars);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.setCurrentSequence(searchChars);	  ArrayUtils.copyCurrentSequence(cs);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
152	[BUG]  [BUGGY]  if(cs!=  null)  {  if(searchChars.length()!=  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(cs!=  null)  {  if(searchChars.length()!=  0)  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(cs!=  null)  {  if(searchChars.length()!=  0)  {  return  false;  }	  if(searchChars!=    null)    {    if(cs.length()!=    searchChars.length)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
153	[BUG]  [BUGGY]  if(searchChars  ==  null  ||!isEmpty(cs)&&  ArrayUtils.mayHaveSideEffects(searchChars))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||!isEmpty(cs)&&  ArrayUtils.mayHaveSideEffects(searchChars))  {  [BUGGY]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null  ||!isEmpty(cs)&&  ArrayUtils.mayHaveSideEffects(searchChars))  {	  if(searchChars    ==    null    ||!isEmpty(cs)&&    ArrayUtils.isEmpty(searchChars))    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
154	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  ==  0  ||!isEmpty(cs)&&  ArrayUtils.isEmpty(searchChars))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  ==  0  ||!isEmpty(cs)&&  ArrayUtils.isEmpty(searchChars))  {  [BUGGY]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null  ||  searchChars.length  ==  0  ||!isEmpty(cs)&&  ArrayUtils.isEmpty(searchChars))  {	  if(searchChars    ==    null    ||!isEmpty(cs)&&    ArrayUtils.isEmpty(searchChars))    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
155	[BUG]  [BUGGY]  if(searchChars!=  null  ||  searchChars.length()!=  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars!=  null  ||  searchChars.length()!=  0)  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars!=  null  ||  searchChars.length()!=  0)  {  return  false;  }	  if(cs    ==    null    ||    searchChars.length()!=    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
156	[BUG]  [BUGGY]  char  ch  =  cs.charAt(1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char  ch  =  cs.charAt(1);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	char  ch  =  cs.charAt(1);	  char    ch    =    searchChars.charAt(0);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
157	[BUG]  [BUGGY]  if(searchChars  ==  null)  {  if(!isEmpty(cs)&&  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null)  {  if(!isEmpty(cs)&&  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null)  {  if(!isEmpty(cs)&&  ArrayUtils.isEmpty(searchChars))  {  return  false;  }	  if(searchChars    ==    null)    {    if(!isEmpty(cs)||    ArrayUtils.isEmpty(searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
158	[BUG]  [BUGGY]  ArrayUtils.remove(searchChars.length,  searchChars.length);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.remove(searchChars.length,  searchChars.length);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.remove(searchChars.length,  searchChars.length);	  ArrayUtils.remove(searchChars.length);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
159	[BUG]  [BUGGY]  if(cs  ==  null  ||  searchChars.length  ==  0  ||!isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(cs  ==  null  ||  searchChars.length  ==  0  ||!isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  [BUGGY]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(cs  ==  null  ||  searchChars.length  ==  0  ||!isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {	  if(cs    ==    null    ||!isEmpty(cs)||    ArrayUtils.isEmpty(searchChars))    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
160	[BUG]  [BUGGY]  int  searchLength  =  cs.length  -  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  int  searchLength  =  cs.length  -  1;  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	int  searchLength  =  cs.length  -  1;	  int    searchLength    =    cs.length;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
161	[BUG]  [BUGGY]  if(cs  ==  null  ||  searchChars.length  ==  0  ||  ArrayUtils.isEmpty(searchChars))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(cs  ==  null  ||  searchChars.length  ==  0  ||  ArrayUtils.isEmpty(searchChars))  {  [BUGGY]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(cs  ==  null  ||  searchChars.length  ==  0  ||  ArrayUtils.isEmpty(searchChars))  {	  if(cs    ==    null    ||    isEmpty(searchChars)||    ArrayUtils.isEmpty(searchChars))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
162	[BUG]  [BUGGY]  if(searchChars  ==  null)return  true;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null)return  true;  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null)return  true;	  if(searchChars    ==    null)return    false;    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
163	[BUG]  [BUGGY]  ArrayUtils.copyCurrentSequence(searchChars,  decomposed);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.copyCurrentSequence(searchChars,  decomposed);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.copyCurrentSequence(searchChars,  decomposed);	  ArrayUtils.copyCurrentSequence(searchChars,    searchChars);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
164	[BUG]  [BUGGY]  char  ch  =  cs.charAt(i  +  1,  searchChars.length  -  2);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char  ch  =  cs.charAt(i  +  1,  searchChars.length  -  2);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	char  ch  =  cs.charAt(i  +  1,  searchChars.length  -  2);	  char    ch    =    cs.charAt(i    +    1,    searchChars.length);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
165	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  ==  0)  {  return  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  ==  0)  {  return  true;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null  ||  searchChars.length  ==  0)  {  return  true;  }	  if(searchChars    ==    null)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
166	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length!=  0)  {  return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length!=  0)  {  return  true;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null  ||  searchChars.length!=  0)  {  return  true;  }	  if(searchChars    ==    null)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
167	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  containsAny(cs)&&  ArrayUtils.isEmpty(searchChars))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  containsAny(cs)&&  ArrayUtils.isEmpty(searchChars))  {  [BUGGY]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null  ||  containsAny(cs)&&  ArrayUtils.isEmpty(searchChars))  {	  if(searchChars    ==    null    ||    isEmpty(cs)&&    ArrayUtils.isEmpty(searchChars))    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
168	[BUG]  [BUGGY]  int  searchLength  -=  cs.length;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  int  searchLength  -=  cs.length;  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	int  searchLength  -=  cs.length;	  int    searchLength    =    cs.length;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
169	[BUG]  [BUGGY]  if(searchChars  ==  null)  {  if(searchChars.length!=  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null)  {  if(searchChars.length!=  0)  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null)  {  if(searchChars.length!=  0)  {  return  false;  }	  if(cs    ==    null)    {    if(searchChars.length()!=    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
170	[BUG]  [BUGGY]  if(cs  ==  null  ||  searchChars.length!=  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(cs  ==  null  ||  searchChars.length!=  0)  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(cs  ==  null  ||  searchChars.length!=  0)  {  return  false;  }	  if(cs    ==    null)    {    if(searchChars.length()!=    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
171	[BUG]  [BUGGY]  if(cs  ==  null  ||  searchChars.length  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(cs  ==  null  ||  searchChars.length  <  0)  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(cs  ==  null  ||  searchChars.length  <  0)  {  return  false;  }	  if(cs    ==    null)    {    if(searchChars.length()!=    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
172	[BUG]  [BUGGY]  ArrayUtils.copyCurrentSequence(cs,  searchChars,  3);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.copyCurrentSequence(cs,  searchChars,  3);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.copyCurrentSequence(cs,  searchChars,  3);	  ArrayUtils.copyCurrentSequence(cs,    searchChars,    DECOMPOSE);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
173	[BUG]  [BUGGY]  ArrayUtils.copyCurrentSequence(cs,  searchChars,  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.copyCurrentSequence(cs,  searchChars,  1);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.copyCurrentSequence(cs,  searchChars,  1);	  ArrayUtils.copyCurrentSequence(cs,    searchChars,    DECOMPOSE);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
174	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  2)  {  return  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  2)  {  return  true;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null  ||  searchChars.length  <  2)  {  return  true;  }	  if(searchChars    ==    null)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
175	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  1)  {  return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  1)  {  return  true;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null  ||  searchChars.length  <  1)  {  return  true;  }	  if(searchChars    ==    null)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
176	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  2)return  false;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  2)return  false;  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null  ||  searchChars.length  <  2)return  false;	  if(searchChars    ==    null)return    false;    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
177	[BUG]  [BUGGY]  if(cs  ==  null)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(cs  ==  null)  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(cs  ==  null)  {  return  false;  }	  if(searchChars    ==    null)    {    if(isEmpty(cs))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
178	[BUG]  [BUGGY]  ||(searchChars!=  null  &&  searchChars.length  >  0)||(searchChars.length  >  0))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ||(searchChars!=  null  &&  searchChars.length  >  0)||(searchChars.length  >  0))  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	||(searchChars!=  null  &&  searchChars.length  >  0)||(searchChars.length  >  0))  {  return  false;  }	  if(searchChars!=    null)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
179	[BUG]  [BUGGY]  ||(searchChars!=  null  &&  searchChars.length  >  0)||(searchChars.length  >  0))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ||(searchChars!=  null  &&  searchChars.length  >  0)||(searchChars.length  >  0))  {  return  true;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	||(searchChars!=  null  &&  searchChars.length  >  0)||(searchChars.length  >  0))  {  return  true;  }	  if(searchChars!=    null)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
180	[BUG]  [BUGGY]  ArrayUtils.remove(searchChars.length  -  searchChars.length);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.remove(searchChars.length  -  searchChars.length);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.remove(searchChars.length  -  searchChars.length);	  ArrayUtils.remove(searchChars.length);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
181	[BUG]  [BUGGY]  ArrayUtils.isEmpty(ch)||  ArrayUtils.isEmpty(searchChars);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.isEmpty(ch)||  ArrayUtils.isEmpty(searchChars);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.isEmpty(ch)||  ArrayUtils.isEmpty(searchChars);	  ArrayUtils.isEmpty(cs)||    ArrayUtils.isEmpty(searchChars);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
182	[BUG]  [BUGGY]  ArrayUtils.isEmpty(searchChars)&&  ArrayUtils.isEmpty(searchChars);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.isEmpty(searchChars)&&  ArrayUtils.isEmpty(searchChars);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.isEmpty(searchChars)&&  ArrayUtils.isEmpty(searchChars);	  ArrayUtils.isEmpty(cs)||    ArrayUtils.isEmpty(searchChars);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
183	[BUG]  [BUGGY]  if(searchChars  ==  null  ||!isEmpty(cs)&&  searchChars.length  >  0  ||  ArrayUtils.isEmpty(searchChars))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||!isEmpty(cs)&&  searchChars.length  >  0  ||  ArrayUtils.isEmpty(searchChars))  {  [BUGGY]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null  ||!isEmpty(cs)&&  searchChars.length  >  0  ||  ArrayUtils.isEmpty(searchChars))  {	  if(!isEmpty(cs)&&    searchChars.length    >    0    ||    ArrayUtils.isEmpty(searchChars))    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
184	[BUG]  [BUGGY]  if(cs  ==  null  ||!isEmpty(cs)&&  searchChars.length  >  0  ||  ArrayUtils.isEmpty(searchChars))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(cs  ==  null  ||!isEmpty(cs)&&  searchChars.length  >  0  ||  ArrayUtils.isEmpty(searchChars))  {  [BUGGY]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(cs  ==  null  ||!isEmpty(cs)&&  searchChars.length  >  0  ||  ArrayUtils.isEmpty(searchChars))  {	  if(!isEmpty(cs)&&    searchChars.length    >    0    ||    ArrayUtils.isEmpty(searchChars))    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
185	[BUG]  [BUGGY]  if(searchChars  ==  null  ||!isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||!isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null  ||!isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }	  if(searchChars    ==    null)    {    if(!isEmpty(cs)||    ArrayUtils.isEmpty(searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
186	[BUG]  [BUGGY]  ArrayUtils.fill(searchChars,  false);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.fill(searchChars,  false);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.fill(searchChars,  false);	  ArrayUtils.fill(searchChars);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
187	[BUG]  [BUGGY]  if(isEmpty(cs)||  searchChars.length!=  2  ||  ArrayUtils.isEmpty(searchChars))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(isEmpty(cs)||  searchChars.length!=  2  ||  ArrayUtils.isEmpty(searchChars))  {  [BUGGY]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(isEmpty(cs)||  searchChars.length!=  2  ||  ArrayUtils.isEmpty(searchChars))  {	  if(isEmpty(cs)||    searchChars.length!=    0    ||    ArrayUtils.isEmpty(searchChars))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
188	[BUG]  [BUGGY]  if(searchChars  ==  null  ||!isEmpty(cs)&&  searchChars.length  >  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||!isEmpty(cs)&&  searchChars.length  >  0)  {  [BUGGY]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null  ||!isEmpty(cs)&&  searchChars.length  >  0)  {	  if(!isEmpty(cs)&&    searchChars.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
189	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  cs.length()!=  searchChars.length)return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  cs.length()!=  searchChars.length)return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null  ||  cs.length()!=  searchChars.length)return  false;  }	  if(cs    ==    null    ||    cs.length()!=    searchChars.length)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
190	[BUG]  [BUGGY]  if(cs  ==  null  ||  searchChars.length  <  2)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(cs  ==  null  ||  searchChars.length  <  2)  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(cs  ==  null  ||  searchChars.length  <  2)  {  return  false;  }	  if(cs    ==    null    ||    searchChars.length()!=    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
191	[BUG]  [BUGGY]  ArrayUtils.copyCurrentSequence(searchChars,  cs,  index);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.copyCurrentSequence(searchChars,  cs,  index);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.copyCurrentSequence(searchChars,  cs,  index);	  ArrayUtils.copyCurrentSequence(cs,    searchChars,    index);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
192	[BUG]  [BUGGY]  ArrayUtils.show(searchChars);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.show(searchChars);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.show(searchChars);	  ArrayUtils.isEmpty(cs);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
193	[BUG]  [BUGGY]  ArrayUtils.checkState(searchChars.length  ==  0);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.checkState(searchChars.length  ==  0);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.checkState(searchChars.length  ==  0);	  ArrayUtils.isEmpty(cs);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
194	[BUG]  [BUGGY]  int  searchLength  =  searchChars.length  -  4;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  int  searchLength  =  searchChars.length  -  4;  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	int  searchLength  =  searchChars.length  -  4;	  int    searchLength    =    searchChars.length    -    1;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
195	[BUG]  [BUGGY]  if(searchChars!=  null  ||  searchChars.length  <  1)  {  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars!=  null  ||  searchChars.length  <  1)  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars!=  null  ||  searchChars.length  <  1)  {  return  false;  }	  if(searchChars    ==    null    ||    searchChars.length    <    1)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
196	[BUG]  [BUGGY]  if(cs  ==  null)  {  if(searchChars.length()!=  searchChars.length)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(cs  ==  null)  {  if(searchChars.length()!=  searchChars.length)  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(cs  ==  null)  {  if(searchChars.length()!=  searchChars.length)  {  return  false;  }	  if(searchChars!=    null)    {    if(cs.length()!=    searchChars.length)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
197	[BUG]  [BUGGY]  if(isEmpty(cs))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(isEmpty(cs))  {  return  true;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(isEmpty(cs))  {  return  true;  }	  if(cs    ==    null    ||!isEmpty(cs))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
198	[BUG]  [BUGGY]  if(cs  ==  null)  {  if(searchChars.length()  ==  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(cs  ==  null)  {  if(searchChars.length()  ==  0)  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(cs  ==  null)  {  if(searchChars.length()  ==  0)  {  return  false;  }	  if(searchChars!=    null)    {    if(cs.length()    ==    searchChars.length)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
199	[BUG]  [BUGGY]  if(cs  ==  null  ||  searchChars.length  ==  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(cs  ==  null  ||  searchChars.length  ==  0)  {  return  false;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(cs  ==  null  ||  searchChars.length  ==  0)  {  return  false;  }	  if(cs    ==    null    ||    searchChars.length()    ==    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
200	[BUG]  [BUGGY]  if(cs  ==  null  ||!isEmpty(ch)&&  ArrayUtils.isEmpty(searchChars))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(cs  ==  null  ||!isEmpty(ch)&&  ArrayUtils.isEmpty(searchChars))  {  [BUGGY]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(cs  ==  null  ||!isEmpty(ch)&&  ArrayUtils.isEmpty(searchChars))  {	  if(cs    ==    null    ||!isEmpty(cs)&&    ArrayUtils.isEmpty(searchChars))    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
201	[BUG]  [BUGGY]  ArrayUtils.copyCurrentSequence(cs,  searchChars,  null,  true);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.copyCurrentSequence(cs,  searchChars,  null,  true);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.copyCurrentSequence(cs,  searchChars,  null,  true);	  ArrayUtils.copyCurrentSequence(cs,    searchChars,    null);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
202	[BUG]  [BUGGY]  ArrayUtils.array(searchChars,  0,  searchChars.length);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ArrayUtils.array(searchChars,  0,  searchChars.length);  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	ArrayUtils.array(searchChars,  0,  searchChars.length);	  ArrayUtils.clear(searchChars);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
203	[BUG]  [BUGGY]  if(cs  ==  null  ||  cs.length()!=  searchChars.length)return  false;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(cs  ==  null  ||  cs.length()!=  searchChars.length)return  false;  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(cs  ==  null  ||  cs.length()!=  searchChars.length)return  false;	  if(searchChars    ==    null)    {    if(cs.length()!=    searchChars.length)return    false;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
204	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  cs.length()!=  searchChars.length)return  false;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  cs.length()!=  searchChars.length)return  false;  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(searchChars  ==  null  ||  cs.length()!=  searchChars.length)return  false;	  if(searchChars    ==    null)    {    if(cs.length()!=    searchChars.length)return    false;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
205	[BUG]  [BUGGY]  if(cs  ==  null  ||  searchChars.length!=  0)return  false;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(cs  ==  null  ||  searchChars.length!=  0)return  false;  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(cs  ==  null  ||  searchChars.length!=  0)return  false;	  if(searchChars    ==    null)    {    if(cs.length()!=    searchChars.length)return    false;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
206	[BUG]  [BUGGY]  if(!isEmpty(cs))  {  return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(!isEmpty(cs))  {  return  true;  }  [BUGGY]      if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1444	1444	10	replace	if(!isEmpty(cs))  {  return  true;  }	  if(!isEmpty(cs))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
