bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    (Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1))  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  [BUGGY]    (Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1))  [BUGGY]  if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	    (Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1))		non-compiled	[CE]  illegal  start  of  expression	50	None	add
2	[BUG]  [BUGGY]    (Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDe  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  [BUGGY]    (Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDe  [BUGGY]  if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	    (Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDe		non-compiled	[CE]  illegal  start  of  expression	50	None	add
3	[BUG]  [BUGGY]    (Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  [BUGGY]    (Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [BUGGY]  if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	    (Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  dx;		non-compiled	[CE]  illegal  start  of  expression	50	None	add
4	[BUG]  [BUGGY]    (Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  d  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  [BUGGY]    (Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  d  [BUGGY]  if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	    (Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  d		non-compiled	[CE]  illegal  start  of  expression	50	None	add
5	[BUG]  [BUGGY]    (Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y2))  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  [BUGGY]    (Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y2))  [BUGGY]  if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	    (Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y2))		non-compiled	[CE]  illegal  start  of  expression	50	None	add
6	[BUG]  [BUGGY]  if(Math.abs(oldDelta)  <  tolerance)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  [BUGGY]  if(Math.abs(oldDelta)  <  tolerance)  {  [BUGGY]  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	if(Math.abs(oldDelta)  <  tolerance)  {	if  ((Math.abs(oldDelta)  <  tolerance)  ||    (Math.abs(y0)  <=  Math.abs(y1)))  {  	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
7	[BUG]  [BUGGY]  if(!(Math.abs(oldDelta)  <  tolerance)||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  [BUGGY]  if(!(Math.abs(oldDelta)  <  tolerance)||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  [BUGGY]  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	if(!(Math.abs(oldDelta)  <  tolerance)||  (Math.abs(y0)  <  =  Math.abs(y1)))  {	if  ((Math.abs(oldDelta)  <  tolerance)  ||    (Math.abs(y0)  <=  Math.abs(y1)))  {  	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
8	[BUG]  [BUGGY]  if(!(Math.abs(oldDelta)  <  tolerance)  ||!Math.abs(y0)  <  =  Math.abs(y1)))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  [BUGGY]  if(!(Math.abs(oldDelta)  <  tolerance)  ||!Math.abs(y0)  <  =  Math.abs(y1)))  {  [BUGGY]  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	if(!(Math.abs(oldDelta)  <  tolerance)  ||!Math.abs(y0)  <  =  Math.abs(y1)))  {	if  ((Math.abs(oldDelta)  <  tolerance)  ||    (Math.abs(y0)  <=  Math.abs(y1)))  {  	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
9	[BUG]  [BUGGY]  if(!(Math.abs(oldDelta)  <  tolerance)||!Math.abs(y0)&&!Math.abs(y1))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  [BUGGY]  if(!(Math.abs(oldDelta)  <  tolerance)||!Math.abs(y0)&&!Math.abs(y1))  {  [BUGGY]  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	if(!(Math.abs(oldDelta)  <  tolerance)||!Math.abs(y0)&&!Math.abs(y1))  {	if  ((Math.abs(oldDelta)  <  tolerance)  ||    (Math.abs(y0)  <=  Math.abs(y1)))  {  	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
10	[BUG]  [BUGGY]    int  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  [BUGGY]    int  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  [BUGGY]  if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	    int  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);		non-compiled	[CE]  illegal  start  of  expression	50	None	add
11	[BUG]  [BUGGY]    int  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(x2),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  [BUGGY]    int  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(x2),  absoluteAccuracy);  [BUGGY]  if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	    int  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(x2),  absoluteAccuracy);		non-compiled	[CE]  illegal  start  of  expression	50	None	add
12	[BUG]  [BUGGY]    int  oldDelta  =  f.getDelta(x1);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  [BUGGY]    int  oldDelta  =  f.getDelta(x1);  [BUGGY]  if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	    int  oldDelta  =  f.getDelta(x1);		non-compiled	[CE]  illegal  start  of  expression	50	None	add
13	[BUG]  [BUGGY]    int  oldDelta  =  f.getDelta(x1,  y0);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  [BUGGY]    int  oldDelta  =  f.getDelta(x1,  y0);  [BUGGY]  if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	    int  oldDelta  =  f.getDelta(x1,  y0);		non-compiled	[CE]  illegal  start  of  expression	50	None	add
14	[BUG]  [BUGGY]    int  oldDelta  =  f.getDelta(x0,  y0);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  [BUGGY]    int  oldDelta  =  f.getDelta(x0,  y0);  [BUGGY]  if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	    int  oldDelta  =  f.getDelta(x0,  y0);		non-compiled	[CE]  illegal  start  of  expression	50	None	add
15	[BUG]  [BUGGY]  if(!(Math.abs(oldDelta)  <  tolerance)||!(Math.abs(y0)  <  =  Math.abs(y1)))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  [BUGGY]  if(!(Math.abs(oldDelta)  <  tolerance)||!(Math.abs(y0)  <  =  Math.abs(y1)))  {  [BUGGY]  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	if(!(Math.abs(oldDelta)  <  tolerance)||!(Math.abs(y0)  <  =  Math.abs(y1)))  {	if  ((Math.abs(oldDelta)  <  tolerance)  ||    (Math.abs(y0)  <=  Math.abs(y1)))  {  	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
16	[BUG]  [BUGGY]  if(!(Math.abs(oldDelta)  <  tolerance)&&!(Math.abs(y0)  <  =  Math.abs(y1)))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  [BUGGY]  if(!(Math.abs(oldDelta)  <  tolerance)&&!(Math.abs(y0)  <  =  Math.abs(y1)))  {  [BUGGY]  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	if(!(Math.abs(oldDelta)  <  tolerance)&&!(Math.abs(y0)  <  =  Math.abs(y1)))  {	if  ((Math.abs(oldDelta)  <  tolerance)  ||    (Math.abs(y0)  <=  Math.abs(y1)))  {  	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
17	[BUG]  [BUGGY]  if(!(Math.abs(oldDelta)  <  tolerance)||!Math.abs(y0)  <  =  Math.abs(y1))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  [BUGGY]  if(!(Math.abs(oldDelta)  <  tolerance)||!Math.abs(y0)  <  =  Math.abs(y1))  {  [BUGGY]  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	if(!(Math.abs(oldDelta)  <  tolerance)||!Math.abs(y0)  <  =  Math.abs(y1))  {	if  ((Math.abs(oldDelta)  <  tolerance)  ||    (Math.abs(y0)  <=  Math.abs(y1)))  {  	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
18	[BUG]  [BUGGY]    double  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  [BUGGY]    double  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  [BUGGY]  if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	    double  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);		non-compiled	[CE]  illegal  start  of  expression	50	None	add
19	[BUG]  [BUGGY]    int  oldDelta  =  Math.min(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  [BUGGY]    int  oldDelta  =  Math.min(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  [BUGGY]  if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	    int  oldDelta  =  Math.min(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);		non-compiled	[CE]  illegal  start  of  expression	50	None	add
20	[BUG]  [BUGGY]    double  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(x2),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  [BUGGY]    double  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(x2),  absoluteAccuracy);  [BUGGY]  if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	    double  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(x2),  absoluteAccuracy);		non-compiled	[CE]  illegal  start  of  expression	50	None	add
