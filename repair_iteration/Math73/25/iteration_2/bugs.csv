bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!(Math.abs(oldDelta)  <  tolerance)&&  (Math.abs(y0)  <  =  Math.abs(y1)))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  if(!(Math.abs(oldDelta)  <  tolerance)&&  (Math.abs(y0)  <  =  Math.abs(y1)))  {  [BUGGY]    (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	if(!(Math.abs(oldDelta)  <  tolerance)&&  (Math.abs(y0)  <  =  Math.abs(y1)))  {	  if(!(Math.abs(oldDelta)    <    tolerance)||    (Math.abs(y0)    <    =    Math.abs(y1)))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
2	[BUG]  [BUGGY]  (Math.abs(oldDelta)  <  tolerance)||  (Math.abs(y1)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  d  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  (Math.abs(oldDelta)  <  tolerance)||  (Math.abs(y1)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  d  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	(Math.abs(oldDelta)  <  tolerance)||  (Math.abs(y1)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  d	      (Math.abs(oldDelta)    <    tolerance)    ||    (Math.abs(y0)    <    =    Math.abs(y1)))    {    (Math.abs(y0)    <    =    Math.abs(y1)))    {    delta    =    0.5    *    d    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
3	[BUG]  [BUGGY]  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  d  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  d  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	(Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  d	      (Math.abs(oldDelta)    <    tolerance)    ||    (Math.abs(y0)    <    =    Math.abs(y1)))    {    (Math.abs(y0)    <    =    Math.abs(y1)))    {    delta    =    0.5    *    d    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
4	[BUG]  [BUGGY]  double  oldDelta  =  Math.min(relativeAccuracy  *  Math.abs(x2),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  double  oldDelta  =  Math.min(relativeAccuracy  *  Math.abs(x2),  absoluteAccuracy);  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	double  oldDelta  =  Math.min(relativeAccuracy  *  Math.abs(x2),  absoluteAccuracy);	      double    oldDelta    =    Math.max(relativeAccuracy    *    Math.abs(x2),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
5	[BUG]  [BUGGY]  double  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(x2),  absoluteAccuracy  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  double  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(x2),  absoluteAccuracy  +  1);  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	double  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(x2),  absoluteAccuracy  +  1);	      double    oldDelta    =    Math.max(relativeAccuracy    *    Math.abs(x2),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
6	[BUG]  [BUGGY]  int  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(dx),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  int  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(dx),  absoluteAccuracy);  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	int  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(dx),  absoluteAccuracy);	      int    oldDelta    =    Math.max(relativeAccuracy    *    Math.abs(x1),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
7	[BUG]  [BUGGY]  if(!(Math.abs(dx)  <  tolerance)||!(Math.abs(y0)  <  =  Math.abs(y1)))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  if(!(Math.abs(dx)  <  tolerance)||!(Math.abs(y0)  <  =  Math.abs(y1)))  {  [BUGGY]    (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	if(!(Math.abs(dx)  <  tolerance)||!(Math.abs(y0)  <  =  Math.abs(y1)))  {	  if(!(Math.abs(oldDelta)    <    tolerance)||!(Math.abs(y0)    <    =    Math.abs(y1)))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
8	[BUG]  [BUGGY]  if(!(Math.abs(oldDelta)  <  tolerance)&&!Math.abs(y0)  <  =  Math.abs(y1)))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  if(!(Math.abs(oldDelta)  <  tolerance)&&!Math.abs(y0)  <  =  Math.abs(y1)))  {  [BUGGY]    (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	if(!(Math.abs(oldDelta)  <  tolerance)&&!Math.abs(y0)  <  =  Math.abs(y1)))  {	  if(!(Math.abs(oldDelta)    <    tolerance)&&!(Math.abs(y0)    <    =    Math.abs(y1)))    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
9	[BUG]  [BUGGY]  if(!(Math.abs(y0)  <  tolerance)||!Math.abs(y0)&&!Math.abs(y1))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  if(!(Math.abs(y0)  <  tolerance)||!Math.abs(y0)&&!Math.abs(y1))  {  [BUGGY]    (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	if(!(Math.abs(y0)  <  tolerance)||!Math.abs(y0)&&!Math.abs(y1))  {	  if(!(Math.abs(oldDelta)    <    tolerance)||!Math.abs(y0)&&!Math.abs(y1))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
10	[BUG]  [BUGGY]  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y2))  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y2))  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	(Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y2))	      (Math.abs(oldDelta)    <    tolerance)    ||    (Math.abs(y0)    <    =    Math.abs(y1)))    {    (Math.abs(y0)    <    =    Math.abs(y2))    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
11	[BUG]  [BUGGY]  (Math.abs(oldDelta)  <  tolerance)||  (Math.abs(y1)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y2))  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  (Math.abs(oldDelta)  <  tolerance)||  (Math.abs(y1)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y2))  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	(Math.abs(oldDelta)  <  tolerance)||  (Math.abs(y1)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y2))	      (Math.abs(oldDelta)    <    tolerance)    ||    (Math.abs(y0)    <    =    Math.abs(y1)))    {    (Math.abs(y0)    <    =    Math.abs(y2))    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
12	[BUG]  [BUGGY]  (Math.abs(oldDelta)  <  tolerance)||  (Math.abs(y1)  <  =  Math.abs(y2)))  {  (Math.abs(y0)  <  =  Math.abs(y1))  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  (Math.abs(oldDelta)  <  tolerance)||  (Math.abs(y1)  <  =  Math.abs(y2)))  {  (Math.abs(y0)  <  =  Math.abs(y1))  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	(Math.abs(oldDelta)  <  tolerance)||  (Math.abs(y1)  <  =  Math.abs(y2)))  {  (Math.abs(y0)  <  =  Math.abs(y1))	      (Math.abs(oldDelta)    <    tolerance)    ||    (Math.abs(y0)    <    =    Math.abs(y1)))    {    (Math.abs(y0)    <    =    Math.abs(y2))    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
13	[BUG]  [BUGGY]  if(!(Math.abs(oldDelta)  <  tolerance)&&!Math.abs(y0)  <  =  Math.abs(y1))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  if(!(Math.abs(oldDelta)  <  tolerance)&&!Math.abs(y0)  <  =  Math.abs(y1))  {  [BUGGY]    (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	if(!(Math.abs(oldDelta)  <  tolerance)&&!Math.abs(y0)  <  =  Math.abs(y1))  {	  if(!(Math.abs(oldDelta)    <    tolerance)||!Math.abs(y0)    <    =    Math.abs(y1))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
14	[BUG]  [BUGGY]  double  oldDelta  =  f.getDelta(x1,  y0);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  double  oldDelta  =  f.getDelta(x1,  y0);  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	double  oldDelta  =  f.getDelta(x1,  y0);	      int    oldDelta    =    f.getDelta(x1,    y0);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
15	[BUG]  [BUGGY]  int  oldDelta  =  f.getDelta(dx,  y0);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  int  oldDelta  =  f.getDelta(dx,  y0);  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	int  oldDelta  =  f.getDelta(dx,  y0);	      int    oldDelta    =    f.getDelta(x1,    y0);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
16	[BUG]  [BUGGY]  int  oldDelta  =  f.getDelta(x1,  i);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  int  oldDelta  =  f.getDelta(x1,  i);  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	int  oldDelta  =  f.getDelta(x1,  i);	      int    oldDelta    =    f.getDelta(x1,    y0);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
17	[BUG]  [BUGGY]  int  oldDelta  =  Math.min(relativeAccuracy  *  Math.abs(x2),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  int  oldDelta  =  Math.min(relativeAccuracy  *  Math.abs(x2),  absoluteAccuracy);  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	int  oldDelta  =  Math.min(relativeAccuracy  *  Math.abs(x2),  absoluteAccuracy);	      int    oldDelta    =    Math.max(relativeAccuracy    *    Math.abs(x2),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
18	[BUG]  [BUGGY]  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1))  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1))  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	(Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1))	      (Math.abs(oldDelta)    <    tolerance)    ||    (Math.abs(y0)    <    =    Math.abs(y1)))    {    (Math.abs(y0)    <    =    Math.abs(y1))    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
19	[BUG]  [BUGGY]  (Math.abs(oldDelta)  <  tolerance)||  (Math.abs(y1)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1))  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  (Math.abs(oldDelta)  <  tolerance)||  (Math.abs(y1)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1))  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	(Math.abs(oldDelta)  <  tolerance)||  (Math.abs(y1)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1))	      (Math.abs(oldDelta)    <    tolerance)    ||    (Math.abs(y0)    <    =    Math.abs(y1)))    {    (Math.abs(y0)    <    =    Math.abs(y1))    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
20	[BUG]  [BUGGY]  (Math.abs(oldDelta)  <  =  tolerance)||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1))  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  (Math.abs(oldDelta)  <  =  tolerance)||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1))  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	(Math.abs(oldDelta)  <  =  tolerance)||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1))	      (Math.abs(oldDelta)    <    tolerance)    ||    (Math.abs(y0)    <    =    Math.abs(y1)))    {    (Math.abs(y0)    <    =    Math.abs(y1))    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
21	[BUG]  [BUGGY]  if(Math.abs(oldDelta)  <  tolerance)  {  if(Math.abs(y0)  <  =  Math.abs(y1))  {  delta  =  0.5  *  dx;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  if(Math.abs(oldDelta)  <  tolerance)  {  if(Math.abs(y0)  <  =  Math.abs(y1))  {  delta  =  0.5  *  dx;  }  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	if(Math.abs(oldDelta)  <  tolerance)  {  if(Math.abs(y0)  <  =  Math.abs(y1))  {  delta  =  0.5  *  dx;  }	      (Math.abs(oldDelta)    <    tolerance)    ||    (Math.abs(y0)    <    =    Math.abs(y1)))    {    (Math.abs(y0)    <    =    Math.abs(y1)))    {    delta    =    0.5    *    dx;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
22	[BUG]  [BUGGY]  if(Math.abs(oldDelta)  <  tolerance)  {  if(Math.abs(y1)  <  =  Math.abs(y1))  {  delta  =  0.5  *  dx;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  if(Math.abs(oldDelta)  <  tolerance)  {  if(Math.abs(y1)  <  =  Math.abs(y1))  {  delta  =  0.5  *  dx;  }  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	if(Math.abs(oldDelta)  <  tolerance)  {  if(Math.abs(y1)  <  =  Math.abs(y1))  {  delta  =  0.5  *  dx;  }	      (Math.abs(oldDelta)    <    tolerance)    ||    (Math.abs(y0)    <    =    Math.abs(y1)))    {    (Math.abs(y0)    <    =    Math.abs(y1)))    {    delta    =    0.5    *    dx;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
23	[BUG]  [BUGGY]  if(Math.abs(oldDelta)  <  tolerance)  {  if(Math.abs(y0)  <  =  Math.abs(y1))  {  delta  =  0.5  *  oldDelta;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  if(Math.abs(oldDelta)  <  tolerance)  {  if(Math.abs(y0)  <  =  Math.abs(y1))  {  delta  =  0.5  *  oldDelta;  }  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	if(Math.abs(oldDelta)  <  tolerance)  {  if(Math.abs(y0)  <  =  Math.abs(y1))  {  delta  =  0.5  *  oldDelta;  }	      (Math.abs(oldDelta)    <    tolerance)    ||    (Math.abs(y0)    <    =    Math.abs(y1)))    {    (Math.abs(y0)    <    =    Math.abs(y1)))    {    delta    =    0.5    *    dx;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
24	[BUG]  [BUGGY]  double  oldDelta  =  Math.min(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  double  oldDelta  =  Math.min(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	double  oldDelta  =  Math.min(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);	      int    oldDelta    =    Math.min(relativeAccuracy    *    Math.abs(x1),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
25	[BUG]  [BUGGY]  double  oldDelta  =  f.getDelta(x1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  double  oldDelta  =  f.getDelta(x1);  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	double  oldDelta  =  f.getDelta(x1);	      int    oldDelta    =    f.getDelta(x1);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
26	[BUG]  [BUGGY]  int  oldDelta  =  f.getDelta(dx);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  int  oldDelta  =  f.getDelta(dx);  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	int  oldDelta  =  f.getDelta(dx);	      int    oldDelta    =    f.getDelta(x1);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
27	[BUG]  [BUGGY]  int  oldDelta  =  f.getDelta(x0);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  int  oldDelta  =  f.getDelta(x0);  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	int  oldDelta  =  f.getDelta(x0);	      int    oldDelta    =    f.getDelta(x1);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
28	[BUG]  [BUGGY]  float  oldDelta  =  f.getDelta(x1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  float  oldDelta  =  f.getDelta(x1);  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	float  oldDelta  =  f.getDelta(x1);	      int    oldDelta    =    f.getDelta(x1);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
29	[BUG]  [BUGGY]  (Math.abs(delta)  <  tolerance)||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDe  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  (Math.abs(delta)  <  tolerance)||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDe  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	(Math.abs(delta)  <  tolerance)||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDe	      (Math.abs(oldDelta)    <    tolerance)    ||    (Math.abs(y0)    <    =    Math.abs(y1)))    {    (Math.abs(y0)    <    =    Math.abs(y1)))    {    delta    =    0.5    *    dx;    oldDe    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
30	[BUG]  [BUGGY]  (Math.abs(dx)  <  tolerance)||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDe  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  (Math.abs(dx)  <  tolerance)||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDe  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	(Math.abs(dx)  <  tolerance)||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDe	      (Math.abs(oldDelta)    <    tolerance)    ||    (Math.abs(y0)    <    =    Math.abs(y1)))    {    (Math.abs(y0)    <    =    Math.abs(y1)))    {    delta    =    0.5    *    dx;    oldDe    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
31	[BUG]  [BUGGY]  if(Math.abs(oldDelta)  <  =  tolerance)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  if(Math.abs(oldDelta)  <  =  tolerance)  {  [BUGGY]    (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	if(Math.abs(oldDelta)  <  =  tolerance)  {	  if(Math.abs(oldDelta)    <    tolerance)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
32	[BUG]  [BUGGY]  if(Math.abs(dx)  <  =  tolerance)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  if(Math.abs(dx)  <  =  tolerance)  {  [BUGGY]    (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	if(Math.abs(dx)  <  =  tolerance)  {	  if(Math.abs(oldDelta)    <    tolerance)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
33	[BUG]  [BUGGY]  if(Math.abs(dx)  <  tolerance)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  if(Math.abs(dx)  <  tolerance)  {  [BUGGY]    (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	if(Math.abs(dx)  <  tolerance)  {	  if(Math.abs(oldDelta)    <    tolerance)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
34	[BUG]  [BUGGY]  if(Math.abs(y0)  <  =  tolerance)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  if(Math.abs(y0)  <  =  tolerance)  {  [BUGGY]    (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	if(Math.abs(y0)  <  =  tolerance)  {	  if(Math.abs(oldDelta)    <    tolerance)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
35	[BUG]  [BUGGY]  double  oldDelta  =  f.getDelta(x0,  y0);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  double  oldDelta  =  f.getDelta(x0,  y0);  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	double  oldDelta  =  f.getDelta(x0,  y0);	      int    oldDelta    =    f.getDelta(x0,    y0);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
36	[BUG]  [BUGGY]  int  oldDelta  =  f.getDelta(x0,  y0,  tolerance);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  int  oldDelta  =  f.getDelta(x0,  y0,  tolerance);  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	int  oldDelta  =  f.getDelta(x0,  y0,  tolerance);	      int    oldDelta    =    f.getDelta(x0,    y0);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
37	[BUG]  [BUGGY]  double  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(dx),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  double  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(dx),  absoluteAccuracy);  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	double  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(dx),  absoluteAccuracy);	      double    oldDelta    =    Math.max(relativeAccuracy    *    Math.abs(x1),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
38	[BUG]  [BUGGY]  int  oldDelta  =  f.getDelta(x0,  i);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  int  oldDelta  =  f.getDelta(x0,  i);  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	int  oldDelta  =  f.getDelta(x0,  i);	      int    oldDelta    =    f.getDelta(x1);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
39	[BUG]  [BUGGY]  int  oldDelta  =  f.getDelta(delta);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  int  oldDelta  =  f.getDelta(delta);  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	int  oldDelta  =  f.getDelta(delta);	      int    oldDelta    =    f.getDelta(x1);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
40	[BUG]  [BUGGY]  if(!(Math.abs(oldDelta)  <  =  tolerance)||!Math.abs(y0)&&!Math.abs(y1))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  if(!(Math.abs(oldDelta)  <  =  tolerance)||!Math.abs(y0)&&!Math.abs(y1))  {  [BUGGY]    (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	if(!(Math.abs(oldDelta)  <  =  tolerance)||!Math.abs(y0)&&!Math.abs(y1))  {	  if(!(Math.abs(oldDelta)    <    tolerance)||!Math.abs(y0)&&!Math.abs(y1))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
41	[BUG]  [BUGGY]  if(!(Math.abs(oldDelta)  <  tolerance)&&!Math.abs(y0)&&!Math.abs(y1))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  if(!(Math.abs(oldDelta)  <  tolerance)&&!Math.abs(y0)&&!Math.abs(y1))  {  [BUGGY]    (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	if(!(Math.abs(oldDelta)  <  tolerance)&&!Math.abs(y0)&&!Math.abs(y1))  {	  if(!(Math.abs(oldDelta)    <    tolerance)||!Math.abs(y0)&&!Math.abs(y1))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
42	[BUG]  [BUGGY]  (Math.abs(oldDelta)  <  tolerance)&&(Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  d  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  (Math.abs(oldDelta)  <  tolerance)&&(Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  d  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	(Math.abs(oldDelta)  <  tolerance)&&(Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  d	      (Math.abs(oldDelta)    <    tolerance)    ||    (Math.abs(y0)    <    =    Math.abs(y1)))    {    (Math.abs(y0)    <    =    Math.abs(y1)))    {    delta    =    0.5    *    d    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
43	[BUG]  [BUGGY]  (Math.abs(oldDelta)  <  tolerance)||  (Math.abs(y1)  <  =  Math.abs(y2)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  d  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  (Math.abs(oldDelta)  <  tolerance)||  (Math.abs(y1)  <  =  Math.abs(y2)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  d  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	(Math.abs(oldDelta)  <  tolerance)||  (Math.abs(y1)  <  =  Math.abs(y2)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  d	      (Math.abs(oldDelta)    <    tolerance)    ||    (Math.abs(y0)    <    =    Math.abs(y1)))    {    (Math.abs(y0)    <    =    Math.abs(y1)))    {    delta    =    0.5    *    d    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
44	[BUG]  [BUGGY]  (Math.abs(delta)  <  tolerance)||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  dx;  old  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  (Math.abs(delta)  <  tolerance)||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  dx;  old  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	(Math.abs(delta)  <  tolerance)||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  dx;  old	      (Math.abs(oldDelta)    <    tolerance)    ||    (Math.abs(y0)    <    =    Math.abs(y1)))    {    (Math.abs(y0)    <    =    Math.abs(y1)))    {    delta    =    0.5    *    dx;    oldDe    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
45	[BUG]  [BUGGY]  (Math.abs(delta)  <  tolerance)||  (Math.abs(y1)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDe  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  (Math.abs(delta)  <  tolerance)||  (Math.abs(y1)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDe  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	(Math.abs(delta)  <  tolerance)||  (Math.abs(y1)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDe	      (Math.abs(oldDelta)    <    tolerance)    ||    (Math.abs(y0)    <    =    Math.abs(y1)))    {    (Math.abs(y0)    <    =    Math.abs(y1)))    {    delta    =    0.5    *    dx;    oldDe    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
46	[BUG]  [BUGGY]  (Math.abs(delta)  <  tolerance)||  (Math.abs(y1)  <  =  Math.abs(y2)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDe  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  (Math.abs(delta)  <  tolerance)||  (Math.abs(y1)  <  =  Math.abs(y2)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDe  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	(Math.abs(delta)  <  tolerance)||  (Math.abs(y1)  <  =  Math.abs(y2)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDe	      (Math.abs(oldDelta)    <    tolerance)    ||    (Math.abs(y0)    <    =    Math.abs(y1)))    {    (Math.abs(y0)    <    =    Math.abs(y1)))    {    delta    =    0.5    *    dx;    oldDe    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
47	[BUG]  [BUGGY]  if(!(Math.abs(oldDelta)  <  tolerance)||  (Math.abs(y1)  <  =  Math.abs(y1)))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  if(!(Math.abs(oldDelta)  <  tolerance)||  (Math.abs(y1)  <  =  Math.abs(y1)))  {  [BUGGY]    (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	if(!(Math.abs(oldDelta)  <  tolerance)||  (Math.abs(y1)  <  =  Math.abs(y1)))  {	  if(!(Math.abs(oldDelta)    <    tolerance)||    (Math.abs(y0)    <    =    Math.abs(y1)))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
48	[BUG]  [BUGGY]  (Math.abs(oldDelta)  <  tolerance)||  (Math.abs(y2)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1))  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  (Math.abs(oldDelta)  <  tolerance)||  (Math.abs(y2)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1))  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	(Math.abs(oldDelta)  <  tolerance)||  (Math.abs(y2)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1))	      (Math.abs(oldDelta)    <    tolerance)    ||    (Math.abs(y0)    <    =    Math.abs(y1)))    {    (Math.abs(y0)    <    =    Math.abs(y1))    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
49	[BUG]  [BUGGY]  if(Math.abs(oldDelta)  <  tolerance)  {  if(Math.abs(y1)  <  =  Math.abs(y2))  {  delta  =  0.5  *  dx;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  if(Math.abs(oldDelta)  <  tolerance)  {  if(Math.abs(y1)  <  =  Math.abs(y2))  {  delta  =  0.5  *  dx;  }  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	if(Math.abs(oldDelta)  <  tolerance)  {  if(Math.abs(y1)  <  =  Math.abs(y2))  {  delta  =  0.5  *  dx;  }	      (Math.abs(oldDelta)    <    tolerance)    ||    (Math.abs(y0)    <    =    Math.abs(y1)))    {    (Math.abs(y0)    <    =    Math.abs(y1)))    {    delta    =    0.5    *    dx;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
50	[BUG]  [BUGGY]  (Math.abs(oldDelta)  <  tolerance)||  (Math.abs(y1)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  (Math.abs(oldDelta)  <  tolerance)||  (Math.abs(y1)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	(Math.abs(oldDelta)  <  tolerance)||  (Math.abs(y1)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  dx;	      (Math.abs(oldDelta)    <    tolerance)    ||    (Math.abs(y0)    <    =    Math.abs(y1)))    {    (Math.abs(y0)    <    =    Math.abs(y1)))    {    delta    =    0.5    *    dx;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
51	[BUG]  [BUGGY]  if(!Math.abs(oldDelta)  <  tolerance)&&!Math.abs(y0)  <  =  Math.abs(y1))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  if(!Math.abs(oldDelta)  <  tolerance)&&!Math.abs(y0)  <  =  Math.abs(y1))  {  [BUGGY]    (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	if(!Math.abs(oldDelta)  <  tolerance)&&!Math.abs(y0)  <  =  Math.abs(y1))  {	  if(!(Math.abs(oldDelta)    <    tolerance)||!Math.abs(y0)    <    =    Math.abs(y1))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
52	[BUG]  [BUGGY]  if(!(Math.abs(oldDelta)  <  tolerance)||!Math.abs(y2)  <  =  Math.abs(y1)))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  if(!(Math.abs(oldDelta)  <  tolerance)||!Math.abs(y2)  <  =  Math.abs(y1)))  {  [BUGGY]    (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	if(!(Math.abs(oldDelta)  <  tolerance)||!Math.abs(y2)  <  =  Math.abs(y1)))  {	  if(!(Math.abs(oldDelta)    <    tolerance)    ||!Math.abs(y0)    <    =    Math.abs(y1)))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
53	[BUG]  [BUGGY]  (Math.abs(oldDelta)  <  tolerance)||  (Math.abs(y1)  <  =  Math.abs(y2)))  {  (Math.abs(y0)  <  =  Math.abs(y2))  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  (Math.abs(oldDelta)  <  tolerance)||  (Math.abs(y1)  <  =  Math.abs(y2)))  {  (Math.abs(y0)  <  =  Math.abs(y2))  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	(Math.abs(oldDelta)  <  tolerance)||  (Math.abs(y1)  <  =  Math.abs(y2)))  {  (Math.abs(y0)  <  =  Math.abs(y2))	      (Math.abs(oldDelta)    <    tolerance)    ||    (Math.abs(y0)    <    =    Math.abs(y1)))    {    (Math.abs(y0)    <    =    Math.abs(y2))    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
54	[BUG]  [BUGGY]  (Math.abs(oldDelta)  <  tolerance)||  (Math.abs(y2)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y2))  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  (Math.abs(oldDelta)  <  tolerance)||  (Math.abs(y2)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y2))  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	(Math.abs(oldDelta)  <  tolerance)||  (Math.abs(y2)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y2))	      (Math.abs(oldDelta)    <    tolerance)    ||    (Math.abs(y0)    <    =    Math.abs(y1)))    {    (Math.abs(y0)    <    =    Math.abs(y2))    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
55	[BUG]  [BUGGY]  double  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(y2),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  double  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(y2),  absoluteAccuracy);  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	double  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(y2),  absoluteAccuracy);	      double    oldDelta    =    Math.max(relativeAccuracy    *    Math.abs(x2),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
56	[BUG]  [BUGGY]  double  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(x),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  double  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(x),  absoluteAccuracy);  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	double  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(x),  absoluteAccuracy);	      double    oldDelta    =    Math.max(relativeAccuracy    *    Math.abs(x1),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
57	[BUG]  [BUGGY]  int  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(y1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  int  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(y1),  absoluteAccuracy);  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	int  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(y1),  absoluteAccuracy);	      int    oldDelta    =    Math.max(relativeAccuracy    *    Math.abs(x1),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
58	[BUG]  [BUGGY]  (Math.abs(delta)  <  =  tolerance)||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDe  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  (Math.abs(delta)  <  =  tolerance)||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDe  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	(Math.abs(delta)  <  =  tolerance)||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDe	      (Math.abs(oldDelta)    <    tolerance)    ||    (Math.abs(y0)    <    =    Math.abs(y1)))    {    (Math.abs(y0)    <    =    Math.abs(y1)))    {    delta    =    0.5    *    dx;    oldDe    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
59	[BUG]  [BUGGY]  if(!(Math.abs(oldDelta)  <  tolerance)||!Math.abs(y1)  <  =  Math.abs(y1)))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  if(!(Math.abs(oldDelta)  <  tolerance)||!Math.abs(y1)  <  =  Math.abs(y1)))  {  [BUGGY]    (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	if(!(Math.abs(oldDelta)  <  tolerance)||!Math.abs(y1)  <  =  Math.abs(y1)))  {	  if(!(Math.abs(oldDelta)    <    tolerance)    ||!Math.abs(y0)    <    =    Math.abs(y1)))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
60	[BUG]  [BUGGY]  if(!(Math.abs(oldDelta)  <  tolerance)||!(Math.abs(y1)  <  =  Math.abs(y1)))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  if(!(Math.abs(oldDelta)  <  tolerance)||!(Math.abs(y1)  <  =  Math.abs(y1)))  {  [BUGGY]    (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	if(!(Math.abs(oldDelta)  <  tolerance)||!(Math.abs(y1)  <  =  Math.abs(y1)))  {	  if(!(Math.abs(oldDelta)    <    tolerance)||!(Math.abs(y0)    <    =    Math.abs(y1)))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
61	[BUG]  [BUGGY]  (Math.abs(delta)  <  tolerance)||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  d  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  (Math.abs(delta)  <  tolerance)||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  d  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	(Math.abs(delta)  <  tolerance)||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  d	      (Math.abs(oldDelta)    <    tolerance)    ||    (Math.abs(y0)    <    =    Math.abs(y1)))    {    (Math.abs(y0)    <    =    Math.abs(y1)))    {    delta    =    0.5    *    d    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
62	[BUG]  [BUGGY]  (Math.abs(delta)  <  tolerance)||  (Math.abs(y1)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  d  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  (Math.abs(delta)  <  tolerance)||  (Math.abs(y1)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  d  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	(Math.abs(delta)  <  tolerance)||  (Math.abs(y1)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  d	      (Math.abs(oldDelta)    <    tolerance)    ||    (Math.abs(y0)    <    =    Math.abs(y1)))    {    (Math.abs(y0)    <    =    Math.abs(y1)))    {    delta    =    0.5    *    d    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
63	[BUG]  [BUGGY]  long  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(x2),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  long  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(x2),  absoluteAccuracy);  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	long  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(x2),  absoluteAccuracy);	      int    oldDelta    =    Math.max(relativeAccuracy    *    Math.abs(x2),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
64	[BUG]  [BUGGY]  if(!(Math.abs(oldDelta)  <  tolerance)||!Math.abs(y0)  ||!Math.abs(y1))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  if(!(Math.abs(oldDelta)  <  tolerance)||!Math.abs(y0)  ||!Math.abs(y1))  {  [BUGGY]    (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	if(!(Math.abs(oldDelta)  <  tolerance)||!Math.abs(y0)  ||!Math.abs(y1))  {	  if(!(Math.abs(oldDelta)    <    tolerance)||!Math.abs(y0)&&!Math.abs(y1))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
65	[BUG]  [BUGGY]  (Math.abs(delta)  <  tolerance)||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  (Math.abs(delta)  <  tolerance)||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	(Math.abs(delta)  <  tolerance)||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  dx;	      (Math.abs(oldDelta)    <    tolerance)    ||    (Math.abs(y0)    <    =    Math.abs(y1)))    {    (Math.abs(y0)    <    =    Math.abs(y1)))    {    delta    =    0.5    *    dx;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
66	[BUG]  [BUGGY]  (Math.abs(delta)  <  tolerance)||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  dx;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  (Math.abs(delta)  <  tolerance)||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  dx;  }  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	(Math.abs(delta)  <  tolerance)||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  dx;  }	      (Math.abs(oldDelta)    <    tolerance)    ||    (Math.abs(y0)    <    =    Math.abs(y1)))    {    (Math.abs(y0)    <    =    Math.abs(y1)))    {    delta    =    0.5    *    dx;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
67	[BUG]  [BUGGY]  (Math.abs(oldDelta)  <  tolerance)||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  dx;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  (Math.abs(oldDelta)  <  tolerance)||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  dx;  }  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	(Math.abs(oldDelta)  <  tolerance)||  (Math.abs(y0)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  dx;  }	      (Math.abs(oldDelta)    <    tolerance)    ||    (Math.abs(y0)    <    =    Math.abs(y1)))    {    (Math.abs(y0)    <    =    Math.abs(y1)))    {    delta    =    0.5    *    dx;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
68	[BUG]  [BUGGY]  (Math.abs(delta)  <  tolerance)||  (Math.abs(y1)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  (Math.abs(delta)  <  tolerance)||  (Math.abs(y1)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	(Math.abs(delta)  <  tolerance)||  (Math.abs(y1)  <  =  Math.abs(y1)))  {  (Math.abs(y0)  <  =  Math.abs(y1)))  {  delta  =  0.5  *  dx;	      (Math.abs(oldDelta)    <    tolerance)    ||    (Math.abs(y0)    <    =    Math.abs(y1)))    {    (Math.abs(y0)    <    =    Math.abs(y1)))    {    delta    =    0.5    *    dx;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
69	[BUG]  [BUGGY]  long  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  long  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	long  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);	      int    oldDelta    =    Math.max(relativeAccuracy    *    Math.abs(x1),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
70	[BUG]  [BUGGY]  double  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(x2,  y1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  double  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(x2,  y1),  absoluteAccuracy);  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	double  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(x2,  y1),  absoluteAccuracy);	      double    oldDelta    =    Math.max(relativeAccuracy    *    Math.abs(x2),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
71	[BUG]  [BUGGY]  int  oldDelta  =  f.getDelta(x0,  y1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  int  oldDelta  =  f.getDelta(x0,  y1);  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	int  oldDelta  =  f.getDelta(x0,  y1);	      int    oldDelta    =    f.getDelta(x0,    y0);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
72	[BUG]  [BUGGY]  double  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(x1,  y1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  double  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(x1,  y1),  absoluteAccuracy);  [BUGGY]    if  ((Math.abs(oldDelta)  <  tolerance)  ||      (Math.abs(y0)  <=  Math.abs(y1)))  {  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	double  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(x1,  y1),  absoluteAccuracy);	      double    oldDelta    =    Math.max(relativeAccuracy    *    Math.abs(x1),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
73	[BUG]  [BUGGY]  if(Math.abs(y1)  <  tolerance)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  if(Math.abs(y1)  <  tolerance)  {  [BUGGY]    (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	if(Math.abs(y1)  <  tolerance)  {	  if(Math.abs(oldDelta)    <    tolerance)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
74	[BUG]  [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }    [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  [BUGGY]    (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;    [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	if(Math.abs(delta)  <  tolerance)  {	  if(Math.abs(oldDelta)    <    tolerance)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
