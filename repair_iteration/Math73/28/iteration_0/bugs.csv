bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
55	[BUG] [BUGGY] p = dx * r3; [FE] AssertionFailedError [CONTEXT] oldDelta = delta; } else { double r3 = y1 / y0; double p; double p1;    if (x0 == x2) {  [BUGGY] p = dx * r3; [BUGGY] p1 = 1.0 - r3; } else {  double r1 = y0 / y2; double r2 = y1 / y2; p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0)); p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0); } if (p > 0.0) { p1 = -p1; [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	267	267	1	replace	
56	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] oldDelta = delta; } else { double r3 = y1 / y0; double p; double p1;    if (x0 == x2) {  [BUGGY] [BUGGY] p = dx * r3; p1 = 1.0 - r3; } else {  double r1 = y0 / y2; double r2 = y1 / y2; p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0)); p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0); } if (p > 0.0) { p1 = -p1; [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	267	267	1	add	
