bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  dx  =  x1  /  x2;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  dx  =  x1  /  x2;  [BUGGY]    double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  dx  =  x1  /  x2;	  double    dx    =    x2    /    x1;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
2	[BUG]  [BUGGY]  double  dx  =  y1  /  x2;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  dx  =  y1  /  x2;  [BUGGY]    double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  dx  =  y1  /  x2;	  double    dx    =    x2    /    x1;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
3	[BUG]  [BUGGY]  double  dx  =  x0  /  x1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  dx  =  x0  /  x1;  [BUGGY]    double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  dx  =  x0  /  x1;	  double    dx    =    x2    /    x1;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
4	[BUG]  [BUGGY]  double  dx  =  x2  /  delta;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  dx  =  x2  /  delta;  [BUGGY]    double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  dx  =  x2  /  delta;	  double    dx    =    x2    /    x1;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
5	[BUG]  [BUGGY]  double  oldDelta  =  x0  -  x2;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  oldDelta  =  x0  -  x2;  [BUGGY]    double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  oldDelta  =  x0  -  x2;	      double    oldDelta    =    x2    -    x0;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
6	[BUG]  [BUGGY]  double  dx  =  x1  -  x0;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  dx  =  x1  -  x0;  [BUGGY]    double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  dx  =  x1  -  x0;	  double    dx    =    x2    -    x0;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
7	[BUG]  [BUGGY]  double  dx  =  x0  -  x2;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  dx  =  x0  -  x2;  [BUGGY]    double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  dx  =  x0  -  x2;	  double    dx    =    x2    -    x0;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
8	[BUG]  [BUGGY]  double  dx  =  x2  /  x0;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  dx  =  x2  /  x0;  [BUGGY]    double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  dx  =  x2  /  x0;	  double    dx    =    x2    -    x0;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
9	[BUG]  [BUGGY]  double  dx  =  y1  -  x0;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  dx  =  y1  -  x0;  [BUGGY]    double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  dx  =  y1  -  x0;	  double    dx    =    x2    -    x0;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
10	[BUG]  [BUGGY]  double  x2  =  x0  -  x1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  x2  =  x0  -  x1;  [BUGGY]    double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  x2  =  x0  -  x1;	      double    x2    =    x1    -    x0;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
11	[BUG]  [BUGGY]  double  x2  =  x1  -  x0.doubleValue();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  x2  =  x1  -  x0.doubleValue();  [BUGGY]    double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  x2  =  x1  -  x0.doubleValue();	      double    x2    =    x1    -    x0;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
12	[BUG]  [BUGGY]  double  x2  =  x1  -  x0  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  x2  =  x1  -  x0  +  1;  [BUGGY]    double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  x2  =  x1  -  x0  +  1;	      double    x2    =    x1    -    x0;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
13	[BUG]  [BUGGY]  double  dx  =  x1  -  delta;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  dx  =  x1  -  delta;  [BUGGY]    double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  dx  =  x1  -  delta;	  double    dx    =    x1    -    x2;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
14	[BUG]  [BUGGY]  double  oldDelta  =  y1  -  x0;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  oldDelta  =  y1  -  x0;  [BUGGY]    double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  oldDelta  =  y1  -  x0;	      double    oldDelta    =    x0    -    x1;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
15	[BUG]  [BUGGY]  double  oldDelta  =  x1  -  x0.doubleValue();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  oldDelta  =  x1  -  x0.doubleValue();  [BUGGY]    double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  oldDelta  =  x1  -  x0.doubleValue();	      double    oldDelta    =    x0    -    x1.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
16	[BUG]  [BUGGY]  double  oldDelta  =  x2  -  x1.doubleValue();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  oldDelta  =  x2  -  x1.doubleValue();  [BUGGY]    double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  oldDelta  =  x2  -  x1.doubleValue();	      double    oldDelta    =    x0    -    x1.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
17	[BUG]  [BUGGY]  double  oldDelta  =  x1  -  x1.doubleValue();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  oldDelta  =  x1  -  x1.doubleValue();  [BUGGY]    double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  oldDelta  =  x1  -  x1.doubleValue();	      double    oldDelta    =    x0    -    x1.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
18	[BUG]  [BUGGY]  double  oldDelta  =  x1  *  y0;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  oldDelta  =  x1  *  y0;  [BUGGY]    double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  oldDelta  =  x1  *  y0;	      double    oldDelta    =    x1    *    x1;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
19	[BUG]  [BUGGY]  double  oldDelta  =  x0  *  x1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  oldDelta  =  x0  *  x1;  [BUGGY]    double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  oldDelta  =  x0  *  x1;	      double    oldDelta    =    x1    *    x1;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
20	[BUG]  [BUGGY]  double  oldDelta  =  x1  *  x0;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  oldDelta  =  x1  *  x0;  [BUGGY]    double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  oldDelta  =  x1  *  x0;	      double    oldDelta    =    x1    *    x1;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
21	[BUG]  [BUGGY]  double  oldDelta  =  x1  /  x1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  oldDelta  =  x1  /  x1;  [BUGGY]    double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  oldDelta  =  x1  /  x1;	      double    oldDelta    =    x1    *    x1;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
22	[BUG]  [BUGGY]  double  dx  =  oldDelta  -  delta;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  dx  =  oldDelta  -  delta;  [BUGGY]    double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  dx  =  oldDelta  -  delta;	  double    dx    =    oldDelta    -    x1;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
23	[BUG]  [BUGGY]  double  dx  =  oldDelta  /  x1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  dx  =  oldDelta  /  x1;  [BUGGY]    double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  dx  =  oldDelta  /  x1;	  double    dx    =    oldDelta    -    x1;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
24	[BUG]  [BUGGY]  double  dx  =  x1  -  oldDelta;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  dx  =  x1  -  oldDelta;  [BUGGY]    double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  dx  =  x1  -  oldDelta;	  double    dx    =    oldDelta    -    x1;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
25	[BUG]  [BUGGY]  double  dx  =  oldDelta  *  x1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  dx  =  oldDelta  *  x1;  [BUGGY]    double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  dx  =  oldDelta  *  x1;	  double    dx    =    oldDelta    -    x1;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
26	[BUG]  [BUGGY]  double  oldDelta  =  x1  -  y0;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  oldDelta  =  x1  -  y0;  [BUGGY]    double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  oldDelta  =  x1  -  y0;	      double    oldDelta    =    x1    -    x1;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
27	[BUG]  [BUGGY]  double  dx  =  x0  -  delta;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  dx  =  x0  -  delta;  [BUGGY]    double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  dx  =  x0  -  delta;	  double    dx    =    x0    -    x1;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
28	[BUG]  [BUGGY]  double  oldDelta  =  x1  -  x0,  y0;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  oldDelta  =  x1  -  x0,  y0;  [BUGGY]    double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  oldDelta  =  x1  -  x0,  y0;	      double    oldDelta    =    x0    -    x1,    y0;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
29	[BUG]  [BUGGY]  double  oldDelta  =  x0  -  x1,  y1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  oldDelta  =  x0  -  x1,  y1;  [BUGGY]    double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  oldDelta  =  x0  -  x1,  y1;	      double    oldDelta    =    x0    -    x1,    y0;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
30	[BUG]  [BUGGY]  double  oldDelta  =  x2  -  x1,  y0;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  oldDelta  =  x2  -  x1,  y0;  [BUGGY]    double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  oldDelta  =  x2  -  x1,  y0;	      double    oldDelta    =    x0    -    x1,    y0;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
31	[BUG]  [BUGGY]  double  oldDelta  =  x0  -  x1,  y2;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  oldDelta  =  x0  -  x1,  y2;  [BUGGY]    double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  oldDelta  =  x0  -  x1,  y2;	      double    oldDelta    =    x0    -    x1,    y0;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
32	[BUG]  [BUGGY]  double  oldDelta  =  x1  -  x2;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  oldDelta  =  x1  -  x2;  [BUGGY]    double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  oldDelta  =  x1  -  x2;	      double    oldDelta    =    x2    -    x1;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
33	[BUG]  [BUGGY]  double  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  [BUGGY]    double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
34	[BUG]  [BUGGY]  double  absoluteAccuracy  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  absoluteAccuracy  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  [BUGGY]    double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  absoluteAccuracy  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
35	[BUG]  [BUGGY]  double  dx  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  dx  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  [BUGGY]    double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  dx  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
36	[BUG]  [BUGGY]  double  delta  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  delta  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  [BUGGY]    double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  delta  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
37	[BUG]  [BUGGY]  double  absoluteAccuracy  =  Math.max(relativeAccuracy  *  Math.abs(x2),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  absoluteAccuracy  =  Math.max(relativeAccuracy  *  Math.abs(x2),  absoluteAccuracy);  [BUGGY]    double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  absoluteAccuracy  =  Math.max(relativeAccuracy  *  Math.abs(x2),  absoluteAccuracy);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
38	[BUG]  [BUGGY]  double  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(x2),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(x2),  absoluteAccuracy);  [BUGGY]    double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  oldDelta  =  Math.max(relativeAccuracy  *  Math.abs(x2),  absoluteAccuracy);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
39	[BUG]  [BUGGY]  double  oldDelta  =  x0  -  x2);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  oldDelta  =  x0  -  x2);  [BUGGY]    double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  oldDelta  =  x0  -  x2);	      double    oldDelta    =    x2    -    x0;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
40	[BUG]  [BUGGY]  double  dx  =  oldDelta  -  x0;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  dx  =  oldDelta  -  x0;  [BUGGY]    double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  dx  =  oldDelta  -  x0;	  double    dx    =    x2    -    x0;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
41	[BUG]  [BUGGY]  double  oldDelta  =  x3  -  x1.doubleValue();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  oldDelta  =  x3  -  x1.doubleValue();  [BUGGY]    double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  oldDelta  =  x3  -  x1.doubleValue();	      double    oldDelta    =    x0    -    x1.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
42	[BUG]  [BUGGY]  double  oldDelta  =  x2  *  x1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  oldDelta  =  x2  *  x1;  [BUGGY]    double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  oldDelta  =  x2  *  x1;	      double    oldDelta    =    x1    *    x1;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
43	[BUG]  [BUGGY]  double  oldDelta  =  x3  -  x1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  oldDelta  =  x3  -  x1;  [BUGGY]    double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  oldDelta  =  x3  -  x1;	      double    oldDelta    =    x0    -    x1;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
44	[BUG]  [BUGGY]  double  oldDelta  =  x1  -  x0  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  oldDelta  =  x1  -  x0  +  1;  [BUGGY]    double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  oldDelta  =  x1  -  x0  +  1;	      double    oldDelta    =    x1    -    x0;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
45	[BUG]  [BUGGY]  double  oldDelta  =  x1  -  x1,  y0;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  oldDelta  =  x1  -  x1,  y0;  [BUGGY]    double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  oldDelta  =  x1  -  x1,  y0;	      double    oldDelta    =    x0    -    x1,    y0;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
46	[BUG]  [BUGGY]  double  oldDelta  =  y1  -  x1,  y0;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  oldDelta  =  y1  -  x1,  y0;  [BUGGY]    double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  oldDelta  =  y1  -  x1,  y0;	      double    oldDelta    =    x0    -    x1,    y0;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
47	[BUG]  [BUGGY]  double  dx  =  x2  /  y0;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  dx  =  x2  /  y0;  [BUGGY]    double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  dx  =  x2  /  y0;	  double    dx    =    x2    /    x1;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
48	[BUG]  [BUGGY]  double  dx  =  x2  -  oldDelta;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  dx  =  x2  -  oldDelta;  [BUGGY]    double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  dx  =  x2  -  oldDelta;	  double    dx    =    oldDelta    -    x1;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
49	[BUG]  [BUGGY]  double  dx  =  Math.min(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  dx  =  Math.min(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  [BUGGY]    double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  dx  =  Math.min(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
50	[BUG]  [BUGGY]  double  oldDelta  =  Math.min(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  oldDelta  =  Math.min(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  [BUGGY]    double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  oldDelta  =  Math.min(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
51	[BUG]  [BUGGY]  double  x2  =  x1  /  x0;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    y1  =  y2;  y2  =  y0;  }  if  (Math.abs(y1)  <=  functionValueAccuracy)  {    setResult(x1,  i);  return  result;  }    [BUGGY]  double  x2  =  x1  /  x0;  [BUGGY]    double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);  return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	double  x2  =  x1  /  x0;	      double    x2    =    x1    -    x0;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
