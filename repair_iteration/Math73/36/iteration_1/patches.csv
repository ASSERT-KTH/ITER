bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  x1  =  x0  +  x1;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  x1  =  x0  +  x1;  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	x1  =  x0  +  x1;	  x1    =    x1    +    x2;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
2	[BUG]  [BUGGY]  x1  =  x1  +  delta  +  0.5;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  x1  =  x1  +  delta  +  0.5;  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	x1  =  x1  +  delta  +  0.5;	  x1    =    x1    +    delta    +    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
3	[BUG]  [BUGGY]  x1  =  x1  +  delta  *  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  x1  =  x1  +  delta  *  1;  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	x1  =  x1  +  delta  *  1;	  x1    =    x1    +    delta    +    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
4	[BUG]  [BUGGY]  x1  =  x1  +  tolerance  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  x1  =  x1  +  tolerance  +  1;  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	x1  =  x1  +  tolerance  +  1;	  x1    =    x1    +    delta    +    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
5	[BUG]  [BUGGY]  dx  =  Math.abs(delta  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  dx  =  Math.abs(delta  +  1);  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	dx  =  Math.abs(delta  +  1);	      dx    =    Math.abs(delta);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
6	[BUG]  [BUGGY]  dx  =  Math.abs(delta  +  tolerance);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  dx  =  Math.abs(delta  +  tolerance);  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	dx  =  Math.abs(delta  +  tolerance);	      dx    =    Math.abs(delta);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
7	[BUG]  [BUGGY]  dx  =  Math.abs(tolerance);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  dx  =  Math.abs(tolerance);  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	dx  =  Math.abs(tolerance);	      dx    =    Math.abs(delta);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
8	[BUG]  [BUGGY]  dx  =  Math.abs(delta  +  delta);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  dx  =  Math.abs(delta  +  delta);  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	dx  =  Math.abs(delta  +  delta);	      dx    =    Math.abs(delta);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
9	[BUG]  [BUGGY]  dx  =  x0  +  0.5  *  tolerance;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  dx  =  x0  +  0.5  *  tolerance;  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	dx  =  x0  +  0.5  *  tolerance;	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
10	[BUG]  [BUGGY]  dx  =  f.value(x0);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  dx  =  f.value(x0);  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	dx  =  f.value(x0);	      dx    =    f.value(x1);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
11	[BUG]  [BUGGY]  dx  =  f.value(x1)+  delta;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  dx  =  f.value(x1)+  delta;  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	dx  =  f.value(x1)+  delta;	      dx    =    f.value(x1);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
12	[BUG]  [BUGGY]  dx  =  f.value(delta);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  dx  =  f.value(delta);  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	dx  =  f.value(delta);	      dx    =    f.value(x1);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
13	[BUG]  [BUGGY]  x1  =  x0  +  0.5;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  x1  =  x0  +  0.5;  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	x1  =  x0  +  0.5;	  x1    =    x1    +    0.5;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
14	[BUG]  [BUGGY]  delta  =  Math.abs(delta)>  tolerance;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  delta  =  Math.abs(delta)>  tolerance;  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	delta  =  Math.abs(delta)>  tolerance;	      if(Math.abs(delta)>    tolerance)    {    delta    =    x0    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
15	[BUG]  [BUGGY]  delta  =  Math.abs(delta)+  tolerance;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  delta  =  Math.abs(delta)+  tolerance;  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	delta  =  Math.abs(delta)+  tolerance;	      if(Math.abs(delta)>    tolerance)    {    delta    =    x0    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
16	[BUG]  [BUGGY]  delta  =  Math.abs(delta)>  tolerance);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  delta  =  Math.abs(delta)>  tolerance);  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	delta  =  Math.abs(delta)>  tolerance);	      if(Math.abs(delta)>    tolerance)    {    delta    =    x0    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
17	[BUG]  [BUGGY]  dx  =  Math.abs(tolerance)-  delta;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  dx  =  Math.abs(tolerance)-  delta;  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	dx  =  Math.abs(tolerance)-  delta;	      dx    =    Math.abs(delta)-    tolerance;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
18	[BUG]  [BUGGY]  dx  =  Math.abs(delta)-  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  dx  =  Math.abs(delta)-  1;  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	dx  =  Math.abs(delta)-  1;	      dx    =    Math.abs(delta)-    tolerance;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
19	[BUG]  [BUGGY]  dx  =  delta  +  oldDelta;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  dx  =  delta  +  oldDelta;  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	dx  =  delta  +  oldDelta;	      dx    =    oldDelta    +    delta;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
20	[BUG]  [BUGGY]  x1  =  x0  +  tolerance;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  x1  =  x0  +  tolerance;  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	x1  =  x0  +  tolerance;	  x1    =    x0    +    delta;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
21	[BUG]  [BUGGY]  x1  =  x0  +  delta  *  tolerance;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  x1  =  x0  +  delta  *  tolerance;  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	x1  =  x0  +  delta  *  tolerance;	  x1    =    x0    +    delta;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
22	[BUG]  [BUGGY]  x1  =  x0  +  delta.toString();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  x1  =  x0  +  delta.toString();  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	x1  =  x0  +  delta.toString();	  x1    =    x0    +    delta;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
23	[BUG]  [BUGGY]  delta  =  x0  +  delta;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  delta  =  x0  +  delta;  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	delta  =  x0  +  delta;	      if(Math.abs(delta)    <    tolerance)    {    delta    =    x0    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
24	[BUG]  [BUGGY]  delta  =  Math.abs(delta)+  delta;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  delta  =  Math.abs(delta)+  delta;  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	delta  =  Math.abs(delta)+  delta;	      if(Math.abs(delta)    <    tolerance)    {    delta    =    x0    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
25	[BUG]  [BUGGY]  delta  =  Math.abs(delta)/  tolerance;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  delta  =  Math.abs(delta)/  tolerance;  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	delta  =  Math.abs(delta)/  tolerance;	      if(Math.abs(delta)    <    tolerance)    {    delta    =    x0    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
26	[BUG]  [BUGGY]  dx  =  Math.abs(delta)/  2;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  dx  =  Math.abs(delta)/  2;  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	dx  =  Math.abs(delta)/  2;	      dx    =    Math.abs(delta)/    delta;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
27	[BUG]  [BUGGY]  dx  =  Math.abs(delta)/  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  dx  =  Math.abs(delta)/  1;  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	dx  =  Math.abs(delta)/  1;	      dx    =    Math.abs(delta)/    delta;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
28	[BUG]  [BUGGY]  dx  =  x0  +  delta  *  tolerance;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  dx  =  x0  +  delta  *  tolerance;  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	dx  =  x0  +  delta  *  tolerance;	      dx    =    x0    +    delta;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
29	[BUG]  [BUGGY]  dx  =  x0  +  delta  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  dx  =  x0  +  delta  +  1;  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	dx  =  x0  +  delta  +  1;	      dx    =    x0    +    delta;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
30	[BUG]  [BUGGY]  dx  =  x0  +  delta.toString();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  dx  =  x0  +  delta.toString();  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	dx  =  x0  +  delta.toString();	      dx    =    x0    +    delta;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
31	[BUG]  [BUGGY]  x1  =  x1  +  delta  *  tolerance.toString();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  x1  =  x1  +  delta  *  tolerance.toString();  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	x1  =  x1  +  delta  *  tolerance.toString();	  x1    =    x1    +    delta    *    tolerance;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
32	[BUG]  [BUGGY]  double  dx  =  f.value(x1)+  delta;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  double  dx  =  f.value(x1)+  delta;  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	double  dx  =  f.value(x1)+  delta;	      double    dx    =    f.value(x1);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
33	[BUG]  [BUGGY]  double  dx  =  f.value(delta);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  double  dx  =  f.value(delta);  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	double  dx  =  f.value(delta);	      double    dx    =    f.value(x1);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
34	[BUG]  [BUGGY]  double  dx  =  f.value(x1)/  delta;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  double  dx  =  f.value(x1)/  delta;  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	double  dx  =  f.value(x1)/  delta;	      double    dx    =    f.value(x1);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
35	[BUG]  [BUGGY]  dx  =  Math.abs(tolerance)/  delta;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  dx  =  Math.abs(tolerance)/  delta;  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	dx  =  Math.abs(tolerance)/  delta;	      dx    =    Math.abs(delta)/    tolerance;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
36	[BUG]  [BUGGY]  x1  =  x0  +  0.5  *  tolerance;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  x1  =  x0  +  0.5  *  tolerance;  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	x1  =  x0  +  0.5  *  tolerance;	  x1    =    x1    +    0.5    *    tolerance;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
37	[BUG]  [BUGGY]  x1  =  x1  +  0.5  *  delta;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  x1  =  x1  +  0.5  *  delta;  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	x1  =  x1  +  0.5  *  delta;	  x1    =    x1    +    0.5    *    tolerance;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
38	[BUG]  [BUGGY]  x1  =  x1  +  0.5  *  tolerance.toString();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  x1  =  x1  +  0.5  *  tolerance.toString();  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	x1  =  x1  +  0.5  *  tolerance.toString();	  x1    =    x1    +    0.5    *    tolerance;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
39	[BUG]  [BUGGY]  double  dx  =  f.value(x0,  delta);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  double  dx  =  f.value(x0,  delta);  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	double  dx  =  f.value(x0,  delta);	      double    dx    =    f.value(x0);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
40	[BUG]  [BUGGY]  double  dx  =  f.value(x0  +  delta);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  double  dx  =  f.value(x0  +  delta);  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	double  dx  =  f.value(x0  +  delta);	      double    dx    =    f.value(x0);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
41	[BUG]  [BUGGY]  double  dx  =  f.value(x0)/  delta;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  double  dx  =  f.value(x0)/  delta;  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	double  dx  =  f.value(x0)/  delta;	      double    dx    =    f.value(x0);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
42	[BUG]  [BUGGY]  dx  =  f.value(x0,  delta);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  dx  =  f.value(x0,  delta);  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	dx  =  f.value(x0,  delta);	      dx    =    f.value(x1);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
43	[BUG]  [BUGGY]  if(Math.abs(delta)>  tolerance)  {  delta  =  x0  +  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  if(Math.abs(delta)>  tolerance)  {  delta  =  x0  +  0.5  *  tolerance;  }  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	if(Math.abs(delta)>  tolerance)  {  delta  =  x0  +  0.5  *  tolerance;  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
44	[BUG]  [BUGGY]  if(Math.abs(delta)>  tolerance)  {  oldDelta  =  delta;  y1  =  f.value(x1);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  if(Math.abs(delta)>  tolerance)  {  oldDelta  =  delta;  y1  =  f.value(x1);  }  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	if(Math.abs(delta)>  tolerance)  {  oldDelta  =  delta;  y1  =  f.value(x1);  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
45	[BUG]  [BUGGY]  if(Math.abs(delta)>  tolerance)  {  oldDelta  =  delta;  y0  =  y1;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  if(Math.abs(delta)>  tolerance)  {  oldDelta  =  delta;  y0  =  y1;  }  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	if(Math.abs(delta)>  tolerance)  {  oldDelta  =  delta;  y0  =  y1;  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
46	[BUG]  [BUGGY]  x1  =  x0  +  delta  +  1;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  x1  =  x0  +  delta  +  1;  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	x1  =  x0  +  delta  +  1;	  x1    =    x0    +    delta;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
47	[BUG]  [BUGGY]  x1  =  x1  +  0.5  *  oldDelta;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  x1  =  x1  +  0.5  *  oldDelta;  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	x1  =  x1  +  0.5  *  oldDelta;	  x1    =    x1    +    0.5    *    tolerance;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
48	[BUG]  [BUGGY]  dx  =  Math.abs(delta  -  oldDelta);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  dx  =  Math.abs(delta  -  oldDelta);  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	dx  =  Math.abs(delta  -  oldDelta);	      dx    =    Math.abs(delta);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
49	[BUG]  [BUGGY]  dx  =  Math.abs(delta  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  dx  =  Math.abs(delta  -  1);  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	dx  =  Math.abs(delta  -  1);	      dx    =    Math.abs(delta);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
50	[BUG]  [BUGGY]  dx  =  Math.abs(delta)/  oldDelta;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  dx  =  Math.abs(delta)/  oldDelta;  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	dx  =  Math.abs(delta)/  oldDelta;	      dx    =    Math.abs(delta)/    tolerance;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
51	[BUG]  [BUGGY]  x1  =  x1  +  delta  +  2;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  x1  =  x1  +  delta  +  2;  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	x1  =  x1  +  delta  +  2;	  x1    =    x1    +    delta    +    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
52	[BUG]  [BUGGY]  x1  =  x0  +  x2;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  x1  =  x0  +  x2;  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	x1  =  x0  +  x2;	  x1    =    x1    +    x2;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
53	[BUG]  [BUGGY]  x1  =  x1  *  x2;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  x1  =  x1  *  x2;  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	x1  =  x1  *  x2;	  x1    =    x1    +    x2;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
54	[BUG]  [BUGGY]  x1  =  x2  +  x1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  x1  =  x2  +  x1;  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	x1  =  x2  +  x1;	  x1    =    x1    +    x2;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
55	[BUG]  [BUGGY]  dx  =  Math.abs(delta)-  oldDelta;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  dx  =  Math.abs(delta)-  oldDelta;  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	dx  =  Math.abs(delta)-  oldDelta;	      dx    =    Math.abs(delta)-    tolerance;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
56	[BUG]  [BUGGY]  dx  =  x0  +  delta  *  2;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  dx  =  x0  +  delta  *  2;  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	dx  =  x0  +  delta  *  2;	      dx    =    x0    +    delta;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
57	[BUG]  [BUGGY]  x1  =  x2  +  tolerance;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  x1  =  x2  +  tolerance;  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	x1  =  x2  +  tolerance;	  x1    =    x1    +    tolerance;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
58	[BUG]  [BUGGY]  Double  dx  =  f.value(x0);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  Double  dx  =  f.value(x0);  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	Double  dx  =  f.value(x0);	      double    dx    =    f.value(x1);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
59	[BUG]  [BUGGY]  double  dx  =  f.value(x0,  y0);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  double  dx  =  f.value(x0,  y0);  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	double  dx  =  f.value(x0,  y0);	      double    dx    =    f.value(x0);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
60	[BUG]  [BUGGY]  double  dx  =  f.value(x0)+  delta;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  double  dx  =  f.value(x0)+  delta;  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	double  dx  =  f.value(x0)+  delta;	      double    dx    =    f.value(x0);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
61	[BUG]  [BUGGY]  delta  =  Math.abs(delta)/  delta;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  delta  =  Math.abs(delta)/  delta;  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	delta  =  Math.abs(delta)/  delta;	      if(Math.abs(delta)    <    tolerance)    {    delta    =    x0    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
62	[BUG]  [BUGGY]  x1  =  x1  +  delta  *  2;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  x1  =  x1  +  delta  *  2;  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	x1  =  x1  +  delta  *  2;	  x1    =    x1    +    delta    *    tolerance;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
63	[BUG]  [BUGGY]  dx  =  Math.abs(relativeAccuracy  *  oldDelta);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  dx  =  Math.abs(relativeAccuracy  *  oldDelta);  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	dx  =  Math.abs(relativeAccuracy  *  oldDelta);	      dx    =    Math.abs(delta);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
64	[BUG]  [BUGGY]  dx  =  Math.abs(x0);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  dx  =  Math.abs(x0);  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	dx  =  Math.abs(x0);	      dx    =    Math.abs(delta);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
65	[BUG]  [BUGGY]  double  dx  =  f.value(x0,  y1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  double  dx  =  f.value(x0,  y1);  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	double  dx  =  f.value(x0,  y1);	      double    dx    =    f.value(x0);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
66	[BUG]  [BUGGY]  x1  =  x1  +  1.0;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  x1  =  x1  +  1.0;  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	x1  =  x1  +  1.0;	  x1    =    x1    +    0.5;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
67	[BUG]  [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  dx  =  x0  +  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  dx  =  x0  +  0.5  *  tolerance;  }  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	if(Math.abs(delta)  <  tolerance)  {  dx  =  x0  +  0.5  *  tolerance;  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
68	[BUG]  [BUGGY]  f.value(x1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  f.value(x1);  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	f.value(x1);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
69	[BUG]  [BUGGY]  if(Math.abs(delta)>  tolerance)  {  dx  =  x0  +  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  if(Math.abs(delta)>  tolerance)  {  dx  =  x0  +  0.5  *  tolerance;  }  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	if(Math.abs(delta)>  tolerance)  {  dx  =  x0  +  0.5  *  tolerance;  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
70	[BUG]  [BUGGY]  dx  =  x1  +  delta;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  dx  =  x1  +  delta;  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	dx  =  x1  +  delta;	      dx    =    oldDelta    +    delta;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
71	[BUG]  [BUGGY]  dx  =  oldDelta  +  delta  *  tolerance;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  dx  =  oldDelta  +  delta  *  tolerance;  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	dx  =  oldDelta  +  delta  *  tolerance;	      dx    =    oldDelta    +    delta;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
72	[BUG]  [BUGGY]  x1  =  x1  +  x0;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  x1  =  x1  +  x0;  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	x1  =  x1  +  x0;	  x1    =    x1    +    x2;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
73	[BUG]  [BUGGY]  double  dx  =  f.value(x2);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  double  dx  =  f.value(x2);  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	double  dx  =  f.value(x2);	      double    dx    =    f.value(x1);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
74	[BUG]  [BUGGY]  double  dx  =  f.value(x1)+  1;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  double  dx  =  f.value(x1)+  1;  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	double  dx  =  f.value(x1)+  1;	      double    dx    =    f.value(x1);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
75	[BUG]  [BUGGY]  dx  =  Math.abs(relativeAccuracy  *  tolerance)-  delta;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  dx  =  Math.abs(relativeAccuracy  *  tolerance)-  delta;  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	dx  =  Math.abs(relativeAccuracy  *  tolerance)-  delta;	      dx    =    Math.abs(delta)-    tolerance;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
76	[BUG]  [BUGGY]  dx  =  f.value(x0,  y0);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {    [BUGGY]  dx  =  f.value(x0,  y0);  [BUGGY]    x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	dx  =  f.value(x0,  y0);	      dx    =    f.value(x1);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
