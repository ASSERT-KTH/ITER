bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  x1  =  x1  -  0.5  *  tolerance;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  x1  =  x1  -  0.5  *  tolerance;  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	x1  =  x1  -  0.5  *  tolerance;	      if(dx    >    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    else    if(dx    <    =    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
2	[BUG]  [BUGGY]  if(Math.abs(delta)>  tolerance)  {  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  if(Math.abs(delta)>  tolerance)  {  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)>  tolerance)  {  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }	      if(dx    >    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    else    if(dx    <    =    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
3	[BUG]  [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)  <  tolerance)  {  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }	      if(dx    >    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    else    if(dx    <    =    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
4	[BUG]  [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)  <  =  tolerance)  {  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }	      if(dx    >    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    else    if(dx    <    =    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
5	[BUG]  [BUGGY]  if(delta  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  else  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  if(delta  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  else  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(delta  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  else  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }	      if(dx    <    =    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    else    if(dx    >    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
6	[BUG]  [BUGGY]  if(Math.abs(delta)>  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  if(Math.abs(delta)>  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)>  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }	      if(dx    <    =    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    else    if(dx    >    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
7	[BUG]  [BUGGY]  x1  =  x1  +  delta;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  x1  =  x1  +  delta;  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	x1  =  x1  +  delta;	      if(Math.abs(delta)>    tolerance)    {    x1    =    x1    +    delta;    }    else    {    x2    =    x0    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
8	[BUG]  [BUGGY]  if(Math.abs(delta)>  tolerance)  {  x1  =  x0  +  delta;  }  else  {  x2  =  x0  +  delta;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  if(Math.abs(delta)>  tolerance)  {  x1  =  x0  +  delta;  }  else  {  x2  =  x0  +  delta;  }  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)>  tolerance)  {  x1  =  x0  +  delta;  }  else  {  x2  =  x0  +  delta;  }	      if(Math.abs(delta)>    tolerance)    {    x1    =    x1    +    delta;    }    else    {    x2    =    x0    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
9	[BUG]  [BUGGY]  ||  Math.abs(delta)>  tolerance)  {  x1  =  x1  +  delta;  }  else  {  x2  =  x0  +  delta;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  ||  Math.abs(delta)>  tolerance)  {  x1  =  x1  +  delta;  }  else  {  x2  =  x0  +  delta;  }  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	||  Math.abs(delta)>  tolerance)  {  x1  =  x1  +  delta;  }  else  {  x2  =  x0  +  delta;  }	      if(Math.abs(delta)>    tolerance)    {    x1    =    x1    +    delta;    }    else    {    x2    =    x0    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
10	[BUG]  [BUGGY]  }  else  if(delta  >  0)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  }  else  if(delta  >  0)  {  [BUGGY]    x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(delta  >  0)  {	  }    else    if(dx    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
11	[BUG]  [BUGGY]  }  else  if(dx  ==  0)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  }  else  if(dx  ==  0)  {  [BUGGY]    x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  ==  0)  {	  }    else    if(dx    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
12	[BUG]  [BUGGY]  }  else  if(dx  >=  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  }  else  if(dx  >=  0)  {  [BUGGY]    x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  >=  0)  {	  }    else    if(dx    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
13	[BUG]  [BUGGY]  if(!Math.abs(delta)>  tolerance)  {  x1  =  x1  +  delta;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  if(!Math.abs(delta)>  tolerance)  {  x1  =  x1  +  delta;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(!Math.abs(delta)>  tolerance)  {  x1  =  x1  +  delta;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }	      if(Math.abs(delta)>    tolerance)    {    x1    =    x1    +    delta;    }    else    {    x2    =    x1    -    x0;    y2    =    y1;    oldDelta    =    delta;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
14	[BUG]  [BUGGY]  if(Math.abs(delta)>  tolerance)  {  x1  =  x1  +  x0;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  if(Math.abs(delta)>  tolerance)  {  x1  =  x1  +  x0;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)>  tolerance)  {  x1  =  x1  +  x0;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }	      if(Math.abs(delta)>    tolerance)    {    x1    =    x1    +    delta;    }    else    {    x2    =    x1    -    x0;    y2    =    y1;    oldDelta    =    delta;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
15	[BUG]  [BUGGY]  }  else  if(delta  >=  0.0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  }  else  if(delta  >=  0.0)  {  [BUGGY]    x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(delta  >=  0.0)  {	  }    else    if(dx    >=    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
16	[BUG]  [BUGGY]  ||  Math.abs(delta)>  tolerance)  {  x1  =  x1  +  delta;  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  ||  Math.abs(delta)>  tolerance)  {  x1  =  x1  +  delta;  }  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	||  Math.abs(delta)>  tolerance)  {  x1  =  x1  +  delta;  }	      if(Math.abs(delta)>    tolerance)    {    x1    =    x1    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
17	[BUG]  [BUGGY]  x1  =  x1  +  0.5  *  tolerance;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  x1  =  x1  +  0.5  *  tolerance;  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	x1  =  x1  +  0.5  *  tolerance;	      if(dx    >    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    else    if(dx    <    =    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
18	[BUG]  [BUGGY]  if(Math.abs(delta)>  tolerance)  {  if(dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  if(Math.abs(delta)>  tolerance)  {  if(dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)>  tolerance)  {  if(dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }	      if(dx    >    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    else    if(dx    <    =    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
19	[BUG]  [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  if(dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  if(dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)  <  tolerance)  {  if(dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }	      if(dx    >    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    else    if(dx    <    =    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
20	[BUG]  [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  if(dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  if(dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)  <  =  tolerance)  {  if(dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }	      if(dx    >    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    else    if(dx    <    =    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
21	[BUG]  [BUGGY]  if(delta  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  else  if(dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  if(delta  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  else  if(dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(delta  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  else  if(dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }	      if(dx    <    =    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    else    if(dx    >    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
22	[BUG]  [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)  <  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }	      if(dx    <    =    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    else    if(dx    >    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
23	[BUG]  [BUGGY]  }  else  if(dx  <  =  0.0  ||  delta  <  =  0.0)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  }  else  if(dx  <  =  0.0  ||  delta  <  =  0.0)  {  [BUGGY]    x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  <  =  0.0  ||  delta  <  =  0.0)  {	  }    else    if(delta    <    =    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
24	[BUG]  [BUGGY]  }  else  if(delta  <  =  0.0  ||  delta  >  tolerance)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  }  else  if(delta  <  =  0.0  ||  delta  >  tolerance)  {  [BUGGY]    x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(delta  <  =  0.0  ||  delta  >  tolerance)  {	  }    else    if(delta    <    =    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
25	[BUG]  [BUGGY]  }  else  if(delta  <  =  0.0  ||  delta  >  oldDelta)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  }  else  if(delta  <  =  0.0  ||  delta  >  oldDelta)  {  [BUGGY]    x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(delta  <  =  0.0  ||  delta  >  oldDelta)  {	  }    else    if(delta    <    =    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
26	[BUG]  [BUGGY]  oldDelta  =  x1  +  delta;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  oldDelta  =  x1  +  delta;  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	oldDelta  =  x1  +  delta;	      if(Math.abs(delta)>    tolerance)    {    oldDelta    =    x1    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
27	[BUG]  [BUGGY]  }  else  if(Math.abs(delta)  <  tolerance)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  }  else  if(Math.abs(delta)  <  tolerance)  {  [BUGGY]    x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(Math.abs(delta)  <  tolerance)  {	  }    else    if(Math.abs(delta)>    tolerance)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
28	[BUG]  [BUGGY]  }  else  if(!Math.abs(delta)>  tolerance)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  }  else  if(!Math.abs(delta)>  tolerance)  {  [BUGGY]    x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(!Math.abs(delta)>  tolerance)  {	  }    else    if(Math.abs(delta)>    tolerance)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
29	[BUG]  [BUGGY]  ||  Math.abs(delta)  <  tolerance)  {  x1  =  x1  +  delta;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  ||  Math.abs(delta)  <  tolerance)  {  x1  =  x1  +  delta;  }  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	||  Math.abs(delta)  <  tolerance)  {  x1  =  x1  +  delta;  }	      if(Math.abs(delta)    <    tolerance)    {    x1    =    x1    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
30	[BUG]  [BUGGY]  if(Math.abs(delta)>  tolerance)  {  oldDelta  =  x0  +  delta;  }  else  {  x2  =  x1  +  delta;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  if(Math.abs(delta)>  tolerance)  {  oldDelta  =  x0  +  delta;  }  else  {  x2  =  x1  +  delta;  }  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)>  tolerance)  {  oldDelta  =  x0  +  delta;  }  else  {  x2  =  x1  +  delta;  }	      if(Math.abs(delta)>    tolerance)    {    oldDelta    =    x1    +    delta;    }    else    {    x2    =    x0    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
31	[BUG]  [BUGGY]  if(Math.abs(delta)>  tolerance)  {  oldDelta  =  x0  +  delta;  }  else  {  x2  =  x0  +  delta;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  if(Math.abs(delta)>  tolerance)  {  oldDelta  =  x0  +  delta;  }  else  {  x2  =  x0  +  delta;  }  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)>  tolerance)  {  oldDelta  =  x0  +  delta;  }  else  {  x2  =  x0  +  delta;  }	      if(Math.abs(delta)>    tolerance)    {    oldDelta    =    x1    +    delta;    }    else    {    x2    =    x0    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
32	[BUG]  [BUGGY]  }  else  if(dx  ==  0.0)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  }  else  if(dx  ==  0.0)  {  [BUGGY]    x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  ==  0.0)  {	  }    else    if(dx    <    =    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
33	[BUG]  [BUGGY]  }  else  if(dx  <  =  0.0  ||  dx  >  oldDelta.length)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  }  else  if(dx  <  =  0.0  ||  dx  >  oldDelta.length)  {  [BUGGY]    x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  <  =  0.0  ||  dx  >  oldDelta.length)  {	  }    else    if(dx    <    =    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
34	[BUG]  [BUGGY]  ||(dx  >  0.0  &&  dx  <  =  0.0)||(x1  -  0.5  *  tolerance))  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  ||(dx  >  0.0  &&  dx  <  =  0.0)||(x1  -  0.5  *  tolerance))  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	||(dx  >  0.0  &&  dx  <  =  0.0)||(x1  -  0.5  *  tolerance))  {  x1  =  x1  -  0.5  *  tolerance;  }	      if(dx    >    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    else    if(dx    <    =    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
35	[BUG]  [BUGGY]  ||(dx  >  0.0  &&  dx  <  =  0.0))  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  ||(dx  >  0.0  &&  dx  <  =  0.0))  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	||(dx  >  0.0  &&  dx  <  =  0.0))  {  x1  =  x1  -  0.5  *  tolerance;  }	      if(dx    >    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    else    if(dx    <    =    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
36	[BUG]  [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  x1  =  x1  +  x0;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  x1  =  x1  +  x0;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)  <  tolerance)  {  x1  =  x1  +  x0;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }	      if(Math.abs(delta)    <    tolerance)    {    x1    =    x1    +    delta;    }    else    {    x2    =    x1    -    x0;    y2    =    y1;    oldDelta    =    delta;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
37	[BUG]  [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  oldDelta  =  x1  +  delta;  }  else  {  x2  =  x0  +  delta;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  oldDelta  =  x1  +  delta;  }  else  {  x2  =  x0  +  delta;  }  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)  <  tolerance)  {  oldDelta  =  x1  +  delta;  }  else  {  x2  =  x0  +  delta;  }	      if(Math.abs(delta)>    tolerance)    {    oldDelta    =    x1    +    delta;    }    else    {    x2    =    x0    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
38	[BUG]  [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)  <  =  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }	      if(dx    <    =    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    else    if(dx    >    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
39	[BUG]  [BUGGY]  if(Math.abs(delta)>  tolerance)  {  x1  =  x0  +  delta;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  if(Math.abs(delta)>  tolerance)  {  x1  =  x0  +  delta;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)>  tolerance)  {  x1  =  x0  +  delta;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }	      if(Math.abs(delta)>    tolerance)    {    x1    =    x1    +    delta;    }    else    {    x2    =    x1    -    x0;    y2    =    y1;    oldDelta    =    delta;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
40	[BUG]  [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  x1  =  x1  +  delta;  }  else  {  x2  =  x0  +  delta;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  x1  =  x1  +  delta;  }  else  {  x2  =  x0  +  delta;  }  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)  <  tolerance)  {  x1  =  x1  +  delta;  }  else  {  x2  =  x0  +  delta;  }	      if(Math.abs(delta)>    tolerance)    {    x1    =    x1    +    delta;    }    else    {    x2    =    x0    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
41	[BUG]  [BUGGY]  ||  Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  delta;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  ||  Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  delta;  }  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	||  Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  delta;  }	      if(Math.abs(delta)    <    tolerance)    {    x1    =    x1    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
42	[BUG]  [BUGGY]  ||  Math.abs(delta)  <  tolerance)  {  x1  =  x1  +  delta;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  ||  Math.abs(delta)  <  tolerance)  {  x1  =  x1  +  delta;  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	||  Math.abs(delta)  <  tolerance)  {  x1  =  x1  +  delta;	      if(Math.abs(delta)    <    tolerance)    {    x1    =    x1    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
43	[BUG]  [BUGGY]  if(Math.abs(delta)  <  =  Math.abs(tolerance))  {  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  if(Math.abs(delta)  <  =  Math.abs(tolerance))  {  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)  <  =  Math.abs(tolerance))  {  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }	      if(dx    >    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    else    if(dx    <    =    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
44	[BUG]  [BUGGY]  }  else  if(delta  <  =  0.0  ||  delta  >  oldDelta.length)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  }  else  if(delta  <  =  0.0  ||  delta  >  oldDelta.length)  {  [BUGGY]    x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(delta  <  =  0.0  ||  delta  >  oldDelta.length)  {	  }    else    if(delta    <    =    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
45	[BUG]  [BUGGY]  if(delta  <  =  0.0)  {  x1  =  x0  -  0.5  *  tolerance;  }  else  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  if(delta  <  =  0.0)  {  x1  =  x0  -  0.5  *  tolerance;  }  else  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(delta  <  =  0.0)  {  x1  =  x0  -  0.5  *  tolerance;  }  else  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }	      if(dx    <    =    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    else    if(dx    >    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
46	[BUG]  [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  delta;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  delta;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  delta;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }	      if(Math.abs(delta)    <    tolerance)    {    x1    =    x1    +    delta;    }    else    {    x2    =    x1    -    x0;    y2    =    y1;    oldDelta    =    delta;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
47	[BUG]  [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  x1  =  x0  +  delta;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  x1  =  x0  +  delta;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)  <  tolerance)  {  x1  =  x0  +  delta;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }	      if(Math.abs(delta)    <    tolerance)    {    x1    =    x1    +    delta;    }    else    {    x2    =    x1    -    x0;    y2    =    y1;    oldDelta    =    delta;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
48	[BUG]  [BUGGY]  }  else  if(Math.abs(delta)  <  =  tolerance)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  }  else  if(Math.abs(delta)  <  =  tolerance)  {  [BUGGY]    x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(Math.abs(delta)  <  =  tolerance)  {	  }    else    if(Math.abs(delta)>    tolerance)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
49	[BUG]  [BUGGY]  }  else  if(dx  >  1)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  }  else  if(dx  >  1)  {  [BUGGY]    x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  >  1)  {	  }    else    if(dx    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
50	[BUG]  [BUGGY]  if(dx  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  if(dx  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(dx  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }	      if(dx    <    =    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    else    if(dx    >    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
51	[BUG]  [BUGGY]  }  else  if(dx  <  =  0.0  ||  dx  >  oldDelta)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  }  else  if(dx  <  =  0.0  ||  dx  >  oldDelta)  {  [BUGGY]    x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  <  =  0.0  ||  dx  >  oldDelta)  {	  }    else    if(dx    <    =    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
52	[BUG]  [BUGGY]  }  else  if(dx  <  =  0.0  &&  oldDelta  <  =  0.0)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  }  else  if(dx  <  =  0.0  &&  oldDelta  <  =  0.0)  {  [BUGGY]    x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  <  =  0.0  &&  oldDelta  <  =  0.0)  {	  }    else    if(dx    <    =    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
53	[BUG]  [BUGGY]  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }	      if(dx    >    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    else    if(dx    <    =    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
54	[BUG]  [BUGGY]  vieilleDelta  =  x1  +  delta;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  vieilleDelta  =  x1  +  delta;  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	vieilleDelta  =  x1  +  delta;	      if(Math.abs(delta)>    tolerance)    {    oldDelta    =    x1    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
55	[BUG]  [BUGGY]  OldDelta  =  x1  +  delta;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  OldDelta  =  x1  +  delta;  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	OldDelta  =  x1  +  delta;	      if(Math.abs(delta)>    tolerance)    {    oldDelta    =    x1    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
56	[BUG]  [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  delta;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  delta;  }  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  delta;  }	      if(Math.abs(delta)    <    tolerance)    {    x1    =    x1    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
57	[BUG]  [BUGGY]  }  else  if(delta  <  =  0.0  ||  oldDelta  <  =  0.0)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  }  else  if(delta  <  =  0.0  ||  oldDelta  <  =  0.0)  {  [BUGGY]    x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(delta  <  =  0.0  ||  oldDelta  <  =  0.0)  {	  }    else    if(delta    <    =    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
58	[BUG]  [BUGGY]  }  else  if(delta  <  =  0.0  ||  oldDelta  >  0.0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  }  else  if(delta  <  =  0.0  ||  oldDelta  >  0.0)  {  [BUGGY]    x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(delta  <  =  0.0  ||  oldDelta  >  0.0)  {	  }    else    if(delta    <    =    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
59	[BUG]  [BUGGY]  if(Math.abs(oldDelta)>  tolerance)  {  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;    [BUGGY]  if(Math.abs(oldDelta)>  tolerance)  {  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]    }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(oldDelta)>  tolerance)  {  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }	      if(dx    >    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    else    if(dx    <    =    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
