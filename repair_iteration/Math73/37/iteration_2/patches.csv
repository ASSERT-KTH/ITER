bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ||(dx  <  =  0.0  &&  dx  <  =  0.0)||(x1  -  0.5  *  tolerance))  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  ||(dx  <  =  0.0  &&  dx  <  =  0.0)||(x1  -  0.5  *  tolerance))  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	||(dx  <  =  0.0  &&  dx  <  =  0.0)||(x1  -  0.5  *  tolerance))  {  x1  =  x1  -  0.5  *  tolerance;  }	  ||(dx    >    0.0    &&    dx    <    =    0.0)||(x1    -    0.5    *    tolerance))    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
2	[BUG]  [BUGGY]  ||(dx  >=  0.0  &&  dx  <  =  0.0)||(x1  -  0.5  *  tolerance))  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  ||(dx  >=  0.0  &&  dx  <  =  0.0)||(x1  -  0.5  *  tolerance))  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	||(dx  >=  0.0  &&  dx  <  =  0.0)||(x1  -  0.5  *  tolerance))  {  x1  =  x1  -  0.5  *  tolerance;  }	  ||(dx    >    0.0    &&    dx    <    =    0.0)||(x1    -    0.5    *    tolerance))    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
3	[BUG]  [BUGGY]  ||(dx  >  0.0  &&  dx  <  =  0.0)||(y1  -  0.5  *  tolerance))  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  ||(dx  >  0.0  &&  dx  <  =  0.0)||(y1  -  0.5  *  tolerance))  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	||(dx  >  0.0  &&  dx  <  =  0.0)||(y1  -  0.5  *  tolerance))  {  x1  =  x1  -  0.5  *  tolerance;  }	  ||(dx    >    0.0    &&    dx    <    =    0.0)||(x1    -    0.5    *    tolerance))    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
4	[BUG]  [BUGGY]  x1  =  x1  +  delta.toString();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  x1  =  x1  +  delta.toString();  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	x1  =  x1  +  delta.toString();	  x1    =    x1    +    delta;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
5	[BUG]  [BUGGY]  x1  =  x1  +  tolerance;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  x1  =  x1  +  tolerance;  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	x1  =  x1  +  tolerance;	  x1    =    x1    +    delta;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
6	[BUG]  [BUGGY]  x1  =  x1  +  delta  *  tolerance;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  x1  =  x1  +  delta  *  tolerance;  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	x1  =  x1  +  delta  *  tolerance;	  x1    =    x1    +    delta;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
7	[BUG]  [BUGGY]  if(Math.abs(delta)>  tolerance)  {  if(delta  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(Math.abs(delta)>  tolerance)  {  if(delta  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)>  tolerance)  {  if(delta  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }	  if(delta    <    =    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    else    if(dx    >    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
8	[BUG]  [BUGGY]  if(Math.abs(delta)>  tolerance)  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(Math.abs(delta)>  tolerance)  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)>  tolerance)  {  x1  =  x1  -  0.5  *  tolerance;  }	  if(delta    <    =    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    else    if(dx    >    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
9	[BUG]  [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  x1  =  x1  +  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  x1  =  x1  +  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)  <  tolerance)  {  x1  =  x1  +  0.5  *  tolerance;  }	  if(Math.abs(delta)    <    tolerance)    {    if(dx    >    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
10	[BUG]  [BUGGY]  if(Math.abs(delta)>  tolerance)  {  x1  =  x1  +  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(Math.abs(delta)>  tolerance)  {  x1  =  x1  +  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)>  tolerance)  {  x1  =  x1  +  0.5  *  tolerance;  }	  if(Math.abs(delta)    <    tolerance)    {    if(dx    >    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
11	[BUG]  [BUGGY]  }  else  if(dx  <  =  1)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(dx  <  =  1)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  <  =  1)  {	  }    else    if(dx    >    1)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
12	[BUG]  [BUGGY]  }  else  if(delta  >  1)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(delta  >  1)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(delta  >  1)  {	  }    else    if(dx    >    1)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
13	[BUG]  [BUGGY]  }  else  if(dx  ==  1)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(dx  ==  1)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  ==  1)  {	  }    else    if(dx    >    1)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
14	[BUG]  [BUGGY]  x2  =  x0  +  delta;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  x2  =  x0  +  delta;  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	x2  =  x0  +  delta;	  if(Math.abs(delta)>    tolerance)    {    oldDelta    =    x0    +    delta;    }    else    {    x2    =    x0    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
15	[BUG]  [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  x1  =  x0  +  x0;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  x1  =  x0  +  x0;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)  <  tolerance)  {  x1  =  x0  +  x0;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }	  if(Math.abs(delta)    <    tolerance)    {    x1    =    x1    +    x0;    }    else    {    x2    =    x1    -    x0;    y2    =    y1;    oldDelta    =    delta;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
16	[BUG]  [BUGGY]  ||  Math.abs(delta)  <  tolerance)  {  x1  =  x1  +  delta;  }  else  {  x2  =  x0  +  delta;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  ||  Math.abs(delta)  <  tolerance)  {  x1  =  x1  +  delta;  }  else  {  x2  =  x0  +  delta;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	||  Math.abs(delta)  <  tolerance)  {  x1  =  x1  +  delta;  }  else  {  x2  =  x0  +  delta;  }	  if(Math.abs(delta)    <    tolerance)    {    x1    =    x1    +    delta;    }    else    {    x2    =    x0    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
17	[BUG]  [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  x1  =  x0  +  delta;  }  else  {  x2  =  x0  +  delta;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  x1  =  x0  +  delta;  }  else  {  x2  =  x0  +  delta;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)  <  tolerance)  {  x1  =  x0  +  delta;  }  else  {  x2  =  x0  +  delta;  }	  if(Math.abs(delta)    <    tolerance)    {    x1    =    x1    +    delta;    }    else    {    x2    =    x0    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
18	[BUG]  [BUGGY]  }  else  if(delta  ==  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(delta  ==  0)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(delta  ==  0)  {	  }    else    if(dx    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
19	[BUG]  [BUGGY]  }  else  if(dx  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(dx  <  =  0)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  <  =  0)  {	  }    else    if(dx    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
20	[BUG]  [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)  <  tolerance)  {  x1  =  x1  -  0.5  *  tolerance;  }	  if(Math.abs(delta)    <    =    Math.abs(tolerance))    {    if(dx    >    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
21	[BUG]  [BUGGY]  x1  =  x1  -  0.5  *  delta;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  x1  =  x1  -  0.5  *  delta;  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	x1  =  x1  -  0.5  *  delta;	  x1    =    x1    -    0.5    *    tolerance;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
22	[BUG]  [BUGGY]  x1  =  x2  -  0.5  *  tolerance;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  x1  =  x2  -  0.5  *  tolerance;  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	x1  =  x2  -  0.5  *  tolerance;	  x1    =    x1    -    0.5    *    tolerance;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
23	[BUG]  [BUGGY]  }  else  if(dx  <  =  0.0  ||  oldDelta  >  0.0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(dx  <  =  0.0  ||  oldDelta  >  0.0)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  <  =  0.0  ||  oldDelta  >  0.0)  {	  }    else    if(delta    <    =    0.0    ||    oldDelta    >    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
24	[BUG]  [BUGGY]  }  else  if(delta  <  =  0.0  &&  oldDelta  >  0.0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(delta  <  =  0.0  &&  oldDelta  >  0.0)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(delta  <  =  0.0  &&  oldDelta  >  0.0)  {	  }    else    if(delta    <    =    0.0    ||    oldDelta    >    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
25	[BUG]  [BUGGY]  }  else  if(dx  <  =  0.0  ||  delta  >  0.0)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(dx  <  =  0.0  ||  delta  >  0.0)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  <  =  0.0  ||  delta  >  0.0)  {	  }    else    if(delta    <    =    0.0    ||    oldDelta    >    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
26	[BUG]  [BUGGY]  if(delta  <  =  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(delta  <  =  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(delta  <  =  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }	  if(delta    <    =    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    else    if(dx    >    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
27	[BUG]  [BUGGY]  if(Math.abs(delta)>  tolerance)  {  x1  =  x0  +  x0;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(Math.abs(delta)>  tolerance)  {  x1  =  x0  +  x0;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)>  tolerance)  {  x1  =  x0  +  x0;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }	  if(Math.abs(delta)>    tolerance)    {    x1    =    x1    +    x0;    }    else    {    x2    =    x1    -    x0;    y2    =    y1;    oldDelta    =    delta;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
28	[BUG]  [BUGGY]  if(Math.abs(delta)>  tolerance)  {  x1  =  x0  +  x1;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(Math.abs(delta)>  tolerance)  {  x1  =  x0  +  x1;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)>  tolerance)  {  x1  =  x0  +  x1;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }	  if(Math.abs(delta)>    tolerance)    {    x1    =    x1    +    x0;    }    else    {    x2    =    x1    -    x0;    y2    =    y1;    oldDelta    =    delta;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
29	[BUG]  [BUGGY]  }  else  if(delta  <  =  0.0  &&  oldDelta  <  =  0.0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(delta  <  =  0.0  &&  oldDelta  <  =  0.0)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(delta  <  =  0.0  &&  oldDelta  <  =  0.0)  {	  }    else    if(dx    <    =    0.0    &&    oldDelta    <    =    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
30	[BUG]  [BUGGY]  }  else  if(dx  <  =  0.0  ||  oldDelta  <  =  0.0)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(dx  <  =  0.0  ||  oldDelta  <  =  0.0)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  <  =  0.0  ||  oldDelta  <  =  0.0)  {	  }    else    if(dx    <    =    0.0    &&    oldDelta    <    =    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
31	[BUG]  [BUGGY]  }  else  if(dx  ==  0.0  &&  oldDelta  <  =  0.0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(dx  ==  0.0  &&  oldDelta  <  =  0.0)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  ==  0.0  &&  oldDelta  <  =  0.0)  {	  }    else    if(dx    <    =    0.0    &&    oldDelta    <    =    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
32	[BUG]  [BUGGY]  }  else  if(dx  >=  0.0  &&  oldDelta  <  =  0.0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(dx  >=  0.0  &&  oldDelta  <  =  0.0)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  >=  0.0  &&  oldDelta  <  =  0.0)  {	  }    else    if(dx    <    =    0.0    &&    oldDelta    <    =    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
33	[BUG]  [BUGGY]  ||  Math.abs(delta)>  tolerance)  {  x1  =  x0  +  delta;  }  else  {  x2  =  x0  +  delta;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  ||  Math.abs(delta)>  tolerance)  {  x1  =  x0  +  delta;  }  else  {  x2  =  x0  +  delta;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	||  Math.abs(delta)>  tolerance)  {  x1  =  x0  +  delta;  }  else  {  x2  =  x0  +  delta;  }	  ||    Math.abs(delta)>    tolerance)    {    x1    =    x1    +    delta;    }    else    {    x2    =    x0    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
34	[BUG]  [BUGGY]  &&  Math.abs(delta)>  tolerance)  {  x1  =  x1  +  delta;  }  else  {  x2  =  x0  +  delta;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  &&  Math.abs(delta)>  tolerance)  {  x1  =  x1  +  delta;  }  else  {  x2  =  x0  +  delta;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	&&  Math.abs(delta)>  tolerance)  {  x1  =  x1  +  delta;  }  else  {  x2  =  x0  +  delta;  }	  ||    Math.abs(delta)>    tolerance)    {    x1    =    x1    +    delta;    }    else    {    x2    =    x0    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
35	[BUG]  [BUGGY]  OldDelta  =  delta  +  x1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  OldDelta  =  delta  +  x1;  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	OldDelta  =  delta  +  x1;	  OldDelta    =    x1    +    delta;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
36	[BUG]  [BUGGY]  OldDelta  =  oldDelta  +  delta;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  OldDelta  =  oldDelta  +  delta;  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	OldDelta  =  oldDelta  +  delta;	  OldDelta    =    x1    +    delta;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
37	[BUG]  [BUGGY]  OldDelta  x1  =  x1  +  delta;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  OldDelta  x1  =  x1  +  delta;  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	OldDelta  x1  =  x1  +  delta;	  OldDelta    =    x1    +    delta;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
38	[BUG]  [BUGGY]  }  else  if(delta  ==  0.0)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(delta  ==  0.0)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(delta  ==  0.0)  {	  }    else    if(dx    ==    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
39	[BUG]  [BUGGY]  &&  Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  delta;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  &&  Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  delta;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	&&  Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  delta;  }	  ||    Math.abs(delta)    <    =    tolerance)    {    x1    =    x1    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
40	[BUG]  [BUGGY]  ||(dx  <  =  0.0  &&  dx  <  =  0.0))  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  ||(dx  <  =  0.0  &&  dx  <  =  0.0))  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	||(dx  <  =  0.0  &&  dx  <  =  0.0))  {  x1  =  x1  -  0.5  *  tolerance;  }	  ||(dx    >    0.0    &&    dx    <    =    0.0))    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
41	[BUG]  [BUGGY]  ||(dx  >=  0.0  &&  dx  <  =  0.0))  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  ||(dx  >=  0.0  &&  dx  <  =  0.0))  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	||(dx  >=  0.0  &&  dx  <  =  0.0))  {  x1  =  x1  -  0.5  *  tolerance;  }	  ||(dx    >    0.0    &&    dx    <    =    0.0))    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
42	[BUG]  [BUGGY]  ||(dx  <  0.0  &&  dx  <  =  0.0))  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  ||(dx  <  0.0  &&  dx  <  =  0.0))  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	||(dx  <  0.0  &&  dx  <  =  0.0))  {  x1  =  x1  -  0.5  *  tolerance;  }	  ||(dx    >    0.0    &&    dx    <    =    0.0))    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
43	[BUG]  [BUGGY]  ||(dx  <  =  0.0  &&  oldDelta  <  =  0.0))  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  ||(dx  <  =  0.0  &&  oldDelta  <  =  0.0))  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	||(dx  <  =  0.0  &&  oldDelta  <  =  0.0))  {  x1  =  x1  -  0.5  *  tolerance;  }	  ||(dx    >    0.0    &&    dx    <    =    0.0))    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
44	[BUG]  [BUGGY]  ||  Math.abs(delta)  <  x0)  {  x1  =  x1  +  delta;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  ||  Math.abs(delta)  <  x0)  {  x1  =  x1  +  delta;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	||  Math.abs(delta)  <  x0)  {  x1  =  x1  +  delta;  }	  ||    Math.abs(delta)    <    tolerance)    {    x1    =    x1    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
45	[BUG]  [BUGGY]  else  if(Math.abs(delta)>  tolerance)  {  x1  =  x0  +  delta;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  else  if(Math.abs(delta)>  tolerance)  {  x1  =  x0  +  delta;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	else  if(Math.abs(delta)>  tolerance)  {  x1  =  x0  +  delta;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }	  if(Math.abs(delta)>    tolerance)    {    x1    =    x0    +    delta;    }    else    {    x2    =    x1    -    x0;    y2    =    y1;    oldDelta    =    delta;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
46	[BUG]  [BUGGY]  }  else  if(delta  <  =  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(delta  <  =  0)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(delta  <  =  0)  {	  }    else    if(delta    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
47	[BUG]  [BUGGY]  if(Math.abs(delta)>  tolerance)  {  oldDelta  =  x1  +  delta;  }  else  {  x2  =  x1  +  delta;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(Math.abs(delta)>  tolerance)  {  oldDelta  =  x1  +  delta;  }  else  {  x2  =  x1  +  delta;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)>  tolerance)  {  oldDelta  =  x1  +  delta;  }  else  {  x2  =  x1  +  delta;  }	  if(Math.abs(delta)>    tolerance)    {    oldDelta    =    x0    +    delta;    }    else    {    x2    =    x1    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
48	[BUG]  [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  oldDelta  =  x0  +  delta;  }  else  {  x2  =  x1  +  delta;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  oldDelta  =  x0  +  delta;  }  else  {  x2  =  x1  +  delta;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)  <  tolerance)  {  oldDelta  =  x0  +  delta;  }  else  {  x2  =  x1  +  delta;  }	  if(Math.abs(delta)>    tolerance)    {    oldDelta    =    x0    +    delta;    }    else    {    x2    =    x1    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
49	[BUG]  [BUGGY]  x1  =  x0  +  delta;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  x1  =  x0  +  delta;  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	x1  =  x0  +  delta;	  if(Math.abs(delta)>    tolerance)    {    x1    =    x0    +    delta;    }    else    {    x2    =    x0    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
50	[BUG]  [BUGGY]  vieilleDelta  =  delta  +  x1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  vieilleDelta  =  delta  +  x1;  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	vieilleDelta  =  delta  +  x1;	  vieilleDelta    =    x1    +    delta;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
51	[BUG]  [BUGGY]  vieilleDelta  =  oldDelta  +  delta;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  vieilleDelta  =  oldDelta  +  delta;  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	vieilleDelta  =  oldDelta  +  delta;	  vieilleDelta    =    x1    +    delta;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
52	[BUG]  [BUGGY]  vieilleDelta  =  x1  +  delta.toString();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  vieilleDelta  =  x1  +  delta.toString();  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	vieilleDelta  =  x1  +  delta.toString();	  vieilleDelta    =    x1    +    delta;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
53	[BUG]  [BUGGY]  }  else  if(dx  <  =  0.0  ||  dx  >  tolerance)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(dx  <  =  0.0  ||  dx  >  tolerance)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  <  =  0.0  ||  dx  >  tolerance)  {	  }    else    if(dx    <    =    0.0    ||    dx    >    oldDelta)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
54	[BUG]  [BUGGY]  }  else  if(dx  <  =  0.0  ||  dx  >=  oldDelta)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(dx  <  =  0.0  ||  dx  >=  oldDelta)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  <  =  0.0  ||  dx  >=  oldDelta)  {	  }    else    if(dx    <    =    0.0    ||    dx    >    oldDelta)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
55	[BUG]  [BUGGY]  }  else  if(dx  <  =  0.0  ||  dx  ==  oldDelta)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(dx  <  =  0.0  ||  dx  ==  oldDelta)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  <  =  0.0  ||  dx  ==  oldDelta)  {	  }    else    if(dx    <    =    0.0    ||    dx    >    oldDelta)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
56	[BUG]  [BUGGY]  }  else  if(dx  <  =  0.0  &&  dx  >  oldDelta)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(dx  <  =  0.0  &&  dx  >  oldDelta)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  <  =  0.0  &&  dx  >  oldDelta)  {	  }    else    if(dx    <    =    0.0    ||    dx    >    oldDelta)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
57	[BUG]  [BUGGY]  }  else  if(dx  <  =  0.0  ||  dx  >=  oldDelta.length)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(dx  <  =  0.0  ||  dx  >=  oldDelta.length)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  <  =  0.0  ||  dx  >=  oldDelta.length)  {	  }    else    if(dx    <    =    0.0    ||    dx    >    oldDelta.length)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
58	[BUG]  [BUGGY]  }  else  if(dx  <  =  0.0  &&  dx  >  oldDelta.length)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(dx  <  =  0.0  &&  dx  >  oldDelta.length)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  <  =  0.0  &&  dx  >  oldDelta.length)  {	  }    else    if(dx    <    =    0.0    ||    dx    >    oldDelta.length)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
59	[BUG]  [BUGGY]  }  else  if(dx  <  =  0.0  ||  dx  ==  oldDelta.length)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(dx  <  =  0.0  ||  dx  ==  oldDelta.length)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  <  =  0.0  ||  dx  ==  oldDelta.length)  {	  }    else    if(dx    <    =    0.0    ||    dx    >    oldDelta.length)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
60	[BUG]  [BUGGY]  if(!Math.abs(delta)>  tolerance)  {  if(dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(!Math.abs(delta)>  tolerance)  {  if(dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(!Math.abs(delta)>  tolerance)  {  if(dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }	  if(Math.abs(delta)>    tolerance)    {    if(dx    >    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
61	[BUG]  [BUGGY]  ||  Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  delta;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  ||  Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  delta;  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	||  Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  delta;	  if(Math.abs(delta)    <    =    tolerance)    {    x1    =    x1    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
62	[BUG]  [BUGGY]  }  else  if(delta  <  =  0.0  ||  oldDelta  >  delta)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(delta  <  =  0.0  ||  oldDelta  >  delta)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(delta  <  =  0.0  ||  oldDelta  >  delta)  {	  }    else    if(delta    <    =    0.0    ||    delta    >    oldDelta)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
63	[BUG]  [BUGGY]  }  else  if(dx  <  =  0.0  ||  delta  >  oldDelta)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(dx  <  =  0.0  ||  delta  >  oldDelta)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  <  =  0.0  ||  delta  >  oldDelta)  {	  }    else    if(delta    <    =    0.0    ||    delta    >    oldDelta)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
64	[BUG]  [BUGGY]  }  else  if(delta  <  =  0.0  &&  delta  >  oldDelta)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(delta  <  =  0.0  &&  delta  >  oldDelta)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(delta  <  =  0.0  &&  delta  >  oldDelta)  {	  }    else    if(delta    <    =    0.0    ||    delta    >    oldDelta)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
65	[BUG]  [BUGGY]  }  else  if(delta  >=  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(delta  >=  0)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(delta  >=  0)  {	  }    else    if(dx    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
66	[BUG]  [BUGGY]  }  else  if(dx  <  =  0.0  ||  delta  >  tolerance)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(dx  <  =  0.0  ||  delta  >  tolerance)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  <  =  0.0  ||  delta  >  tolerance)  {	  }    else    if(delta    <    =    0.0    ||    delta    >    tolerance)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
67	[BUG]  [BUGGY]  }  else  if(dx  <  =  0.0  ||  oldDelta  >  tolerance)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(dx  <  =  0.0  ||  oldDelta  >  tolerance)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  <  =  0.0  ||  oldDelta  >  tolerance)  {	  }    else    if(delta    <    =    0.0    ||    delta    >    tolerance)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
68	[BUG]  [BUGGY]  }  else  if(delta  <  =  0.0  &&  delta  >  tolerance)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(delta  <  =  0.0  &&  delta  >  tolerance)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(delta  <  =  0.0  &&  delta  >  tolerance)  {	  }    else    if(delta    <    =    0.0    ||    delta    >    tolerance)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
69	[BUG]  [BUGGY]  }  else  if(!Math.abs(delta)  <  tolerance)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(!Math.abs(delta)  <  tolerance)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(!Math.abs(delta)  <  tolerance)  {	  }    else    if(!Math.abs(delta)>    tolerance)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
70	[BUG]  [BUGGY]  }  else  if(!Math.abs(dx)>  tolerance)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(!Math.abs(dx)>  tolerance)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(!Math.abs(dx)>  tolerance)  {	  }    else    if(!Math.abs(delta)>    tolerance)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
71	[BUG]  [BUGGY]  oldDelta  =  delta  +  x1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  oldDelta  =  delta  +  x1;  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	oldDelta  =  delta  +  x1;	  oldDelta    =    x1    +    delta;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
72	[BUG]  [BUGGY]  x1  =  x1  +  0.5  *  delta;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  x1  =  x1  +  0.5  *  delta;  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	x1  =  x1  +  0.5  *  delta;	  x1    =    x1    +    0.5    *    tolerance;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
73	[BUG]  [BUGGY]  x1  =  x0  +  0.5  *  tolerance;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  x1  =  x0  +  0.5  *  tolerance;  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	x1  =  x0  +  0.5  *  tolerance;	  x1    =    x1    +    0.5    *    tolerance;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
74	[BUG]  [BUGGY]  }  else  if(Math.abs(dx)  <  tolerance)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(Math.abs(dx)  <  tolerance)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(Math.abs(dx)  <  tolerance)  {	  }    else    if(Math.abs(delta)    <    tolerance)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
75	[BUG]  [BUGGY]  ||  Math.abs(delta)>  tolerance)  {  x1  =  x1  +  delta;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  ||  Math.abs(delta)>  tolerance)  {  x1  =  x1  +  delta;  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	||  Math.abs(delta)>  tolerance)  {  x1  =  x1  +  delta;	  ||    Math.abs(delta)    <    tolerance)    {    x1    =    x1    +    delta;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
76	[BUG]  [BUGGY]  ||  Math.abs(delta)  <  tolerance)  {  x1  =  x1  +  oldDelta;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  ||  Math.abs(delta)  <  tolerance)  {  x1  =  x1  +  oldDelta;  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	||  Math.abs(delta)  <  tolerance)  {  x1  =  x1  +  oldDelta;	  ||    Math.abs(delta)    <    tolerance)    {    x1    =    x1    +    delta;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
77	[BUG]  [BUGGY]  if(Math.abs(oldDelta)>  tolerance)  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(Math.abs(oldDelta)>  tolerance)  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(oldDelta)>  tolerance)  {  x1  =  x1  -  0.5  *  tolerance;  }	  if(Math.abs(oldDelta)>    tolerance)    {    if(dx    >    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
78	[BUG]  [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  oldDelta  =  x0  +  delta;  }  else  {  x2  =  x0  +  delta;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  oldDelta  =  x0  +  delta;  }  else  {  x2  =  x0  +  delta;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)  <  tolerance)  {  oldDelta  =  x0  +  delta;  }  else  {  x2  =  x0  +  delta;  }	  if(Math.abs(delta)    <    tolerance)    {    oldDelta    =    x1    +    delta;    }    else    {    x2    =    x0    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
79	[BUG]  [BUGGY]  if(dx  >  0.0)  {  if(!Math.abs(delta)>  tolerance)  {  x1  =  x1  +  delta;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(dx  >  0.0)  {  if(!Math.abs(delta)>  tolerance)  {  x1  =  x1  +  delta;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(dx  >  0.0)  {  if(!Math.abs(delta)>  tolerance)  {  x1  =  x1  +  delta;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }	  if(!Math.abs(delta)>    tolerance)    {    x1    =    x1    +    delta;    }    else    {    x2    =    x1    -    x0;    y2    =    y1;    oldDelta    =    delta;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
80	[BUG]  [BUGGY]  }  else  if(Math.abs(dx)  <  =  tolerance)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(Math.abs(dx)  <  =  tolerance)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(Math.abs(dx)  <  =  tolerance)  {	  }    else    if(Math.abs(delta)    <    =    tolerance)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
81	[BUG]  [BUGGY]  x1  =  x0  -  0.5  *  tolerance;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  x1  =  x0  -  0.5  *  tolerance;  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	x1  =  x0  -  0.5  *  tolerance;	  if(delta    <    =    0.0)    {    x1    =    x0    -    0.5    *    tolerance;    }    else    if(dx    >    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
82	[BUG]  [BUGGY]  if(Math.abs(delta)>  tolerance)  {  if(delta  <  =  0.0)  {  x1  =  x0  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(Math.abs(delta)>  tolerance)  {  if(delta  <  =  0.0)  {  x1  =  x0  -  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)>  tolerance)  {  if(delta  <  =  0.0)  {  x1  =  x0  -  0.5  *  tolerance;  }	  if(delta    <    =    0.0)    {    x1    =    x0    -    0.5    *    tolerance;    }    else    if(dx    >    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
83	[BUG]  [BUGGY]  if(delta  <  =  0.0)  {  x1  =  x0  +  0.5  *  tolerance;  }  else  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(delta  <  =  0.0)  {  x1  =  x0  +  0.5  *  tolerance;  }  else  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(delta  <  =  0.0)  {  x1  =  x0  +  0.5  *  tolerance;  }  else  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }	  if(delta    <    =    0.0)    {    x1    =    x0    -    0.5    *    tolerance;    }    else    if(dx    >    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
84	[BUG]  [BUGGY]  }  else  if(delta  <  =  0.0  ||  delta  <  =  0.0)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(delta  <  =  0.0  ||  delta  <  =  0.0)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(delta  <  =  0.0  ||  delta  <  =  0.0)  {	  }    else    if(dx    <    =    0.0    ||    delta    <    =    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
85	[BUG]  [BUGGY]  }  else  if(dx  <  =  0.0  &&  delta  <  =  0.0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(dx  <  =  0.0  &&  delta  <  =  0.0)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  <  =  0.0  &&  delta  <  =  0.0)  {	  }    else    if(dx    <    =    0.0    ||    delta    <    =    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
86	[BUG]  [BUGGY]  ||  Math.abs(tolerance)>  x1)  {  x1  =  x1  +  delta;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  ||  Math.abs(tolerance)>  x1)  {  x1  =  x1  +  delta;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	||  Math.abs(tolerance)>  x1)  {  x1  =  x1  +  delta;  }	  ||    Math.abs(delta)>    tolerance)    {    x1    =    x1    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
87	[BUG]  [BUGGY]  ||  Math.abs(delta)>  tolerance)  {  x1  =  x1  +  oldDelta;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  ||  Math.abs(delta)>  tolerance)  {  x1  =  x1  +  oldDelta;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	||  Math.abs(delta)>  tolerance)  {  x1  =  x1  +  oldDelta;  }	  ||    Math.abs(delta)>    tolerance)    {    x1    =    x1    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
88	[BUG]  [BUGGY]  }  else  if(delta  <  =  0.0  ||  oldDelta.length  >  delta)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(delta  <  =  0.0  ||  oldDelta.length  >  delta)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(delta  <  =  0.0  ||  oldDelta.length  >  delta)  {	  }    else    if(delta    <    =    0.0    ||    delta    >    oldDelta.length)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
89	[BUG]  [BUGGY]  }  else  if(dx  <  =  0.0  ||  delta  >  oldDelta.length)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(dx  <  =  0.0  ||  delta  >  oldDelta.length)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  <  =  0.0  ||  delta  >  oldDelta.length)  {	  }    else    if(delta    <    =    0.0    ||    delta    >    oldDelta.length)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
90	[BUG]  [BUGGY]  }  else  if(delta  <  =  0.0  ||  oldDelta.length  >  delta.length)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(delta  <  =  0.0  ||  oldDelta.length  >  delta.length)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(delta  <  =  0.0  ||  oldDelta.length  >  delta.length)  {	  }    else    if(delta    <    =    0.0    ||    delta    >    oldDelta.length)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
91	[BUG]  [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  -  0.5  *  tolerance;  }	  if(Math.abs(delta)    <    tolerance)    {    if(dx    <    =    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
92	[BUG]  [BUGGY]  ||(dx  <  =  0.0  &&  dx  <  =  tolerance))  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  ||(dx  <  =  0.0  &&  dx  <  =  tolerance))  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	||(dx  <  =  0.0  &&  dx  <  =  tolerance))  {  x1  =  x1  -  0.5  *  tolerance;  }	  if(dx    <    =    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
93	[BUG]  [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)  <  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }	  if(Math.abs(delta)    <    =    tolerance)    {    if(dx    <    =    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
94	[BUG]  [BUGGY]  if(Math.abs(oldDelta)  <  tolerance)  {  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(Math.abs(oldDelta)  <  tolerance)  {  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(oldDelta)  <  tolerance)  {  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }	  if(Math.abs(delta)    <    tolerance)    {    if(dx    >    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
95	[BUG]  [BUGGY]  }  else  if(delta  <  =  0.0  &&  oldDelta  >  delta)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(delta  <  =  0.0  &&  oldDelta  >  delta)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(delta  <  =  0.0  &&  oldDelta  >  delta)  {	  }    else    if(delta    <    =    0.0    ||    delta    >    oldDelta)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
96	[BUG]  [BUGGY]  }  else  if(dx  <  =  0.0  ||  oldDelta  >  delta)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(dx  <  =  0.0  ||  oldDelta  >  delta)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  <  =  0.0  ||  oldDelta  >  delta)  {	  }    else    if(delta    <    =    0.0    ||    delta    >    oldDelta)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
97	[BUG]  [BUGGY]  vieilleDelta  =  x0  +  delta;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  vieilleDelta  =  x0  +  delta;  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	vieilleDelta  =  x0  +  delta;	  vieilleDelta    =    x1    +    delta;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
98	[BUG]  [BUGGY]  vieilleDelta  =  x1  +  delta  *  tolerance;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  vieilleDelta  =  x1  +  delta  *  tolerance;  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	vieilleDelta  =  x1  +  delta  *  tolerance;	  vieilleDelta    =    x1    +    delta;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
99	[BUG]  [BUGGY]  if(Math.abs(oldDelta)  <  =  Math.abs(tolerance))  {  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(Math.abs(oldDelta)  <  =  Math.abs(tolerance))  {  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(oldDelta)  <  =  Math.abs(tolerance))  {  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }	  if(Math.abs(delta)    <    =    Math.abs(tolerance))    {    if(dx    >    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
100	[BUG]  [BUGGY]  x1  =  x1  +  delta2;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  x1  =  x1  +  delta2;  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	x1  =  x1  +  delta2;	  x1    =    x1    +    delta;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
101	[BUG]  [BUGGY]  }  else  if(dx  >=  1)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(dx  >=  1)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  >=  1)  {	  }    else    if(dx    >    1)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
102	[BUG]  [BUGGY]  if(dx  <  =  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(dx  <  =  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(dx  <  =  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }	  if(dx    <    =    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
103	[BUG]  [BUGGY]  x1  =  x1  +  0.5  *  oldDelta;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  x1  =  x1  +  0.5  *  oldDelta;  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	x1  =  x1  +  0.5  *  oldDelta;	  x1    =    x1    +    0.5    *    tolerance;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
104	[BUG]  [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  oldDelta  =  x1  +  delta;  }  else  {  x2  =  x0  +  delta;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  oldDelta  =  x1  +  delta;  }  else  {  x2  =  x0  +  delta;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)  <  =  tolerance)  {  oldDelta  =  x1  +  delta;  }  else  {  x2  =  x0  +  delta;  }	  if(Math.abs(delta)    <    tolerance)    {    oldDelta    =    x1    +    delta;    }    else    {    x2    =    x0    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
105	[BUG]  [BUGGY]  }  else  if(Math.abs(delta)  >=  tolerance)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(Math.abs(delta)  >=  tolerance)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(Math.abs(delta)  >=  tolerance)  {	  }    else    if(Math.abs(delta)    <    tolerance)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
106	[BUG]  [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  if(delta  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  if(delta  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)  <  tolerance)  {  if(delta  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }	  if(delta    <    =    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    else    if(dx    >    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
107	[BUG]  [BUGGY]  if(delta  <  =  0.0)  {  x1  =  x0  -  0.5  *  tolerance;  }  else  if(dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(delta  <  =  0.0)  {  x1  =  x0  -  0.5  *  tolerance;  }  else  if(dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(delta  <  =  0.0)  {  x1  =  x0  -  0.5  *  tolerance;  }  else  if(dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }	  if(delta    <    =    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    else    if(dx    >    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
108	[BUG]  [BUGGY]  if(Math.abs(delta)>  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(Math.abs(delta)>  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)>  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }	  if(Math.abs(delta)>    tolerance)    {    if(dx    <    =    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
109	[BUG]  [BUGGY]  x1  =  x1  -  0.5  *  oldDelta;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  x1  =  x1  -  0.5  *  oldDelta;  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	x1  =  x1  -  0.5  *  oldDelta;	  x1    =    x1    -    0.5    *    tolerance;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
110	[BUG]  [BUGGY]  x1  =  x1  -  0.5  *  tolerance  +  delta;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  x1  =  x1  -  0.5  *  tolerance  +  delta;  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	x1  =  x1  -  0.5  *  tolerance  +  delta;	  x1    =    x1    -    0.5    *    tolerance;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
111	[BUG]  [BUGGY]  }  else  if(delta  <  =  0.0  ||  oldDelta  >  tolerance)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(delta  <  =  0.0  ||  oldDelta  >  tolerance)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(delta  <  =  0.0  ||  oldDelta  >  tolerance)  {	  }    else    if(delta    <    =    0.0    ||    delta    >    tolerance)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
112	[BUG]  [BUGGY]  }  else  if(dx  >=  oldDelta.length)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(dx  >=  oldDelta.length)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  >=  oldDelta.length)  {	  }    else    if(dx    <    =    0.0    ||    dx    >    oldDelta.length)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
113	[BUG]  [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  x0;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  x0;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  x0;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }	  if(Math.abs(delta)    <    tolerance)    {    x1    =    x1    +    x0;    }    else    {    x2    =    x1    -    x0;    y2    =    y1;    oldDelta    =    delta;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
114	[BUG]  [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  x0;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  delta  =  delta;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  x0;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  delta  =  delta;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  x0;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  delta  =  delta;  }	  if(Math.abs(delta)    <    tolerance)    {    x1    =    x1    +    x0;    }    else    {    x2    =    x1    -    x0;    y2    =    y1;    oldDelta    =    delta;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
115	[BUG]  [BUGGY]  }  else  if(dx  <  =  0.0  &&  oldDelta  ==  delta)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(dx  <  =  0.0  &&  oldDelta  ==  delta)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  <  =  0.0  &&  oldDelta  ==  delta)  {	  }    else    if(dx    <    =    0.0    &&    oldDelta    <    =    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
116	[BUG]  [BUGGY]  }  else  if(dx  <  =  0.0  &&  oldDelta  >=  delta)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(dx  <  =  0.0  &&  oldDelta  >=  delta)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  <  =  0.0  &&  oldDelta  >=  delta)  {	  }    else    if(dx    <    =    0.0    &&    oldDelta    <    =    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
117	[BUG]  [BUGGY]  }  else  if(dx  <  =  0.0  &&  oldDelta!=  delta)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(dx  <  =  0.0  &&  oldDelta!=  delta)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  <  =  0.0  &&  oldDelta!=  delta)  {	  }    else    if(dx    <    =    0.0    &&    oldDelta    <    =    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
118	[BUG]  [BUGGY]  &&  Math.abs(delta)  <  tolerance)  {  x1  =  x1  +  delta;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  &&  Math.abs(delta)  <  tolerance)  {  x1  =  x1  +  delta;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	&&  Math.abs(delta)  <  tolerance)  {  x1  =  x1  +  delta;  }	  ||    Math.abs(delta)    <    tolerance)    {    x1    =    x1    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
119	[BUG]  [BUGGY]  ||  Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  delta;  }  else  {  x2  =  x0  +  delta;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  ||  Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  delta;  }  else  {  x2  =  x0  +  delta;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	||  Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  delta;  }  else  {  x2  =  x0  +  delta;  }	  ||    Math.abs(delta)>    tolerance)    {    x1    =    x1    +    delta;    }    else    {    x2    =    x0    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
120	[BUG]  [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  x1  =  x0  +  delta;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  x1  =  x0  +  delta;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)  <  =  tolerance)  {  x1  =  x0  +  delta;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }	  if(Math.abs(delta)    <    tolerance)    {    x1    =    x0    +    delta;    }    else    {    x2    =    x1    -    x0;    y2    =    y1;    oldDelta    =    delta;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
121	[BUG]  [BUGGY]  }  else  if(delta  <  =  0.0  ||  oldDelta  >=  0.0)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(delta  <  =  0.0  ||  oldDelta  >=  0.0)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(delta  <  =  0.0  ||  oldDelta  >=  0.0)  {	  }    else    if(delta    <    =    0.0    ||    oldDelta    <    =    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
122	[BUG]  [BUGGY]  &&  Math.abs(delta)  <  tolerance)  {  x1  =  x1  +  delta;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  &&  Math.abs(delta)  <  tolerance)  {  x1  =  x1  +  delta;  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	&&  Math.abs(delta)  <  tolerance)  {  x1  =  x1  +  delta;	  ||    Math.abs(delta)    <    tolerance)    {    x1    =    x1    +    delta;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
123	[BUG]  [BUGGY]  if(Math.abs(oldDelta)>  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(Math.abs(oldDelta)>  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(oldDelta)>  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }	  if(Math.abs(oldDelta)>    tolerance)    {    if(dx    >    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
124	[BUG]  [BUGGY]  ||(dx  >  0.0  &&  dx  <  =  0.0)||(x2  -  0.5  *  tolerance))  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  ||(dx  >  0.0  &&  dx  <  =  0.0)||(x2  -  0.5  *  tolerance))  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	||(dx  >  0.0  &&  dx  <  =  0.0)||(x2  -  0.5  *  tolerance))  {  x1  =  x1  -  0.5  *  tolerance;  }	  ||(dx    >    0.0    &&    dx    <    =    0.0)||(x1    -    0.5    *    tolerance))    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
125	[BUG]  [BUGGY]  }  else  if(!Math.abs(delta)  >=  tolerance)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(!Math.abs(delta)  >=  tolerance)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(!Math.abs(delta)  >=  tolerance)  {	  }    else    if(!Math.abs(delta)>    tolerance)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
126	[BUG]  [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  delta;  }  else  {  x2  =  x0  +  delta;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  delta;  }  else  {  x2  =  x0  +  delta;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  delta;  }  else  {  x2  =  x0  +  delta;  }	  if(Math.abs(delta)    <    tolerance)    {    x1    =    x1    +    delta;    }    else    {    x2    =    x0    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
127	[BUG]  [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  if(delta  <  =  0.0)  {  x1  =  x0  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  if(delta  <  =  0.0)  {  x1  =  x0  -  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)  <  tolerance)  {  if(delta  <  =  0.0)  {  x1  =  x0  -  0.5  *  tolerance;  }	  if(delta    <    =    0.0)    {    x1    =    x0    -    0.5    *    tolerance;    }    else    if(dx    >    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
128	[BUG]  [BUGGY]  if(Math.abs(delta)>  tolerance)  {  if(dx  <  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(Math.abs(delta)>  tolerance)  {  if(dx  <  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)>  tolerance)  {  if(dx  <  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }	  if(Math.abs(delta)>    tolerance)    {    if(dx    >    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
129	[BUG]  [BUGGY]  }  else  if(delta  <  =  0.0  ||  oldDelta.length  <  delta)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(delta  <  =  0.0  ||  oldDelta.length  <  delta)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(delta  <  =  0.0  ||  oldDelta.length  <  delta)  {	  }    else    if(delta    <    =    0.0    ||    delta    >    oldDelta.length)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
130	[BUG]  [BUGGY]  }  else  if(delta  <  =  0.0  &&  delta  >  oldDelta.length)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(delta  <  =  0.0  &&  delta  >  oldDelta.length)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(delta  <  =  0.0  &&  delta  >  oldDelta.length)  {	  }    else    if(delta    <    =    0.0    ||    delta    >    oldDelta.length)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
131	[BUG]  [BUGGY]  if(!Math.abs(delta)>  tolerance)  {  x1  =  x1  +  x0;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(!Math.abs(delta)>  tolerance)  {  x1  =  x1  +  x0;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(!Math.abs(delta)>  tolerance)  {  x1  =  x1  +  x0;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }	  if(!Math.abs(delta)>    tolerance)    {    x1    =    x1    +    delta;    }    else    {    x2    =    x1    -    x0;    y2    =    y1;    oldDelta    =    delta;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
132	[BUG]  [BUGGY]  if(!Math.abs(delta)>  tolerance)  {  x1  =  x0  +  delta;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(!Math.abs(delta)>  tolerance)  {  x1  =  x0  +  delta;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(!Math.abs(delta)>  tolerance)  {  x1  =  x0  +  delta;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }	  if(!Math.abs(delta)>    tolerance)    {    x1    =    x1    +    delta;    }    else    {    x2    =    x1    -    x0;    y2    =    y1;    oldDelta    =    delta;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
133	[BUG]  [BUGGY]  OldDelta  =  x0  +  delta;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  OldDelta  =  x0  +  delta;  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	OldDelta  =  x0  +  delta;	  OldDelta    =    x1    +    delta;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
134	[BUG]  [BUGGY]  OldDelta  =  x1  +  delta  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  OldDelta  =  x1  +  delta  +  1;  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	OldDelta  =  x1  +  delta  +  1;	  OldDelta    =    x1    +    delta;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
135	[BUG]  [BUGGY]  }  else  if(delta  <  =  0.0  ||  oldDelta  >  dx)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(delta  <  =  0.0  ||  oldDelta  >  dx)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(delta  <  =  0.0  ||  oldDelta  >  dx)  {	  }    else    if(delta    <    =    0.0    ||    delta    >    oldDelta)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
136	[BUG]  [BUGGY]  }  else  if(delta  <  =  0.0  ||  oldDelta  >  0.5)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(delta  <  =  0.0  ||  oldDelta  >  0.5)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(delta  <  =  0.0  ||  oldDelta  >  0.5)  {	  }    else    if(delta    <    =    0.0    ||    delta    >    oldDelta)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
137	[BUG]  [BUGGY]  }  else  if(delta  <  =  0.0  ||  oldDelta  >  0)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(delta  <  =  0.0  ||  oldDelta  >  0)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(delta  <  =  0.0  ||  oldDelta  >  0)  {	  }    else    if(delta    <    =    0.0    ||    delta    >    oldDelta)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
138	[BUG]  [BUGGY]  }  else  if(dx  <  =  0.0  ||  dx  >  0.0)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(dx  <  =  0.0  ||  dx  >  0.0)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  <  =  0.0  ||  dx  >  0.0)  {	  }    else    if(dx    <    =    0.0    ||    delta    <    =    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
139	[BUG]  [BUGGY]  }  else  if(dx  <  =  0.0  ||  oldDelta  >  delta.length)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(dx  <  =  0.0  ||  oldDelta  >  delta.length)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  <  =  0.0  ||  oldDelta  >  delta.length)  {	  }    else    if(delta    <    =    0.0    ||    delta    >    oldDelta.length)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
140	[BUG]  [BUGGY]  }  else  if(delta  <  =  0.0  ||  oldDelta.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(delta  <  =  0.0  ||  oldDelta.length  >  0)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(delta  <  =  0.0  ||  oldDelta.length  >  0)  {	  }    else    if(delta    <    =    0.0    ||    delta    >    oldDelta.length)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
141	[BUG]  [BUGGY]  }  else  if(delta  <  =  0.0  ||  oldDelta  >  delta.length)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(delta  <  =  0.0  ||  oldDelta  >  delta.length)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(delta  <  =  0.0  ||  oldDelta  >  delta.length)  {	  }    else    if(delta    <    =    0.0    ||    delta    >    oldDelta.length)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
142	[BUG]  [BUGGY]  }  else  if(dx  <  =  0.0  ||  oldDelta.length  >  delta)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(dx  <  =  0.0  ||  oldDelta.length  >  delta)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  <  =  0.0  ||  oldDelta.length  >  delta)  {	  }    else    if(delta    <    =    0.0    ||    delta    >    oldDelta.length)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
143	[BUG]  [BUGGY]  vieilleDelta  =  x1  +  x2;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  vieilleDelta  =  x1  +  x2;  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	vieilleDelta  =  x1  +  x2;	  vieilleDelta    =    x1    +    delta;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
144	[BUG]  [BUGGY]  if(Math.abs(delta)>  tolerance)  {  oldDelta  =  x0  +  x1;  }  else  {  x2  =  x1  +  delta;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(Math.abs(delta)>  tolerance)  {  oldDelta  =  x0  +  x1;  }  else  {  x2  =  x1  +  delta;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)>  tolerance)  {  oldDelta  =  x0  +  x1;  }  else  {  x2  =  x1  +  delta;  }	  if(Math.abs(delta)>    tolerance)    {    oldDelta    =    x0    +    delta;    }    else    {    x2    =    x1    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
145	[BUG]  [BUGGY]  if(dx  <  =  0.0)  {  x1  =  x0  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(dx  <  =  0.0)  {  x1  =  x0  -  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(dx  <  =  0.0)  {  x1  =  x0  -  0.5  *  tolerance;  }	  if(delta    <    =    0.0)    {    x1    =    x0    -    0.5    *    tolerance;    }    else    if(dx    >    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
146	[BUG]  [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  x1  =  x0  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  x1  =  x0  -  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)  <  tolerance)  {  x1  =  x0  -  0.5  *  tolerance;  }	  if(delta    <    =    0.0)    {    x1    =    x0    -    0.5    *    tolerance;    }    else    if(dx    >    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
147	[BUG]  [BUGGY]  if(Math.abs(oldDelta)  <  tolerance)  {  if(dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(Math.abs(oldDelta)  <  tolerance)  {  if(dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(oldDelta)  <  tolerance)  {  if(dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }	  if(Math.abs(delta)    <    =    tolerance)    {    if(dx    >    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
148	[BUG]  [BUGGY]  ||(dx  >  0.0  &&  oldDelta  <  =  0.0)||(x1  -  0.5  *  tolerance))  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  ||(dx  >  0.0  &&  oldDelta  <  =  0.0)||(x1  -  0.5  *  tolerance))  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	||(dx  >  0.0  &&  oldDelta  <  =  0.0)||(x1  -  0.5  *  tolerance))  {  x1  =  x1  -  0.5  *  tolerance;  }	  ||(dx    >    0.0    &&    dx    <    =    0.0)||(x1    -    0.5    *    tolerance))    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
149	[BUG]  [BUGGY]  ||(dx  >  0.0  &&  y1  <  =  0.0)||(x1  -  0.5  *  tolerance))  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  ||(dx  >  0.0  &&  y1  <  =  0.0)||(x1  -  0.5  *  tolerance))  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	||(dx  >  0.0  &&  y1  <  =  0.0)||(x1  -  0.5  *  tolerance))  {  x1  =  x1  -  0.5  *  tolerance;  }	  ||(dx    >    0.0    &&    dx    <    =    0.0)||(x1    -    0.5    *    tolerance))    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
150	[BUG]  [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  oldDelta  =  x1  +  x0;  }  else  {  x2  =  x0  +  delta;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  oldDelta  =  x1  +  x0;  }  else  {  x2  =  x0  +  delta;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)  <  tolerance)  {  oldDelta  =  x1  +  x0;  }  else  {  x2  =  x0  +  delta;  }	  if(Math.abs(delta)    <    tolerance)    {    oldDelta    =    x1    +    delta;    }    else    {    x2    =    x0    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
151	[BUG]  [BUGGY]  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	x1  =  x1  -  0.5  *  tolerance;  }	  if(dx    >    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
152	[BUG]  [BUGGY]  ||  Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  oldDelta;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  ||  Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  oldDelta;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	||  Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  oldDelta;  }	  ||    Math.abs(delta)    <    =    tolerance)    {    x1    =    x1    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
153	[BUG]  [BUGGY]  }  else  if(dx  <  =  0.0  ||  dx  >  oldDelta.doubleValue())  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(dx  <  =  0.0  ||  dx  >  oldDelta.doubleValue())  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  <  =  0.0  ||  dx  >  oldDelta.doubleValue())  {	  }    else    if(dx    <    =    0.0    ||    dx    >    oldDelta)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
154	[BUG]  [BUGGY]  }  else  if(delta  <  =  0.0  ||  oldDelta  ==  0.0)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(delta  <  =  0.0  ||  oldDelta  ==  0.0)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(delta  <  =  0.0  ||  oldDelta  ==  0.0)  {	  }    else    if(delta    <    =    0.0    ||    oldDelta    <    =    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
155	[BUG]  [BUGGY]  if(Math.abs(delta)>  tolerance)  {  if(x1  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(Math.abs(delta)>  tolerance)  {  if(x1  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)>  tolerance)  {  if(x1  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }	  if(Math.abs(delta)>    tolerance)    {    if(dx    <    =    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
156	[BUG]  [BUGGY]  x1  =  x1  +  delta  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  x1  =  x1  +  delta  +  1;  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	x1  =  x1  +  delta  +  1;	  x1    =    x1    +    delta;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
157	[BUG]  [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  x1  =  x0  +  x1;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  x1  =  x0  +  x1;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)  <  tolerance)  {  x1  =  x0  +  x1;  }  else  {  x2  =  x1  -  x0;  y2  =  y1;  oldDelta  =  delta;  }	  if(Math.abs(delta)    <    tolerance)    {    x1    =    x0    +    delta;    }    else    {    x2    =    x1    -    x0;    y2    =    y1;    oldDelta    =    delta;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
158	[BUG]  [BUGGY]  if(Math.abs(oldDelta)  <  =  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(Math.abs(oldDelta)  <  =  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(oldDelta)  <  =  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }	  if(Math.abs(delta)    <    =    tolerance)    {    if(dx    <    =    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
159	[BUG]  [BUGGY]  OldDelta  =  x1  +  delta  *  tolerance;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  OldDelta  =  x1  +  delta  *  tolerance;  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	OldDelta  =  x1  +  delta  *  tolerance;	  OldDelta    =    x1    +    delta;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
160	[BUG]  [BUGGY]  OldDelta  =  x1  +  x2;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  OldDelta  =  x1  +  x2;  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	OldDelta  =  x1  +  x2;	  OldDelta    =    x1    +    delta;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
161	[BUG]  [BUGGY]  }  else  if(!Math.abs(delta)>  tolerance  ||  dx  >  oldDelta)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(!Math.abs(delta)>  tolerance  ||  dx  >  oldDelta)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(!Math.abs(delta)>  tolerance  ||  dx  >  oldDelta)  {	  }    else    if(!Math.abs(delta)>    tolerance)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
162	[BUG]  [BUGGY]  }  else  if(Math.abs(oldDelta)  <  tolerance)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(Math.abs(oldDelta)  <  tolerance)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(Math.abs(oldDelta)  <  tolerance)  {	  }    else    if(Math.abs(delta)    <    tolerance)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
163	[BUG]  [BUGGY]  }  else  if(delta  <  =  0.0  ||  oldDelta  >  1.0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(delta  <  =  0.0  ||  oldDelta  >  1.0)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(delta  <  =  0.0  ||  oldDelta  >  1.0)  {	  }    else    if(delta    <    =    0.0    ||    oldDelta    >    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
164	[BUG]  [BUGGY]  ||(dx  >  0.0  &&  oldDelta  <  =  0.0))  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  ||(dx  >  0.0  &&  oldDelta  <  =  0.0))  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	||(dx  >  0.0  &&  oldDelta  <  =  0.0))  {  x1  =  x1  -  0.5  *  tolerance;  }	  ||(dx    >    0.0    &&    dx    <    =    0.0))    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
165	[BUG]  [BUGGY]  if(Math.abs(oldDelta)  <  =  Math.abs(x2))  {  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(Math.abs(oldDelta)  <  =  Math.abs(x2))  {  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(oldDelta)  <  =  Math.abs(x2))  {  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }	  if(Math.abs(delta)    <    =    Math.abs(tolerance))    {    if(dx    >    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
166	[BUG]  [BUGGY]  ||  Math.abs(delta)>  tolerance)  {  x1  =  x1  +  x0;  }  else  {  x2  =  x0  +  delta;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  ||  Math.abs(delta)>  tolerance)  {  x1  =  x1  +  x0;  }  else  {  x2  =  x0  +  delta;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	||  Math.abs(delta)>  tolerance)  {  x1  =  x1  +  x0;  }  else  {  x2  =  x0  +  delta;  }	  ||    Math.abs(delta)>    tolerance)    {    x1    =    x1    +    delta;    }    else    {    x2    =    x0    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
167	[BUG]  [BUGGY]  if(Math.abs(oldDelta)  <  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(Math.abs(oldDelta)  <  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(oldDelta)  <  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }	  if(Math.abs(delta)    <    tolerance)    {    if(dx    <    =    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
168	[BUG]  [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  if(x1  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  if(x1  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(delta)  <  tolerance)  {  if(x1  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }	  if(Math.abs(delta)    <    tolerance)    {    if(dx    <    =    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
169	[BUG]  [BUGGY]  if(Math.abs(oldDelta)  <  =  tolerance)  {  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  if(Math.abs(oldDelta)  <  =  tolerance)  {  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	if(Math.abs(oldDelta)  <  =  tolerance)  {  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }	  if(Math.abs(delta)    <    =    tolerance)    {    if(dx    >    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
170	[BUG]  [BUGGY]  @SuppressWarnings( "resource ")Annotations.add(new  Integer(delta));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  @SuppressWarnings( "resource ")Annotations.add(new  Integer(delta));  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	@SuppressWarnings( "resource ")Annotations.add(new  Integer(delta));	  if(Math.abs(delta)    <    =    tolerance)    {    x1    =    x1    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
171	[BUG]  [BUGGY]  oldDelta  =  x1  +  delta  *  tolerance;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  oldDelta  =  x1  +  delta  *  tolerance;  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	oldDelta  =  x1  +  delta  *  tolerance;	  oldDelta    =    x1    +    delta;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
172	[BUG]  [BUGGY]  oldDelta  =  x1  +  x2;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  oldDelta  =  x1  +  x2;  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	oldDelta  =  x1  +  x2;	  oldDelta    =    x1    +    delta;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
173	[BUG]  [BUGGY]  }  else  if(dx  >  0.0  &&  oldDelta  <  =  0.0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(dx  >  0.0  &&  oldDelta  <  =  0.0)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  >  0.0  &&  oldDelta  <  =  0.0)  {	  }    else    if(dx    <    =    0.0    &&    oldDelta    <    =    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
174	[BUG]  [BUGGY]  }  else  if(dx  >=  0.0  ||  dx  >  oldDelta.length)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(dx  >=  0.0  ||  dx  >  oldDelta.length)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  >=  0.0  ||  dx  >  oldDelta.length)  {	  }    else    if(dx    <    =    0.0    ||    dx    >    oldDelta.length)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
175	[BUG]  [BUGGY]  }  else  if(dx  <  =  0.0  ||  dx  >  oldDelta.length  -  1)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(dx  <  =  0.0  ||  dx  >  oldDelta.length  -  1)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(dx  <  =  0.0  ||  dx  >  oldDelta.length  -  1)  {	  }    else    if(dx    <    =    0.0    ||    dx    >    oldDelta.length)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
176	[BUG]  [BUGGY]  }  else  if(Math.abs(oldDelta)  <  =  tolerance)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  }  else  if(Math.abs(oldDelta)  <  =  tolerance)  {  [BUGGY]      x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	}  else  if(Math.abs(oldDelta)  <  =  tolerance)  {	  }    else    if(Math.abs(delta)    <    =    tolerance)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
177	[BUG]  [BUGGY]  ||  Math.abs(delta)  <  tolerance)  {  x1  =  x1  +  oldDelta;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      oldDelta  =  delta;  delta  =  p  /  p1;  }  }  x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;      [BUGGY]  ||  Math.abs(delta)  <  tolerance)  {  x1  =  x1  +  oldDelta;  }  [BUGGY]      }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  if  ((y1  >  0)  ==  (y2  >  0))  {  x2  =  x0;  y2  =  y0;  delta  =  x1  -  x0;  oldDelta  =  delta;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	||  Math.abs(delta)  <  tolerance)  {  x1  =  x1  +  oldDelta;  }	  ||    Math.abs(delta)    <    tolerance)    {    x1    =    x1    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
