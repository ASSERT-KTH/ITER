bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  dx  -  tolerance;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  return  dx  -  tolerance;  [BUGGY]    }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  -  tolerance;	  return    dx;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
2	[BUG]  [BUGGY]  return  dx  /  tolerance;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  return  dx  /  tolerance;  [BUGGY]    }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  /  tolerance;	  return    dx;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
3	[BUG]  [BUGGY]  result  =  Math.max(relativeAccuracy  *  Math.abs(x2),  tolerance);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  result  =  Math.max(relativeAccuracy  *  Math.abs(x2),  tolerance);  [BUGGY]    return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	result  =  Math.max(relativeAccuracy  *  Math.abs(x2),  tolerance);	      result    =    Math.max(relativeAccuracy    *    Math.abs(x2),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
4	[BUG]  [BUGGY]  if(Math.abs(dx)  <  =  tolerance)  {  setResult(x1,  i);  return  result;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  if(Math.abs(dx)  <  =  tolerance)  {  setResult(x1,  i);  return  result;  }  [BUGGY]    return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(Math.abs(dx)  <  =  tolerance)  {  setResult(x1,  i);  return  result;  }	      if(Math.abs(dx)    <    tolerance)    {    setResult(x1,    i);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
5	[BUG]  [BUGGY]  setResult(x1,  i);  return  result;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  setResult(x1,  i);  return  result;  [BUGGY]    return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	setResult(x1,  i);  return  result;	      if(Math.abs(dx)    <    tolerance)    {    setResult(x1,    i);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
6	[BUG]  [BUGGY]  if(Math.abs(oldDelta)  <  =  Math.abs(y1))  {  setResult(x1,  i);  return  result;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  if(Math.abs(oldDelta)  <  =  Math.abs(y1))  {  setResult(x1,  i);  return  result;  }  [BUGGY]    return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(Math.abs(oldDelta)  <  =  Math.abs(y1))  {  setResult(x1,  i);  return  result;  }	      if(Math.abs(oldDelta)    <    =    Math.abs(y2))    {    setResult(x1,    i);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
7	[BUG]  [BUGGY]  return  dx  +  1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  return  dx  +  1;  [BUGGY]    }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  +  1;	  return    result    +    1;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
8	[BUG]  [BUGGY]  return  result  /  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  return  result  /  1;  [BUGGY]    }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  result  /  1;	  return    result    +    1;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
9	[BUG]  [BUGGY]  return  tolerance  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  return  tolerance  +  1;  [BUGGY]    }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  tolerance  +  1;	  return    result    +    1;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
10	[BUG]  [BUGGY]  dx  =  x1  -  x2;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  dx  =  x1  -  x2;  [BUGGY]    return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	dx  =  x1  -  x2;	      dx    =    x2    -    x1;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
11	[BUG]  [BUGGY]  dx  =  x2  -  x0;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  dx  =  x2  -  x0;  [BUGGY]    return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	dx  =  x2  -  x0;	      dx    =    x2    -    x1;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
12	[BUG]  [BUGGY]  result  =  Math.max(relativeAccuracy  *  Math.abs(x1),  tolerance);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  result  =  Math.max(relativeAccuracy  *  Math.abs(x1),  tolerance);  [BUGGY]    return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	result  =  Math.max(relativeAccuracy  *  Math.abs(x1),  tolerance);	      result    =    Math.max(relativeAccuracy    *    Math.abs(x1),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
13	[BUG]  [BUGGY]  return  dx  *  result;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  return  dx  *  result;  [BUGGY]    }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  *  result;	  return    result    *    dx;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
14	[BUG]  [BUGGY]  return  delta  *  dx;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  return  delta  *  dx;  [BUGGY]    }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  delta  *  dx;	  return    result    *    dx;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
15	[BUG]  [BUGGY]  return  tolerance  *  dx;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  return  tolerance  *  dx;  [BUGGY]    }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  tolerance  *  dx;	  return    result    *    dx;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
16	[BUG]  [BUGGY]  return  0.5  *  dx;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  return  0.5  *  dx;  [BUGGY]    }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  0.5  *  dx;	  return    result    *    dx;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
17	[BUG]  [BUGGY]  result  =  Math.max(relativeAccuracy  *  Math.abs(x),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  result  =  Math.max(relativeAccuracy  *  Math.abs(x),  absoluteAccuracy);  [BUGGY]    return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	result  =  Math.max(relativeAccuracy  *  Math.abs(x),  absoluteAccuracy);	      result    =    Math.max(relativeAccuracy    *    Math.abs(dx),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
18	[BUG]  [BUGGY]  result  =  Math.min(relativeAccuracy  *  Math.abs(x2),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  result  =  Math.min(relativeAccuracy  *  Math.abs(x2),  absoluteAccuracy);  [BUGGY]    return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	result  =  Math.min(relativeAccuracy  *  Math.abs(x2),  absoluteAccuracy);	      result    =    Math.max(relativeAccuracy    *    Math.abs(dx),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
19	[BUG]  [BUGGY]  return  result  /  tolerance;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  return  result  /  tolerance;  [BUGGY]    }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  result  /  tolerance;	  return    result    +    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
20	[BUG]  [BUGGY]  return  result  +  dx;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  return  result  +  dx;  [BUGGY]    }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  result  +  dx;	  return    result    +    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
21	[BUG]  [BUGGY]  result  =  Math.min(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  result  =  Math.min(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  [BUGGY]    return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	result  =  Math.min(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);	      if(Math.abs(oldDelta)    <    tolerance)    {    setResult(x1,    i);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
22	[BUG]  [BUGGY]  result  =  Math.max(relativeAccuracy  *  Math.abs(dx));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  result  =  Math.max(relativeAccuracy  *  Math.abs(dx));  [BUGGY]    return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	result  =  Math.max(relativeAccuracy  *  Math.abs(dx));	      if(Math.abs(oldDelta)    <    tolerance)    {    setResult(x1,    i);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
23	[BUG]  [BUGGY]  if(Math.abs(oldDelta)  <  =  tolerance)  {  setResult(x1,  i);  return  result;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  if(Math.abs(oldDelta)  <  =  tolerance)  {  setResult(x1,  i);  return  result;  }  [BUGGY]    return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(Math.abs(oldDelta)  <  =  tolerance)  {  setResult(x1,  i);  return  result;  }	      if(Math.abs(oldDelta)    <    tolerance)    {    setResult(x1,    i);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
24	[BUG]  [BUGGY]  if(!tolerance)  {  return  tolerance;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  if(!tolerance)  {  return  tolerance;  }  [BUGGY]    }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(!tolerance)  {  return  tolerance;  }	  return    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
25	[BUG]  [BUGGY]  if(dx  >  tolerance)  {  return  result;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  if(dx  >  tolerance)  {  return  result;  }  [BUGGY]    }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(dx  >  tolerance)  {  return  result;  }	  return    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
26	[BUG]  [BUGGY]  return  dx  +  delta;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  return  dx  +  delta;  [BUGGY]    }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  +  delta;	  return    dx    +    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
27	[BUG]  [BUGGY]  return  dx  +  i;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  return  dx  +  i;  [BUGGY]    }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  +  i;	  return    dx    +    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
28	[BUG]  [BUGGY]  return  dx  +  r3;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  return  dx  +  r3;  [BUGGY]    }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  +  r3;	  return    dx    +    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
29	[BUG]  [BUGGY]  return  dx  *  tolerance;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  return  dx  *  tolerance;  [BUGGY]    }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  *  tolerance;	  return    dx    +    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
30	[BUG]  [BUGGY]  if(Math.abs(y0)  <  =  Math.abs(y2))  {  setResult(x1,  i);  return  result;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  if(Math.abs(y0)  <  =  Math.abs(y2))  {  setResult(x1,  i);  return  result;  }  [BUGGY]    return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(Math.abs(y0)  <  =  Math.abs(y2))  {  setResult(x1,  i);  return  result;  }	      if(Math.abs(y1)    <    =    Math.abs(y2))    {    setResult(x1,    i);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
31	[BUG]  [BUGGY]  if(Math.abs(y0)  <  tolerance)  {  setResult(x1,  i);  return  result;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  if(Math.abs(y0)  <  tolerance)  {  setResult(x1,  i);  return  result;  }  [BUGGY]    return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(Math.abs(y0)  <  tolerance)  {  setResult(x1,  i);  return  result;  }	      if(Math.abs(y0)    <    =    Math.abs(y1))    {    setResult(x1,    i);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
32	[BUG]  [BUGGY]  setResult(x1,  i);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  setResult(x1,  i);  [BUGGY]    return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	setResult(x1,  i);	      if(Math.abs(oldDelta)    <    tolerance)    {    setResult(x1,    i);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
33	[BUG]  [BUGGY]  return  dx  +  oldDelta;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  return  dx  +  oldDelta;  [BUGGY]    }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  +  oldDelta;	  return    dx    +    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
34	[BUG]  [BUGGY]  if(Math.abs(y2)  <  =  Math.abs(y1))  {  setResult(x1,  i);  return  result;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  if(Math.abs(y2)  <  =  Math.abs(y1))  {  setResult(x1,  i);  return  result;  }  [BUGGY]    return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(Math.abs(y2)  <  =  Math.abs(y1))  {  setResult(x1,  i);  return  result;  }	      if(Math.abs(y0)    <    =    Math.abs(y1))    {    setResult(x1,    i);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
35	[BUG]  [BUGGY]  if(dx  >  oldDelta)  {  return  tolerance;  }  else  {  setResult(x1,  i);  return  result;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  if(dx  >  oldDelta)  {  return  tolerance;  }  else  {  setResult(x1,  i);  return  result;  }  [BUGGY]    }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(dx  >  oldDelta)  {  return  tolerance;  }  else  {  setResult(x1,  i);  return  result;  }	  return    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
36	[BUG]  [BUGGY]  if(dx  >=  oldDelta)  {  return  tolerance;  }  else  {  setResult(x1,  i);  return  result;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  if(dx  >=  oldDelta)  {  return  tolerance;  }  else  {  setResult(x1,  i);  return  result;  }  [BUGGY]    }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(dx  >=  oldDelta)  {  return  tolerance;  }  else  {  setResult(x1,  i);  return  result;  }	  return    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
37	[BUG]  [BUGGY]  if(dx  >  oldDelta)  {  return  tolerance;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  if(dx  >  oldDelta)  {  return  tolerance;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(dx  >  oldDelta)  {  return  tolerance;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
38	[BUG]  [BUGGY]  if(Math.abs(oldDelta)  <  tolerance)  {  setResult(x2,  i);  return  result;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  if(Math.abs(oldDelta)  <  tolerance)  {  setResult(x2,  i);  return  result;  }  [BUGGY]    return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(Math.abs(oldDelta)  <  tolerance)  {  setResult(x2,  i);  return  result;  }	      if(Math.abs(oldDelta)    <    tolerance)    {    setResult(x1,    i);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
39	[BUG]  [BUGGY]  return  result  +  delta;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  return  result  +  delta;  [BUGGY]    }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  result  +  delta;	  return    result    +    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
40	[BUG]  [BUGGY]  return  dx  -  oldDelta;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  return  dx  -  oldDelta;  [BUGGY]    }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  -  oldDelta;	  return    dx;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
41	[BUG]  [BUGGY]  return  dx  -  oldDelta.doubleValue();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  return  dx  -  oldDelta.doubleValue();  [BUGGY]    }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  -  oldDelta.doubleValue();	  return    dx;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
42	[BUG]  [BUGGY]  dx  =  x2  -  x1  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  dx  =  x2  -  x1  +  1;  [BUGGY]    return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	dx  =  x2  -  x1  +  1;	      dx    =    x2    -    x1;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
43	[BUG]  [BUGGY]  if(Math.abs(oldDelta)  <  =  tolerance)  {  setResult(x1,  i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  if(Math.abs(oldDelta)  <  =  tolerance)  {  setResult(x1,  i);  }  [BUGGY]    return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(Math.abs(oldDelta)  <  =  tolerance)  {  setResult(x1,  i);  }	      if(Math.abs(oldDelta)    <    tolerance)    {    setResult(x1,    i);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
44	[BUG]  [BUGGY]  if(Math.abs(oldDelta)  <  =  Math.abs(y0))  {  setResult(x1,  i);  return  result;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  if(Math.abs(oldDelta)  <  =  Math.abs(y0))  {  setResult(x1,  i);  return  result;  }  [BUGGY]    return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(Math.abs(oldDelta)  <  =  Math.abs(y0))  {  setResult(x1,  i);  return  result;  }	      if(Math.abs(oldDelta)    <    =    Math.abs(y2))    {    setResult(x1,    i);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
45	[BUG]  [BUGGY]  return  result  *  1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  return  result  *  1;  [BUGGY]    }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  result  *  1;	  return    result    +    1;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
46	[BUG]  [BUGGY]  return  dx  +  x2;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  return  dx  +  x2;  [BUGGY]    }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  +  x2;	  return    dx    +    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
47	[BUG]  [BUGGY]  if(Math.abs(y2)  <  =  Math.abs(y2))  {  setResult(x1,  i);  return  result;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  if(Math.abs(y2)  <  =  Math.abs(y2))  {  setResult(x1,  i);  return  result;  }  [BUGGY]    return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(Math.abs(y2)  <  =  Math.abs(y2))  {  setResult(x1,  i);  return  result;  }	      if(Math.abs(oldDelta)    <    =    Math.abs(y2))    {    setResult(x1,    i);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
48	[BUG]  [BUGGY]  if(Math.abs(dx)  <  =  Math.abs(y2))  {  setResult(x1,  i);  return  result;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  if(Math.abs(dx)  <  =  Math.abs(y2))  {  setResult(x1,  i);  return  result;  }  [BUGGY]    return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(Math.abs(dx)  <  =  Math.abs(y2))  {  setResult(x1,  i);  return  result;  }	      if(Math.abs(oldDelta)    <    =    Math.abs(y2))    {    setResult(x1,    i);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
49	[BUG]  [BUGGY]  if(Math.abs(dx)  <  tolerance)  {  setResult(x1,  i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  if(Math.abs(dx)  <  tolerance)  {  setResult(x1,  i);  }  [BUGGY]    return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(Math.abs(dx)  <  tolerance)  {  setResult(x1,  i);  }	      if(Math.abs(oldDelta)    <    tolerance)    {    setResult(x1,    i);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
50	[BUG]  [BUGGY]  result  =  Math.max(relativeAccuracy  *  Math.abs(x3),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  result  =  Math.max(relativeAccuracy  *  Math.abs(x3),  absoluteAccuracy);  [BUGGY]    return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	result  =  Math.max(relativeAccuracy  *  Math.abs(x3),  absoluteAccuracy);	      result    =    Math.max(relativeAccuracy    *    Math.abs(dx),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
51	[BUG]  [BUGGY]  dx  =  x2  -  tolerance;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  dx  =  x2  -  tolerance;  [BUGGY]    return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	dx  =  x2  -  tolerance;	      dx    =    x2    -    x1;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
52	[BUG]  [BUGGY]  result  =  Math.max(relativeAccuracy  *  Math.abs(x2,  tolerance),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  result  =  Math.max(relativeAccuracy  *  Math.abs(x2,  tolerance),  absoluteAccuracy);  [BUGGY]    return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	result  =  Math.max(relativeAccuracy  *  Math.abs(x2,  tolerance),  absoluteAccuracy);	      result    =    Math.max(relativeAccuracy    *    Math.abs(x2),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
53	[BUG]  [BUGGY]  result  =  Math.max(relativeAccuracy  *  Math.abs(x2,  dx),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  result  =  Math.max(relativeAccuracy  *  Math.abs(x2,  dx),  absoluteAccuracy);  [BUGGY]    return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	result  =  Math.max(relativeAccuracy  *  Math.abs(x2,  dx),  absoluteAccuracy);	      result    =    Math.max(relativeAccuracy    *    Math.abs(x2),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
54	[BUG]  [BUGGY]  if(Math.abs(dx)  <  tolerance)  {  setResult(x1,  i);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  if(Math.abs(dx)  <  tolerance)  {  setResult(x1,  i);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(Math.abs(dx)  <  tolerance)  {  setResult(x1,  i);  }  else  {  throw  new  IllegalArgumentException( " ");  }	      if(Math.abs(oldDelta)    <    tolerance)    {    setResult(x1,    i);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
55	[BUG]  [BUGGY]  if(Math.abs(y1)  <  =  Math.abs(y1))  {  setResult(x1,  i);  return  result;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  if(Math.abs(y1)  <  =  Math.abs(y1))  {  setResult(x1,  i);  return  result;  }  [BUGGY]    return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(Math.abs(y1)  <  =  Math.abs(y1))  {  setResult(x1,  i);  return  result;  }	      if(Math.abs(y0)    <    =    Math.abs(y1))    {    setResult(x1,    i);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
56	[BUG]  [BUGGY]  return  dx  <  =  tolerance;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  return  dx  <  =  tolerance;  [BUGGY]    }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  <  =  tolerance;	  return    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
57	[BUG]  [BUGGY]  return  new  Double(dx);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);    [BUGGY]  return  new  Double(dx);  [BUGGY]    }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  new  Double(dx);	  return    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
