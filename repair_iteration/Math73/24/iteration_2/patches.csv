bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  dx  /  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  /  1;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  /  1;	  return    result    /    1;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
2	[BUG]  [BUGGY]  return  result  /  2;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  result  /  2;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  result  /  2;	  return    result    /    1;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
3	[BUG]  [BUGGY]  return  tolerance  /  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  tolerance  /  1;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  tolerance  /  1;	  return    result    /    1;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
4	[BUG]  [BUGGY]  dx  =  tolerance  -  x2;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  dx  =  tolerance  -  x2;  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	dx  =  tolerance  -  x2;	  dx    =    x2    -    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
5	[BUG]  [BUGGY]  result  =  Math.min(relativeAccuracy  *  Math.abs(dx),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  result  =  Math.min(relativeAccuracy  *  Math.abs(dx),  absoluteAccuracy);  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	result  =  Math.min(relativeAccuracy  *  Math.abs(dx),  absoluteAccuracy);	  result    =    Math.min(relativeAccuracy    *    Math.abs(x1),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
6	[BUG]  [BUGGY]  if(Math.abs(dx)  <  tolerance)  {  setResult(x2,  i);  return  result;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  if(Math.abs(dx)  <  tolerance)  {  setResult(x2,  i);  return  result;  }  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(Math.abs(dx)  <  tolerance)  {  setResult(x2,  i);  return  result;  }	  if(Math.abs(oldDelta)    <    tolerance)    {    setResult(x2,    i);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
7	[BUG]  [BUGGY]  if(Math.abs(dx)  <  =  tolerance)  {  setResult(x2,  i);  return  result;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  if(Math.abs(dx)  <  =  tolerance)  {  setResult(x2,  i);  return  result;  }  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(Math.abs(dx)  <  =  tolerance)  {  setResult(x2,  i);  return  result;  }	  if(Math.abs(oldDelta)    <    tolerance)    {    setResult(x2,    i);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
8	[BUG]  [BUGGY]  if(Math.abs(oldDelta)  <  =  tolerance)  {  setResult(x2,  i);  return  result;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  if(Math.abs(oldDelta)  <  =  tolerance)  {  setResult(x2,  i);  return  result;  }  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(Math.abs(oldDelta)  <  =  tolerance)  {  setResult(x2,  i);  return  result;  }	  if(Math.abs(oldDelta)    <    tolerance)    {    setResult(x2,    i);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
9	[BUG]  [BUGGY]  return  oldDelta  +  dx;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  oldDelta  +  dx;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  oldDelta  +  dx;	  return    dx    +    oldDelta;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
10	[BUG]  [BUGGY]  return  dx  +  oldDelta  *  tolerance;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  +  oldDelta  *  tolerance;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  +  oldDelta  *  tolerance;	  return    dx    +    oldDelta;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
11	[BUG]  [BUGGY]  return  dx  *  oldDelta;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  *  oldDelta;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  *  oldDelta;	  return    dx    +    oldDelta;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
12	[BUG]  [BUGGY]  return  dx  +  oldDelta  -  tolerance;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  +  oldDelta  -  tolerance;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  +  oldDelta  -  tolerance;	  return    dx    +    oldDelta;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
13	[BUG]  [BUGGY]  result  =  Math.max(relativeAccuracy  *  Math.abs(x2,  absoluteAccuracy),  tolerance);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  result  =  Math.max(relativeAccuracy  *  Math.abs(x2,  absoluteAccuracy),  tolerance);  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	result  =  Math.max(relativeAccuracy  *  Math.abs(x2,  absoluteAccuracy),  tolerance);	  result    =    Math.max(relativeAccuracy    *    Math.abs(x2,    tolerance),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
14	[BUG]  [BUGGY]  result  =  Math.max(relativeAccuracy  *  Math.abs(x2,  y1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  result  =  Math.max(relativeAccuracy  *  Math.abs(x2,  y1),  absoluteAccuracy);  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	result  =  Math.max(relativeAccuracy  *  Math.abs(x2,  y1),  absoluteAccuracy);	  result    =    Math.max(relativeAccuracy    *    Math.abs(x2,    tolerance),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
15	[BUG]  [BUGGY]  return  dx  +  result;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  +  result;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  +  result;	  return    result    +    dx;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
16	[BUG]  [BUGGY]  return  result  /  dx;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  result  /  dx;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  result  /  dx;	  return    result    +    dx;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
17	[BUG]  [BUGGY]  return  tolerance  +  dx;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  tolerance  +  dx;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  tolerance  +  dx;	  return    result    +    dx;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
18	[BUG]  [BUGGY]  if(Math.abs(y0)  <  =  tolerance)  {  setResult(x1,  i);  return  result;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  if(Math.abs(y0)  <  =  tolerance)  {  setResult(x1,  i);  return  result;  }  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(Math.abs(y0)  <  =  tolerance)  {  setResult(x1,  i);  return  result;  }	  if(Math.abs(y0)    <    tolerance)    {    setResult(x1,    i);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
19	[BUG]  [BUGGY]  return  dx  *  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  *  1;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  *  1;	  return    result    *    1;    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
20	[BUG]  [BUGGY]  return  tolerance  *  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  tolerance  *  1;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  tolerance  *  1;	  return    result    *    1;    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
21	[BUG]  [BUGGY]  return  dx  <  =  oldDelta;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  <  =  oldDelta;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  <  =  oldDelta;	  return    dx    <    =    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
22	[BUG]  [BUGGY]  return  dx  <  tolerance;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  <  tolerance;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  <  tolerance;	  return    dx    <    =    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
23	[BUG]  [BUGGY]  return  dx  <  =  tolerance  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  <  =  tolerance  +  1;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  <  =  tolerance  +  1;	  return    dx    <    =    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
24	[BUG]  [BUGGY]  return  dx  <  =  tolerance  -  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  <  =  tolerance  -  1;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  <  =  tolerance  -  1;	  return    dx    <    =    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
25	[BUG]  [BUGGY]  return  dx  -  x1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  -  x1;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  -  x1;	  return    dx    -    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
26	[BUG]  [BUGGY]  return  dx  -  x2;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  -  x2;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  -  x2;	  return    dx    -    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
27	[BUG]  [BUGGY]  return  tolerance  -  dx;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  tolerance  -  dx;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  tolerance  -  dx;	  return    dx    -    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
28	[BUG]  [BUGGY]  bucket  <  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  bucket  <  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	bucket  <  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);	  if(dx    >    oldDelta)    {    return    tolerance;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
29	[BUG]  [BUGGY]  bucket  <  =  Math.max(relativeAccuracy  *  Math.abs(x2),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  bucket  <  =  Math.max(relativeAccuracy  *  Math.abs(x2),  absoluteAccuracy);  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	bucket  <  =  Math.max(relativeAccuracy  *  Math.abs(x2),  absoluteAccuracy);	  if(dx    >    oldDelta)    {    return    tolerance;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
30	[BUG]  [BUGGY]  vice(Math.abs(dx)  <  =  tolerance)||(Math.abs(y0)  <  =  Math.abs(y1)))  {  return  dx;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  vice(Math.abs(dx)  <  =  tolerance)||(Math.abs(y0)  <  =  Math.abs(y1)))  {  return  dx;  }  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	vice(Math.abs(dx)  <  =  tolerance)||(Math.abs(y0)  <  =  Math.abs(y1)))  {  return  dx;  }	  if(dx    >    oldDelta)    {    return    tolerance;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
31	[BUG]  [BUGGY]  bucket  <  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  bucket  <  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	bucket  <  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy))  {  throw  new  IllegalArgumentException( " ");  }	  if(dx    >    oldDelta)    {    return    tolerance;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
32	[BUG]  [BUGGY]  return  oldDelta  -  dx;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  oldDelta  -  dx;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  oldDelta  -  dx;	  return    dx    -    oldDelta;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
33	[BUG]  [BUGGY]  return  dx  /  oldDelta;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  /  oldDelta;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  /  oldDelta;	  return    dx    -    oldDelta;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
34	[BUG]  [BUGGY]  return  dx  -  oldDelta  -  tolerance;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  -  oldDelta  -  tolerance;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  -  oldDelta  -  tolerance;	  return    dx    -    oldDelta;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
35	[BUG]  [BUGGY]  return  dx  -  oldDelta  *  tolerance;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  -  oldDelta  *  tolerance;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  -  oldDelta  *  tolerance;	  return    dx    -    oldDelta;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
36	[BUG]  [BUGGY]  return  dx  /  result;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  /  result;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  /  result;	  return    dx    *    result;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
37	[BUG]  [BUGGY]  result  =  Math.max(relativeAccuracy  *  Math.abs(x2));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  result  =  Math.max(relativeAccuracy  *  Math.abs(x2));  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	result  =  Math.max(relativeAccuracy  *  Math.abs(x2));	  result    =    Math.max(relativeAccuracy    *    Math.abs(dx));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
38	[BUG]  [BUGGY]  return  oldDelta  -  dx.doubleValue();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  oldDelta  -  dx.doubleValue();  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  oldDelta  -  dx.doubleValue();	  return    dx    -    oldDelta.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
39	[BUG]  [BUGGY]  return  dx  *  oldDelta.doubleValue();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  *  oldDelta.doubleValue();  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  *  oldDelta.doubleValue();	  return    dx    -    oldDelta.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
40	[BUG]  [BUGGY]  return  dx  -  oldDelta.doubleValue()  *  tolerance;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  -  oldDelta.doubleValue()  *  tolerance;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  -  oldDelta.doubleValue()  *  tolerance;	  return    dx    -    oldDelta.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
41	[BUG]  [BUGGY]  if(dx  <  tolerance)  {  return  result;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  if(dx  <  tolerance)  {  return  result;  }  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(dx  <  tolerance)  {  return  result;  }	  if(dx    >    tolerance)    {    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
42	[BUG]  [BUGGY]  if(dx  <  =  tolerance)  {  return  result;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  if(dx  <  =  tolerance)  {  return  result;  }  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(dx  <  =  tolerance)  {  return  result;  }	  if(dx    >    tolerance)    {    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
43	[BUG]  [BUGGY]  if(dx  >=  tolerance)  {  return  result;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  if(dx  >=  tolerance)  {  return  result;  }  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(dx  >=  tolerance)  {  return  result;  }	  if(dx    >    tolerance)    {    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
44	[BUG]  [BUGGY]  result  =  Math.max(relativeAccuracy  *  Math.abs(x2,  y2),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  result  =  Math.max(relativeAccuracy  *  Math.abs(x2,  y2),  absoluteAccuracy);  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	result  =  Math.max(relativeAccuracy  *  Math.abs(x2,  y2),  absoluteAccuracy);	  result    =    Math.max(relativeAccuracy    *    Math.abs(x2,    dx),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
45	[BUG]  [BUGGY]  return  0.5  *  dx  +  tolerance;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  0.5  *  dx  +  tolerance;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  0.5  *  dx  +  tolerance;	  return    0.5    *    dx;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
46	[BUG]  [BUGGY]  return  0.5  *  oldDelta;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  0.5  *  oldDelta;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  0.5  *  oldDelta;	  return    0.5    *    dx;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
47	[BUG]  [BUGGY]  return  0.5  *  dx  -  tolerance;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  0.5  *  dx  -  tolerance;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  0.5  *  dx  -  tolerance;	  return    0.5    *    dx;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
48	[BUG]  [BUGGY]  return  dx  *  delta;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  *  delta;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  *  delta;	  return    delta    *    dx;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
49	[BUG]  [BUGGY]  return  delta  *  dx  +  tolerance;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  delta  *  dx  +  tolerance;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  delta  *  dx  +  tolerance;	  return    delta    *    dx;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
50	[BUG]  [BUGGY]  return  delta  /  dx;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  delta  /  dx;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  delta  /  dx;	  return    delta    *    dx;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
51	[BUG]  [BUGGY]  if(oldDelta  >  dx)  {  return  tolerance;  }  else  {  setResult(x1,  i);  return  result;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  if(oldDelta  >  dx)  {  return  tolerance;  }  else  {  setResult(x1,  i);  return  result;  }  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(oldDelta  >  dx)  {  return  tolerance;  }  else  {  setResult(x1,  i);  return  result;  }	  if(dx    >    oldDelta)    {    return    tolerance;    }    else    {    setResult(x1,    i);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
52	[BUG]  [BUGGY]  if(dx  <  =  oldDelta)  {  return  tolerance;  }  else  {  setResult(x1,  i);  return  result;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  if(dx  <  =  oldDelta)  {  return  tolerance;  }  else  {  setResult(x1,  i);  return  result;  }  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(dx  <  =  oldDelta)  {  return  tolerance;  }  else  {  setResult(x1,  i);  return  result;  }	  if(dx    >    oldDelta)    {    return    tolerance;    }    else    {    setResult(x1,    i);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
53	[BUG]  [BUGGY]  if(dx  <  =  oldDelta)  {  return  tolerance;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  if(dx  <  =  oldDelta)  {  return  tolerance;  }  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(dx  <  =  oldDelta)  {  return  tolerance;  }	  if(dx    >    oldDelta)    {    return    tolerance;    }    else    {    setResult(x1,    i);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
54	[BUG]  [BUGGY]  dx  =  x1  -  x2  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  dx  =  x1  -  x2  +  1;  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	dx  =  x1  -  x2  +  1;	  dx    =    x2    -    x1    +    1;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
55	[BUG]  [BUGGY]  dx  =  x1  -  x0;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  dx  =  x1  -  x0;  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	dx  =  x1  -  x0;	  dx    =    x1    -    x2;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
56	[BUG]  [BUGGY]  if(!tolerance)  {  return  result;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  if(!tolerance)  {  return  result;  }  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(!tolerance)  {  return  result;  }	  if(!tolerance)    {    return    tolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
57	[BUG]  [BUGGY]  reason:  if(!tolerance)  {  return  tolerance;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  reason:  if(!tolerance)  {  return  tolerance;  }  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	reason:  if(!tolerance)  {  return  tolerance;  }	  if(!tolerance)    {    return    tolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
58	[BUG]  [BUGGY]  if(tolerance  <  =  tolerance)  {  return  tolerance;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  if(tolerance  <  =  tolerance)  {  return  tolerance;  }  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(tolerance  <  =  tolerance)  {  return  tolerance;  }	  if(!tolerance)    {    return    tolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
59	[BUG]  [BUGGY]  reason:  if(tolerance  <  =  tolerance)  {  return  tolerance;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  reason:  if(tolerance  <  =  tolerance)  {  return  tolerance;  }  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	reason:  if(tolerance  <  =  tolerance)  {  return  tolerance;  }	  if(!tolerance)    {    return    tolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
60	[BUG]  [BUGGY]  setResult(dx,  i);  return  result;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  setResult(dx,  i);  return  result;  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	setResult(dx,  i);  return  result;	  setResult(x1,    i);    return    result;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
61	[BUG]  [BUGGY]  setResult(x2,  i);  return  result;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  setResult(x2,  i);  return  result;  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	setResult(x2,  i);  return  result;	  setResult(x1,    i);    return    result;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
62	[BUG]  [BUGGY]  setResult(dx,  i);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  setResult(dx,  i);  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	setResult(dx,  i);	  setResult(x1,    i);    return    result;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
63	[BUG]  [BUGGY]  setResult(x1,  dx);  return  result;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  setResult(x1,  dx);  return  result;  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	setResult(x1,  dx);  return  result;	  setResult(x1,    i);    return    result;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
64	[BUG]  [BUGGY]  if(Math.abs(dx)  <  =  tolerance)  {  setResult(x1,  i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  if(Math.abs(dx)  <  =  tolerance)  {  setResult(x1,  i);  }  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(Math.abs(dx)  <  =  tolerance)  {  setResult(x1,  i);  }	  if(Math.abs(dx)    <    tolerance)    {    setResult(x1,    i);    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
65	[BUG]  [BUGGY]  return  delta  +  dx;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  delta  +  dx;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  delta  +  dx;	  return    dx    +    delta;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
66	[BUG]  [BUGGY]  return  dx  +  delta  *  tolerance;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  +  delta  *  tolerance;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  +  delta  *  tolerance;	  return    dx    +    delta;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
67	[BUG]  [BUGGY]  return  x2  +  dx;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  x2  +  dx;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  x2  +  dx;	  return    dx    +    x2;    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
68	[BUG]  [BUGGY]  return  dx  *  x2;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  *  x2;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  *  x2;	  return    dx    +    x2;    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
69	[BUG]  [BUGGY]  return  x1  +  dx;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  x1  +  dx;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  x1  +  dx;	  return    dx    +    x2;    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
70	[BUG]  [BUGGY]  dx  =  x0  -  x2;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  dx  =  x0  -  x2;  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	dx  =  x0  -  x2;	  dx    =    x2    -    x0;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
71	[BUG]  [BUGGY]  return  new  Double(tolerance);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  new  Double(tolerance);  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  new  Double(tolerance);	  return    new    Double(dx);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
72	[BUG]  [BUGGY]  return  new  Double(dx  -  tolerance);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  new  Double(dx  -  tolerance);  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  new  Double(dx  -  tolerance);	  return    new    Double(dx);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
73	[BUG]  [BUGGY]  return  new  Double(x1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  new  Double(x1);  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  new  Double(x1);	  return    new    Double(dx);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
74	[BUG]  [BUGGY]  return  new  Double(dx  /  tolerance);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  new  Double(dx  /  tolerance);  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  new  Double(dx  /  tolerance);	  return    new    Double(dx);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
75	[BUG]  [BUGGY]  return  tolerance  *  dx  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  tolerance  *  dx  +  1;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  tolerance  *  dx  +  1;	  return    tolerance    *    dx;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
76	[BUG]  [BUGGY]  setResult(x2,  i);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  setResult(x2,  i);  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	setResult(x2,  i);	  setResult(x1,    i);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
77	[BUG]  [BUGGY]  setResult(x1,  dx);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  setResult(x1,  dx);  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	setResult(x1,  dx);	  setResult(x1,    i);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
78	[BUG]  [BUGGY]  setResult(x1,  y1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  setResult(x1,  y1);  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	setResult(x1,  y1);	  setResult(x1,    i);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
79	[BUG]  [BUGGY]  return  tolerance  /  dx;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  tolerance  /  dx;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  tolerance  /  dx;	  return    dx    /    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
80	[BUG]  [BUGGY]  return  dx  /  dx;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  /  dx;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  /  dx;	  return    dx    /    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
81	[BUG]  [BUGGY]  return  dx  +  2;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  +  2;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  +  2;	  return    dx    +    1;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
82	[BUG]  [BUGGY]  return  tolerance  /  result;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  tolerance  /  result;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  tolerance  /  result;	  return    result    /    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
83	[BUG]  [BUGGY]  return  oldDelta  /  tolerance;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  oldDelta  /  tolerance;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  oldDelta  /  tolerance;	  return    result    /    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
84	[BUG]  [BUGGY]  if(delta  >=  oldDelta)  {  return  tolerance;  }  else  {  setResult(x1,  i);  return  result;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  if(delta  >=  oldDelta)  {  return  tolerance;  }  else  {  setResult(x1,  i);  return  result;  }  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(delta  >=  oldDelta)  {  return  tolerance;  }  else  {  setResult(x1,  i);  return  result;  }	  if(dx    >=    oldDelta)    {    return    tolerance;    }    else    {    setResult(x1,    i);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
85	[BUG]  [BUGGY]  if(dx  >=  oldDelta)  {  return  result;  }  else  {  setResult(x1,  i);  return  result;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  if(dx  >=  oldDelta)  {  return  result;  }  else  {  setResult(x1,  i);  return  result;  }  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(dx  >=  oldDelta)  {  return  result;  }  else  {  setResult(x1,  i);  return  result;  }	  if(dx    >=    oldDelta)    {    return    tolerance;    }    else    {    setResult(x1,    i);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
86	[BUG]  [BUGGY]  if(oldDelta  >=  tolerance)  {  return  tolerance;  }  else  {  setResult(x1,  i);  return  result;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  if(oldDelta  >=  tolerance)  {  return  tolerance;  }  else  {  setResult(x1,  i);  return  result;  }  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(oldDelta  >=  tolerance)  {  return  tolerance;  }  else  {  setResult(x1,  i);  return  result;  }	  if(dx    >=    oldDelta)    {    return    tolerance;    }    else    {    setResult(x1,    i);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
87	[BUG]  [BUGGY]  return  dx  *  i;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  *  i;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  *  i;	  return    dx    +    i;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
88	[BUG]  [BUGGY]  return  dx  +  i  *  tolerance;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  +  i  *  tolerance;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  +  i  *  tolerance;	  return    dx    +    i;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
89	[BUG]  [BUGGY]  return  dx  *  r3;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  *  r3;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  *  r3;	  return    dx    +    r3;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
90	[BUG]  [BUGGY]  return  dx  /  r3;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  /  r3;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  /  r3;	  return    dx    +    r3;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
91	[BUG]  [BUGGY]  return  dx  +  r1;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  +  r1;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  +  r1;	  return    dx    +    r3;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
92	[BUG]  [BUGGY]  return  dx  *  y2;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  *  y2;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  *  y2;	  return    dx    *    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
93	[BUG]  [BUGGY]  return  delta  +  result;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  delta  +  result;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  delta  +  result;	  return    result    +    delta;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
94	[BUG]  [BUGGY]  return  dx  /  delta;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  /  delta;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  /  delta;	  return    dx    +    delta;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
95	[BUG]  [BUGGY]  if(dx  >  oldDelta)  {  return  delta;  }  else  {  setResult(x1,  i);  return  result;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  if(dx  >  oldDelta)  {  return  delta;  }  else  {  setResult(x1,  i);  return  result;  }  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(dx  >  oldDelta)  {  return  delta;  }  else  {  setResult(x1,  i);  return  result;  }	  if(dx    >    oldDelta)    {    return    tolerance;    }    else    {    setResult(x1,    i);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
96	[BUG]  [BUGGY]  if(dx  >  oldDelta)  {  return  result;  }  else  {  setResult(x1,  i);  return  result;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  if(dx  >  oldDelta)  {  return  result;  }  else  {  setResult(x1,  i);  return  result;  }  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(dx  >  oldDelta)  {  return  result;  }  else  {  setResult(x1,  i);  return  result;  }	  if(dx    >    oldDelta)    {    return    tolerance;    }    else    {    setResult(x1,    i);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
97	[BUG]  [BUGGY]  if(Math.abs(oldDelta)  <  =  Math.abs(y0)||  Math.abs(y1)  <  =  Math.abs(y2))  {  setResult(x1,  i);  return  result;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  if(Math.abs(oldDelta)  <  =  Math.abs(y0)||  Math.abs(y1)  <  =  Math.abs(y2))  {  setResult(x1,  i);  return  result;  }  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(Math.abs(oldDelta)  <  =  Math.abs(y0)||  Math.abs(y1)  <  =  Math.abs(y2))  {  setResult(x1,  i);  return  result;  }	  if(Math.abs(oldDelta)    <    =    Math.abs(y0))    {    setResult(x1,    i);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
98	[BUG]  [BUGGY]  return  new  Double(relativeAccuracy);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  new  Double(relativeAccuracy);  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  new  Double(relativeAccuracy);	  return    new    Double(dx);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
99	[BUG]  [BUGGY]  return  0.5  *  dx  +  delta;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  0.5  *  dx  +  delta;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  0.5  *  dx  +  delta;	  return    0.5    *    dx;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
100	[BUG]  [BUGGY]  return  0.5  *  dx  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  0.5  *  dx  +  1;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  0.5  *  dx  +  1;	  return    0.5    *    dx;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
101	[BUG]  [BUGGY]  if(Math.abs(y1)  <  tolerance)  {  setResult(x1,  i);  return  result;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  if(Math.abs(y1)  <  tolerance)  {  setResult(x1,  i);  return  result;  }  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(Math.abs(y1)  <  tolerance)  {  setResult(x1,  i);  return  result;  }	  if(Math.abs(y0)    <    tolerance)    {    setResult(x1,    i);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
102	[BUG]  [BUGGY]  if(dx  >  oldDelta)  {  return  result;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  if(dx  >  oldDelta)  {  return  result;  }  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(dx  >  oldDelta)  {  return  result;  }	  if(dx    >    tolerance)    {    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
103	[BUG]  [BUGGY]  return  dx  /  x2;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  /  x2;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  /  x2;	  return    dx    +    x2;    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
104	[BUG]  [BUGGY]  safeToken(dx)  {  return  tolerance;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  safeToken(dx)  {  return  tolerance;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	safeToken(dx)  {  return  tolerance;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(dx    >    oldDelta)    {    return    tolerance;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
105	[BUG]  [BUGGY]  luate(x1,  i,  oldDelta)  {  return  tolerance;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  luate(x1,  i,  oldDelta)  {  return  tolerance;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	luate(x1,  i,  oldDelta)  {  return  tolerance;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(dx    >    oldDelta)    {    return    tolerance;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
106	[BUG]  [BUGGY]  safeToken(dx)  {  return  tolerance;  }  else  if(!Math.abs(y0)  <  =  Math.abs(y1))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  safeToken(dx)  {  return  tolerance;  }  else  if(!Math.abs(y0)  <  =  Math.abs(y1))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	safeToken(dx)  {  return  tolerance;  }  else  if(!Math.abs(y0)  <  =  Math.abs(y1))  {  throw  new  IllegalArgumentException( " ");  }	  if(dx    >    oldDelta)    {    return    tolerance;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
107	[BUG]  [BUGGY]  safeToken(dx)  {  return  tolerance;  }  else  if(!Math.abs(y0)  <  =  Math.abs(y1))  {  setResult(x1,  i);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  safeToken(dx)  {  return  tolerance;  }  else  if(!Math.abs(y0)  <  =  Math.abs(y1))  {  setResult(x1,  i);  }  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	safeToken(dx)  {  return  tolerance;  }  else  if(!Math.abs(y0)  <  =  Math.abs(y1))  {  setResult(x1,  i);  }	  if(dx    >    oldDelta)    {    return    tolerance;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
108	[BUG]  [BUGGY]  result  =  Math.max(relativeAccuracy  *  Math.abs(dx),  tolerance);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  result  =  Math.max(relativeAccuracy  *  Math.abs(dx),  tolerance);  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	result  =  Math.max(relativeAccuracy  *  Math.abs(dx),  tolerance);	  result    =    Math.max(relativeAccuracy    *    Math.abs(x1),    tolerance);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
109	[BUG]  [BUGGY]  return  dx  <  =  x2;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  <  =  x2;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  <  =  x2;	  return    dx    <    =    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
110	[BUG]  [BUGGY]  return  dx  <  =  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  <  =  1;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  <  =  1;	  return    dx    <    =    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
111	[BUG]  [BUGGY]  return  dx  *  2;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  *  2;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  *  2;	  return    result    *    1;    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
112	[BUG]  [BUGGY]  if(!oldDelta)  {  return  tolerance;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  if(!oldDelta)  {  return  tolerance;  }  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(!oldDelta)  {  return  tolerance;  }	  if(!tolerance)    {    return    tolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
113	[BUG]  [BUGGY]  if(!tolerance  &&  oldDelta  <  =  tolerance)  {  return  tolerance;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  if(!tolerance  &&  oldDelta  <  =  tolerance)  {  return  tolerance;  }  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(!tolerance  &&  oldDelta  <  =  tolerance)  {  return  tolerance;  }	  if(!tolerance)    {    return    tolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
114	[BUG]  [BUGGY]  if(!tolerance  &&  oldDelta  <  tolerance)  {  return  tolerance;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  if(!tolerance  &&  oldDelta  <  tolerance)  {  return  tolerance;  }  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(!tolerance  &&  oldDelta  <  tolerance)  {  return  tolerance;  }	  if(!tolerance)    {    return    tolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
115	[BUG]  [BUGGY]  dx  =  x1  -  tolerance;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  dx  =  x1  -  tolerance;  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	dx  =  x1  -  tolerance;	  dx    =    x2    -    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
116	[BUG]  [BUGGY]  return  result  *  tolerance;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  result  *  tolerance;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  result  *  tolerance;	  return    result    /    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
117	[BUG]  [BUGGY]  return  oldDelta  /  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  oldDelta  /  1;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  oldDelta  /  1;	  return    result    /    1;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
118	[BUG]  [BUGGY]  return  dx  /  2;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  /  2;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  /  2;	  return    result    /    1;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
119	[BUG]  [BUGGY]  setResult(x1,  y2);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  setResult(x1,  y2);  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	setResult(x1,  y2);	  setResult(x1,    i);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
120	[BUG]  [BUGGY]  return  dx  -  oldDelta.doubleValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  -  oldDelta.doubleValue()  +  1;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  -  oldDelta.doubleValue()  +  1;	  return    dx    -    oldDelta.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
121	[BUG]  [BUGGY]  result  =  Math.max(relativeAccuracy  *  Math.abs(x1,  dx),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  result  =  Math.max(relativeAccuracy  *  Math.abs(x1,  dx),  absoluteAccuracy);  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	result  =  Math.max(relativeAccuracy  *  Math.abs(x1,  dx),  absoluteAccuracy);	  result    =    Math.max(relativeAccuracy    *    Math.abs(x2,    dx),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
122	[BUG]  [BUGGY]  return  dx  -  oldDelta  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  -  oldDelta  +  1;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  -  oldDelta  +  1;	  return    dx    -    oldDelta;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
123	[BUG]  [BUGGY]  if(dx  >=  oldDelta)  {  return  delta;  }  else  {  setResult(x1,  i);  return  result;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  if(dx  >=  oldDelta)  {  return  delta;  }  else  {  setResult(x1,  i);  return  result;  }  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(dx  >=  oldDelta)  {  return  delta;  }  else  {  setResult(x1,  i);  return  result;  }	  if(dx    >=    oldDelta)    {    return    tolerance;    }    else    {    setResult(x1,    i);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
124	[BUG]  [BUGGY]  if(dx  >=  oldDelta)  {  return  result;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  if(dx  >=  oldDelta)  {  return  result;  }  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(dx  >=  oldDelta)  {  return  result;  }	  if(dx    >=    oldDelta)    {    return    tolerance;    }    else    {    setResult(x1,    i);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
125	[BUG]  [BUGGY]  result  =  Math.max(relativeAccuracy  *  Math.abs(x2,  absoluteAccuracy),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  result  =  Math.max(relativeAccuracy  *  Math.abs(x2,  absoluteAccuracy),  absoluteAccuracy);  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	result  =  Math.max(relativeAccuracy  *  Math.abs(x2,  absoluteAccuracy),  absoluteAccuracy);	  result    =    Math.max(relativeAccuracy    *    Math.abs(x3),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
126	[BUG]  [BUGGY]  return  result  /  delta;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  result  /  delta;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  result  /  delta;	  return    result    +    delta;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
127	[BUG]  [BUGGY]  return  result  +  delta  *  tolerance;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  result  +  delta  *  tolerance;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  result  +  delta  *  tolerance;	  return    result    +    delta;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
128	[BUG]  [BUGGY]  return  result  +  dx  *  tolerance;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  result  +  dx  *  tolerance;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  result  +  dx  *  tolerance;	  return    result    +    dx;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
129	[BUG]  [BUGGY]  return  oldDelta  *  dx;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  oldDelta  *  dx;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  oldDelta  *  dx;	  return    delta    *    dx;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
130	[BUG]  [BUGGY]  dx  =  x2  -  x1,  i  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  dx  =  x2  -  x1,  i  +  1;  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	dx  =  x2  -  x1,  i  +  1;	  dx    =    x2    -    x1    +    1;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
131	[BUG]  [BUGGY]  result  =  Math.min(relativeAccuracy  *  Math.abs(x2),  tolerance);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  result  =  Math.min(relativeAccuracy  *  Math.abs(x2),  tolerance);  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	result  =  Math.min(relativeAccuracy  *  Math.abs(x2),  tolerance);	  result    =    Math.min(relativeAccuracy    *    Math.abs(x2),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
132	[BUG]  [BUGGY]  return  dx  /  i;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  /  i;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  /  i;	  return    dx    +    i;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
133	[BUG]  [BUGGY]  dx  =  x2  -  x1,  i;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  dx  =  x2  -  x1,  i;  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	dx  =  x2  -  x1,  i;	  dx    =    x2    -    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
134	[BUG]  [BUGGY]  dx  =  x2  -  x1,  y2;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  dx  =  x2  -  x1,  y2;  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	dx  =  x2  -  x1,  y2;	  dx    =    x2    -    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
135	[BUG]  [BUGGY]  dx  =  y2  -  x1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  dx  =  y2  -  x1;  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	dx  =  y2  -  x1;	  dx    =    x1    -    x2;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
136	[BUG]  [BUGGY]  return  x2  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  x2  +  1;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  x2  +  1;	  return    tolerance    +    1;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
137	[BUG]  [BUGGY]  if(Math.abs(y1)  <  =  tolerance)  {  setResult(x1,  i);  return  result;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  if(Math.abs(y1)  <  =  tolerance)  {  setResult(x1,  i);  return  result;  }  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(Math.abs(y1)  <  =  tolerance)  {  setResult(x1,  i);  return  result;  }	  if(Math.abs(y0)    <    tolerance)    {    setResult(x1,    i);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
138	[BUG]  [BUGGY]  aughtException.from(x1,  i,  oldDelta);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  aughtException.from(x1,  i,  oldDelta);  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	aughtException.from(x1,  i,  oldDelta);	  if(dx    >    oldDelta)    {    return    tolerance;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
139	[BUG]  [BUGGY]  aughtException.weirdString( "msg.illegal.character ");  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  aughtException.weirdString( "msg.illegal.character ");  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	aughtException.weirdString( "msg.illegal.character ");	  if(dx    >    oldDelta)    {    return    tolerance;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
140	[BUG]  [BUGGY]  aughtException.weirdString();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  aughtException.weirdString();  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	aughtException.weirdString();	  if(dx    >    oldDelta)    {    return    tolerance;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
141	[BUG]  [BUGGY]  aughtException.weirdString( "msg.unknown.type ",  x1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  aughtException.weirdString( "msg.unknown.type ",  x1);  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	aughtException.weirdString( "msg.unknown.type ",  x1);	  if(dx    >    oldDelta)    {    return    tolerance;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
142	[BUG]  [BUGGY]  return  dx  <  =  x1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  <  =  x1;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  <  =  x1;	  return    dx    <    =    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
143	[BUG]  [BUGGY]  if(dx  <  =  tolerance)  {  return  tolerance;  }  else  {  setResult(x1,  i);  return  result;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  if(dx  <  =  tolerance)  {  return  tolerance;  }  else  {  setResult(x1,  i);  return  result;  }  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(dx  <  =  tolerance)  {  return  tolerance;  }  else  {  setResult(x1,  i);  return  result;  }	  if(dx    >    oldDelta)    {    return    tolerance;    }    else    {    setResult(x1,    i);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
144	[BUG]  [BUGGY]  if(dx  >=  tolerance)  {  return  tolerance;  }  else  {  setResult(x1,  i);  return  result;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  if(dx  >=  tolerance)  {  return  tolerance;  }  else  {  setResult(x1,  i);  return  result;  }  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(dx  >=  tolerance)  {  return  tolerance;  }  else  {  setResult(x1,  i);  return  result;  }	  if(dx    >    oldDelta)    {    return    tolerance;    }    else    {    setResult(x1,    i);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
145	[BUG]  [BUGGY]  setResult(x1,  i  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  setResult(x1,  i  +  1);  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	setResult(x1,  i  +  1);	  setResult(x1,    i);    return    result;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
146	[BUG]  [BUGGY]  if(Math.abs(y2)  <  =  tolerance)  {  setResult(x1,  i);  return  result;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  if(Math.abs(y2)  <  =  tolerance)  {  setResult(x1,  i);  return  result;  }  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(Math.abs(y2)  <  =  tolerance)  {  setResult(x1,  i);  return  result;  }	  if(Math.abs(dx)    <    =    Math.abs(y2))    {    setResult(x1,    i);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
147	[BUG]  [BUGGY]  result  =  Math.max(relativeAccuracy  *  Math.abs(x2,  i),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  result  =  Math.max(relativeAccuracy  *  Math.abs(x2,  i),  absoluteAccuracy);  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	result  =  Math.max(relativeAccuracy  *  Math.abs(x2,  i),  absoluteAccuracy);	  result    =    Math.max(relativeAccuracy    *    Math.abs(x2,    dx),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
148	[BUG]  [BUGGY]  return  dx  /  oldDelta.doubleValue();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  /  oldDelta.doubleValue();  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  /  oldDelta.doubleValue();	  return    dx    -    oldDelta.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
149	[BUG]  [BUGGY]  return  new  Double(x2);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  new  Double(x2);  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  new  Double(x2);	  return    new    Double(dx);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
150	[BUG]  [BUGGY]  return  dx  *  y1;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  *  y1;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  *  y1;	  return    dx    *    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
151	[BUG]  [BUGGY]  result  =  Math.max(relativeAccuracy  *  Math.abs(x1,  tolerance),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  result  =  Math.max(relativeAccuracy  *  Math.abs(x1,  tolerance),  absoluteAccuracy);  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	result  =  Math.max(relativeAccuracy  *  Math.abs(x1,  tolerance),  absoluteAccuracy);	  result    =    Math.max(relativeAccuracy    *    Math.abs(x2,    tolerance),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
152	[BUG]  [BUGGY]  return  dx  +  p;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  +  p;  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  +  p;	  return    dx    +    r3;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
153	[BUG]  [BUGGY]  result  =  Math.min(relativeAccuracy  *  Math.abs(x2,  tolerance),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  result  =  Math.min(relativeAccuracy  *  Math.abs(x2,  tolerance),  absoluteAccuracy);  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	result  =  Math.min(relativeAccuracy  *  Math.abs(x2,  tolerance),  absoluteAccuracy);	  result    =    Math.min(relativeAccuracy    *    Math.abs(x1),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
154	[BUG]  [BUGGY]  if(!tolerance  ||!tolerance)  {  return  tolerance;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  if(!tolerance  ||!tolerance)  {  return  tolerance;  }  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(!tolerance  ||!tolerance)  {  return  tolerance;  }	  if(!tolerance)    {    return    tolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
155	[BUG]  [BUGGY]  if(!dx)  {  return  tolerance;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  if(!dx)  {  return  tolerance;  }  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(!dx)  {  return  tolerance;  }	  if(!tolerance)    {    return    tolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
156	[BUG]  [BUGGY]  if(!tolerance  ||  tolerance  <  =  tolerance)  {  return  tolerance;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  if(!tolerance  ||  tolerance  <  =  tolerance)  {  return  tolerance;  }  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(!tolerance  ||  tolerance  <  =  tolerance)  {  return  tolerance;  }	  if(!tolerance)    {    return    tolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
157	[BUG]  [BUGGY]  result  =  Math.max(relativeAccuracy  *  Math.abs(x1,  absoluteAccuracy),  tolerance);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  result  =  Math.max(relativeAccuracy  *  Math.abs(x1,  absoluteAccuracy),  tolerance);  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	result  =  Math.max(relativeAccuracy  *  Math.abs(x1,  absoluteAccuracy),  tolerance);	  result    =    Math.max(relativeAccuracy    *    Math.abs(x1),    tolerance);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
158	[BUG]  [BUGGY]  return  dx  /  new  Double(tolerance);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  return  dx  /  new  Double(tolerance);  [BUGGY]      }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	return  dx  /  new  Double(tolerance);	  return    dx    /    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
159	[BUG]  [BUGGY]  if(Math.abs(dx)  <  =  tolerance)  {  setResult(x1,  i);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  if(Math.abs(dx)  <  =  tolerance)  {  setResult(x1,  i);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(Math.abs(dx)  <  =  tolerance)  {  setResult(x1,  i);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(Math.abs(dx)    <    tolerance)    {    setResult(x1,    i);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
160	[BUG]  [BUGGY]  if(Math.abs(y1)  <  =  Math.abs(y0))  {  setResult(x1,  i);  return  result;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  if(Math.abs(y1)  <  =  Math.abs(y0))  {  setResult(x1,  i);  return  result;  }  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(Math.abs(y1)  <  =  Math.abs(y0))  {  setResult(x1,  i);  return  result;  }	  if(Math.abs(oldDelta)    <    =    Math.abs(y0))    {    setResult(x1,    i);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
161	[BUG]  [BUGGY]  if(Math.abs(dx)  <  =  Math.abs(y0))  {  setResult(x1,  i);  return  result;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        setResult(x1,  i);  return  result;  }  double  dx  =  x2  -  x1;  double  tolerance  =  Math.max(relativeAccuracy  *  Math.abs(x1),  absoluteAccuracy);  if  (Math.abs(dx)  <=  tolerance)  {  setResult(x1,  i);      [BUGGY]  if(Math.abs(dx)  <  =  Math.abs(y0))  {  setResult(x1,  i);  return  result;  }  [BUGGY]      return  result;  }  if  ((Math.abs(oldDelta)  <  tolerance)  ||  (Math.abs(y0)  <=  Math.abs(y1)))  {  delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  double  r3  =  y1  /  y0;  double  p;  double  p1;  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	if(Math.abs(dx)  <  =  Math.abs(y0))  {  setResult(x1,  i);  return  result;  }	  if(Math.abs(oldDelta)    <    =    Math.abs(y0))    {    setResult(x1,    i);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
