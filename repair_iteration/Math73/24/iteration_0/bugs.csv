bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
47	[BUG] [BUGGY] return result; [FE] AssertionFailedError [CONTEXT]   setResult(x1, i); return result; } double dx = x2 - x1; double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy); if (Math.abs(dx) <= tolerance) { setResult(x1, i); [BUGGY] return result; [BUGGY] } if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) {  delta = 0.5 * dx; oldDelta = delta; } else { double r3 = y1 / y0; double p; double p1; [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	
48	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]   setResult(x1, i); return result; } double dx = x2 - x1; double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy); if (Math.abs(dx) <= tolerance) { setResult(x1, i); [BUGGY] [BUGGY] return result; } if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) {  delta = 0.5 * dx; oldDelta = delta; } else { double r3 = y1 / y0; double p; double p1; [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	add	
