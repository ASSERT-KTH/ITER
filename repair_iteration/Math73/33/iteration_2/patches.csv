bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  x0  =  delta  -  oldDelta;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  delta  -  oldDelta;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  delta  -  oldDelta;	  x0    =    oldDelta    -    delta;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
2	[BUG]  [BUGGY]  x0  =  oldDelta  /  delta;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  oldDelta  /  delta;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  oldDelta  /  delta;	  x0    =    oldDelta    -    delta;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
3	[BUG]  [BUGGY]  x0  =  oldDelta  -  delta  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  oldDelta  -  delta  +  1;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  oldDelta  -  delta  +  1;	  x0    =    oldDelta    -    delta;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
4	[BUG]  [BUGGY]  x0  =  delta  +  oldDelta;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  delta  +  oldDelta;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  delta  +  oldDelta;	  x0    =    oldDelta    +    delta;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
5	[BUG]  [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  x0  =  x0  +  delta;  }  else  {  x1  =  x1  +  delta;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  x0  =  x0  +  delta;  }  else  {  x1  =  x1  +  delta;  }  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(Math.abs(delta)  <  tolerance)  {  x0  =  x0  +  delta;  }  else  {  x1  =  x1  +  delta;  }	  if(Math.abs(delta)>    tolerance)    {    x0    =    x0    +    delta;    }    else    {    x1    =    x1    +    delta;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
6	[BUG]  [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  x0  =  x1  +  delta;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  x0  =  x1  +  delta;  }  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(Math.abs(delta)  <  =  tolerance)  {  x0  =  x1  +  delta;  }	  if(Math.abs(delta)    <    tolerance)    {    x0    =    x1    +    delta;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
7	[BUG]  [BUGGY]  x1  =  x0  +  delta.toString();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x1  =  x0  +  delta.toString();  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x1  =  x0  +  delta.toString();	  x1    =    x0    +    delta;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
8	[BUG]  [BUGGY]  x1  =  x0  +  delta  +  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x1  =  x0  +  delta  +  1;  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x1  =  x0  +  delta  +  1;	  x1    =    x0    +    delta;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
9	[BUG]  [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  x1  =  x1  +  0.5  *  delta;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  x1  =  x1  +  0.5  *  delta;  }  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(Math.abs(delta)  <  tolerance)  {  x1  =  x1  +  0.5  *  delta;  }	  if(Math.abs(delta)    <    =    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
10	[BUG]  [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  0.5  *  delta;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  0.5  *  delta;  }  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  0.5  *  delta;  }	  if(Math.abs(delta)    <    =    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
11	[BUG]  [BUGGY]  x1  =  x1  +  delta.toString();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x1  =  x1  +  delta.toString();  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x1  =  x1  +  delta.toString();	  x1    =    x1    +    delta;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
12	[BUG]  [BUGGY]  x1  =  x1  +  delta  *  tolerance;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x1  =  x1  +  delta  *  tolerance;  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x1  =  x1  +  delta  *  tolerance;	  x1    =    x1    +    delta;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
13	[BUG]  [BUGGY]  x1  =  x1  +  delta,  y0;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x1  =  x1  +  delta,  y0;  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x1  =  x1  +  delta,  y0;	  x1    =    x1    +    delta;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
14	[BUG]  [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  x0  =  x0  +  delta;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  x0  =  x0  +  delta;  }  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(Math.abs(delta)  <  =  tolerance)  {  x0  =  x0  +  delta;  }	  if(Math.abs(delta)    <    tolerance)    {    x0    =    x0    +    delta;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
15	[BUG]  [BUGGY]  x0  =  x1  /  2;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  /  2;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  /  2;	  x0    =    x1    /    1;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
16	[BUG]  [BUGGY]  x0  =  x1  +  delta  /  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  +  delta  /  1;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  +  delta  /  1;	  x0    =    x1    /    1;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
17	[BUG]  [BUGGY]  x0  =  x1  /  3;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  /  3;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  /  3;	  x0    =    x1    /    1;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
18	[BUG]  [BUGGY]  x0  =  x1  -  0.5  *  oldDelta  +  delta;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  -  0.5  *  oldDelta  +  delta;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  -  0.5  *  oldDelta  +  delta;	  x0    =    x1    -    0.5    *    oldDelta;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
19	[BUG]  [BUGGY]  x0  =  x1  -  0.5  *  oldDelta  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  -  0.5  *  oldDelta  +  1;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  -  0.5  *  oldDelta  +  1;	  x0    =    x1    -    0.5    *    oldDelta;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
20	[BUG]  [BUGGY]  x0  =  x1  -  0.5;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  -  0.5;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  -  0.5;	  x0    =    x1    -    1;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
21	[BUG]  [BUGGY]  x0  =  x1  -  1  *  delta;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  -  1  *  delta;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  -  1  *  delta;	  x0    =    x1    -    1;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
22	[BUG]  [BUGGY]  x0  =  x1  -  delta  *  tolerance.doubleValue();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  -  delta  *  tolerance.doubleValue();  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  -  delta  *  tolerance.doubleValue();	  x0    =    x1    -    delta    *    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
23	[BUG]  [BUGGY]  x0  =  x1  -  delta  +  tolerance;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  -  delta  +  tolerance;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  -  delta  +  tolerance;	  x0    =    x1    -    delta    *    tolerance;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
24	[BUG]  [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  x1  =  x0  +  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  x1  =  x0  +  0.5  *  tolerance;  }  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(Math.abs(delta)  <  =  tolerance)  {  x1  =  x0  +  0.5  *  tolerance;  }	  if(Math.abs(delta)    <    tolerance)    {    x1    =    x0    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
25	[BUG]  [BUGGY]  x0  =  oldDelta  *  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  oldDelta  *  1;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  oldDelta  *  1;	  x0    =    oldDelta    +    1;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
26	[BUG]  [BUGGY]  x0  =  delta  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  delta  +  1;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  delta  +  1;	  x0    =    oldDelta    +    1;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
27	[BUG]  [BUGGY]  if(Math.abs(delta)>  tolerance)  {  x1  =  x0  +  0.5  *  oldDelta;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  if(Math.abs(delta)>  tolerance)  {  x1  =  x0  +  0.5  *  oldDelta;  }  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(Math.abs(delta)>  tolerance)  {  x1  =  x0  +  0.5  *  oldDelta;  }	  if(Math.abs(delta)    >    tolerance)    {    x1    =    x0    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
28	[BUG]  [BUGGY]  x0  =  x2  -  0.5  *  tolerance  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x2  -  0.5  *  tolerance  +  1;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x2  -  0.5  *  tolerance  +  1;	  x0    =    x2    -    0.5    *    tolerance;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
29	[BUG]  [BUGGY]  x0  =  x1  -  0.5  *  tolerance  +  delta.toString();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  -  0.5  *  tolerance  +  delta.toString();  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  -  0.5  *  tolerance  +  delta.toString();	  x0    =    x1    -    0.5    *    tolerance    +    delta;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
30	[BUG]  [BUGGY]  x0  =  x1  +  delta.getValue();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  +  delta.getValue();  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  +  delta.getValue();	  x0    =    x1    +    delta.toString();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
31	[BUG]  [BUGGY]  x0  =  x1  +  delta.substring(0,  delta.length()  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  +  delta.substring(0,  delta.length()  -  1);  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  +  delta.substring(0,  delta.length()  -  1);	  x0    =    x1    +    delta.toString();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
32	[BUG]  [BUGGY]  x0  =  x1  +  delta.substring(0,  delta.length()  -  2);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  +  delta.substring(0,  delta.length()  -  2);  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  +  delta.substring(0,  delta.length()  -  2);	  x0    =    x1    +    delta.toString();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
33	[BUG]  [BUGGY]  x0  =  x0  +  delta  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x0  +  delta  +  1;  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x0  +  delta  +  1;	  x0    =    x0    +    delta;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
34	[BUG]  [BUGGY]  x0  =  x0  +  delta  *  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x0  +  delta  *  1;  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x0  +  delta  *  1;	  x0    =    x0    +    delta;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
35	[BUG]  [BUGGY]  x0  =  x1  /  delta  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  /  delta  +  1;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  /  delta  +  1;	  x0    =    x1    /    delta;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
36	[BUG]  [BUGGY]  x0  =  x1  /  delta2;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  /  delta2;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  /  delta2;	  x0    =    x1    /    delta;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
37	[BUG]  [BUGGY]  x0  =  x1  /  delta.doubleValue();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  /  delta.doubleValue();  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  /  delta.doubleValue();	  x0    =    x1    /    delta;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
38	[BUG]  [BUGGY]  x0  =  x1  -  delta  +  0.5;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  -  delta  +  0.5;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  -  delta  +  0.5;	  x0    =    x1    -    delta    +    1;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
39	[BUG]  [BUGGY]  x0  =  x1  -  delta  *  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  -  delta  *  1;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  -  delta  *  1;	  x0    =    x1    -    delta    +    1;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
40	[BUG]  [BUGGY]  x0  =  x1  -  delta2  +  delta;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  -  delta2  +  delta;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  -  delta2  +  delta;	  x0    =    x1    -    delta2;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
41	[BUG]  [BUGGY]  x0  =  dx  +  delta;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  dx  +  delta;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  dx  +  delta;	  x0    =    dx;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
42	[BUG]  [BUGGY]  x0  =  dx  -  delta;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  dx  -  delta;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  dx  -  delta;	  x0    =    dx;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
43	[BUG]  [BUGGY]  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(dx  >  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }	  if(dx    <    =    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
44	[BUG]  [BUGGY]  x0  =  x1  +  delta  *  3;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  +  delta  *  3;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  +  delta  *  3;	  x0    =    x1    +    delta    *    1;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
45	[BUG]  [BUGGY]  x0  =  x1  +  delta  *  4;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  +  delta  *  4;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  +  delta  *  4;	  x0    =    x1    +    delta    *    1;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
46	[BUG]  [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  delta;  }  else  {  x1  =  x1  +  delta;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  delta;  }  else  {  x1  =  x1  +  delta;  }  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  delta;  }  else  {  x1  =  x1  +  delta;  }	  if(Math.abs(delta)    <    tolerance)    {    x1    =    x1    +    delta;    }    else    {    x1    =    x1    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
47	[BUG]  [BUGGY]  x1  =  x2  -  0.5  *  tolerance;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x1  =  x2  -  0.5  *  tolerance;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x1  =  x2  -  0.5  *  tolerance;	  x1    =    x1    -    0.5    *    tolerance;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
48	[BUG]  [BUGGY]  x1  =  x1  -  0.5  *  delta;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x1  =  x1  -  0.5  *  delta;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x1  =  x1  -  0.5  *  delta;	  x1    =    x1    -    0.5    *    tolerance;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
49	[BUG]  [BUGGY]  x0  =  x1  +  0.5  *  delta;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  +  0.5  *  delta;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  +  0.5  *  delta;	  x0    =    x1    +    0.5    *    tolerance;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
50	[BUG]  [BUGGY]  x0  =  x1  +  delta  *  tolerance.doubleValue();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  +  delta  *  tolerance.doubleValue();  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  +  delta  *  tolerance.doubleValue();	  x0    =    x1    +    delta    *    tolerance;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
51	[BUG]  [BUGGY]  x0  =  x1  +  delta  *  tolerance.toString();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  +  delta  *  tolerance.toString();  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  +  delta  *  tolerance.toString();	  x0    =    x1    +    delta    *    tolerance;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
52	[BUG]  [BUGGY]  x1  =  x0  +  0.5  *  delta;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x1  =  x0  +  0.5  *  delta;  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x1  =  x0  +  0.5  *  delta;	  x1    =    x0    +    0.5    *    tolerance;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
53	[BUG]  [BUGGY]  x1  =  x0  +  0.5  *  tolerance.toString();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x1  =  x0  +  0.5  *  tolerance.toString();  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x1  =  x0  +  0.5  *  tolerance.toString();	  x1    =    x0    +    0.5    *    tolerance;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
54	[BUG]  [BUGGY]  ||  Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  delta;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  ||  Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  delta;  }  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	||  Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  delta;  }	  if(Math.abs(delta)    <    =    tolerance)    {    x1    =    x1    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
55	[BUG]  [BUGGY]  x0  =  x1  -  delta  *  2;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  -  delta  *  2;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  -  delta  *  2;	  x0    =    x1    -    delta    +    2;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
56	[BUG]  [BUGGY]  x0  =  x1  -  delta  +  3;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  -  delta  +  3;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  -  delta  +  3;	  x0    =    x1    -    delta    +    2;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
57	[BUG]  [BUGGY]  x0  =  x1  -  0.5  *  tolerance  +  2;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  -  0.5  *  tolerance  +  2;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  -  0.5  *  tolerance  +  2;	  x0    =    x1    -    0.5    *    tolerance    +    1;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
58	[BUG]  [BUGGY]  x0  =  x1  -  0.5  *  tolerance  +  3;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  -  0.5  *  tolerance  +  3;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  -  0.5  *  tolerance  +  3;	  x0    =    x1    -    0.5    *    tolerance    +    1;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
59	[BUG]  [BUGGY]  x1  =  x1  +  0.5  *  delta;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x1  =  x1  +  0.5  *  delta;  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x1  =  x1  +  0.5  *  delta;	  x1    =    x1    +    0.5    *    tolerance;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
60	[BUG]  [BUGGY]  y1  =  x1  +  0.5  *  tolerance;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  y1  =  x1  +  0.5  *  tolerance;  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	y1  =  x1  +  0.5  *  tolerance;	  x1    =    x1    +    0.5    *    tolerance;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
61	[BUG]  [BUGGY]  x0  =  x1  +  delta  +  0.5;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  +  delta  +  0.5;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  +  delta  +  0.5;	  x0    =    x1    +    delta    +    1;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
62	[BUG]  [BUGGY]  x0  =  x1  +  delta  +  2;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  +  delta  +  2;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  +  delta  +  2;	  x0    =    x1    +    delta    +    1;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
63	[BUG]  [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  if(dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  if(dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(Math.abs(delta)  <  tolerance)  {  if(dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }	  if(Math.abs(delta)    <    tolerance)    {    if(dx    <    =    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
64	[BUG]  [BUGGY]  x0  =  x1  +  delta.getText();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  +  delta.getText();  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  +  delta.getText();	  x0    =    x1    +    delta.toString();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
65	[BUG]  [BUGGY]  x1  =  x0  +  delta  *  2;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x1  =  x0  +  delta  *  2;  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x1  =  x0  +  delta  *  2;	  x1    =    x0    +    delta;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
66	[BUG]  [BUGGY]  x1  =  x0  +  delta  *  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x1  =  x0  +  delta  *  1;  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x1  =  x0  +  delta  *  1;	  x1    =    x0    +    delta;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
67	[BUG]  [BUGGY]  luate(delta)  {  x1  =  x1  +  delta;  }  else  {  x1  =  x1  +  delta;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  luate(delta)  {  x1  =  x1  +  delta;  }  else  {  x1  =  x1  +  delta;  }  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	luate(delta)  {  x1  =  x1  +  delta;  }  else  {  x1  =  x1  +  delta;  }	  if(Math.abs(delta)    <    tolerance)    {    x1    =    x1    +    delta;    }    else    {    x1    =    x1    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
68	[BUG]  [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  if(dx  >  0.0)  {  x1  =  x0  +  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  if(dx  >  0.0)  {  x1  =  x0  +  0.5  *  tolerance;  }  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(Math.abs(delta)  <  tolerance)  {  if(dx  >  0.0)  {  x1  =  x0  +  0.5  *  tolerance;  }	  if(Math.abs(delta)    <    tolerance)    {    if(dx    <    =    0.0)    {    x1    =    x0    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
69	[BUG]  [BUGGY]  x0  =  x1  +  delta  *  dx;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  +  delta  *  dx;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  +  delta  *  dx;	  x0    =    x1    +    delta    *    tolerance;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
70	[BUG]  [BUGGY]  x1  =  x0  +  0.5  *  oldDelta;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x1  =  x0  +  0.5  *  oldDelta;  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x1  =  x0  +  0.5  *  oldDelta;	  x1    =    x0    +    0.5    *    tolerance;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
71	[BUG]  [BUGGY]  x0  =  x0  +  delta  *  2;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x0  +  delta  *  2;  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x0  +  delta  *  2;	  x0    =    x0    +    delta;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
72	[BUG]  [BUGGY]  if(Math.abs(delta)>  tolerance)  {  x0  =  x1  +  delta;  }  else  {  x1  =  x1  +  delta;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  if(Math.abs(delta)>  tolerance)  {  x0  =  x1  +  delta;  }  else  {  x1  =  x1  +  delta;  }  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(Math.abs(delta)>  tolerance)  {  x0  =  x1  +  delta;  }  else  {  x1  =  x1  +  delta;  }	  if(Math.abs(delta)>    tolerance)    {    x0    =    x0    +    delta;    }    else    {    x1    =    x1    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
73	[BUG]  [BUGGY]  x0  =  x1  +  0.5  *  oldDelta;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  +  0.5  *  oldDelta;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  +  0.5  *  oldDelta;	  x0    =    x1    +    0.5    *    tolerance;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
74	[BUG]  [BUGGY]  x0  =  x2  +  delta  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x2  +  delta  +  1;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x2  +  delta  +  1;	  x0    =    x2    +    delta;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
75	[BUG]  [BUGGY]  x1  =  x1  +  0.5  *  oldDelta;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x1  =  x1  +  0.5  *  oldDelta;  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x1  =  x1  +  0.5  *  oldDelta;	  x1    =    x1    +    0.5    *    tolerance;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
76	[BUG]  [BUGGY]  if(Math.abs(delta)>  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  if(Math.abs(delta)>  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(Math.abs(delta)>  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }	  if(dx    <    =    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
77	[BUG]  [BUGGY]  if(delta  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  if(delta  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(delta  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }	  if(dx    <    =    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
78	[BUG]  [BUGGY]  x0  =  x1  -  1  +  delta;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  -  1  +  delta;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  -  1  +  delta;	  x0    =    x1    -    1;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
79	[BUG]  [BUGGY]  x0  =  x1  -  deltaDelta;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  -  deltaDelta;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  -  deltaDelta;	  x0    =    x1    -    delta2;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
80	[BUG]  [BUGGY]  x0  =  x1  /  1  +  delta;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  /  1  +  delta;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  /  1  +  delta;	  x0    =    x1    /    1;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
81	[BUG]  [BUGGY]  x0  =  x1  -  delta  *  dx;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  -  delta  *  dx;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  -  delta  *  dx;	  x0    =    x1    -    delta    *    tolerance;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
82	[BUG]  [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  x1  =  x0  +  delta;  }  else  {  x1  =  x1  +  delta;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  x1  =  x0  +  delta;  }  else  {  x1  =  x1  +  delta;  }  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(Math.abs(delta)  <  =  tolerance)  {  x1  =  x0  +  delta;  }  else  {  x1  =  x1  +  delta;  }	  if(Math.abs(delta)    <    tolerance)    {    x1    =    x0    +    delta;    }    else    {    x1    =    x1    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
83	[BUG]  [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  x0  =  x0  +  delta;  }  else  {  x1  =  x0  +  delta;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  x0  =  x0  +  delta;  }  else  {  x1  =  x0  +  delta;  }  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(Math.abs(delta)  <  tolerance)  {  x0  =  x0  +  delta;  }  else  {  x1  =  x0  +  delta;  }	  if(Math.abs(delta)    <    tolerance)    {    x1    =    x0    +    delta;    }    else    {    x1    =    x1    +    delta;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
84	[BUG]  [BUGGY]  x0  =  oldDelta  +  2;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  oldDelta  +  2;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  oldDelta  +  2;	  x0    =    oldDelta    +    1;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
85	[BUG]  [BUGGY]  x1  =  x1  -  0.5  *  oldDelta;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x1  =  x1  -  0.5  *  oldDelta;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x1  =  x1  -  0.5  *  oldDelta;	  x1    =    x1    -    0.5    *    tolerance;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
86	[BUG]  [BUGGY]  x1  =  x1  -  0.5  *  tolerance  +  delta;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x1  =  x1  -  0.5  *  tolerance  +  delta;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x1  =  x1  -  0.5  *  tolerance  +  delta;	  x1    =    x1    -    0.5    *    tolerance;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
87	[BUG]  [BUGGY]  x0  =  oldDelta  +  delta  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  oldDelta  +  delta  +  1;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  oldDelta  +  delta  +  1;	  x0    =    oldDelta    +    delta;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
88	[BUG]  [BUGGY]  if(Math.abs(delta)>  tolerance)  {  if(dx  >  0.0)  {  x1  =  x0  +  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  if(Math.abs(delta)>  tolerance)  {  if(dx  >  0.0)  {  x1  =  x0  +  0.5  *  tolerance;  }  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(Math.abs(delta)>  tolerance)  {  if(dx  >  0.0)  {  x1  =  x0  +  0.5  *  tolerance;  }	  if(Math.abs(delta)>    tolerance)    {    if(dx    <    =    0.0)    {    x1    =    x0    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
89	[BUG]  [BUGGY]  x0  =  x2  -  0.5  *  oldDelta;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x2  -  0.5  *  oldDelta;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x2  -  0.5  *  oldDelta;	  x0    =    x2    -    0.5    *    tolerance;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
90	[BUG]  [BUGGY]  x0  =  x2  -  0.5  *  delta;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x2  -  0.5  *  delta;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x2  -  0.5  *  delta;	  x0    =    x2    -    0.5    *    tolerance;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
91	[BUG]  [BUGGY]  if(Math.abs(delta)>  tolerance)  {  if(y0  <  =  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  if(Math.abs(delta)>  tolerance)  {  if(y0  <  =  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(Math.abs(delta)>  tolerance)  {  if(y0  <  =  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }	  if(Math.abs(delta)>    tolerance)    {    if(dx    <    =    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
92	[BUG]  [BUGGY]  x0  =  x1  -  0.5  *  tolerance  +  delta2;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  -  0.5  *  tolerance  +  delta2;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  -  0.5  *  tolerance  +  delta2;	  x0    =    x1    -    0.5    *    tolerance    +    delta;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
93	[BUG]  [BUGGY]  x1  =  x1  +  delta  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x1  =  x1  +  delta  +  1;  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x1  =  x1  +  delta  +  1;	  x1    =    x1    +    delta;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
94	[BUG]  [BUGGY]  x1  =  x1  +  delta  *  2;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x1  =  x1  +  delta  *  2;  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x1  =  x1  +  delta  *  2;	  x1    =    x1    +    delta;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
95	[BUG]  [BUGGY]  x1  =  x1  +  delta  *  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x1  =  x1  +  delta  *  1;  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x1  =  x1  +  delta  *  1;	  x1    =    x1    +    delta;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
96	[BUG]  [BUGGY]  x0  =  x1  /  deltaL;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  /  deltaL;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  /  deltaL;	  x0    =    x1    /    delta;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
97	[BUG]  [BUGGY]  x1  =  x2  +  0.5  *  tolerance;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x1  =  x2  +  0.5  *  tolerance;  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x1  =  x2  +  0.5  *  tolerance;	  x1    =    x1    +    0.5    *    tolerance;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
98	[BUG]  [BUGGY]  x0  =  x1  +  delta  *  x2;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  +  delta  *  x2;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  +  delta  *  x2;	  x0    =    x1    +    delta    *    tolerance;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
99	[BUG]  [BUGGY]  x0  =  x1  -  1  *  tolerance;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  -  1  *  tolerance;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  -  1  *  tolerance;	  x0    =    x1    -    1;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
100	[BUG]  [BUGGY]  x0  =  oldDelta  +  0.5;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  oldDelta  +  0.5;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  oldDelta  +  0.5;	  x0    =    oldDelta    +    1;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
101	[BUG]  [BUGGY]  x0  =  x1  -  0.5  *  tolerance  +  dx;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  -  0.5  *  tolerance  +  dx;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  -  0.5  *  tolerance  +  dx;	  x0    =    x1    -    0.5    *    tolerance    +    delta;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
102	[BUG]  [BUGGY]  x1  =  x0  +  delta  *  tolerance;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x1  =  x0  +  delta  *  tolerance;  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x1  =  x0  +  delta  *  tolerance;	  x1    =    x0    +    delta;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
103	[BUG]  [BUGGY]  x0  =  x1  -  oldDelta  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  -  oldDelta  +  1;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  -  oldDelta  +  1;	  x0    =    x1    -    delta    +    1;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
104	[BUG]  [BUGGY]  x0  =  x1  -  delta  +  0.5  *  tolerance;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  -  delta  +  0.5  *  tolerance;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  -  delta  +  0.5  *  tolerance;	  x0    =    x1    -    delta    +    1;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
105	[BUG]  [BUGGY]  x0  =  oldDelta  -  delta  *  2;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  oldDelta  -  delta  *  2;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  oldDelta  -  delta  *  2;	  x0    =    oldDelta    -    delta;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
106	[BUG]  [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  x1  =  x0  +  0.5  *  oldDelta;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  x1  =  x0  +  0.5  *  oldDelta;  }  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(Math.abs(delta)  <  tolerance)  {  x1  =  x0  +  0.5  *  oldDelta;  }	  if(Math.abs(delta)    <    tolerance)    {    x1    =    x0    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
107	[BUG]  [BUGGY]  x0  =  x1  -  oldDelta  +  2;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  -  oldDelta  +  2;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  -  oldDelta  +  2;	  x0    =    x1    -    delta    +    2;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
108	[BUG]  [BUGGY]  x0  =  x1  -  delta  +  2  *  tolerance;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  -  delta  +  2  *  tolerance;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  -  delta  +  2  *  tolerance;	  x0    =    x1    -    delta    +    2;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
109	[BUG]  [BUGGY]  x0  =  x1  -  oldDelta  *  tolerance;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  -  oldDelta  *  tolerance;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  -  oldDelta  *  tolerance;	  x0    =    x1    -    delta    *    tolerance;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
110	[BUG]  [BUGGY]  x0  =  x1  -  delta  *  tolerance  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  -  delta  *  tolerance  +  1;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  -  delta  *  tolerance  +  1;	  x0    =    x1    -    delta    *    tolerance;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
111	[BUG]  [BUGGY]  if(dx  >=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  if(dx  >=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(dx  >=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }	  if(dx    <    =    0.0)    {    x1    =    x1    -    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
112	[BUG]  [BUGGY]  x0  =  x1  -  x2;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  -  x2;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  -  x2;	  x0    =    x1    -    delta2;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
113	[BUG]  [BUGGY]  x0  =  x0  +  delta.toString();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x0  +  delta.toString();  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x0  +  delta.toString();	  x0    =    x1    +    delta.toString();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
114	[BUG]  [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  if(dx  <  0.0)  {  x1  =  x0  +  0.5  *  tolerance;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  if(dx  <  0.0)  {  x1  =  x0  +  0.5  *  tolerance;  }  [BUGGY]      x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(Math.abs(delta)  <  tolerance)  {  if(dx  <  0.0)  {  x1  =  x0  +  0.5  *  tolerance;  }	  if(Math.abs(delta)    <    tolerance)    {    if(dx    <    =    0.0)    {    x1    =    x0    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
115	[BUG]  [BUGGY]  x0  =  dx  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  dx  +  1;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  dx  +  1;	  x0    =    dx;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
116	[BUG]  [BUGGY]  x0  =  x1  /  p1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  /  p1;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  /  p1;	  x0    =    x1    /    delta;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
117	[BUG]  [BUGGY]  x0  =  x1  /  f.value(x1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  /  f.value(x1);  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  /  f.value(x1);	  x0    =    x1    /    delta;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
118	[BUG]  [BUGGY]  x0  =  x1  /  dx;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x1  /  dx;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  /  dx;	  x0    =    x1    /    delta;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
119	[BUG]  [BUGGY]  x1  =  x1  -  0.5  *  tolerance  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x1  =  x1  -  0.5  *  tolerance  +  1;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x1  =  x1  -  0.5  *  tolerance  +  1;	  x1    =    x1    -    0.5    *    tolerance;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
120	[BUG]  [BUGGY]  x0  =  x2  /  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }        [BUGGY]  x0  =  x2  /  1;  [BUGGY]      y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x2  /  1;	  x0    =    x1    /    1;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
