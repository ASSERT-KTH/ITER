bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(Math.abs(delta)>  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  if(Math.abs(delta)>  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  [BUGGY]    x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(Math.abs(delta)>  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }	      if(dx    <    =    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    else    if(dx    >    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
2	[BUG]  [BUGGY]  x1  =  x1  +  0.5  *  tolerance;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  x1  =  x1  +  0.5  *  tolerance;  [BUGGY]    x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x1  =  x1  +  0.5  *  tolerance;	      if(dx    <    =    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    else    if(dx    >    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
3	[BUG]  [BUGGY]  if(delta  <  =  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if(dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  if(delta  <  =  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if(dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  [BUGGY]    x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(delta  <  =  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if(dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }	      if(dx    <    =    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    else    if(dx    >    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
4	[BUG]  [BUGGY]  x1  =  x1  +  delta;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  x1  =  x1  +  delta;  [BUGGY]    x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x1  =  x1  +  delta;	      if(Math.abs(delta)>    tolerance)    {    x1    =    x1    +    delta;    }    else    {    x1    =    x1    +    delta;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
5	[BUG]  [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  x1  =  x1  +  delta;  }  else  {  x1  =  x1  +  delta;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  x1  =  x1  +  delta;  }  else  {  x1  =  x1  +  delta;  }  [BUGGY]    x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(Math.abs(delta)  <  tolerance)  {  x1  =  x1  +  delta;  }  else  {  x1  =  x1  +  delta;  }	      if(Math.abs(delta)>    tolerance)    {    x1    =    x1    +    delta;    }    else    {    x1    =    x1    +    delta;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
6	[BUG]  [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  x0  =  x1  +  delta;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  x0  =  x1  +  delta;  }  [BUGGY]    x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(Math.abs(delta)  <  tolerance)  {  x0  =  x1  +  delta;  }	      if(Math.abs(delta)>    tolerance)    {    x0    =    x1    +    delta;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
7	[BUG]  [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  [BUGGY]    x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(Math.abs(delta)  <  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }	      if(dx    <    =    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    else    if(dx    <    =    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
8	[BUG]  [BUGGY]  if(Math.abs(delta)  <  =  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  if(Math.abs(delta)  <  =  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  [BUGGY]    x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(Math.abs(delta)  <  =  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }	      if(dx    <    =    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
9	[BUG]  [BUGGY]  if(Math.abs(delta)>  tolerance)  {  x1  =  x1  +  0.5  *  tolerance;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  if(Math.abs(delta)>  tolerance)  {  x1  =  x1  +  0.5  *  tolerance;  }  [BUGGY]    x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(Math.abs(delta)>  tolerance)  {  x1  =  x1  +  0.5  *  tolerance;  }	      if(dx    <    =    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
10	[BUG]  [BUGGY]  x1  =  x1  -  0.5  *  tolerance;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  x1  =  x1  -  0.5  *  tolerance;  [BUGGY]    y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x1  =  x1  -  0.5  *  tolerance;	  x0    =    x1    -    0.5    *    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
11	[BUG]  [BUGGY]  x0  =  x2  -  0.5  *  tolerance;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  x0  =  x2  -  0.5  *  tolerance;  [BUGGY]    y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x2  -  0.5  *  tolerance;	  x0    =    x1    -    0.5    *    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
12	[BUG]  [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  0.5  *  tolerance;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  0.5  *  tolerance;  }  [BUGGY]    x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  0.5  *  tolerance;  }	      if(Math.abs(delta)    <    tolerance)    {    x1    =    x1    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
13	[BUG]  [BUGGY]  x0  =  x1  *  1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  x0  =  x1  *  1;  [BUGGY]    y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  *  1;	  x0    =    x1    +    1;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
14	[BUG]  [BUGGY]  x0  =  x1  /  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  x0  =  x1  /  1;  [BUGGY]    y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  /  1;	  x0    =    x1    +    1;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
15	[BUG]  [BUGGY]  x1  =  x0  +  0.5  *  tolerance;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  x1  =  x0  +  0.5  *  tolerance;  [BUGGY]    x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x1  =  x0  +  0.5  *  tolerance;	      if(dx    <    =    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    else    if(dx    >    0.0)    {    x1    =    x0    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
16	[BUG]  [BUGGY]  x0  =  x2  +  delta;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  x0  =  x2  +  delta;  [BUGGY]    y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x2  +  delta;	  x0    =    x2;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
17	[BUG]  [BUGGY]  x1  =  x0  +  delta;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  x1  =  x0  +  delta;  [BUGGY]    x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x1  =  x0  +  delta;	      if(Math.abs(delta)>    tolerance)    {    x1    =    x0    +    delta;    }    else    {    x1    =    x1    +    delta;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
18	[BUG]  [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  x1  =  x0  +  delta;  }  else  {  x1  =  x1  +  delta;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  x1  =  x0  +  delta;  }  else  {  x1  =  x1  +  delta;  }  [BUGGY]    x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(Math.abs(delta)  <  tolerance)  {  x1  =  x0  +  delta;  }  else  {  x1  =  x1  +  delta;  }	      if(Math.abs(delta)>    tolerance)    {    x1    =    x0    +    delta;    }    else    {    x1    =    x1    +    delta;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
19	[BUG]  [BUGGY]  x0  =  x0  +  delta;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  x0  =  x0  +  delta;  [BUGGY]    x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x0  +  delta;	      if(Math.abs(delta)>    tolerance)    {    x0    =    x0    +    delta;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
20	[BUG]  [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  x0  =  x0  +  delta;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  x0  =  x0  +  delta;  }  [BUGGY]    x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(Math.abs(delta)  <  tolerance)  {  x0  =  x0  +  delta;  }	      if(Math.abs(delta)>    tolerance)    {    x0    =    x0    +    delta;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
21	[BUG]  [BUGGY]  if(Math.abs(delta)>  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x0  +  0.5  *  tolerance;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  if(Math.abs(delta)>  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x0  +  0.5  *  tolerance;  }  [BUGGY]    x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(Math.abs(delta)>  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x0  +  0.5  *  tolerance;  }	      if(dx    <    =    0.0)    {    x1    =    x0    +    0.5    *    tolerance;    }    else    if(dx    >    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
22	[BUG]  [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x0  +  0.5  *  tolerance;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x0  +  0.5  *  tolerance;  }  [BUGGY]    x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(Math.abs(delta)  <  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x0  +  0.5  *  tolerance;  }	      if(dx    <    =    0.0)    {    x1    =    x0    +    0.5    *    tolerance;    }    else    if(dx    >    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
23	[BUG]  [BUGGY]  if(delta  <  =  0.0)  {  x1  =  x0  +  0.5  *  tolerance;  }  else  if(dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  if(delta  <  =  0.0)  {  x1  =  x0  +  0.5  *  tolerance;  }  else  if(dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  [BUGGY]    x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(delta  <  =  0.0)  {  x1  =  x0  +  0.5  *  tolerance;  }  else  if(dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }	      if(dx    <    =    0.0)    {    x1    =    x0    +    0.5    *    tolerance;    }    else    if(dx    >    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
24	[BUG]  [BUGGY]  x0  =  x1  -  delta  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  x0  =  x1  -  delta  +  1;  [BUGGY]    y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  -  delta  +  1;	  x0    =    x1    -    delta;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
25	[BUG]  [BUGGY]  x0  =  x1  /  delta;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  x0  =  x1  /  delta;  [BUGGY]    y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  /  delta;	  x0    =    x1    -    delta;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
26	[BUG]  [BUGGY]  x0  =  x1  -  delta2;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  x0  =  x1  -  delta2;  [BUGGY]    y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  -  delta2;	  x0    =    x1    -    delta;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
27	[BUG]  [BUGGY]  x0  =  x1  +  delta.toString();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  x0  =  x1  +  delta.toString();  [BUGGY]    y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  +  delta.toString();	  x0    =    x1    +    delta;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
28	[BUG]  [BUGGY]  x0  =  x1  +  delta  *  tolerance;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  x0  =  x1  +  delta  *  tolerance;  [BUGGY]    y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  +  delta  *  tolerance;	  x0    =    x1    +    delta;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
29	[BUG]  [BUGGY]  x0  =  x1  +  delta  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  x0  =  x1  +  delta  +  1;  [BUGGY]    y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  +  delta  +  1;	  x0    =    x1    +    delta;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
30	[BUG]  [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  delta;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  delta;  }  [BUGGY]    x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(Math.abs(delta)  <  =  tolerance)  {  x1  =  x1  +  delta;  }	      if(Math.abs(delta)    <    tolerance)    {    x1    =    x1    +    delta;    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
31	[BUG]  [BUGGY]  x0  =  oldDelta  -  delta;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  x0  =  oldDelta  -  delta;  [BUGGY]    y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  oldDelta  -  delta;	  x0    =    oldDelta;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
32	[BUG]  [BUGGY]  x0  =  oldDelta  +  delta;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  x0  =  oldDelta  +  delta;  [BUGGY]    y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  oldDelta  +  delta;	  x0    =    oldDelta;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
33	[BUG]  [BUGGY]  x0  =  dx;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  x0  =  dx;  [BUGGY]    y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  dx;	  x0    =    oldDelta;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
34	[BUG]  [BUGGY]  x0  =  delta;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  x0  =  delta;  [BUGGY]    y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  delta;	  x0    =    oldDelta;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
35	[BUG]  [BUGGY]  if(Math.abs(delta)>  tolerance)  {  x0  =  x0  +  delta;  }  else  {  x1  =  x1  +  delta;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  if(Math.abs(delta)>  tolerance)  {  x0  =  x0  +  delta;  }  else  {  x1  =  x1  +  delta;  }  [BUGGY]    x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(Math.abs(delta)>  tolerance)  {  x0  =  x0  +  delta;  }  else  {  x1  =  x1  +  delta;  }	      if(Math.abs(delta)>    tolerance)    {    x1    =    x0    +    delta;    }    else    {    x1    =    x1    +    delta;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
36	[BUG]  [BUGGY]  x0  =  x1  +  delta  *  2;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  x0  =  x1  +  delta  *  2;  [BUGGY]    y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  +  delta  *  2;	  x0    =    x1    +    delta;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
37	[BUG]  [BUGGY]  x0  =  x1  +  delta  *  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  x0  =  x1  +  delta  *  1;  [BUGGY]    y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  +  delta  *  1;	  x0    =    x1    +    delta;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
38	[BUG]  [BUGGY]  x0  =  x1  -  1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  x0  =  x1  -  1;  [BUGGY]    y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  -  1;	  x0    =    x1    +    1;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
39	[BUG]  [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  [BUGGY]    x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(Math.abs(delta)  <  =  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }	      if(dx    <    =    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    else    if(dx    >    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
40	[BUG]  [BUGGY]  x0  =  x1  -  0.5  *  oldDelta;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  x0  =  x1  -  0.5  *  oldDelta;  [BUGGY]    y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  -  0.5  *  oldDelta;	  x0    =    x1    -    0.5    *    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
41	[BUG]  [BUGGY]  x0  =  x1  -  0.5  *  delta;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  x0  =  x1  -  0.5  *  delta;  [BUGGY]    y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  -  0.5  *  delta;	  x0    =    x1    -    0.5    *    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
42	[BUG]  [BUGGY]  x0  =  x1  -  0.5  *  tolerance  +  delta;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  x0  =  x1  -  0.5  *  tolerance  +  delta;  [BUGGY]    y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  -  0.5  *  tolerance  +  delta;	  x0    =    x1    -    0.5    *    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
43	[BUG]  [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x0  +  0.5  *  tolerance;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  if(Math.abs(delta)  <  =  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x0  +  0.5  *  tolerance;  }  [BUGGY]    x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(Math.abs(delta)  <  =  tolerance)  {  if(dx  <  =  0.0)  {  x1  =  x0  +  0.5  *  tolerance;  }	      if(dx    <    =    0.0)    {    x1    =    x0    +    0.5    *    tolerance;    }    else    if(dx    >    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
44	[BUG]  [BUGGY]  x0  =  x1  -  0.5  *  tolerance  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  x0  =  x1  -  0.5  *  tolerance  +  1;  [BUGGY]    y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  -  0.5  *  tolerance  +  1;	  x0    =    x1    -    0.5    *    tolerance;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
45	[BUG]  [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  x1  =  x0  +  0.5  *  tolerance;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  if(Math.abs(delta)  <  tolerance)  {  x1  =  x0  +  0.5  *  tolerance;  }  [BUGGY]    x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(Math.abs(delta)  <  tolerance)  {  x1  =  x0  +  0.5  *  tolerance;  }	      if(dx    <    =    0.0)    {    x1    =    x0    +    0.5    *    tolerance;    }    else    if(dx    >    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
46	[BUG]  [BUGGY]  if(Math.abs(delta)  >  tolerance)  {  x1  =  x0  +  0.5  *  tolerance;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  if(Math.abs(delta)  >  tolerance)  {  x1  =  x0  +  0.5  *  tolerance;  }  [BUGGY]    x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(Math.abs(delta)  >  tolerance)  {  x1  =  x0  +  0.5  *  tolerance;  }	      if(dx    <    =    0.0)    {    x1    =    x0    +    0.5    *    tolerance;    }    else    if(dx    >    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
47	[BUG]  [BUGGY]  if(dx  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  if(dx  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  [BUGGY]    x0  =  x1;  y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	if(dx  <  =  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }	      if(dx    <    =    0.0)    {    x1    =    x1    +    0.5    *    tolerance;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
48	[BUG]  [BUGGY]  x0  =  x1  +  0.5  *  tolerance;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  x0  =  x1  +  0.5  *  tolerance;  [BUGGY]    y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  +  0.5  *  tolerance;	  x0    =    x1    +    1;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
49	[BUG]  [BUGGY]  x0  =  oldDelta  +  1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  x0  =  oldDelta  +  1;  [BUGGY]    y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  oldDelta  +  1;	  x0    =    oldDelta;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
50	[BUG]  [BUGGY]  x0  =  x1  -  delta  *  tolerance;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  x0  =  x1  -  delta  *  tolerance;  [BUGGY]    y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  -  delta  *  tolerance;	  x0    =    x1    -    delta;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
51	[BUG]  [BUGGY]  x0  =  x1  -  delta  +  2;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      delta  =  0.5  *  dx;  oldDelta  =  delta;  }  else  {  oldDelta  =  delta;  delta  =  p  /  p1;  }  }      [BUGGY]  x0  =  x1  -  delta  +  2;  [BUGGY]    y0  =  y1;  if  (Math.abs(delta)  >  tolerance)  {  x1  =  x1  +  delta;  }  else  if  (dx  >  0.0)  {  x1  =  x1  +  0.5  *  tolerance;  }  else  if  (dx  <=  0.0)  {  x1  =  x1  -  0.5  *  tolerance;  }  y1  =  f.value(x1);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  double  x0  double  y0  double  x1  double  y1  double  x2  double  y2  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  delta  dx  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	x0  =  x1  -  delta  +  2;	  x0    =    x1    -    delta;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
