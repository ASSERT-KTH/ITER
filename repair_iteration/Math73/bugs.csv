bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] return solve(f, min, yMin, max, yMax, initial, yInitial); [FE] AssertionFailedError [CONTEXT] return result; }  if (yInitial * yMax < 0) { return solve(f, initial, yInitial, max, yMax, initial, yInitial); }   [BUGGY] return solve(f, min, yMin, max, yMax, initial, yInitial); [BUGGY]  } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max final double initial [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double initial max min yInitial yMax yMin  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	1.0	138	138	1	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return result; }  if (yInitial * yMax < 0) { return solve(f, initial, yInitial, max, yMax, initial, yInitial); }   [BUGGY] [BUGGY] return solve(f, min, yMin, max, yMax, initial, yInitial); } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max final double initial [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double initial max min yInitial yMax yMin  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	1.0	138	138	1	add	
3	[BUG] [BUGGY] throw MathRuntimeException.createIllegalArgumentException(  NON_BRACKETING_MESSAGE, min, max, yMin, yMax); [FE] AssertionFailedError [CONTEXT] } else if (Math.abs(yMax) <= functionValueAccuracy) { setResult(max, 0); ret = max; } else {  [BUGGY] throw MathRuntimeException.createIllegalArgumentException(      NON_BRACKETING_MESSAGE, min, max, yMin, yMax); [BUGGY] NON_BRACKETING_MESSAGE, min, max, yMin, yMax); } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	1.0	184	185	1	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } else if (Math.abs(yMax) <= functionValueAccuracy) { setResult(max, 0); ret = max; } else {  [BUGGY] [BUGGY] throw MathRuntimeException.createIllegalArgumentException(      NON_BRACKETING_MESSAGE, min, max, yMin, yMax); NON_BRACKETING_MESSAGE, min, max, yMin, yMax); } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	1.0	184	185	1	add	
5	[BUG] [BUGGY] clearResult(); [FE] AssertionFailedError [CONTEXT] throws MaxIterationsExceededException, FunctionEvaluationException { [BUGGY] clearResult(); [BUGGY] verifySequence(min, initial, max);  double yInitial = f.value(initial); if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; }   [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max final double initial [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double initial max min yInitial yMax yMin  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	102	102	1	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throws MaxIterationsExceededException, FunctionEvaluationException { [BUGGY] [BUGGY] clearResult(); verifySequence(min, initial, max);  double yInitial = f.value(initial); if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; }   [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max final double initial [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double initial max min yInitial yMax yMin  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	102	102	1	add	
7	[BUG] [BUGGY] verifySequence(min, initial, max); [FE] AssertionFailedError [CONTEXT] throws MaxIterationsExceededException, FunctionEvaluationException { clearResult(); [BUGGY] verifySequence(min, initial, max); [BUGGY]   double yInitial = f.value(initial); if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; }  double yMin = f.value(min); [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max final double initial [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double initial max min yInitial yMax yMin  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	103	103	1	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throws MaxIterationsExceededException, FunctionEvaluationException { clearResult(); [BUGGY] [BUGGY] verifySequence(min, initial, max);  double yInitial = f.value(initial); if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; }  double yMin = f.value(min); [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max final double initial [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double initial max min yInitial yMax yMin  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	103	103	1	add	
9	[BUG] [BUGGY] double yInitial = f.value(initial); [FE] AssertionFailedError [CONTEXT] throws MaxIterationsExceededException, FunctionEvaluationException { clearResult(); verifySequence(min, initial, max);  [BUGGY] double yInitial = f.value(initial); [BUGGY] if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; }  double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); return result; [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max final double initial [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double initial max min yInitial yMax yMin  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	106	106	1	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throws MaxIterationsExceededException, FunctionEvaluationException { clearResult(); verifySequence(min, initial, max);  [BUGGY] [BUGGY] double yInitial = f.value(initial); if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; }  double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); return result; [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max final double initial [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double initial max min yInitial yMax yMin  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	106	106	1	add	
11	[BUG] [BUGGY] if (Math.abs(yInitial) <= functionValueAccuracy) { [FE] AssertionFailedError [CONTEXT] throws MaxIterationsExceededException, FunctionEvaluationException { clearResult(); verifySequence(min, initial, max);  double yInitial = f.value(initial); [BUGGY] if (Math.abs(yInitial) <= functionValueAccuracy) { [BUGGY] setResult(initial, 0); return result; }  double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); return result; } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max final double initial [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double initial max min yInitial yMax yMin  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	107	107	1	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throws MaxIterationsExceededException, FunctionEvaluationException { clearResult(); verifySequence(min, initial, max);  double yInitial = f.value(initial); [BUGGY] [BUGGY] if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; }  double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); return result; } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max final double initial [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double initial max min yInitial yMax yMin  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	107	107	1	add	
13	[BUG] [BUGGY] double yMin = f.value(min); [FE] AssertionFailedError [CONTEXT] verifySequence(min, initial, max);  double yInitial = f.value(initial); if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; }  [BUGGY] double yMin = f.value(min); [BUGGY] if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); return result; }  if (yInitial * yMin < 0) { return solve(f, min, yMin, initial, yInitial, min, yMin); }  [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max final double initial [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double initial max min yInitial yMax yMin  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	113	113	1	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] verifySequence(min, initial, max);  double yInitial = f.value(initial); if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; }  [BUGGY] [BUGGY] double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); return result; }  if (yInitial * yMin < 0) { return solve(f, min, yMin, initial, yInitial, min, yMin); }  [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max final double initial [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double initial max min yInitial yMax yMin  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	113	113	1	add	
15	[BUG] [BUGGY] if (Math.abs(yMin) <= functionValueAccuracy) { [FE] AssertionFailedError [CONTEXT]  double yInitial = f.value(initial); if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; }  double yMin = f.value(min); [BUGGY] if (Math.abs(yMin) <= functionValueAccuracy) { [BUGGY] setResult(yMin, 0); return result; }  if (yInitial * yMin < 0) { return solve(f, min, yMin, initial, yInitial, min, yMin); }   [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max final double initial [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double initial max min yInitial yMax yMin  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	114	114	1	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  double yInitial = f.value(initial); if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; }  double yMin = f.value(min); [BUGGY] [BUGGY] if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); return result; }  if (yInitial * yMin < 0) { return solve(f, min, yMin, initial, yInitial, min, yMin); }   [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max final double initial [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double initial max min yInitial yMax yMin  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	114	114	1	add	
17	[BUG] [BUGGY] if (yInitial * yMin < 0) { [FE] AssertionFailedError [CONTEXT] }  double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); return result; }  [BUGGY] if (yInitial * yMin < 0) { [BUGGY] return solve(f, min, yMin, initial, yInitial, min, yMin); }  double yMax = f.value(max); if (Math.abs(yMax) <= functionValueAccuracy) { setResult(yMax, 0); return result; }  [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max final double initial [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double initial max min yInitial yMax yMin  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	120	120	1	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] }  double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); return result; }  [BUGGY] [BUGGY] if (yInitial * yMin < 0) { return solve(f, min, yMin, initial, yInitial, min, yMin); }  double yMax = f.value(max); if (Math.abs(yMax) <= functionValueAccuracy) { setResult(yMax, 0); return result; }  [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max final double initial [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double initial max min yInitial yMax yMin  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	120	120	1	add	
19	[BUG] [BUGGY] double yMax = f.value(max); [FE] AssertionFailedError [CONTEXT] setResult(yMin, 0); return result; }  if (yInitial * yMin < 0) { return solve(f, min, yMin, initial, yInitial, min, yMin); }  [BUGGY] double yMax = f.value(max); [BUGGY] if (Math.abs(yMax) <= functionValueAccuracy) { setResult(yMax, 0); return result; }  if (yInitial * yMax < 0) { return solve(f, initial, yInitial, max, yMax, initial, yInitial); }  [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max final double initial [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double initial max min yInitial yMax yMin  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	125	125	1	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] setResult(yMin, 0); return result; }  if (yInitial * yMin < 0) { return solve(f, min, yMin, initial, yInitial, min, yMin); }  [BUGGY] [BUGGY] double yMax = f.value(max); if (Math.abs(yMax) <= functionValueAccuracy) { setResult(yMax, 0); return result; }  if (yInitial * yMax < 0) { return solve(f, initial, yInitial, max, yMax, initial, yInitial); }  [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max final double initial [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double initial max min yInitial yMax yMin  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	125	125	1	add	
21	[BUG] [BUGGY] if (Math.abs(yMax) <= functionValueAccuracy) { [FE] AssertionFailedError [CONTEXT] return result; }  if (yInitial * yMin < 0) { return solve(f, min, yMin, initial, yInitial, min, yMin); }  double yMax = f.value(max); [BUGGY] if (Math.abs(yMax) <= functionValueAccuracy) { [BUGGY] setResult(yMax, 0); return result; }  if (yInitial * yMax < 0) { return solve(f, initial, yInitial, max, yMax, initial, yInitial); }  [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max final double initial [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double initial max min yInitial yMax yMin  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	126	126	1	replace	
22	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return result; }  if (yInitial * yMin < 0) { return solve(f, min, yMin, initial, yInitial, min, yMin); }  double yMax = f.value(max); [BUGGY] [BUGGY] if (Math.abs(yMax) <= functionValueAccuracy) { setResult(yMax, 0); return result; }  if (yInitial * yMax < 0) { return solve(f, initial, yInitial, max, yMax, initial, yInitial); }  [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max final double initial [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double initial max min yInitial yMax yMin  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	126	126	1	add	
23	[BUG] [BUGGY] if (yInitial * yMax < 0) { [FE] AssertionFailedError [CONTEXT] }  double yMax = f.value(max); if (Math.abs(yMax) <= functionValueAccuracy) { setResult(yMax, 0); return result; }  [BUGGY] if (yInitial * yMax < 0) { [BUGGY] return solve(f, initial, yInitial, max, yMax, initial, yInitial); }   return solve(f, min, yMin, max, yMax, initial, yInitial); } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max final double initial [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double initial max min yInitial yMax yMin  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	132	132	1	replace	
24	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] }  double yMax = f.value(max); if (Math.abs(yMax) <= functionValueAccuracy) { setResult(yMax, 0); return result; }  [BUGGY] [BUGGY] if (yInitial * yMax < 0) { return solve(f, initial, yInitial, max, yMax, initial, yInitial); }   return solve(f, min, yMin, max, yMax, initial, yInitial); } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max final double initial [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double initial max min yInitial yMax yMin  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	132	132	1	add	
25	[BUG] [BUGGY] if (Math.abs(yMin) <= functionValueAccuracy) { [FE] AssertionFailedError [CONTEXT] double ret = Double.NaN; double yMin = f.value(min); double yMax = f.value(max);  double sign = yMin * yMax; if (sign > 0) {  [BUGGY] if (Math.abs(yMin) <= functionValueAccuracy) { [BUGGY] setResult(min, 0); ret = min; } else if (Math.abs(yMax) <= functionValueAccuracy) { setResult(max, 0); ret = max; } else {  throw MathRuntimeException.createIllegalArgumentException( NON_BRACKETING_MESSAGE, min, max, yMin, yMax); } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	176	176	1	replace	
26	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] double ret = Double.NaN; double yMin = f.value(min); double yMax = f.value(max);  double sign = yMin * yMax; if (sign > 0) {  [BUGGY] [BUGGY] if (Math.abs(yMin) <= functionValueAccuracy) { setResult(min, 0); ret = min; } else if (Math.abs(yMax) <= functionValueAccuracy) { setResult(max, 0); ret = max; } else {  throw MathRuntimeException.createIllegalArgumentException( NON_BRACKETING_MESSAGE, min, max, yMin, yMax); } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	176	176	1	add	
27	[BUG] [BUGGY] } else if (Math.abs(yMax) <= functionValueAccuracy) { [FE] AssertionFailedError [CONTEXT] double yMin = f.value(min); double yMax = f.value(max);  double sign = yMin * yMax; if (sign > 0) {  if (Math.abs(yMin) <= functionValueAccuracy) { setResult(min, 0); ret = min; [BUGGY] } else if (Math.abs(yMax) <= functionValueAccuracy) { [BUGGY] setResult(max, 0); ret = max; } else {  throw MathRuntimeException.createIllegalArgumentException( NON_BRACKETING_MESSAGE, min, max, yMin, yMax); } } else if (sign < 0){  ret = solve(f, min, yMin, max, yMax, min, yMin); [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	179	179	1	replace	
28	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] double yMin = f.value(min); double yMax = f.value(max);  double sign = yMin * yMax; if (sign > 0) {  if (Math.abs(yMin) <= functionValueAccuracy) { setResult(min, 0); ret = min; [BUGGY] [BUGGY] } else if (Math.abs(yMax) <= functionValueAccuracy) { setResult(max, 0); ret = max; } else {  throw MathRuntimeException.createIllegalArgumentException( NON_BRACKETING_MESSAGE, min, max, yMin, yMax); } } else if (sign < 0){  ret = solve(f, min, yMin, max, yMax, min, yMin); [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	179	179	1	add	
29	[BUG] [BUGGY] delta = 0.5 * dx; [FE] AssertionFailedError [CONTEXT] if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) || p >= Math.abs(0.5 * oldDelta * p1)) {    [BUGGY] delta = 0.5 * dx; [BUGGY] oldDelta = delta; } else { oldDelta = delta; delta = p / p1; } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	286	286	1	replace	
30	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) || p >= Math.abs(0.5 * oldDelta * p1)) {    [BUGGY] [BUGGY] delta = 0.5 * dx; oldDelta = delta; } else { oldDelta = delta; delta = p / p1; } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	286	286	1	add	
31	[BUG] [BUGGY] oldDelta = delta; [FE] AssertionFailedError [CONTEXT] if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) || p >= Math.abs(0.5 * oldDelta * p1)) {    delta = 0.5 * dx; [BUGGY] oldDelta = delta; [BUGGY] } else { oldDelta = delta; delta = p / p1; } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	287	287	1	replace	
32	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) || p >= Math.abs(0.5 * oldDelta * p1)) {    delta = 0.5 * dx; [BUGGY] [BUGGY] oldDelta = delta; } else { oldDelta = delta; delta = p / p1; } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	287	287	1	add	
33	[BUG] [BUGGY] x1 = x1 + 0.5 * tolerance; [FE] AssertionFailedError [CONTEXT] delta = p / p1; } }  x0 = x1; y0 = y1;  if (Math.abs(delta) > tolerance) { x1 = x1 + delta; } else if (dx > 0.0) { [BUGGY] x1 = x1 + 0.5 * tolerance; [BUGGY] } else if (dx <= 0.0) { x1 = x1 - 0.5 * tolerance; } y1 = f.value(x1); if ((y1 > 0) == (y2 > 0)) { x2 = x0; y2 = y0; delta = x1 - x0; oldDelta = delta; } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.5773502691896258	300	300	1	replace	
34	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] delta = p / p1; } }  x0 = x1; y0 = y1;  if (Math.abs(delta) > tolerance) { x1 = x1 + delta; } else if (dx > 0.0) { [BUGGY] [BUGGY] x1 = x1 + 0.5 * tolerance; } else if (dx <= 0.0) { x1 = x1 - 0.5 * tolerance; } y1 = f.value(x1); if ((y1 > 0) == (y2 > 0)) { x2 = x0; y2 = y0; delta = x1 - x0; oldDelta = delta; } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.5773502691896258	300	300	1	add	
35	[BUG] [BUGGY] super(100, 1E-6); [FE] AssertionFailedError [CONTEXT] public BrentSolver() { [BUGGY] super(100, 1E-6); [BUGGY] } [CLASS] BrentSolver [METHOD] <init> [RETURN_TYPE] BrentSolver()  [VARIABLES] long serialVersionUID String NON_BRACKETING_MESSAGE boolean  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	61	61	1	replace	
36	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public BrentSolver() { [BUGGY] [BUGGY] super(100, 1E-6); } [CLASS] BrentSolver [METHOD] <init> [RETURN_TYPE] BrentSolver()  [VARIABLES] long serialVersionUID String NON_BRACKETING_MESSAGE boolean  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	61	61	1	add	
37	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] public BrentSolver() { super(100, 1E-6); [BUGGY] } [BUGGY]  [CLASS] BrentSolver [METHOD] <init> [RETURN_TYPE] BrentSolver()  [VARIABLES] long serialVersionUID String NON_BRACKETING_MESSAGE boolean  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	62	62	1	replace	
38	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public BrentSolver() { super(100, 1E-6); [BUGGY] [BUGGY] } [CLASS] BrentSolver [METHOD] <init> [RETURN_TYPE] BrentSolver()  [VARIABLES] long serialVersionUID String NON_BRACKETING_MESSAGE boolean  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	62	62	1	add	
39	[BUG] [BUGGY] double dx = x2 - x1; [FE] AssertionFailedError [CONTEXT] y1 = y2; y2 = y0; } if (Math.abs(y1) <= functionValueAccuracy) {    setResult(x1, i); return result; } [BUGGY] double dx = x2 - x1; [BUGGY] double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy); if (Math.abs(dx) <= tolerance) { setResult(x1, i); return result; } if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) {  delta = 0.5 * dx; [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	replace	
40	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] y1 = y2; y2 = y0; } if (Math.abs(y1) <= functionValueAccuracy) {    setResult(x1, i); return result; } [BUGGY] [BUGGY] double dx = x2 - x1; double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy); if (Math.abs(dx) <= tolerance) { setResult(x1, i); return result; } if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) {  delta = 0.5 * dx; [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	246	246	1	add	
41	[BUG] [BUGGY] double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy); [FE] AssertionFailedError [CONTEXT] y2 = y0; } if (Math.abs(y1) <= functionValueAccuracy) {    setResult(x1, i); return result; } double dx = x2 - x1; [BUGGY] double tolerance =    Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy); [BUGGY] Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy); if (Math.abs(dx) <= tolerance) { setResult(x1, i); return result; } if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) {  delta = 0.5 * dx; oldDelta = delta; [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	247	248	1	replace	
42	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] y2 = y0; } if (Math.abs(y1) <= functionValueAccuracy) {    setResult(x1, i); return result; } double dx = x2 - x1; [BUGGY] [BUGGY] double tolerance =    Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy); Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy); if (Math.abs(dx) <= tolerance) { setResult(x1, i); return result; } if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) {  delta = 0.5 * dx; oldDelta = delta; [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	247	248	1	add	
43	[BUG] [BUGGY] if (Math.abs(dx) <= tolerance) { [FE] AssertionFailedError [CONTEXT] if (Math.abs(y1) <= functionValueAccuracy) {    setResult(x1, i); return result; } double dx = x2 - x1; double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy); [BUGGY] if (Math.abs(dx) <= tolerance) { [BUGGY] setResult(x1, i); return result; } if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) {  delta = 0.5 * dx; oldDelta = delta; } else { double r3 = y1 / y0; [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	249	249	1	replace	
44	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (Math.abs(y1) <= functionValueAccuracy) {    setResult(x1, i); return result; } double dx = x2 - x1; double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy); [BUGGY] [BUGGY] if (Math.abs(dx) <= tolerance) { setResult(x1, i); return result; } if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) {  delta = 0.5 * dx; oldDelta = delta; } else { double r3 = y1 / y0; [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	249	249	1	add	
45	[BUG] [BUGGY] setResult(x1, i); [FE] AssertionFailedError [CONTEXT]    setResult(x1, i); return result; } double dx = x2 - x1; double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy); if (Math.abs(dx) <= tolerance) { [BUGGY] setResult(x1, i); [BUGGY] return result; } if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) {  delta = 0.5 * dx; oldDelta = delta; } else { double r3 = y1 / y0; double p; [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	250	250	1	replace	
46	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]    setResult(x1, i); return result; } double dx = x2 - x1; double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy); if (Math.abs(dx) <= tolerance) { [BUGGY] [BUGGY] setResult(x1, i); return result; } if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) {  delta = 0.5 * dx; oldDelta = delta; } else { double r3 = y1 / y0; double p; [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	250	250	1	add	
47	[BUG] [BUGGY] return result; [FE] AssertionFailedError [CONTEXT]   setResult(x1, i); return result; } double dx = x2 - x1; double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy); if (Math.abs(dx) <= tolerance) { setResult(x1, i); [BUGGY] return result; [BUGGY] } if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) {  delta = 0.5 * dx; oldDelta = delta; } else { double r3 = y1 / y0; double p; double p1; [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	replace	
48	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]   setResult(x1, i); return result; } double dx = x2 - x1; double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy); if (Math.abs(dx) <= tolerance) { setResult(x1, i); [BUGGY] [BUGGY] return result; } if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) {  delta = 0.5 * dx; oldDelta = delta; } else { double r3 = y1 / y0; double p; double p1; [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	251	251	1	add	
49	[BUG] [BUGGY] if ((Math.abs(oldDelta) < tolerance) ||  (Math.abs(y0) <= Math.abs(y1))) { [FE] AssertionFailedError [CONTEXT] setResult(x1, i); return result; } double dx = x2 - x1; double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy); if (Math.abs(dx) <= tolerance) { setResult(x1, i); return result; } [BUGGY] if ((Math.abs(oldDelta) < tolerance) ||     (Math.abs(y0) <= Math.abs(y1))) { [BUGGY] (Math.abs(y0) <= Math.abs(y1))) {  delta = 0.5 * dx; oldDelta = delta; } else { double r3 = y1 / y0; double p; double p1;   [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	replace	
50	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] setResult(x1, i); return result; } double dx = x2 - x1; double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy); if (Math.abs(dx) <= tolerance) { setResult(x1, i); return result; } [BUGGY] [BUGGY] if ((Math.abs(oldDelta) < tolerance) ||     (Math.abs(y0) <= Math.abs(y1))) { (Math.abs(y0) <= Math.abs(y1))) {  delta = 0.5 * dx; oldDelta = delta; } else { double r3 = y1 / y0; double p; double p1;   [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	253	254	1	add	
51	[BUG] [BUGGY] double r3 = y1 / y0; [FE] AssertionFailedError [CONTEXT] if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) {  delta = 0.5 * dx; oldDelta = delta; } else { [BUGGY] double r3 = y1 / y0; [BUGGY] double p; double p1;    if (x0 == x2) {  p = dx * r3; p1 = 1.0 - r3; } else { [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	259	259	1	replace	
52	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) {  delta = 0.5 * dx; oldDelta = delta; } else { [BUGGY] [BUGGY] double r3 = y1 / y0; double p; double p1;    if (x0 == x2) {  p = dx * r3; p1 = 1.0 - r3; } else { [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	259	259	1	add	
53	[BUG] [BUGGY] if (x0 == x2) { [FE] AssertionFailedError [CONTEXT]  delta = 0.5 * dx; oldDelta = delta; } else { double r3 = y1 / y0; double p; double p1;    [BUGGY] if (x0 == x2) { [BUGGY]  p = dx * r3; p1 = 1.0 - r3; } else {  double r1 = y0 / y2; double r2 = y1 / y2; p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0)); p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0); } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	265	265	1	replace	
54	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  delta = 0.5 * dx; oldDelta = delta; } else { double r3 = y1 / y0; double p; double p1;    [BUGGY] [BUGGY] if (x0 == x2) {  p = dx * r3; p1 = 1.0 - r3; } else {  double r1 = y0 / y2; double r2 = y1 / y2; p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0)); p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0); } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	265	265	1	add	
55	[BUG] [BUGGY] p = dx * r3; [FE] AssertionFailedError [CONTEXT] oldDelta = delta; } else { double r3 = y1 / y0; double p; double p1;    if (x0 == x2) {  [BUGGY] p = dx * r3; [BUGGY] p1 = 1.0 - r3; } else {  double r1 = y0 / y2; double r2 = y1 / y2; p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0)); p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0); } if (p > 0.0) { p1 = -p1; [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	267	267	1	replace	
56	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] oldDelta = delta; } else { double r3 = y1 / y0; double p; double p1;    if (x0 == x2) {  [BUGGY] [BUGGY] p = dx * r3; p1 = 1.0 - r3; } else {  double r1 = y0 / y2; double r2 = y1 / y2; p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0)); p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0); } if (p > 0.0) { p1 = -p1; [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	267	267	1	add	
57	[BUG] [BUGGY] p1 = 1.0 - r3; [FE] AssertionFailedError [CONTEXT] } else { double r3 = y1 / y0; double p; double p1;    if (x0 == x2) {  p = dx * r3; [BUGGY] p1 = 1.0 - r3; [BUGGY] } else {  double r1 = y0 / y2; double r2 = y1 / y2; p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0)); p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0); } if (p > 0.0) { p1 = -p1; } else { [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	268	268	1	replace	
58	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } else { double r3 = y1 / y0; double p; double p1;    if (x0 == x2) {  p = dx * r3; [BUGGY] [BUGGY] p1 = 1.0 - r3; } else {  double r1 = y0 / y2; double r2 = y1 / y2; p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0)); p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0); } if (p > 0.0) { p1 = -p1; } else { [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	268	268	1	add	
59	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  p = dx * r3; p1 = 1.0 - r3; } else {  double r1 = y0 / y2; double r2 = y1 / y2; p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0)); p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0); } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	276	276	1	replace	
60	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  p = dx * r3; p1 = 1.0 - r3; } else {  double r1 = y0 / y2; double r2 = y1 / y2; p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0)); p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0); } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	276	276	1	add	
61	[BUG] [BUGGY] p1 = -p1; [FE] AssertionFailedError [CONTEXT] p = dx * r3; p1 = 1.0 - r3; } else {  double r1 = y0 / y2; double r2 = y1 / y2; p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0)); p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0); } if (p > 0.0) { [BUGGY] p1 = -p1; [BUGGY] } else { p = -p; } if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) || p >= Math.abs(0.5 * oldDelta * p1)) {    delta = 0.5 * dx; oldDelta = delta; [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	277	277	1	replace	
62	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] p = dx * r3; p1 = 1.0 - r3; } else {  double r1 = y0 / y2; double r2 = y1 / y2; p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0)); p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0); } if (p > 0.0) { [BUGGY] [BUGGY] p1 = -p1; } else { p = -p; } if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) || p >= Math.abs(0.5 * oldDelta * p1)) {    delta = 0.5 * dx; oldDelta = delta; [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	277	277	1	add	
63	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (p > 0.0) { p1 = -p1; } else { p = -p; } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	281	281	1	replace	
64	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (p > 0.0) { p1 = -p1; } else { p = -p; } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	281	281	1	add	
65	[BUG] [BUGGY] x0 = x1; [FE] AssertionFailedError [CONTEXT]   delta = 0.5 * dx; oldDelta = delta; } else { oldDelta = delta; delta = p / p1; } }  [BUGGY] x0 = x1; [BUGGY] y0 = y1;  if (Math.abs(delta) > tolerance) { x1 = x1 + delta; } else if (dx > 0.0) { x1 = x1 + 0.5 * tolerance; } else if (dx <= 0.0) { x1 = x1 - 0.5 * tolerance; } y1 = f.value(x1); [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	replace	
66	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]   delta = 0.5 * dx; oldDelta = delta; } else { oldDelta = delta; delta = p / p1; } }  [BUGGY] [BUGGY] x0 = x1; y0 = y1;  if (Math.abs(delta) > tolerance) { x1 = x1 + delta; } else if (dx > 0.0) { x1 = x1 + 0.5 * tolerance; } else if (dx <= 0.0) { x1 = x1 - 0.5 * tolerance; } y1 = f.value(x1); [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	294	294	1	add	
67	[BUG] [BUGGY] y0 = y1; [FE] AssertionFailedError [CONTEXT]  delta = 0.5 * dx; oldDelta = delta; } else { oldDelta = delta; delta = p / p1; } }  x0 = x1; [BUGGY] y0 = y1; [BUGGY]  if (Math.abs(delta) > tolerance) { x1 = x1 + delta; } else if (dx > 0.0) { x1 = x1 + 0.5 * tolerance; } else if (dx <= 0.0) { x1 = x1 - 0.5 * tolerance; } y1 = f.value(x1); if ((y1 > 0) == (y2 > 0)) { [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	295	295	1	replace	
68	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  delta = 0.5 * dx; oldDelta = delta; } else { oldDelta = delta; delta = p / p1; } }  x0 = x1; [BUGGY] [BUGGY] y0 = y1;  if (Math.abs(delta) > tolerance) { x1 = x1 + delta; } else if (dx > 0.0) { x1 = x1 + 0.5 * tolerance; } else if (dx <= 0.0) { x1 = x1 - 0.5 * tolerance; } y1 = f.value(x1); if ((y1 > 0) == (y2 > 0)) { [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	295	295	1	add	
69	[BUG] [BUGGY] if (Math.abs(delta) > tolerance) { [FE] AssertionFailedError [CONTEXT] oldDelta = delta; } else { oldDelta = delta; delta = p / p1; } }  x0 = x1; y0 = y1;  [BUGGY] if (Math.abs(delta) > tolerance) { [BUGGY] x1 = x1 + delta; } else if (dx > 0.0) { x1 = x1 + 0.5 * tolerance; } else if (dx <= 0.0) { x1 = x1 - 0.5 * tolerance; } y1 = f.value(x1); if ((y1 > 0) == (y2 > 0)) { x2 = x0; y2 = y0; [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	297	297	1	replace	
70	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] oldDelta = delta; } else { oldDelta = delta; delta = p / p1; } }  x0 = x1; y0 = y1;  [BUGGY] [BUGGY] if (Math.abs(delta) > tolerance) { x1 = x1 + delta; } else if (dx > 0.0) { x1 = x1 + 0.5 * tolerance; } else if (dx <= 0.0) { x1 = x1 - 0.5 * tolerance; } y1 = f.value(x1); if ((y1 > 0) == (y2 > 0)) { x2 = x0; y2 = y0; [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	297	297	1	add	
71	[BUG] [BUGGY] x1 = x1 + delta; [FE] AssertionFailedError [CONTEXT] } else { oldDelta = delta; delta = p / p1; } }  x0 = x1; y0 = y1;  if (Math.abs(delta) > tolerance) { [BUGGY] x1 = x1 + delta; [BUGGY] } else if (dx > 0.0) { x1 = x1 + 0.5 * tolerance; } else if (dx <= 0.0) { x1 = x1 - 0.5 * tolerance; } y1 = f.value(x1); if ((y1 > 0) == (y2 > 0)) { x2 = x0; y2 = y0; delta = x1 - x0; [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	replace	
72	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } else { oldDelta = delta; delta = p / p1; } }  x0 = x1; y0 = y1;  if (Math.abs(delta) > tolerance) { [BUGGY] [BUGGY] x1 = x1 + delta; } else if (dx > 0.0) { x1 = x1 + 0.5 * tolerance; } else if (dx <= 0.0) { x1 = x1 - 0.5 * tolerance; } y1 = f.value(x1); if ((y1 > 0) == (y2 > 0)) { x2 = x0; y2 = y0; delta = x1 - x0; [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	298	298	1	add	
73	[BUG] [BUGGY] } else if (dx > 0.0) { [FE] AssertionFailedError [CONTEXT] oldDelta = delta; delta = p / p1; } }  x0 = x1; y0 = y1;  if (Math.abs(delta) > tolerance) { x1 = x1 + delta; [BUGGY] } else if (dx > 0.0) { [BUGGY] x1 = x1 + 0.5 * tolerance; } else if (dx <= 0.0) { x1 = x1 - 0.5 * tolerance; } y1 = f.value(x1); if ((y1 > 0) == (y2 > 0)) { x2 = x0; y2 = y0; delta = x1 - x0; oldDelta = delta; [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	replace	
74	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] oldDelta = delta; delta = p / p1; } }  x0 = x1; y0 = y1;  if (Math.abs(delta) > tolerance) { x1 = x1 + delta; [BUGGY] [BUGGY] } else if (dx > 0.0) { x1 = x1 + 0.5 * tolerance; } else if (dx <= 0.0) { x1 = x1 - 0.5 * tolerance; } y1 = f.value(x1); if ((y1 > 0) == (y2 > 0)) { x2 = x0; y2 = y0; delta = x1 - x0; oldDelta = delta; [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	299	299	1	add	
75	[BUG] [BUGGY] y1 = f.value(x1); [FE] AssertionFailedError [CONTEXT] x0 = x1; y0 = y1;  if (Math.abs(delta) > tolerance) { x1 = x1 + delta; } else if (dx > 0.0) { x1 = x1 + 0.5 * tolerance; } else if (dx <= 0.0) { x1 = x1 - 0.5 * tolerance; } [BUGGY] y1 = f.value(x1); [BUGGY] if ((y1 > 0) == (y2 > 0)) { x2 = x0; y2 = y0; delta = x1 - x0; oldDelta = delta; } i++; } throw new MaxIterationsExceededException(maximalIterationCount); } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	304	304	1	replace	
76	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] x0 = x1; y0 = y1;  if (Math.abs(delta) > tolerance) { x1 = x1 + delta; } else if (dx > 0.0) { x1 = x1 + 0.5 * tolerance; } else if (dx <= 0.0) { x1 = x1 - 0.5 * tolerance; } [BUGGY] [BUGGY] y1 = f.value(x1); if ((y1 > 0) == (y2 > 0)) { x2 = x0; y2 = y0; delta = x1 - x0; oldDelta = delta; } i++; } throw new MaxIterationsExceededException(maximalIterationCount); } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	304	304	1	add	
77	[BUG] [BUGGY] if ((y1 > 0) == (y2 > 0)) { [FE] AssertionFailedError [CONTEXT] y0 = y1;  if (Math.abs(delta) > tolerance) { x1 = x1 + delta; } else if (dx > 0.0) { x1 = x1 + 0.5 * tolerance; } else if (dx <= 0.0) { x1 = x1 - 0.5 * tolerance; } y1 = f.value(x1); [BUGGY] if ((y1 > 0) == (y2 > 0)) { [BUGGY] x2 = x0; y2 = y0; delta = x1 - x0; oldDelta = delta; } i++; } throw new MaxIterationsExceededException(maximalIterationCount); } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	305	305	1	replace	
78	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] y0 = y1;  if (Math.abs(delta) > tolerance) { x1 = x1 + delta; } else if (dx > 0.0) { x1 = x1 + 0.5 * tolerance; } else if (dx <= 0.0) { x1 = x1 - 0.5 * tolerance; } y1 = f.value(x1); [BUGGY] [BUGGY] if ((y1 > 0) == (y2 > 0)) { x2 = x0; y2 = y0; delta = x1 - x0; oldDelta = delta; } i++; } throw new MaxIterationsExceededException(maximalIterationCount); } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	305	305	1	add	
79	[BUG] [BUGGY] x2 = x0; [FE] AssertionFailedError [CONTEXT]  if (Math.abs(delta) > tolerance) { x1 = x1 + delta; } else if (dx > 0.0) { x1 = x1 + 0.5 * tolerance; } else if (dx <= 0.0) { x1 = x1 - 0.5 * tolerance; } y1 = f.value(x1); if ((y1 > 0) == (y2 > 0)) { [BUGGY] x2 = x0; [BUGGY] y2 = y0; delta = x1 - x0; oldDelta = delta; } i++; } throw new MaxIterationsExceededException(maximalIterationCount); } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	306	306	1	replace	
80	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  if (Math.abs(delta) > tolerance) { x1 = x1 + delta; } else if (dx > 0.0) { x1 = x1 + 0.5 * tolerance; } else if (dx <= 0.0) { x1 = x1 - 0.5 * tolerance; } y1 = f.value(x1); if ((y1 > 0) == (y2 > 0)) { [BUGGY] [BUGGY] x2 = x0; y2 = y0; delta = x1 - x0; oldDelta = delta; } i++; } throw new MaxIterationsExceededException(maximalIterationCount); } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	306	306	1	add	
81	[BUG] [BUGGY] y2 = y0; [FE] AssertionFailedError [CONTEXT] if (Math.abs(delta) > tolerance) { x1 = x1 + delta; } else if (dx > 0.0) { x1 = x1 + 0.5 * tolerance; } else if (dx <= 0.0) { x1 = x1 - 0.5 * tolerance; } y1 = f.value(x1); if ((y1 > 0) == (y2 > 0)) { x2 = x0; [BUGGY] y2 = y0; [BUGGY] delta = x1 - x0; oldDelta = delta; } i++; } throw new MaxIterationsExceededException(maximalIterationCount); } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	307	307	1	replace	
82	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (Math.abs(delta) > tolerance) { x1 = x1 + delta; } else if (dx > 0.0) { x1 = x1 + 0.5 * tolerance; } else if (dx <= 0.0) { x1 = x1 - 0.5 * tolerance; } y1 = f.value(x1); if ((y1 > 0) == (y2 > 0)) { x2 = x0; [BUGGY] [BUGGY] y2 = y0; delta = x1 - x0; oldDelta = delta; } i++; } throw new MaxIterationsExceededException(maximalIterationCount); } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	307	307	1	add	
83	[BUG] [BUGGY] delta = x1 - x0; [FE] AssertionFailedError [CONTEXT] x1 = x1 + delta; } else if (dx > 0.0) { x1 = x1 + 0.5 * tolerance; } else if (dx <= 0.0) { x1 = x1 - 0.5 * tolerance; } y1 = f.value(x1); if ((y1 > 0) == (y2 > 0)) { x2 = x0; y2 = y0; [BUGGY] delta = x1 - x0; [BUGGY] oldDelta = delta; } i++; } throw new MaxIterationsExceededException(maximalIterationCount); } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	308	308	1	replace	
84	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] x1 = x1 + delta; } else if (dx > 0.0) { x1 = x1 + 0.5 * tolerance; } else if (dx <= 0.0) { x1 = x1 - 0.5 * tolerance; } y1 = f.value(x1); if ((y1 > 0) == (y2 > 0)) { x2 = x0; y2 = y0; [BUGGY] [BUGGY] delta = x1 - x0; oldDelta = delta; } i++; } throw new MaxIterationsExceededException(maximalIterationCount); } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	308	308	1	add	
85	[BUG] [BUGGY] oldDelta = delta; [FE] AssertionFailedError [CONTEXT] } else if (dx > 0.0) { x1 = x1 + 0.5 * tolerance; } else if (dx <= 0.0) { x1 = x1 - 0.5 * tolerance; } y1 = f.value(x1); if ((y1 > 0) == (y2 > 0)) { x2 = x0; y2 = y0; delta = x1 - x0; [BUGGY] oldDelta = delta; [BUGGY] } i++; } throw new MaxIterationsExceededException(maximalIterationCount); } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	309	309	1	replace	
86	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } else if (dx > 0.0) { x1 = x1 + 0.5 * tolerance; } else if (dx <= 0.0) { x1 = x1 - 0.5 * tolerance; } y1 = f.value(x1); if ((y1 > 0) == (y2 > 0)) { x2 = x0; y2 = y0; delta = x1 - x0; [BUGGY] [BUGGY] oldDelta = delta; } i++; } throw new MaxIterationsExceededException(maximalIterationCount); } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	309	309	1	add	
87	[BUG] [BUGGY] i++; [FE] AssertionFailedError [CONTEXT] } else if (dx <= 0.0) { x1 = x1 - 0.5 * tolerance; } y1 = f.value(x1); if ((y1 > 0) == (y2 > 0)) { x2 = x0; y2 = y0; delta = x1 - x0; oldDelta = delta; } [BUGGY] i++; [BUGGY] } throw new MaxIterationsExceededException(maximalIterationCount); } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	311	311	1	replace	
88	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } else if (dx <= 0.0) { x1 = x1 - 0.5 * tolerance; } y1 = f.value(x1); if ((y1 > 0) == (y2 > 0)) { x2 = x0; y2 = y0; delta = x1 - x0; oldDelta = delta; } [BUGGY] [BUGGY] i++; } throw new MaxIterationsExceededException(maximalIterationCount); } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	311	311	1	add	
89	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] x1 = x1 - 0.5 * tolerance; } y1 = f.value(x1); if ((y1 > 0) == (y2 > 0)) { x2 = x0; y2 = y0; delta = x1 - x0; oldDelta = delta; } i++; [BUGGY] } [BUGGY] throw new MaxIterationsExceededException(maximalIterationCount); } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	312	312	1	replace	
90	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] x1 = x1 - 0.5 * tolerance; } y1 = f.value(x1); if ((y1 > 0) == (y2 > 0)) { x2 = x0; y2 = y0; delta = x1 - x0; oldDelta = delta; } i++; [BUGGY] [BUGGY] } throw new MaxIterationsExceededException(maximalIterationCount); } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	312	312	1	add	
91	[BUG] [BUGGY] clearResult(); [FE] AssertionFailedError [CONTEXT] FunctionEvaluationException { [BUGGY] clearResult(); [BUGGY] verifyInterval(min, max); double ret = Double.NaN; double yMin = f.value(min); double yMax = f.value(max);  double sign = yMin * yMax; if (sign > 0) { [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4082482904638631	164	164	1	replace	
92	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] FunctionEvaluationException { [BUGGY] [BUGGY] clearResult(); verifyInterval(min, max); double ret = Double.NaN; double yMin = f.value(min); double yMax = f.value(max);  double sign = yMin * yMax; if (sign > 0) { [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4082482904638631	164	164	1	add	
93	[BUG] [BUGGY] verifyInterval(min, max); [FE] AssertionFailedError [CONTEXT] FunctionEvaluationException { clearResult(); [BUGGY] verifyInterval(min, max); [BUGGY]  double ret = Double.NaN; double yMin = f.value(min); double yMax = f.value(max);  double sign = yMin * yMax; if (sign > 0) {  [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4082482904638631	165	165	1	replace	
94	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] FunctionEvaluationException { clearResult(); [BUGGY] [BUGGY] verifyInterval(min, max); double ret = Double.NaN; double yMin = f.value(min); double yMax = f.value(max);  double sign = yMin * yMax; if (sign > 0) {  [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4082482904638631	165	165	1	add	
95	[BUG] [BUGGY] double ret = Double.NaN; [FE] AssertionFailedError [CONTEXT] FunctionEvaluationException { clearResult(); verifyInterval(min, max); [BUGGY] double ret = Double.NaN; [BUGGY]  double yMin = f.value(min); double yMax = f.value(max);  double sign = yMin * yMax; if (sign > 0) {  if (Math.abs(yMin) <= functionValueAccuracy) { setResult(min, 0); [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4082482904638631	167	167	1	replace	
96	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] FunctionEvaluationException { clearResult(); verifyInterval(min, max); [BUGGY] [BUGGY] double ret = Double.NaN; double yMin = f.value(min); double yMax = f.value(max);  double sign = yMin * yMax; if (sign > 0) {  if (Math.abs(yMin) <= functionValueAccuracy) { setResult(min, 0); [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4082482904638631	167	167	1	add	
97	[BUG] [BUGGY] double yMin = f.value(min); [FE] AssertionFailedError [CONTEXT] FunctionEvaluationException { clearResult(); verifyInterval(min, max); double ret = Double.NaN; [BUGGY] double yMin = f.value(min); [BUGGY] double yMax = f.value(max);  double sign = yMin * yMax; if (sign > 0) {  if (Math.abs(yMin) <= functionValueAccuracy) { setResult(min, 0); ret = min; } else if (Math.abs(yMax) <= functionValueAccuracy) { [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4082482904638631	169	169	1	replace	
98	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] FunctionEvaluationException { clearResult(); verifyInterval(min, max); double ret = Double.NaN; [BUGGY] [BUGGY] double yMin = f.value(min); double yMax = f.value(max);  double sign = yMin * yMax; if (sign > 0) {  if (Math.abs(yMin) <= functionValueAccuracy) { setResult(min, 0); ret = min; } else if (Math.abs(yMax) <= functionValueAccuracy) { [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4082482904638631	169	169	1	add	
99	[BUG] [BUGGY] double yMax = f.value(max); [FE] AssertionFailedError [CONTEXT] FunctionEvaluationException { clearResult(); verifyInterval(min, max); double ret = Double.NaN; double yMin = f.value(min); [BUGGY] double yMax = f.value(max); [BUGGY]   double sign = yMin * yMax; if (sign > 0) {  if (Math.abs(yMin) <= functionValueAccuracy) { setResult(min, 0); ret = min; } else if (Math.abs(yMax) <= functionValueAccuracy) { setResult(max, 0); [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4082482904638631	170	170	1	replace	
100	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] FunctionEvaluationException { clearResult(); verifyInterval(min, max); double ret = Double.NaN; double yMin = f.value(min); [BUGGY] [BUGGY] double yMax = f.value(max);  double sign = yMin * yMax; if (sign > 0) {  if (Math.abs(yMin) <= functionValueAccuracy) { setResult(min, 0); ret = min; } else if (Math.abs(yMax) <= functionValueAccuracy) { setResult(max, 0); [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math73/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4082482904638631	170	170	1	add	
