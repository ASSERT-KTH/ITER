bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]  if  ((  expected.length  <  2)||(expected.length  >  observed.length))  {  [BUGGY]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	add	if  ((  expected.length  <  2)||(expected.length  >  observed.length))  {	if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  	compilable	  [FE]  AssertionFailedError  	1	6	replace
2	[BUG]  [BUGGY]  if  ((  expected.length  <  2)||(expected.length  >  observed.length))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]  if  ((  expected.length  <  2)||(expected.length  >  observed.length))  {  [BUGGY]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	if  ((  expected.length  <  2)||(expected.length  >  observed.length))  {	if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  	compilable	  [FE]  AssertionFailedError  	1	6	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]  if(expected.length  <  2)  {  [BUGGY]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	add	if(expected.length  <  2)  {	if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  	compilable	  [FE]  AssertionFailedError  	1	6	replace
4	[BUG]  [BUGGY]  if(expected.length  <  2)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]  if(expected.length  <  2)  {  [BUGGY]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	if(expected.length  <  2)  {	if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  	compilable	  [FE]  AssertionFailedError  	1	6	replace
5	[BUG]  [BUGGY]  if(expected.length  <  =  2  ||  (expected.length!=  observed.length))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]  if(expected.length  <  =  2  ||  (expected.length!=  observed.length))  {  [BUGGY]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	if(expected.length  <  =  2  ||  (expected.length!=  observed.length))  {	if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
6	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  observed  [FE]          AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]  if  ((  expected.length  <  2)||(expected.length  >=  observed.length))  {  [BUGGY]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	add	if  ((  expected.length  <  2)||(expected.length  >=  observed.length))  {	if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  	compilable	  [FE]  java.lang.IllegalArgumentException:  observed  	1	6	replace
7	[BUG]  [BUGGY]  if  ((  expected.length  <  2)||(expected.length  >=  observed.length))  {  [FE]  java.lang.IllegalArgumentException:  observed  [FE]          AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]  if  ((  expected.length  <  2)||(expected.length  >=  observed.length))  {  [BUGGY]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	if  ((  expected.length  <  2)||(expected.length  >=  observed.length))  {	if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  	compilable	  [FE]  java.lang.IllegalArgumentException:  observed  	1	6	replace
8	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]            AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]    [BUGGY]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	  	if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  	non-compiled	[CE]  illegal  start  of  type	1	None	replace
9	[BUG]  [BUGGY]    ((  expected  <  2)||(expected.length!=  observed.length)))  {  throw  new  IllegalArgumentException( ", ");  [CE]  not  a  statement  [FE]    AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]    ((  expected  <  2)||(expected.length!=  observed.length)))  {  throw  new  IllegalArgumentException( ", ");  [BUGGY]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	    ((  expected  <  2)||(expected.length!=  observed.length)))  {  throw  new  IllegalArgumentException( ", ");		non-compiled	[CE]  not  a  statement	2	None	add
10	[BUG]  [BUGGY]    ((  expected  <  2)||(expected.length!=  observed.length)))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrect ");  [CE]  not  a  statement  [FE]      AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]    ((  expected  <  2)||(expected.length!=  observed.length)))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrect ");  [BUGGY]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	    ((  expected  <  2)||(expected.length!=  observed.length)))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrect ");		non-compiled	[CE]  not  a  statement	2	None	add
11	[BUG]  [BUGGY]    ((  expected  <  2)||(expected.length  >=  observed.length)))  {  throw  new  IllegalArgumentException( ", ");  [CE]  not  a  statement  [FE]        AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]    ((  expected  <  2)||(expected.length  >=  observed.length)))  {  throw  new  IllegalArgumentException( ", ");  [BUGGY]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	    ((  expected  <  2)||(expected.length  >=  observed.length)))  {  throw  new  IllegalArgumentException( ", ");		non-compiled	[CE]  not  a  statement	2	None	add
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]    int  expectedLength  =  observed.length;  [BUGGY]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	add	    int  expectedLength  =  observed.length;		compilable	  [FE]  AssertionFailedError  	2	6	add
13	[BUG]  [BUGGY]    int  expectedLength  =  observed.length;  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]    int  expectedLength  =  observed.length;  [BUGGY]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	    int  expectedLength  =  observed.length;		compilable	  [FE]  AssertionFailedError  	2	6	add
14	[BUG]  [BUGGY]    long[]  observed  =  observed.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]    long[]  observed  =  observed.clone();  [BUGGY]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	    long[]  observed  =  observed.clone();		non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	2	None	add
15	[BUG]  [BUGGY]  if(expected.length  <  =  0  ||  (expected.length  >=  observed.length))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]  if(expected.length  <  =  0  ||  (expected.length  >=  observed.length))  {  [BUGGY]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	if(expected.length  <  =  0  ||  (expected.length  >=  observed.length))  {	if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
16	[BUG]  [BUGGY]  if(expected.length  <  =  0  ||  (expected.length!=  observed.length))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]  if(expected.length  <  =  0  ||  (expected.length!=  observed.length))  {  [BUGGY]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	if(expected.length  <  =  0  ||  (expected.length!=  observed.length))  {	if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]  if(expected.length  <  2  ||  (expected.length  >  observed.length))  {  [BUGGY]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	add	if(expected.length  <  2  ||  (expected.length  >  observed.length))  {	if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  	compilable	  [FE]  AssertionFailedError  	1	6	replace
18	[BUG]  [BUGGY]  if(expected.length  <  2  ||  (expected.length  >  observed.length))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]  if(expected.length  <  2  ||  (expected.length  >  observed.length))  {  [BUGGY]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	if(expected.length  <  2  ||  (expected.length  >  observed.length))  {	if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  	compilable	  [FE]  AssertionFailedError  	1	6	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]    int  expectedLength  =  observed.length  -  1;  [BUGGY]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	add	    int  expectedLength  =  observed.length  -  1;		compilable	  [FE]  AssertionFailedError  	2	6	add
20	[BUG]  [BUGGY]    int  expectedLength  =  observed.length  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]    int  expectedLength  =  observed.length  -  1;  [BUGGY]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	    int  expectedLength  =  observed.length  -  1;		compilable	  [FE]  AssertionFailedError  	2	6	add
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]    int  expectedLengths  =  observed.length;  [BUGGY]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	add	    int  expectedLengths  =  observed.length;		compilable	  [FE]  AssertionFailedError  	2	6	add
22	[BUG]  [BUGGY]    int  expectedLengths  =  observed.length;  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]    int  expectedLengths  =  observed.length;  [BUGGY]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	    int  expectedLengths  =  observed.length;		compilable	  [FE]  AssertionFailedError  	2	6	add
23	[BUG]  [BUGGY]    long[]  expected  =  new  long[1];  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]    long[]  expected  =  new  long[1];  [BUGGY]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	    long[]  expected  =  new  long[1];		non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	2	None	add
24	[BUG]  [BUGGY]    long[]  observed  =  getDistribution();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]    long[]  observed  =  getDistribution();  [BUGGY]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	    long[]  observed  =  getDistribution();		non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	2	None	add
25	[BUG]  [BUGGY]  if(expected  <  =  0  ||  expected.length!=  observed.length)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]  if(expected  <  =  0  ||  expected.length!=  observed.length)  {  [BUGGY]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	if(expected  <  =  0  ||  expected.length!=  observed.length)  {	if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
26	[BUG]  [BUGGY]  if(expected.length  <  =  0  ||  observed.length!=  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]  if(expected.length  <  =  0  ||  observed.length!=  0)  {  [BUGGY]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	if(expected.length  <  =  0  ||  observed.length!=  0)  {	if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]    int  expectedSq  =  observed.length;  [BUGGY]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	add	    int  expectedSq  =  observed.length;		compilable	  [FE]  AssertionFailedError  	2	6	add
28	[BUG]  [BUGGY]    int  expectedSq  =  observed.length;  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]    int  expectedSq  =  observed.length;  [BUGGY]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	    int  expectedSq  =  observed.length;		compilable	  [FE]  AssertionFailedError  	2	6	add
29	[BUG]  [BUGGY]    long[]  observed  =  new  long[size()  ];  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]    long[]  observed  =  new  long[size()  ];  [BUGGY]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	    long[]  observed  =  new  long[size()  ];		non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	2	None	add
30	[BUG]  [BUGGY]    int  expected  =  observed.length;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]    int  expected  =  observed.length;  [BUGGY]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	    int  expected  =  observed.length;		non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	2	None	add
