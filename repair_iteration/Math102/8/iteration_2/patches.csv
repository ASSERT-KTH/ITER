bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  while(i  >  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  while(i  >  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	while(i  >  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  while(sumSq    >    observed[i])    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
2	[BUG]  [BUGGY]  while(expected  >  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  while(expected  >  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	while(expected  >  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  while(sumSq    >    observed[i])    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
3	[BUG]  [BUGGY]  while(sumSq  >=  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  while(sumSq  >=  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	while(sumSq  >=  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  while(sumSq    >    observed[i])    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
4	[BUG]  [BUGGY]  while(sumSq  <  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  while(sumSq  <  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	while(sumSq  <  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  while(sumSq    >    observed[i])    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
5	[BUG]  [BUGGY]  return  sumSq  /  expected;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  expected;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  expected;	  return    sumSq    /    dev;    if(sumSq    >    observed[i])    {    if(!isPositive(expected)||!isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	107	None	replace
6	[BUG]  [BUGGY]  return  sumSq  /  observed[i];  [CE]  cannot  find  symbol  i  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  observed[i];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  observed[i];	  return    sumSq    /    dev;    if(sumSq    >    observed[i])    {    if(!isPositive(expected)||!isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  i	107	None	replace
7	[BUG]  [BUGGY]  while(!isPositive(expected)&&!isNegative(observed))  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  while(!isPositive(expected)&&!isNegative(observed))  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	while(!isPositive(expected)&&!isNegative(observed))  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  return    dev;    if(sumSq    >    sumSq)    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
8	[BUG]  [BUGGY]  if(sumSq  >  expected)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(sumSq  >  expected)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >  expected)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  return    dev;    if(sumSq    >    sumSq)    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
9	[BUG]  [BUGGY]  while(!isPositive(expected)&&!isNegative(observed))  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  while(!isPositive(expected)&&!isNegative(observed))  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	while(!isPositive(expected)&&!isNegative(observed))  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  return    dev;    if(sumSq    >    sumSq)    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
10	[BUG]  [BUGGY]  return  new  double[sumSq  *  observed[i];  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  double[sumSq  *  observed[i];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  *  observed[i];	  return    new    double[sumSq    *    dev];    	non-compiled	[CE]  ']'  expected	59	None	replace
11	[BUG]  [BUGGY]  return  new  long[sumSq  *  dev];  [CE]  possible  loss  of  precision  [FE]                    AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  long[sumSq  *  dev];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  long[sumSq  *  dev];	  return    new    double[sumSq    *    dev];    	non-compiled	[CE]  possible  loss  of  precision	59	None	replace
12	[BUG]  [BUGGY]  return  new  double[sumSq  *  dev  +  1];  [CE]  possible  loss  of  precision  [FE]                      AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  double[sumSq  *  dev  +  1];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  *  dev  +  1];	  return    new    double[sumSq    *    dev];    	non-compiled	[CE]  possible  loss  of  precision	59	None	replace
13	[BUG]  [BUGGY]  return  sumSq  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  return    sumSq    /    dev;    for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
14	[BUG]  [BUGGY]  else  if(sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  else  if(sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	else  if(sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  return    dev;    if(sumSq    >    sumSq)    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ")    +   "    expected    counts    must    be    non-negative    and    expected    counts    must    be    postive.   ");    }    	non-compiled	[CE]  	113	None	replace
15	[BUG]  [BUGGY]  while(!isPositive(expected)&&!isNegative(observed))  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ")+ "  expected  counts  must  be  non-negative  and  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  while(!isPositive(expected)&&!isNegative(observed))  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ")+ "  expected  counts  must  be  non-negative  and  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	while(!isPositive(expected)&&!isNegative(observed))  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ")+ "  expected  counts  must  be  non-negative  and	  return    dev;    if(sumSq    >    sumSq)    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ")    +   "    expected    counts    must    be    non-negative    and    expected    counts    must    be    postive.   ");    }    	non-compiled	[CE]  unclosed  string  literal	113	None	replace
16	[BUG]  [BUGGY]  while(!isPositive(expected)&&!isNegative(observed))  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ")+ "  expected  counts  must  be  non-negative  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  while(!isPositive(expected)&&!isNegative(observed))  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ")+ "  expected  counts  must  be  non-negative  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	while(!isPositive(expected)&&!isNegative(observed))  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ")+ "  expected  counts  must  be  non-negative	  return    dev;    if(sumSq    >    sumSq)    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ")    +   "    expected    counts    must    be    non-negative    and    expected    counts    must    be    postive.   ");    }    	non-compiled	[CE]  unclosed  string  literal	113	None	replace
17	[BUG]  [BUGGY]  if(sumSq  >  observed[i])  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(sumSq  >  observed[i])  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >  observed[i])  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  return    dev;    if(sumSq    >    sumSq)    {    if(!isPositive(expected)&&!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
18	[BUG]  [BUGGY]  if(sumSq  >  expected)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(sumSq  >  expected)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >  expected)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  return    dev;    if(sumSq    >    sumSq)    {    if(!isPositive(expected)&&!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
19	[BUG]  [BUGGY]  if(sumSq  >  observed.length)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(sumSq  >  observed.length)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >  observed.length)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  return    dev;    if(sumSq    >    sumSq)    {    if(!isPositive(expected)&&!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
20	[BUG]  [BUGGY]  return  sumSq  *  dev;  long[]  dev  =  observed.length;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  *  dev;  long[]  dev  =  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    *    dev;    long[]  dev  =  observed.length;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	23	None	add
21	[BUG]  [BUGGY]  return  sumSq  *  dev;  long[]  dev  =  observed[i].doubleValue();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  *  dev;  long[]  dev  =  observed[i].doubleValue();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    *    dev;    long[]  dev  =  observed[i].doubleValue();	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	23	None	add
22	[BUG]  [BUGGY]  return  sumSq  *  dev;  long[]  expected  =  observed.length;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  *  dev;  long[]  expected  =  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    *    dev;    long[]  expected  =  observed.length;	  	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	23	None	add
23	[BUG]  [BUGGY]  return  sumSq  *  dev;  long[]  dev  =  observed[i].getDistribution();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  *  dev;  long[]  dev  =  observed[i].getDistribution();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    *    dev;    long[]  dev  =  observed[i].getDistribution();	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	23	None	add
24	[BUG]  [BUGGY]  return  sumSq  *  dev;  long[]  dev  =  observed[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  *  dev;  long[]  dev  =  observed[i];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    *    dev;    long[]  dev  =  observed[i];	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	23	None	add
25	[BUG]  [BUGGY]  return  sumSq  -  dev  +  1;  long[]  expected  =  observed.length;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  dev  +  1;  long[]  expected  =  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    dev    +    1;    long[]  expected  =  observed.length;	  	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	72	None	add
26	[BUG]  [BUGGY]  return  sumSq  -  dev  +  1;  long[]  dev  =  observed.length;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  dev  +  1;  long[]  dev  =  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    dev    +    1;    long[]  dev  =  observed.length;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	72	None	add
27	[BUG]  [BUGGY]  return  sumSq  -  dev  +  1;  int  dev  =  sumSq  -  observed[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  dev  +  1;  int  dev  =  sumSq  -  observed[i];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    dev    +    1;    int  dev  =  sumSq  -  observed[i];	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	72	None	add
28	[BUG]  [BUGGY]  return  sumSq  -  dev  +  1;  long[]  dev  =  observed[i]  -  sumSq;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  dev  +  1;  long[]  dev  =  observed[i]  -  sumSq;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    dev    +    1;    long[]  dev  =  observed[i]  -  sumSq;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	72	None	add
29	[BUG]  [BUGGY]  return  sumSq  -  dev  +  1;  int  dev  =  sumSq  /  observed[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  dev  +  1;  int  dev  =  sumSq  /  observed[i];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    dev    +    1;    int  dev  =  sumSq  /  observed[i];	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	72	None	add
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  /  observed.length;	  return    sumSq    -    observed.length;    	compilable	  [FE]  AssertionFailedError  	124	6	replace
31	[BUG]  [BUGGY]  return  sumSq  /  observed.length;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  observed.length;	  return    sumSq    -    observed.length;    	compilable	  [FE]  AssertionFailedError  	124	6	replace
32	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  observed.length  -  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  -  observed.length  -  dev;	  return    sumSq    -    observed.length;    	compilable	  [FE]  AssertionFailedError  	124	6	replace
33	[BUG]  [BUGGY]  return  sumSq  -  observed.length  -  dev;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  observed.length  -  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  -  observed.length  -  dev;	  return    sumSq    -    observed.length;    	compilable	  [FE]  AssertionFailedError  	124	6	replace
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  observed.length  /  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  -  observed.length  /  dev;	  return    sumSq    -    observed.length;    	compilable	  [FE]  AssertionFailedError  	124	6	replace
35	[BUG]  [BUGGY]  return  sumSq  -  observed.length  /  dev;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  observed.length  /  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  -  observed.length  /  dev;	  return    sumSq    -    observed.length;    	compilable	  [FE]  AssertionFailedError  	124	6	replace
36	[BUG]  [BUGGY]  return  sumSq  /  dev  *  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  *  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev    *    observed.length;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	130	None	add
37	[BUG]  [BUGGY]  return  sumSq  /  dev  *  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  *  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev    *    observed.length;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	130	None	add
38	[BUG]  [BUGGY]  return  sumSq  /  dev  *  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  *  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev    *    observed.length;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	130	None	add
39	[BUG]  [BUGGY]  return  sumSq  /  dev  *  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||  isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  *  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||  isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev    *    observed.length;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||  isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	130	None	add
40	[BUG]  [BUGGY]  return  sumSq  /  dev  *  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  *  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev    *    observed.length;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	130	None	add
41	[BUG]  [BUGGY]  double  expected  =  sumSq  -  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  double  expected  =  sumSq  -  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	double  expected  =  sumSq  -  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  return    sumSq    -    dev;    for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
42	[BUG]  [BUGGY]  double  expected  =  sumSq  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  double  expected  =  sumSq  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	double  expected  =  sumSq  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  return    sumSq    -    dev;    for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
43	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  expected[i]);  }  [CE]  missing  return  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  expected[i]);  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  expected[i]);  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    ((    double)observed[i]    -    expected[i]);    }    	non-compiled	[CE]  missing  return  statement	34	None	replace
44	[BUG]  [BUGGY]  while(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  expected[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  while(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  expected[i]);  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	while(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  expected[i]);  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    ((    double)observed[i]    -    expected[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
45	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i];  i++)  {  sumSq  +=  ((  double)observed[i]  -  expected[i]);  }  [CE]  missing  return  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  for(int  i  =  0;  i  <  observed[i];  i++)  {  sumSq  +=  ((  double)observed[i]  -  expected[i]);  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  observed[i];  i++)  {  sumSq  +=  ((  double)observed[i]  -  expected[i]);  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    ((    double)observed[i]    -    expected[i]);    }    	non-compiled	[CE]  missing  return  statement	34	None	replace
46	[BUG]  [BUGGY]  return  sumSq  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  return    sumSq    +    dev;    for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)&&!isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
47	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)&&  isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)&&  isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)&&  isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||    isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
48	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  dev;  }  [CE]  missing  return  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  dev;  }	  return    sumSq    /    dev;    if(sumSq    >    dev)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    *    dev;    }    	non-compiled	[CE]  missing  return  statement	108	None	replace
49	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  dev;  }  [CE]  missing  return  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  dev;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  dev;  }	  return    sumSq    /    dev;    if(sumSq    >    dev)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    *    dev;    }    	non-compiled	[CE]  missing  return  statement	108	None	replace
50	[BUG]  [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)&&!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)&&!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)&&!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!isPositive(expected)&&!isNegative(sumSq))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	10	None	replace
51	[BUG]  [BUGGY]  return  sumSq;  long[]  dev  =  observed.length;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq;  long[]  dev  =  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq;  long[]  dev  =  observed.length;	  return    dev;    long[]    dev    =    observed.length;    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	30	None	replace
52	[BUG]  [BUGGY]  if(sumSq  >  sumSq)  {  return  dev;  long[]  dev  =  observed.length;  }  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(sumSq  >  sumSq)  {  return  dev;  long[]  dev  =  observed.length;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >  sumSq)  {  return  dev;  long[]  dev  =  observed.length;  }	  return    dev;    long[]    dev    =    observed.length;    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	30	None	replace
53	[BUG]  [BUGGY]  long[]  dev  =  observed.length;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  long[]  dev  =  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	long[]  dev  =  observed.length;	  return    dev;    long[]    dev    =    observed.length;    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	30	None	replace
54	[BUG]  [BUGGY]  if(sumSq  >  sumSq)  {  return  dev;  long[]  dev  =  observed.length;  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  1;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(sumSq  >  sumSq)  {  return  dev;  long[]  dev  =  observed.length;  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  1;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >  sumSq)  {  return  dev;  long[]  dev  =  observed.length;  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  1;  }	  return    dev;    long[]    dev    =    observed.length;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
55	[BUG]  [BUGGY]  return  sumSq  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  return    sumSq    /    dev;    for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)&&!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
56	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ")  in  case  of  non-negative  and  expected  counts  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ")  in  case  of  non-negative  and  expected  counts  [BUGGY]      return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ")  in  case  of  non-negative  and  expected  counts	  for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)&&!isNonNegative(sumSq))    {    throw    new    IllegalArgumentException(   "   ")    in    case    of    non-negative    and    expected    counts    must    be    	non-compiled	[CE]  	13	None	replace
57	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i].longValue();  }  [CE]  long  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i].longValue();  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i].longValue();  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i].longValue();    }    	non-compiled	[CE]  long  cannot  be  dereferenced	127	None	replace
58	[BUG]  [BUGGY]  while(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i].longValue();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  while(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i].longValue();  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	while(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i].longValue();  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i].longValue();    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
59	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  observed[i].longValue();  }  [CE]  long  cannot  be  dereferenced  [FE]                        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  observed[i].longValue();  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  observed[i].longValue();  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i].longValue();    }    	non-compiled	[CE]  long  cannot  be  dereferenced	127	None	replace
60	[BUG]  [BUGGY]  while(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  while(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i].doubleValue();  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	while(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i].doubleValue();  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i].longValue();    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
61	[BUG]  [BUGGY]  return  sumSq  +  observed[i]  /  dev;  [CE]  cannot  find  symbol  i  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  observed[i]  /  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  +  observed[i]  /  dev;	  return    sumSq    +    observed[i];    	non-compiled	[CE]  cannot  find  symbol  i	60	None	replace
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  observed[0];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  +  observed[0];	  return    sumSq    +    observed[i];    	compilable	  [FE]  AssertionFailedError  	60	6	replace
63	[BUG]  [BUGGY]  return  sumSq  +  observed[0];  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  observed[0];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  +  observed[0];	  return    sumSq    +    observed[i];    	compilable	  [FE]  AssertionFailedError  	60	6	replace
64	[BUG]  [BUGGY]  return  sumSq  +  observed[i]  -  dev;  [CE]  cannot  find  symbol  i  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  observed[i]  -  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  +  observed[i]  -  dev;	  return    sumSq    +    observed[i];    	non-compiled	[CE]  cannot  find  symbol  i	60	None	replace
65	[BUG]  [BUGGY]  long  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  long  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	long  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)&&!isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	46	None	replace
66	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)&&!isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	46	None	replace
67	[BUG]  [BUGGY]  long  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  long  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	long  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)&&!isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	46	None	replace
68	[BUG]  [BUGGY]  return  new  double[sumSq  +  observed[0]  /  sumSq;  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  double[sumSq  +  observed[0]  /  sumSq;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  +  observed[0]  /  sumSq;	  return    new    double[sumSq    +    observed[0];    	non-compiled	[CE]  ']'  expected	109	None	replace
69	[BUG]  [BUGGY]  return  new  double[sumSq  +  observed[0]  /  dev;  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  double[sumSq  +  observed[0]  /  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  +  observed[0]  /  dev;	  return    new    double[sumSq    +    observed[0];    	non-compiled	[CE]  ']'  expected	109	None	replace
70	[BUG]  [BUGGY]  return  new  double[sumSq  +  observed[1];  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  double[sumSq  +  observed[1];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  +  observed[1];	  return    new    double[sumSq    +    observed[0];    	non-compiled	[CE]  ']'  expected	109	None	replace
71	[BUG]  [BUGGY]  return  sumSq  /  dev  /  observed;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  /  observed;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  dev  /  observed;	  return    sumSq    /    dev    *    observed;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	22	None	replace
72	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  *  dev  /  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  *  dev  /  dev;	  return    sumSq    /    dev    *    observed;    	compilable	  [FE]  AssertionFailedError  	22	6	replace
73	[BUG]  [BUGGY]  return  sumSq  *  dev  /  dev;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  *  dev  /  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  *  dev  /  dev;	  return    sumSq    /    dev    *    observed;    	compilable	  [FE]  AssertionFailedError  	22	6	replace
74	[BUG]  [BUGGY]  return  sumSq  /  dev  +  1;  long[]  expected  =  observed.length;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  +  1;  long[]  expected  =  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev    +    1;    long[]  expected  =  observed.length;	  	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	25	None	add
75	[BUG]  [BUGGY]  return  sumSq  /  dev  +  1;  long[]  dev  =  observed.length;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  +  1;  long[]  dev  =  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev    +    1;    long[]  dev  =  observed.length;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	25	None	add
76	[BUG]  [BUGGY]  return  sumSq  /  dev  +  1;  int  dev  =  sumSq  /  observed[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  +  1;  int  dev  =  sumSq  /  observed[i];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev    +    1;    int  dev  =  sumSq  /  observed[i];	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	25	None	add
77	[BUG]  [BUGGY]  return  sumSq  /  dev  +  1;  long[]  dev  =  observed[i].getDistribution();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  +  1;  long[]  dev  =  observed[i].getDistribution();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev    +    1;    long[]  dev  =  observed[i].getDistribution();	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	25	None	add
78	[BUG]  [BUGGY]  return  sumSq  /  dev  +  1;  long[]  dev  =  observed[i]  -  sumSq;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  +  1;  long[]  dev  =  observed[i]  -  sumSq;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev    +    1;    long[]  dev  =  observed[i]  -  sumSq;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	25	None	add
79	[BUG]  [BUGGY]  long[]  dev  =  observed[i].doubleValue();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  long[]  dev  =  observed[i].doubleValue();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	long[]  dev  =  observed[i].doubleValue();	  return    sumSq    -    dev;    long[]    dev    =    observed[i].doubleValue();    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	18	None	replace
80	[BUG]  [BUGGY]  double  dev  =  sumSq  -  observed[i].doubleValue();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  double  dev  =  sumSq  -  observed[i].doubleValue();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	double  dev  =  sumSq  -  observed[i].doubleValue();	  return    sumSq    -    dev;    long[]    dev    =    observed[i].doubleValue();    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	18	None	replace
81	[BUG]  [BUGGY]  return  sumSq  -  expected[i];  long[]  dev  =  observed[i].doubleValue();  [CE]  cannot  find  symbol  i  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  expected[i];  long[]  dev  =  observed[i].doubleValue();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  -  expected[i];  long[]  dev  =  observed[i].doubleValue();	  return    sumSq    -    dev;    long[]    dev    =    observed[i].doubleValue();    	non-compiled	[CE]  cannot  find  symbol  i	18	None	replace
82	[BUG]  [BUGGY]  else  if(sumSq  >  observed[i])  {  return  dev;  }  [CE]  'else'  without  'if'  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  else  if(sumSq  >  observed[i])  {  return  dev;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	else  if(sumSq  >  observed[i])  {  return  dev;  }	  else    if(sumSq    >    sumSq)    {    return    dev;    }    	non-compiled	[CE]  'else'  without  'if'	1	None	replace
83	[BUG]  [BUGGY]  else  if(sumSq  >  observed.length)  {  return  dev;  }  [CE]  'else'  without  'if'  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  else  if(sumSq  >  observed.length)  {  return  dev;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	else  if(sumSq  >  observed.length)  {  return  dev;  }	  else    if(sumSq    >    sumSq)    {    return    dev;    }    	non-compiled	[CE]  'else'  without  'if'	1	None	replace
84	[BUG]  [BUGGY]  else  if(sumSq  >=  sumSq)  {  return  dev;  }  [CE]  'else'  without  'if'  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  else  if(sumSq  >=  sumSq)  {  return  dev;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	else  if(sumSq  >=  sumSq)  {  return  dev;  }	  else    if(sumSq    >    sumSq)    {    return    dev;    }    	non-compiled	[CE]  'else'  without  'if'	1	None	replace
85	[BUG]  [BUGGY]  long[]  dev  =  observed[i]  -  sumSq;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  long[]  dev  =  observed[i]  -  sumSq;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	long[]  dev  =  observed[i]  -  sumSq;	  return    sumSq    -    dev;    long[]    dev    =    observed[i]    -    sumSq;    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	20	None	replace
86	[BUG]  [BUGGY]  return  dev  -  sumSq;  long[]  dev  =  observed[i]  -  sumSq;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev  -  sumSq;  long[]  dev  =  observed[i]  -  sumSq;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  dev  -  sumSq;  long[]  dev  =  observed[i]  -  sumSq;	  return    sumSq    -    dev;    long[]    dev    =    observed[i]    -    sumSq;    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	20	None	replace
87	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev  /  sumSq;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  dev  /  sumSq;	  return    dev    -    sumSq;    	compilable	  [FE]  AssertionFailedError  	50	6	replace
88	[BUG]  [BUGGY]  return  dev  /  sumSq;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev  /  sumSq;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  dev  /  sumSq;	  return    dev    -    sumSq;    	compilable	  [FE]  AssertionFailedError  	50	6	replace
89	[BUG]  [BUGGY]  return  sumSq  +  observed.length;  long[]  dev  =  observed.length;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  observed.length;  long[]  dev  =  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  +  observed.length;  long[]  dev  =  observed.length;	  return    sumSq    +    dev;    long[]    dev    =    observed.length;    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	51	None	replace
90	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  *  dev  +  1;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  *  dev  +  1;	  return    sumSq    /    dev    +    1;    	compilable	  [FE]  AssertionFailedError  	26	6	replace
91	[BUG]  [BUGGY]  return  sumSq  *  dev  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  *  dev  +  1;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  *  dev  +  1;	  return    sumSq    /    dev    +    1;    	compilable	  [FE]  AssertionFailedError  	26	6	replace
92	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  *  1;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  /  dev  *  1;	  return    sumSq    /    dev    +    1;    	compilable	  [FE]  AssertionFailedError  	26	6	replace
93	[BUG]  [BUGGY]  return  sumSq  /  dev  *  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  *  1;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  dev  *  1;	  return    sumSq    /    dev    +    1;    	compilable	  [FE]  AssertionFailedError  	26	6	replace
94	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  *  2  +  1;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  /  dev  *  2  +  1;	  return    sumSq    /    dev    +    1;    	compilable	  [FE]  AssertionFailedError  	26	6	replace
95	[BUG]  [BUGGY]  return  sumSq  /  dev  *  2  +  1;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  *  2  +  1;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  dev  *  2  +  1;	  return    sumSq    /    dev    +    1;    	compilable	  [FE]  AssertionFailedError  	26	6	replace
96	[BUG]  [BUGGY]  long[]  expected  =  observed.length;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  long[]  expected  =  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	long[]  expected  =  observed.length;	  return    sumSq    /    dev;    long[]    expected    =    observed.length;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	40	None	replace
97	[BUG]  [BUGGY]  long[]  dev  =  x.longValue();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  long[]  dev  =  x.longValue();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	long[]  dev  =  x.longValue();	  return    sumSq    -    dev;    long[]    dev    =    x.longValue();    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	87	None	replace
98	[BUG]  [BUGGY]  return  sumSq  /  dev;  long[]  dev  =  x.longValue();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev;  long[]  dev  =  x.longValue();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  dev;  long[]  dev  =  x.longValue();	  return    sumSq    -    dev;    long[]    dev    =    x.longValue();    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	87	None	replace
99	[BUG]  [BUGGY]  return  sumSq  -  observed[i];  long[]  dev  =  x.longValue();  [CE]  cannot  find  symbol  i  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  observed[i];  long[]  dev  =  x.longValue();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  -  observed[i];  long[]  dev  =  x.longValue();	  return    sumSq    -    dev;    long[]    dev    =    x.longValue();    	non-compiled	[CE]  cannot  find  symbol  i	87	None	replace
100	[BUG]  [BUGGY]  double  dev  =  x.longValue();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  double  dev  =  x.longValue();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	double  dev  =  x.longValue();	  return    sumSq    -    dev;    long[]    dev    =    x.longValue();    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	87	None	replace
101	[BUG]  [BUGGY]  luate(sumSq,  observed[i]))  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  luate(sumSq,  observed[i]))  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	luate(sumSq,  observed[i]))  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  if(sumSq    ==    observed[i])    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	86	None	replace
102	[BUG]  [BUGGY]  while(!isPositive(expected)&&!isNegative(observed))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  while(!isPositive(expected)&&!isNegative(observed))  {  [BUGGY]      return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	while(!isPositive(expected)&&!isNegative(observed))  {	  if(sumSq    ==    observed[i])    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
103	[BUG]  [BUGGY]  return  dev  -  sumSq;  long[]  expected  =  observed.length;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev  -  sumSq;  long[]  expected  =  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    dev    -    sumSq;    long[]  expected  =  observed.length;	  	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	49	None	add
104	[BUG]  [BUGGY]  return  dev  -  sumSq;  double  sumSq  =  sumSq  +  observed[i].doubleValue();  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev  -  sumSq;  double  sumSq  =  sumSq  +  observed[i].doubleValue();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    dev    -    sumSq;    double  sumSq  =  sumSq  +  observed[i].doubleValue();	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	49	None	add
105	[BUG]  [BUGGY]  return  dev  -  sumSq;  int  sumSq  =  sumSq  +  observed[i];  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev  -  sumSq;  int  sumSq  =  sumSq  +  observed[i];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    dev    -    sumSq;    int  sumSq  =  sumSq  +  observed[i];	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	49	None	add
106	[BUG]  [BUGGY]  return  dev  -  sumSq;  int  sumSq  =  sumSq  +  observed.length;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev  -  sumSq;  int  sumSq  =  sumSq  +  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    dev    -    sumSq;    int  sumSq  =  sumSq  +  observed.length;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	49	None	add
107	[BUG]  [BUGGY]  return  dev  -  sumSq;  int  sumSq  =  sumSq  *  observed.length;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev  -  sumSq;  int  sumSq  =  sumSq  *  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    dev    -    sumSq;    int  sumSq  =  sumSq  *  observed.length;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	49	None	add
108	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  sumSq);  }  [CE]  missing  return  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  sumSq);  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  sumSq);  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    ((    double)observed[i]    -    sumSq);    }    	non-compiled	[CE]  missing  return  statement	37	None	replace
109	[BUG]  [BUGGY]  while(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  sumSq);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  while(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  sumSq);  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	while(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  sumSq);  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    ((    double)observed[i]    -    sumSq);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
110	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i]  -  sumSq;  i++)  {  sumSq  +=  ((  double)observed[i]  -  sumSq);  }  [CE]  missing  return  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  for(int  i  =  0;  i  <  observed[i]  -  sumSq;  i++)  {  sumSq  +=  ((  double)observed[i]  -  sumSq);  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  observed[i]  -  sumSq;  i++)  {  sumSq  +=  ((  double)observed[i]  -  sumSq);  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    ((    double)observed[i]    -    sumSq);    }    	non-compiled	[CE]  missing  return  statement	37	None	replace
111	[BUG]  [BUGGY]  if(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  dev;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  dev;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  dev;  }	  return    dev;    if(sumSq    >    sumSq)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    dev    *    sumSq;    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
112	[BUG]  [BUGGY]  if(dev  >  expected)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  expected[i];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(dev  >  expected)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  expected[i];  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(dev  >  expected)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  expected[i];  }	  return    dev;    if(sumSq    >    sumSq)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    dev    *    sumSq;    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
113	[BUG]  [BUGGY]  if(sumSq  >  observed.length)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  sumSq;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(sumSq  >  observed.length)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  sumSq;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >  observed.length)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  sumSq;  }	  return    dev;    if(sumSq    >    sumSq)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    dev    *    sumSq;    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
114	[BUG]  [BUGGY]  return  sumSq  -  sumSq;  int  sumSq  =(int)Math.rint(sumSq);  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  sumSq;  int  sumSq  =(int)Math.rint(sumSq);  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    sumSq;    int  sumSq  =(int)Math.rint(sumSq);	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	134	None	add
115	[BUG]  [BUGGY]  return  sumSq  -  sumSq;  int  sumSq  =(int)Math.floor(sumSq);  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  sumSq;  int  sumSq  =(int)Math.floor(sumSq);  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    sumSq;    int  sumSq  =(int)Math.floor(sumSq);	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	134	None	add
116	[BUG]  [BUGGY]  return  sumSq  -  sumSq;  long[]  expected  =  observed.length;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  sumSq;  long[]  expected  =  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    sumSq;    long[]  expected  =  observed.length;	  	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	134	None	add
117	[BUG]  [BUGGY]  return  sumSq  -  sumSq;  int  sumSq  =(int)Math.floor(expected[i]);  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  sumSq;  int  sumSq  =(int)Math.floor(expected[i]);  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    sumSq;    int  sumSq  =(int)Math.floor(expected[i]);	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	134	None	add
118	[BUG]  [BUGGY]  return  sumSq  -  sumSq;  int  sumSq  =(int)Math.rint(expected[i]);  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  sumSq;  int  sumSq  =(int)Math.rint(expected[i]);  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    sumSq;    int  sumSq  =(int)Math.rint(expected[i]);	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	134	None	add
119	[BUG]  [BUGGY]  return  sumSq;  long[]  dev  =  observed[i]  -  dev;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq;  long[]  dev  =  observed[i]  -  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq;  long[]  dev  =  observed[i]  -  dev;	  return    dev;    long[]    dev    =    observed[i]    -    sumSq;    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	33	None	replace
120	[BUG]  [BUGGY]  long[]  dev  =  observed[i]  /  sumSq;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  long[]  dev  =  observed[i]  /  sumSq;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	long[]  dev  =  observed[i]  /  sumSq;	  return    dev;    long[]    dev    =    observed[i]    -    sumSq;    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	33	None	replace
121	[BUG]  [BUGGY]  luate(sumSq,  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  luate(sumSq,  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	luate(sumSq,  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  if(sumSq!=    observed[i])    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	85	None	replace
122	[BUG]  [BUGGY]  return  sumSq  +  observed.length;  long[]  expected  =  observed.length;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  observed.length;  long[]  expected  =  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  +  observed.length;  long[]  expected  =  observed.length;	  return    sumSq    +    dev;    long[]    expected    =    observed.length;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	53	None	replace
123	[BUG]  [BUGGY]  return  new  long[sumSq  +  sumSq];  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  long[sumSq  +  sumSq];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  long[sumSq  +  sumSq];	  return    new    double[sumSq    +    sumSq];    	non-compiled	[CE]  possible  loss  of  precision	58	None	replace
124	[BUG]  [BUGGY]  return  new  double[sumSq  *  sumSq];  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  double[sumSq  *  sumSq];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  *  sumSq];	  return    new    double[sumSq    +    sumSq];    	non-compiled	[CE]  possible  loss  of  precision	58	None	replace
125	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  *  dev  +  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  *  dev  +  observed.length;	  return    sumSq    *    dev;    	compilable	  [FE]  AssertionFailedError  	24	6	replace
126	[BUG]  [BUGGY]  return  sumSq  *  dev  +  observed.length;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  *  dev  +  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  *  dev  +  observed.length;	  return    sumSq    *    dev;    	compilable	  [FE]  AssertionFailedError  	24	6	replace
127	[BUG]  [BUGGY]  return  sumSq  *  dev  +  observed[i];  [CE]  cannot  find  symbol  i  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  *  dev  +  observed[i];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  *  dev  +  observed[i];	  return    sumSq    *    dev;    	non-compiled	[CE]  cannot  find  symbol  i	24	None	replace
128	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  sumSq;  }  [CE]  missing  return  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  sumSq;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  sumSq;  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    *    sumSq;    }    	non-compiled	[CE]  missing  return  statement	128	None	replace
129	[BUG]  [BUGGY]  while(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  sumSq;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  while(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  sumSq;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	while(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  sumSq;  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    *    sumSq;    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
130	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i];  i++)  {  sumSq  +=  observed[i]  *  sumSq;  }  [CE]  missing  return  statement  [FE]                          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  for(int  i  =  0;  i  <  observed[i];  i++)  {  sumSq  +=  observed[i]  *  sumSq;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  observed[i];  i++)  {  sumSq  +=  observed[i]  *  sumSq;  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    *    sumSq;    }    	non-compiled	[CE]  missing  return  statement	128	None	replace
131	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  *  sumSq;  }  [CE]  missing  return  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  *  sumSq;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  *  sumSq;  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    *    sumSq;    }    	non-compiled	[CE]  missing  return  statement	128	None	replace
132	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  dev;  }  [CE]  missing  return  statement  [FE]                        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  dev;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  dev;  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    /    dev;    }    	non-compiled	[CE]  missing  return  statement	129	None	replace
133	[BUG]  [BUGGY]  while(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  dev;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  while(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  dev;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	while(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  dev;  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    /    dev;    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
134	[BUG]  [BUGGY]  while(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  dev;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  while(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	while(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  dev;  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    /    dev;    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
135	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [CE]  missing  return  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    /    dev;    }    	non-compiled	[CE]  missing  return  statement	129	None	replace
136	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }	  return    sumSq    +    dev;    for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNegative(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
137	[BUG]  [BUGGY]  return  sumSq  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }	  return    sumSq    +    dev;    for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNegative(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
138	[BUG]  [BUGGY]  double  expected  =  sumSq  +  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  double  expected  =  sumSq  +  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	double  expected  =  sumSq  +  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }	  return    sumSq    +    dev;    for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNegative(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
139	[BUG]  [BUGGY]  long  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  long  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	long  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }	  int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)&&!isNonNegative(sumSq))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	5	None	replace
140	[BUG]  [BUGGY]  return  expected  -  dev;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  expected  -  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  expected  -  dev;	  return    sumSq    -    dev;    if(sumSq    >    dev)    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	119	None	replace
141	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(sumSq)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(sumSq)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(sumSq)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(sumSq)||!isNegative(sumSq))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
142	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(sumSq)&&!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(sumSq)&&!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(sumSq)&&!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(sumSq)||!isNegative(sumSq))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
143	[BUG]  [BUGGY]  return  sumSq  /  expected;  long[]  dev  =  observed[i].getDistribution();  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  expected;  long[]  dev  =  observed[i].getDistribution();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  expected;  long[]  dev  =  observed[i].getDistribution();	  return    sumSq    /    dev;    long[]    dev    =    observed[i].getDistribution();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	41	None	replace
144	[BUG]  [BUGGY]  long[]  dev  =  observed[i].getDistribution();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  long[]  dev  =  observed[i].getDistribution();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	long[]  dev  =  observed[i].getDistribution();	  return    sumSq    /    dev;    long[]    dev    =    observed[i].getDistribution();    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	41	None	replace
145	[BUG]  [BUGGY]  return  sumSq  /  observed[i].getDistribution();  [CE]  cannot  find  symbol  i  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  observed[i].getDistribution();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  observed[i].getDistribution();	  return    sumSq    /    dev;    long[]    dev    =    observed[i].getDistribution();    	non-compiled	[CE]  cannot  find  symbol  i	41	None	replace
146	[BUG]  [BUGGY]  if(sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ")  + "  expected  counts  must  be  non-negative  and  expected  counts  must  be  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ")  + "  expected  counts  must  be  non-negative  and  expected  counts  must  be  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ")  + "  expected  counts  must  be  non-negative  and  expected  counts  must  be	  return    dev;    if(sumSq    >    sumSq)    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ")    +   "    expected    counts    must    be    non-negative    and    expected    counts    must    be    	non-compiled	[CE]  unclosed  string  literal	114	None	replace
147	[BUG]  [BUGGY]  if(sumSq  >  observed.length)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(sumSq  >  observed.length)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >  observed.length)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  return    dev;    if(sumSq    >    sumSq)    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ")    +   "    expected    counts    must    be    non-negative    and    expected    counts    must    be    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
148	[BUG]  [BUGGY]  if(sumSq  >  dev)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(sumSq  >  dev)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >  dev)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  return    dev;    if(sumSq    >    sumSq)    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ")    +   "    expected    counts    must    be    non-negative    and    expected    counts    must    be    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
149	[BUG]  [BUGGY]  return  new  long[sumSq  +  2];  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  long[sumSq  +  2];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  long[sumSq  +  2];	  return    new    double[sumSq    +    2];    	non-compiled	[CE]  possible  loss  of  precision	16	None	replace
150	[BUG]  [BUGGY]  return  new  double[sumSq  /  2];  [CE]  possible  loss  of  precision  [FE]                    AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  double[sumSq  /  2];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  /  2];	  return    new    double[sumSq    +    2];    	non-compiled	[CE]  possible  loss  of  precision	16	None	replace
151	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  estimated.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  for(int  i  =  0;  i  <  estimated.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  estimated.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)&&!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
152	[BUG]  [BUGGY]  return  sumSq  +  observed[i].doubleValue();  [CE]  cannot  find  symbol  i  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  observed[i].doubleValue();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  +  observed[i].doubleValue();	  return    sumSq    +    dev;    long[]    dev    =    observed[i].doubleValue();    	non-compiled	[CE]  cannot  find  symbol  i	52	None	replace
153	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  estimated[i]);  }  [CE]  cannot  find  symbol  estimated  [FE]                    AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  estimated[i]);  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  estimated[i]);  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    ((    double)observed[i]    -    estimated[i]);    }    	non-compiled	[CE]  cannot  find  symbol  estimated	35	None	replace
154	[BUG]  [BUGGY]  while(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  estimated[i]);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  while(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  estimated[i]);  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	while(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  estimated[i]);  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    ((    double)observed[i]    -    estimated[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
155	[BUG]  [BUGGY]  int  dev  =  sumSq  /(int)Math.floor(sumSq);  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  int  dev  =  sumSq  /(int)Math.floor(sumSq);  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	int  dev  =  sumSq  /(int)Math.floor(sumSq);	  return    dev;    int    dev    =    sumSq    /(int)Math.floor(sumSq);    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	32	None	replace
156	[BUG]  [BUGGY]  double  dev  =  sumSq  /(double)Math.floor(sumSq);  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  double  dev  =  sumSq  /(double)Math.floor(sumSq);  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	double  dev  =  sumSq  /(double)Math.floor(sumSq);	  return    dev;    int    dev    =    sumSq    /(int)Math.floor(sumSq);    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	32	None	replace
157	[BUG]  [BUGGY]  long  dev  =  sumSq  /(long)Math.floor(sumSq);  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  long  dev  =  sumSq  /(long)Math.floor(sumSq);  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	long  dev  =  sumSq  /(long)Math.floor(sumSq);	  return    dev;    int    dev    =    sumSq    /(int)Math.floor(sumSq);    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	32	None	replace
158	[BUG]  [BUGGY]  int  dev  =  sumSq  /(int)Math.floor(dev);  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  int  dev  =  sumSq  /(int)Math.floor(dev);  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	int  dev  =  sumSq  /(int)Math.floor(dev);	  return    dev;    int    dev    =    sumSq    /(int)Math.floor(sumSq);    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	32	None	replace
159	[BUG]  [BUGGY]  return  new  long[sumSq  +  1]  /  dev;  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  long[sumSq  +  1]  /  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  long[sumSq  +  1]  /  dev;	  return    new    double[sumSq    +    1]    /    dev;    	non-compiled	[CE]  possible  loss  of  precision	15	None	replace
160	[BUG]  [BUGGY]  return  new  double[sumSq  +  1]  /  observed[i];  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  double[sumSq  +  1]  /  observed[i];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  +  1]  /  observed[i];	  return    new    double[sumSq    +    1]    /    dev;    	non-compiled	[CE]  possible  loss  of  precision	15	None	replace
161	[BUG]  [BUGGY]  return  new  double[sumSq  +  1]  *  dev;  [CE]  possible  loss  of  precision  [FE]                    AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  double[sumSq  +  1]  *  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  +  1]  *  dev;	  return    new    double[sumSq    +    1]    /    dev;    	non-compiled	[CE]  possible  loss  of  precision	15	None	replace
162	[BUG]  [BUGGY]  return  sumSq  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }	  return    sumSq    /    dev;    for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNegative(sumSq))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
163	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&  isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&  isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&  isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)&&    isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	45	None	replace
164	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&  isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&  isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&  isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)&&    isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
165	[BUG]  [BUGGY]  return  sumSq  -  expected;  long[]  dev  =  observed[i].getDistribution();  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  expected;  long[]  dev  =  observed[i].getDistribution();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  -  expected;  long[]  dev  =  observed[i].getDistribution();	  return    sumSq    -    dev;    long[]    dev    =    observed[i].getDistribution();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	19	None	replace
166	[BUG]  [BUGGY]  double  dev  =  sumSq  -  observed[i].getDistribution();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  double  dev  =  sumSq  -  observed[i].getDistribution();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	double  dev  =  sumSq  -  observed[i].getDistribution();	  return    sumSq    -    dev;    long[]    dev    =    observed[i].getDistribution();    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	19	None	replace
167	[BUG]  [BUGGY]  long  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  long  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	long  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }	  int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)&&!isNegative(sumSq))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	11	None	replace
168	[BUG]  [BUGGY]  return  sumSq  +  dev  *  dev;  long[]  dev  =  observed.length;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  *  dev;  long[]  dev  =  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev    *    dev;    long[]  dev  =  observed.length;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	101	None	add
169	[BUG]  [BUGGY]  return  sumSq  +  dev  *  dev;  long[]  dev  =  observed[i].doubleValue();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  *  dev;  long[]  dev  =  observed[i].doubleValue();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev    *    dev;    long[]  dev  =  observed[i].doubleValue();	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	101	None	add
170	[BUG]  [BUGGY]  return  sumSq  +  dev  *  dev;  long[]  dev  =  observed[i].getDistribution();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  *  dev;  long[]  dev  =  observed[i].getDistribution();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev    *    dev;    long[]  dev  =  observed[i].getDistribution();	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	101	None	add
171	[BUG]  [BUGGY]  return  sumSq  +  dev  *  dev;  long[]  dev  =  observed[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  *  dev;  long[]  dev  =  observed[i];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev    *    dev;    long[]  dev  =  observed[i];	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	101	None	add
172	[BUG]  [BUGGY]  return  sumSq  +  dev  *  dev;  long[]  expected  =  observed.length;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  *  dev;  long[]  expected  =  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev    *    dev;    long[]  expected  =  observed.length;	  	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	101	None	add
173	[BUG]  [BUGGY]  return  sumSq  +  dev  /  dev;  long[]  dev  =  observed.length;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  /  dev;  long[]  dev  =  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev    /    dev;    long[]  dev  =  observed.length;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	99	None	add
174	[BUG]  [BUGGY]  return  sumSq  +  dev  /  dev;  long[]  dev  =  observed[i].doubleValue();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  /  dev;  long[]  dev  =  observed[i].doubleValue();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev    /    dev;    long[]  dev  =  observed[i].doubleValue();	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	99	None	add
175	[BUG]  [BUGGY]  return  sumSq  +  dev  /  dev;  long[]  dev  =  observed[i].getDistribution();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  /  dev;  long[]  dev  =  observed[i].getDistribution();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev    /    dev;    long[]  dev  =  observed[i].getDistribution();	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	99	None	add
176	[BUG]  [BUGGY]  return  sumSq  +  dev  /  dev;  long[]  dev  =  observed[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  /  dev;  long[]  dev  =  observed[i];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev    /    dev;    long[]  dev  =  observed[i];	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	99	None	add
177	[BUG]  [BUGGY]  return  sumSq  +  dev  /  dev;  long[]  dev  =  observed[i]  -  sumSq;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  /  dev;  long[]  dev  =  observed[i]  -  sumSq;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev    /    dev;    long[]  dev  =  observed[i]  -  sumSq;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	99	None	add
178	[BUG]  [BUGGY]  return  SumSquare.doubleValue(sumSq,  dev);  [CE]  cannot  find  symbol  SumSquare  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  SumSquare.doubleValue(sumSq,  dev);  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  SumSquare.doubleValue(sumSq,  dev);	  return    SumSquare.doubleValue(sumSq,    sumSq);    	non-compiled	[CE]  cannot  find  symbol  SumSquare	91	None	replace
179	[BUG]  [BUGGY]  return  SumSquare.doubleValue(sumSq,  observed);  [CE]  cannot  find  symbol  SumSquare  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  SumSquare.doubleValue(sumSq,  observed);  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  SumSquare.doubleValue(sumSq,  observed);	  return    SumSquare.doubleValue(sumSq,    sumSq);    	non-compiled	[CE]  cannot  find  symbol  SumSquare	91	None	replace
180	[BUG]  [BUGGY]  return  sumSq.doubleValue(sumSq,  observed);  [CE]  double  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq.doubleValue(sumSq,  observed);  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq.doubleValue(sumSq,  observed);	  return    SumSquare.doubleValue(sumSq,    sumSq);    	non-compiled	[CE]  double  cannot  be  dereferenced	91	None	replace
181	[BUG]  [BUGGY]  return  SumSquare.doubleValue(sumSq,  observed[i]);  [CE]  cannot  find  symbol  i  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  SumSquare.doubleValue(sumSq,  observed[i]);  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  SumSquare.doubleValue(sumSq,  observed[i]);	  return    SumSquare.doubleValue(sumSq,    sumSq);    	non-compiled	[CE]  cannot  find  symbol  i	91	None	replace
182	[BUG]  [BUGGY]  return  sumSq  +  observed.length;  long[]  observed  =  observed.length;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  observed.length;  long[]  observed  =  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    observed.length;    long[]  observed  =  observed.length;	  	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	132	None	add
183	[BUG]  [BUGGY]  return  sumSq  +  observed.length;  int  observed.length  =  observed.length;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  observed.length;  int  observed.length  =  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    observed.length;    int  observed.length  =  observed.length;	  	non-compiled	[CE]  ';'  expected	132	None	add
184	[BUG]  [BUGGY]  return  sumSq  +  observed.length;  int  observed.length  =  observed[i].length;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  observed.length;  int  observed.length  =  observed[i].length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    observed.length;    int  observed.length  =  observed[i].length;	  	non-compiled	[CE]  ';'  expected	132	None	add
185	[BUG]  [BUGGY]  return  sumSq  +  observed.length;  int  observed.length  =  observed[i];  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  observed.length;  int  observed.length  =  observed[i];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    observed.length;    int  observed.length  =  observed[i];	  	non-compiled	[CE]  ';'  expected	132	None	add
186	[BUG]  [BUGGY]  return  sumSq  +  observed.length;  int  observed.length  =  observed[0].length;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  observed.length;  int  observed.length  =  observed[0].length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    observed.length;    int  observed.length  =  observed[0].length;	  	non-compiled	[CE]  ';'  expected	132	None	add
187	[BUG]  [BUGGY]  long[]  dev  =  x.doubleValue();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  long[]  dev  =  x.doubleValue();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	long[]  dev  =  x.doubleValue();	  return    sumSq    -    dev;    long[]    dev    =    x.doubleValue();    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	88	None	replace
188	[BUG]  [BUGGY]  return  sumSq  /  dev;  long[]  dev  =  x.doubleValue();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev;  long[]  dev  =  x.doubleValue();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  dev;  long[]  dev  =  x.doubleValue();	  return    sumSq    -    dev;    long[]    dev    =    x.doubleValue();    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	88	None	replace
189	[BUG]  [BUGGY]  return  sumSq  -  observed[i];  long[]  dev  =  x.doubleValue();  [CE]  cannot  find  symbol  i  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  observed[i];  long[]  dev  =  x.doubleValue();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  -  observed[i];  long[]  dev  =  x.doubleValue();	  return    sumSq    -    dev;    long[]    dev    =    x.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  i	88	None	replace
190	[BUG]  [BUGGY]  double  dev  =  x.doubleValue();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  double  dev  =  x.doubleValue();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	double  dev  =  x.doubleValue();	  return    sumSq    -    dev;    long[]    dev    =    x.doubleValue();    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	88	None	replace
191	[BUG]  [BUGGY]  return  new  double[sumSq  +  sumSq  *  observed[i];  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  double[sumSq  +  sumSq  *  observed[i];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  +  sumSq  *  observed[i];	  return    new    double[sumSq    +    sumSq    *    dev];    	non-compiled	[CE]  ']'  expected	96	None	replace
192	[BUG]  [BUGGY]  return  new  long[sumSq  +  sumSq  *  dev];  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  long[sumSq  +  sumSq  *  dev];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  long[sumSq  +  sumSq  *  dev];	  return    new    double[sumSq    +    sumSq    *    dev];    	non-compiled	[CE]  possible  loss  of  precision	96	None	replace
193	[BUG]  [BUGGY]  return  new  double[sumSq  +  sumSq  /  dev];  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  double[sumSq  +  sumSq  /  dev];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  +  sumSq  /  dev];	  return    new    double[sumSq    +    sumSq    *    dev];    	non-compiled	[CE]  possible  loss  of  precision	96	None	replace
194	[BUG]  [BUGGY]  if(sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  return    dev;    if(sumSq    >    sumSq)    {    if(!isPositive(expected)||!isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ")    +   "    expected    counts    must    be    non-negative    and    expected    counts    must    be    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
195	[BUG]  [BUGGY]  while(!isPositive(expected)&&!isNonNegative(observed))  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  while(!isPositive(expected)&&!isNonNegative(observed))  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( "  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	while(!isPositive(expected)&&!isNonNegative(observed))  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( "	  return    dev;    if(sumSq    >    sumSq)    {    if(!isPositive(expected)||!isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ")    +   "    expected    counts    must    be    non-negative    and    expected    counts    must    be    	non-compiled	[CE]  unclosed  string  literal	84	None	replace
196	[BUG]  [BUGGY]  if(sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ")  + "  expected  counts  must  be  non-negative  and  expected  counts  must  be  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ")  + "  expected  counts  must  be  non-negative  and  expected  counts  must  be  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ")  + "  expected  counts  must  be  non-negative  and  expected  counts  must  be	  return    dev;    if(sumSq    >    sumSq)    {    if(!isPositive(expected)||!isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ")    +   "    expected    counts    must    be    non-negative    and    expected    counts    must    be    	non-compiled	[CE]  unclosed  string  literal	84	None	replace
197	[BUG]  [BUGGY]  if(sumSq  >  observed.length)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(sumSq  >  observed.length)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >  observed.length)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  return    dev;    if(sumSq    >    sumSq)    {    if(!isPositive(expected)||!isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ")    +   "    expected    counts    must    be    non-negative    and    expected    counts    must    be    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
198	[BUG]  [BUGGY]  return  sumSq  /  dev  +  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  +  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev    +    observed.length;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
199	[BUG]  [BUGGY]  return  sumSq  /  dev  +  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  +  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev    +    observed.length;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
200	[BUG]  [BUGGY]  return  sumSq  /  dev  +  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  +  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev    +    observed.length;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
201	[BUG]  [BUGGY]  return  sumSq  /  dev  +  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||  isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  +  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||  isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev    +    observed.length;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||  isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
202	[BUG]  [BUGGY]  return  sumSq  /  dev  +  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  +  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev    +    observed.length;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
203	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  sumSq;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  /  sumSq;	  return    sumSq    -    sumSq;    	compilable	  [FE]  AssertionFailedError  	135	6	replace
204	[BUG]  [BUGGY]  return  sumSq  /  sumSq;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  sumSq;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  sumSq;	  return    sumSq    -    sumSq;    	compilable	  [FE]  AssertionFailedError  	135	6	replace
205	[BUG]  [BUGGY]  return  sumSq  -  observed;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  observed;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  -  observed;	  return    sumSq    -    sumSq;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	135	None	replace
206	[BUG]  [BUGGY]  return  sumSq  /  dev;  long[]  dev  =  observed[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev;  long[]  dev  =  observed[i];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  dev;  long[]  dev  =  observed[i];	  return    sumSq    +    dev;    long[]    dev    =    observed[i];    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	55	None	replace
207	[BUG]  [BUGGY]  long[]  dev  =  observed[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  long[]  dev  =  observed[i];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	long[]  dev  =  observed[i];	  return    sumSq    +    dev;    long[]    dev    =    observed[i];    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	55	None	replace
208	[BUG]  [BUGGY]  return  sumSq  +  observed[i];  long[]  dev  =  observed[i];  [CE]  cannot  find  symbol  i  [FE]                    AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  observed[i];  long[]  dev  =  observed[i];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  +  observed[i];  long[]  dev  =  observed[i];	  return    sumSq    +    dev;    long[]    dev    =    observed[i];    	non-compiled	[CE]  cannot  find  symbol  i	55	None	replace
209	[BUG]  [BUGGY]  int  dev  =  sumSq  /  distribution.length;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  int  dev  =  sumSq  /  distribution.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	int  dev  =  sumSq  /  distribution.length;	  return    sumSq    -    dev;    int    dev    =    sumSq    /    distribution.length;    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	90	None	replace
210	[BUG]  [BUGGY]  double  dev  =  sumSq  /  distribution.length;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  double  dev  =  sumSq  /  distribution.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	double  dev  =  sumSq  /  distribution.length;	  return    sumSq    -    dev;    int    dev    =    sumSq    /    distribution.length;    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	90	None	replace
211	[BUG]  [BUGGY]  int  dev  =  sumSq  /  distributed.length;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  int  dev  =  sumSq  /  distributed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	int  dev  =  sumSq  /  distributed.length;	  return    sumSq    -    dev;    int    dev    =    sumSq    /    distribution.length;    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	90	None	replace
212	[BUG]  [BUGGY]  long  dev  =  sumSq  /  distribution.length;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  long  dev  =  sumSq  /  distribution.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	long  dev  =  sumSq  /  distribution.length;	  return    sumSq    -    dev;    int    dev    =    sumSq    /    distribution.length;    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	90	None	replace
213	[BUG]  [BUGGY]  return  new  long[sumSq  +  1]  /  2;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  long[sumSq  +  1]  /  2;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  long[sumSq  +  1]  /  2;	  return    new    long[sumSq    +    1];    	non-compiled	[CE]  possible  loss  of  precision	14	None	replace
214	[BUG]  [BUGGY]  if(sumSq  >  dev)  {  return  sumSq  +  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(sumSq  >  dev)  {  return  sumSq  +  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  Il  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >  dev)  {  return  sumSq  +  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  Il	  return    sumSq    +    dev;    for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  '('  or  '['  expected	68	None	replace
215	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  sumSq;  }  [CE]  missing  return  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  sumSq;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  sumSq;  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    dev    *    sumSq;    }    	non-compiled	[CE]  missing  return  statement	36	None	replace
216	[BUG]  [BUGGY]  while(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  sumSq;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  while(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  sumSq;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	while(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  sumSq;  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    dev    *    sumSq;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
217	[BUG]  [BUGGY]  while(expected[i]  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  sumSq;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  while(expected[i]  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  sumSq;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	while(expected[i]  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  sumSq;  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    dev    *    sumSq;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
218	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i];  i++)  {  sumSq  +=  dev  *  sumSq;  }  [CE]  missing  return  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  for(int  i  =  0;  i  <  observed[i];  i++)  {  sumSq  +=  dev  *  sumSq;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  observed[i];  i++)  {  sumSq  +=  dev  *  sumSq;  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    dev    *    sumSq;    }    	non-compiled	[CE]  missing  return  statement	36	None	replace
219	[BUG]  [BUGGY]  return  sumSq  /  dev  +  observed[i];  [CE]  cannot  find  symbol  i  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  +  observed[i];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  dev  +  observed[i];	  return    sumSq    /    dev    +    observed.length;    	non-compiled	[CE]  cannot  find  symbol  i	28	None	replace
220	[BUG]  [BUGGY]  return  sumSq  -  observed.length;  if(sumSq  >  observed.length)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  observed.length;  if(sumSq  >  observed.length)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    observed.length;    if(sumSq  >  observed.length)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	123	None	add
221	[BUG]  [BUGGY]  return  sumSq  -  observed.length;  if(sumSq  >  observed.length)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  observed.length;  if(sumSq  >  observed.length)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    observed.length;    if(sumSq  >  observed.length)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	123	None	add
222	[BUG]  [BUGGY]  return  sumSq  -  observed.length;  if(sumSq  >  observed.length)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  observed.length;  if(sumSq  >  observed.length)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    observed.length;    if(sumSq  >  observed.length)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	123	None	add
223	[BUG]  [BUGGY]  return  sumSq  -  observed.length;  if(sumSq  >  observed.length)  {  if(!isPositive(expected)||  isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  observed.length;  if(sumSq  >  observed.length)  {  if(!isPositive(expected)||  isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    observed.length;    if(sumSq  >  observed.length)  {  if(!isPositive(expected)||  isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	123	None	add
224	[BUG]  [BUGGY]  return  sumSq  -  observed.length;  if(sumSq  >  observed.length)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  dev;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  observed.length;  if(sumSq  >  observed.length)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    observed.length;    if(sumSq  >  observed.length)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  dev;  }	  	non-compiled	[CE]  illegal  start  of  expression	123	None	add
225	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ")  in  case  of  non-negative  and  expected  counts  must  be  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ")  in  case  of  non-negative  and  expected  counts  must  be  [BUGGY]      return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ")  in  case  of  non-negative  and  expected  counts  must  be	  for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNegative(sumSq))    {    throw    new    IllegalArgumentException(   "   ")    in    case    of    non-negative    and    expected    counts    must    be    	non-compiled	[CE]  	120	None	replace
226	[BUG]  [BUGGY]  return  SumSquare.valueOf(dev);  [CE]  cannot  find  symbol  SumSquare  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  SumSquare.valueOf(dev);  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  SumSquare.valueOf(dev);	  return    SumSquare.valueOf(sumSq);    	non-compiled	[CE]  cannot  find  symbol  SumSquare	93	None	replace
227	[BUG]  [BUGGY]  return  SumSquare.valueOf(sumSq  +  1);  [CE]  cannot  find  symbol  SumSquare  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  SumSquare.valueOf(sumSq  +  1);  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  SumSquare.valueOf(sumSq  +  1);	  return    SumSquare.valueOf(sumSq);    	non-compiled	[CE]  cannot  find  symbol  SumSquare	93	None	replace
228	[BUG]  [BUGGY]  return  SumSquare.valueOf(sumSq  +  dev);  [CE]  cannot  find  symbol  SumSquare  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  SumSquare.valueOf(sumSq  +  dev);  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  SumSquare.valueOf(sumSq  +  dev);	  return    SumSquare.valueOf(sumSq);    	non-compiled	[CE]  cannot  find  symbol  SumSquare	93	None	replace
229	[BUG]  [BUGGY]  long[]  dev  =  x.longValues();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  long[]  dev  =  x.longValues();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	long[]  dev  =  x.longValues();	  return    sumSq    -    dev;    long[]    dev    =    x.longValues();    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	89	None	replace
230	[BUG]  [BUGGY]  return  sumSq  /  dev;  long[]  dev  =  x.longValues();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev;  long[]  dev  =  x.longValues();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  dev;  long[]  dev  =  x.longValues();	  return    sumSq    -    dev;    long[]    dev    =    x.longValues();    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	89	None	replace
231	[BUG]  [BUGGY]  return  sumSq  -  observed[i];  long[]  dev  =  x.longValues();  [CE]  cannot  find  symbol  i  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  observed[i];  long[]  dev  =  x.longValues();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  -  observed[i];  long[]  dev  =  x.longValues();	  return    sumSq    -    dev;    long[]    dev    =    x.longValues();    	non-compiled	[CE]  cannot  find  symbol  i	89	None	replace
232	[BUG]  [BUGGY]  double  dev  =  sumSq  -  dev;  long[]  dev  =  x.longValues();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  double  dev  =  sumSq  -  dev;  long[]  dev  =  x.longValues();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	double  dev  =  sumSq  -  dev;  long[]  dev  =  x.longValues();	  return    sumSq    -    dev;    long[]    dev    =    x.longValues();    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	89	None	replace
233	[BUG]  [BUGGY]  return  sumSq  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  return    sumSq    /    dev;    for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
234	[BUG]  [BUGGY]  else  if(sumSq  <  =  observed.length)  {  return  dev;  }  [CE]  'else'  without  'if'  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  else  if(sumSq  <  =  observed.length)  {  return  dev;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	else  if(sumSq  <  =  observed.length)  {  return  dev;  }	  else    if(sumSq    <    =    sumSq)    {    return    dev;    }    	non-compiled	[CE]  'else'  without  'if'	2	None	replace
235	[BUG]  [BUGGY]  else  if(sumSq  <  =  observed.length)  {  return  sumSq;  }  [CE]  'else'  without  'if'  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  else  if(sumSq  <  =  observed.length)  {  return  sumSq;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	else  if(sumSq  <  =  observed.length)  {  return  sumSq;  }	  else    if(sumSq    <    =    sumSq)    {    return    dev;    }    	non-compiled	[CE]  'else'  without  'if'	2	None	replace
236	[BUG]  [BUGGY]  else  if(sumSq  <  sumSq)  {  return  dev;  }  [CE]  'else'  without  'if'  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  else  if(sumSq  <  sumSq)  {  return  dev;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	else  if(sumSq  <  sumSq)  {  return  dev;  }	  else    if(sumSq    <    =    sumSq)    {    return    dev;    }    	non-compiled	[CE]  'else'  without  'if'	2	None	replace
237	[BUG]  [BUGGY]  else  if(sumSq  <  =  observed)  {  return  dev;  }  [CE]  'else'  without  'if'  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  else  if(sumSq  <  =  observed)  {  return  dev;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	else  if(sumSq  <  =  observed)  {  return  dev;  }	  else    if(sumSq    <    =    sumSq)    {    return    dev;    }    	non-compiled	[CE]  'else'  without  'if'	2	None	replace
238	[BUG]  [BUGGY]  return  sumSq  +  dev  *  observed[i];  [CE]  cannot  find  symbol  i  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  *  observed[i];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  +  dev  *  observed[i];	  return    sumSq    +    dev    *    observed.length;    	non-compiled	[CE]  cannot  find  symbol  i	63	None	replace
239	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  /  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  +  dev  /  observed.length;	  return    sumSq    +    dev    *    observed.length;    	compilable	  [FE]  AssertionFailedError  	63	6	replace
240	[BUG]  [BUGGY]  return  sumSq  +  dev  /  observed.length;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  /  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  +  dev  /  observed.length;	  return    sumSq    +    dev    *    observed.length;    	compilable	  [FE]  AssertionFailedError  	63	6	replace
241	[BUG]  [BUGGY]  return  sumSq  /  observed.length;  long[]  dev  =  observed.length;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  observed.length;  long[]  dev  =  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  observed.length;  long[]  dev  =  observed.length;	  return    sumSq    /    dev;    long[]    dev    =    observed.length;    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	38	None	replace
242	[BUG]  [BUGGY]  return  sumSq  /  expected;  long[]  dev  =  observed.length;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  expected;  long[]  dev  =  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  expected;  long[]  dev  =  observed.length;	  return    sumSq    /    dev;    long[]    dev    =    observed.length;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	38	None	replace
243	[BUG]  [BUGGY]  return  new  long[sumSq  +  observed[i];  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  long[sumSq  +  observed[i];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  long[sumSq  +  observed[i];	  return    new    long[sumSq    +    dev];    	non-compiled	[CE]  ']'  expected	57	None	replace
244	[BUG]  [BUGGY]  return  sumSq  +  observed  *  sumSq;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  observed  *  sumSq;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  +  observed  *  sumSq;	  return    sumSq    +    dev    *    observed;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	61	None	replace
245	[BUG]  [BUGGY]  return  sumSq  +  dev  /  observed;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  /  observed;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  +  dev  /  observed;	  return    sumSq    +    dev    *    observed;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	61	None	replace
246	[BUG]  [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!isPositive(expected)&&!isNonNegative(sumSq))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	4	None	replace
247	[BUG]  [BUGGY]  return  sumSq  +  dev  *  observed.length;  long[]  observed  =  observed.length;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  *  observed.length;  long[]  observed  =  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev    *    observed.length;    long[]  observed  =  observed.length;	  	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	62	None	add
248	[BUG]  [BUGGY]  return  sumSq  +  dev  *  observed.length;  long[]  observed  =  observed.length  -  sumSq;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  *  observed.length;  long[]  observed  =  observed.length  -  sumSq;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev    *    observed.length;    long[]  observed  =  observed.length  -  sumSq;	  	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	62	None	add
249	[BUG]  [BUGGY]  return  sumSq  +  dev  *  observed.length;  int  observed.length  =  observed.length;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  *  observed.length;  int  observed.length  =  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev    *    observed.length;    int  observed.length  =  observed.length;	  	non-compiled	[CE]  ';'  expected	62	None	add
250	[BUG]  [BUGGY]  return  sumSq  +  dev  *  observed.length;  int  observed.length  =  observed.length  -  sumSq;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  *  observed.length;  int  observed.length  =  observed.length  -  sumSq;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev    *    observed.length;    int  observed.length  =  observed.length  -  sumSq;	  	non-compiled	[CE]  ';'  expected	62	None	add
251	[BUG]  [BUGGY]  return  sumSq  +  dev  *  observed.length;  int  observed.length  =  observed[i].length;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  *  observed.length;  int  observed.length  =  observed[i].length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev    *    observed.length;    int  observed.length  =  observed[i].length;	  	non-compiled	[CE]  ';'  expected	62	None	add
252	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  observed[0];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  -  observed[0];	  return    sumSq    -    observed[i];    	compilable	  [FE]  AssertionFailedError  	48	6	replace
253	[BUG]  [BUGGY]  return  sumSq  -  observed[0];  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  observed[0];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  -  observed[0];	  return    sumSq    -    observed[i];    	compilable	  [FE]  AssertionFailedError  	48	6	replace
254	[BUG]  [BUGGY]  return  sumSq  -  observed[i].length;  [CE]  cannot  find  symbol  i  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  observed[i].length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  -  observed[i].length;	  return    sumSq    -    observed[i];    	non-compiled	[CE]  cannot  find  symbol  i	48	None	replace
255	[BUG]  [BUGGY]  return  new  double[sumSq  +  sumSq  *  observed.length];  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  double[sumSq  +  sumSq  *  observed.length];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  +  sumSq  *  observed.length];	  return    new    double[sumSq    +    dev    *    observed.length];    	non-compiled	[CE]  possible  loss  of  precision	110	None	replace
256	[BUG]  [BUGGY]  return  new  double[sumSq  +  observed.length  *  sumSq];  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  double[sumSq  +  observed.length  *  sumSq];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  +  observed.length  *  sumSq];	  return    new    double[sumSq    +    dev    *    observed.length];    	non-compiled	[CE]  possible  loss  of  precision	110	None	replace
257	[BUG]  [BUGGY]  return  new  long[sumSq  +  dev  *  observed.length];  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  long[sumSq  +  dev  *  observed.length];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  long[sumSq  +  dev  *  observed.length];	  return    new    double[sumSq    +    dev    *    observed.length];    	non-compiled	[CE]  possible  loss  of  precision	110	None	replace
258	[BUG]  [BUGGY]  return  new  long[sumSq  +  observed.length  *  sumSq];  [CE]  possible  loss  of  precision  [FE]                    AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  long[sumSq  +  observed.length  *  sumSq];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  long[sumSq  +  observed.length  *  sumSq];	  return    new    double[sumSq    +    dev    *    observed.length];    	non-compiled	[CE]  possible  loss  of  precision	110	None	replace
259	[BUG]  [BUGGY]  else  if(sumSq  >  observed[i])  {  return  sumSq;  }  [CE]  'else'  without  'if'  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  else  if(sumSq  >  observed[i])  {  return  sumSq;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	else  if(sumSq  >  observed[i])  {  return  sumSq;  }	  else    if(sumSq    >    dev)    {    return    sumSq;    }    	non-compiled	[CE]  'else'  without  'if'	3	None	replace
260	[BUG]  [BUGGY]  else  if(sumSq  >=  dev)  {  return  sumSq;  }  [CE]  'else'  without  'if'  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  else  if(sumSq  >=  dev)  {  return  sumSq;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	else  if(sumSq  >=  dev)  {  return  sumSq;  }	  else    if(sumSq    >    dev)    {    return    sumSq;    }    	non-compiled	[CE]  'else'  without  'if'	3	None	replace
261	[BUG]  [BUGGY]  else  if(sumSq  ==  dev)  {  return  sumSq;  }  [CE]  'else'  without  'if'  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  else  if(sumSq  ==  dev)  {  return  sumSq;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	else  if(sumSq  ==  dev)  {  return  sumSq;  }	  else    if(sumSq    >    dev)    {    return    sumSq;    }    	non-compiled	[CE]  'else'  without  'if'	3	None	replace
262	[BUG]  [BUGGY]  else  if(sumSq  <  =  dev)  {  return  sumSq;  }  [CE]  'else'  without  'if'  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  else  if(sumSq  <  =  dev)  {  return  sumSq;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	else  if(sumSq  <  =  dev)  {  return  sumSq;  }	  else    if(sumSq    >    dev)    {    return    sumSq;    }    	non-compiled	[CE]  'else'  without  'if'	3	None	replace
263	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i].doubleValue();  }  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i].doubleValue();  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i].doubleValue();  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i].doubleValue();    }    	non-compiled	[CE]  long  cannot  be  dereferenced	126	None	replace
264	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  observed[i].doubleValue();  }  [CE]  long  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  observed[i].doubleValue();  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  observed[i].doubleValue();  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i].doubleValue();    }    	non-compiled	[CE]  long  cannot  be  dereferenced	126	None	replace
265	[BUG]  [BUGGY]  sumSq  +=  observed[i].doubleValue();  [CE]  cannot  find  symbol  i  [FE]                      AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  sumSq  +=  observed[i].doubleValue();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	sumSq  +=  observed[i].doubleValue();	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i].doubleValue();    }    	non-compiled	[CE]  cannot  find  symbol  i	126	None	replace
266	[BUG]  [BUGGY]  return  sumSq  +  observed[i].getDistribution();  [CE]  cannot  find  symbol  i  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  observed[i].getDistribution();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  +  observed[i].getDistribution();	  return    sumSq    +    dev;    long[]    dev    =    observed[i].getDistribution();    	non-compiled	[CE]  cannot  find  symbol  i	54	None	replace
267	[BUG]  [BUGGY]  return  sumSq  +  expected;  long[]  dev  =  observed[i].getDistribution();  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  expected;  long[]  dev  =  observed[i].getDistribution();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  +  expected;  long[]  dev  =  observed[i].getDistribution();	  return    sumSq    +    dev;    long[]    dev    =    observed[i].getDistribution();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	54	None	replace
268	[BUG]  [BUGGY]  return  sumSq;  long[]  expected  =  observed.length;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq;  long[]  expected  =  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq;  long[]  expected  =  observed.length;	  return    dev;    long[]    expected    =    observed.length;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	31	None	replace
269	[BUG]  [BUGGY]  return  dev;  long[]  expected  =  sumSq;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev;  long[]  expected  =  sumSq;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  dev;  long[]  expected  =  sumSq;	  return    dev;    long[]    expected    =    observed.length;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	31	None	replace
270	[BUG]  [BUGGY]  long[]  expected  =  sumSq;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  long[]  expected  =  sumSq;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	long[]  expected  =  sumSq;	  return    dev;    long[]    expected    =    observed.length;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	31	None	replace
271	[BUG]  [BUGGY]  return  sumSq  /  total;  [CE]  cannot  find  symbol  total  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  total;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  total;	  return    sumSq    /    dev;    if(sumSq    >    dev)    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  total	104	None	replace
272	[BUG]  [BUGGY]  return  sumSq  -  observed.length;  long[]  dev  =  observed.length;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  observed.length;  long[]  dev  =  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  -  observed.length;  long[]  dev  =  observed.length;	  return    sumSq    -    dev;    long[]    dev    =    observed.length;    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	17	None	replace
273	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  observed.length  -  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  +  observed.length  -  dev;	  return    sumSq    +    observed.length;    	compilable	  [FE]  AssertionFailedError  	133	6	replace
274	[BUG]  [BUGGY]  return  sumSq  +  observed.length  -  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  observed.length  -  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  +  observed.length  -  dev;	  return    sumSq    +    observed.length;    	compilable	  [FE]  AssertionFailedError  	133	6	replace
275	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  observed.length  /  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  +  observed.length  /  dev;	  return    sumSq    +    observed.length;    	compilable	  [FE]  AssertionFailedError  	133	6	replace
276	[BUG]  [BUGGY]  return  sumSq  +  observed.length  /  dev;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  observed.length  /  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  +  observed.length  /  dev;	  return    sumSq    +    observed.length;    	compilable	  [FE]  AssertionFailedError  	133	6	replace
277	[BUG]  [BUGGY]  if(sumSq  >  dev)  {  return  sumSq  +  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(sumSq  >  dev)  {  return  sumSq  +  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  Il  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >  dev)  {  return  sumSq  +  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  Il	  return    sumSq    +    dev;    for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  '('  or  '['  expected	67	None	replace
278	[BUG]  [BUGGY]  return  sumSq  *  dev;  long[]  dev  =  observed[i]  -  sumSq;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  *  dev;  long[]  dev  =  observed[i]  -  sumSq;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  *  dev;  long[]  dev  =  observed[i]  -  sumSq;	  return    sumSq    /    dev;    long[]    dev    =    observed[i]    -    sumSq;    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	42	None	replace
279	[BUG]  [BUGGY]  return  sumSq  /  observed.length;  long[]  dev  =  observed[i]  -  sumSq;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  observed.length;  long[]  dev  =  observed[i]  -  sumSq;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  observed.length;  long[]  dev  =  observed[i]  -  sumSq;	  return    sumSq    /    dev;    long[]    dev    =    observed[i]    -    sumSq;    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	42	None	replace
280	[BUG]  [BUGGY]  if(sumSq  >  dev)  {  return  sumSq  +  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(sumSq  >  dev)  {  return  sumSq  +  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  Il  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >  dev)  {  return  sumSq  +  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  Il	  return    sumSq    +    dev;    for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)&&!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  '('  or  '['  expected	69	None	replace
281	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  *  dev  *  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  *  dev  *  observed.length;	  return    sumSq    /    dev    *    observed.length;    	compilable	  [FE]  AssertionFailedError  	131	6	replace
282	[BUG]  [BUGGY]  return  sumSq  *  dev  *  observed.length;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  *  dev  *  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  *  dev  *  observed.length;	  return    sumSq    /    dev    *    observed.length;    	compilable	  [FE]  AssertionFailedError  	131	6	replace
283	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  *  observed.length  /  dev  *  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  *  observed.length  /  dev  *  observed.length;	  return    sumSq    /    dev    *    observed.length;    	compilable	  [FE]  AssertionFailedError  	131	6	replace
284	[BUG]  [BUGGY]  return  sumSq  *  observed.length  /  dev  *  observed.length;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  *  observed.length  /  dev  *  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  *  observed.length  /  dev  *  observed.length;	  return    sumSq    /    dev    *    observed.length;    	compilable	  [FE]  AssertionFailedError  	131	6	replace
285	[BUG]  [BUGGY]  return  sumSq  /  dev  *  observed[i];  [CE]  cannot  find  symbol  i  [FE]        AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  *  observed[i];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  dev  *  observed[i];	  return    sumSq    /    dev    *    observed.length;    	non-compiled	[CE]  cannot  find  symbol  i	131	None	replace
286	[BUG]  [BUGGY]  return  new  long[sumSq  /  dev];  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  long[sumSq  /  dev];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  long[sumSq  /  dev];	  return    new    double[sumSq    /    dev];    	non-compiled	[CE]  possible  loss  of  precision	95	None	replace
287	[BUG]  [BUGGY]  return  new  double[sumSq  /  observed[i];  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  double[sumSq  /  observed[i];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  /  observed[i];	  return    new    double[sumSq    /    dev];    	non-compiled	[CE]  ']'  expected	95	None	replace
288	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  *  dev  /  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  +  dev  *  dev  /  dev;	  return    sumSq    +    dev    /    dev;    	compilable	  [FE]  AssertionFailedError  	100	6	replace
289	[BUG]  [BUGGY]  return  sumSq  +  dev  *  dev  /  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  *  dev  /  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  +  dev  *  dev  /  dev;	  return    sumSq    +    dev    /    dev;    	compilable	  [FE]  AssertionFailedError  	100	6	replace
290	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&  isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&  isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&  isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!isPositive(expected)||    isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
291	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||  isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||  isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||  isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!isPositive(expected)||    isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	97	None	replace
292	[BUG]  [BUGGY]  return  sumSq  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }	  return    sumSq    /    dev;    for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNonNegative(sumSq))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
293	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  For(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	For(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!isPositive(expected)&&!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	47	None	replace
294	[BUG]  [BUGGY]  if(sumSq  >  expected)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(sumSq  >  expected)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >  expected)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  return    dev;    if(sumSq    >    sumSq)    {    if(!isPositive(expected)||!isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
295	[BUG]  [BUGGY]  while(!isPositive(expected)&&!isNonNegative(observed))  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  while(!isPositive(expected)&&!isNonNegative(observed))  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	while(!isPositive(expected)&&!isNonNegative(observed))  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  return    dev;    if(sumSq    >    sumSq)    {    if(!isPositive(expected)||!isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
296	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  *  sumSq;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  /  dev  *  sumSq;	  return    sumSq    +    dev    *    dev;    	compilable	  [FE]  AssertionFailedError  	102	6	replace
297	[BUG]  [BUGGY]  return  sumSq  /  dev  *  sumSq;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  *  sumSq;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  dev  *  sumSq;	  return    sumSq    +    dev    *    dev;    	compilable	  [FE]  AssertionFailedError  	102	6	replace
298	[BUG]  [BUGGY]  double  expected  =  sumSq  -  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  double  expected  =  sumSq  -  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	double  expected  =  sumSq  -  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  return    sumSq    -    dev;    for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)&&!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
299	[BUG]  [BUGGY]  return  sumSq.doubleValue(sumSq);  [CE]  double  cannot  be  dereferenced  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq.doubleValue(sumSq);  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq.doubleValue(sumSq);	  return    SumSquare.doubleValue(sumSq);    	non-compiled	[CE]  double  cannot  be  dereferenced	92	None	replace
300	[BUG]  [BUGGY]  return  SumSquare.doubleValue(dev);  [CE]  cannot  find  symbol  SumSquare  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  SumSquare.doubleValue(dev);  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  SumSquare.doubleValue(dev);	  return    SumSquare.doubleValue(sumSq);    	non-compiled	[CE]  cannot  find  symbol  SumSquare	92	None	replace
301	[BUG]  [BUGGY]  return  new  double[sumSq  +  observed[i]  /  dev;  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  double[sumSq  +  observed[i]  /  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  +  observed[i]  /  dev;	  return    new    double[sumSq    +    observed[i];    	non-compiled	[CE]  ']'  expected	56	None	replace
302	[BUG]  [BUGGY]  return  new  double[sumSq  +  observed[i]  /  sumSq;  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  double[sumSq  +  observed[i]  /  sumSq;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  +  observed[i]  /  sumSq;	  return    new    double[sumSq    +    observed[i];    	non-compiled	[CE]  ']'  expected	56	None	replace
303	[BUG]  [BUGGY]  return  new  double[sumSq  +  observed[i]  *  dev;  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  double[sumSq  +  observed[i]  *  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  +  observed[i]  *  dev;	  return    new    double[sumSq    +    observed[i];    	non-compiled	[CE]  ']'  expected	56	None	replace
304	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  dev  *  1;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  -  dev  *  1;	  return    sumSq    -    dev    +    1;    	compilable	  [FE]  AssertionFailedError  	73	6	replace
305	[BUG]  [BUGGY]  return  sumSq  -  dev  *  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  dev  *  1;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  -  dev  *  1;	  return    sumSq    -    dev    +    1;    	compilable	  [FE]  AssertionFailedError  	73	6	replace
306	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  dev  *  2  +  1;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  -  dev  *  2  +  1;	  return    sumSq    -    dev    +    1;    	compilable	  [FE]  AssertionFailedError  	73	6	replace
307	[BUG]  [BUGGY]  return  sumSq  -  dev  *  2  +  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  dev  *  2  +  1;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  -  dev  *  2  +  1;	  return    sumSq    -    dev    +    1;    	compilable	  [FE]  AssertionFailedError  	73	6	replace
308	[BUG]  [BUGGY]  return  sumSq  /  expected;  long[]  dev  =  observed[i].doubleValue();  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  expected;  long[]  dev  =  observed[i].doubleValue();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  expected;  long[]  dev  =  observed[i].doubleValue();	  return    sumSq    /    dev;    long[]    dev    =    observed[i].doubleValue();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	39	None	replace
309	[BUG]  [BUGGY]  return  sumSq  /  observed[i].doubleValue();  [CE]  cannot  find  symbol  i  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  observed[i].doubleValue();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  observed[i].doubleValue();	  return    sumSq    /    dev;    long[]    dev    =    observed[i].doubleValue();    	non-compiled	[CE]  cannot  find  symbol  i	39	None	replace
310	[BUG]  [BUGGY]  int  dev  =  sumSq  /(int)Math.rint(dev);  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  int  dev  =  sumSq  /(int)Math.rint(dev);  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	int  dev  =  sumSq  /(int)Math.rint(dev);	  return    dev;    int    dev    =    sumSq    /(int)Math.rint(sumSq);    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	29	None	replace
311	[BUG]  [BUGGY]  int  dev  =  sumSq  /(int)Math.rint(sumSq);  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  int  dev  =  sumSq  /(int)Math.rint(sumSq);  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	int  dev  =  sumSq  /(int)Math.rint(sumSq);	  return    dev;    int    dev    =    sumSq    /(int)Math.rint(sumSq);    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	29	None	replace
312	[BUG]  [BUGGY]  long  dev  =  sumSq  /(long)Math.rint(sumSq);  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  long  dev  =  sumSq  /(long)Math.rint(sumSq);  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	long  dev  =  sumSq  /(long)Math.rint(sumSq);	  return    dev;    int    dev    =    sumSq    /(int)Math.rint(sumSq);    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	29	None	replace
313	[BUG]  [BUGGY]  double  dev  =  sumSq  /(double)Math.rint(sumSq);  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  double  dev  =  sumSq  /(double)Math.rint(sumSq);  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	double  dev  =  sumSq  /(double)Math.rint(sumSq);	  return    dev;    int    dev    =    sumSq    /(int)Math.rint(sumSq);    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	29	None	replace
314	[BUG]  [BUGGY]  int  dev  =  sumSq  -  observed[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  int  dev  =  sumSq  -  observed[i];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	int  dev  =  sumSq  -  observed[i];	  return    sumSq    -    dev;    int    dev    =    sumSq    -    observed[i];    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	21	None	replace
315	[BUG]  [BUGGY]  double  dev  =  sumSq  -  observed[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  double  dev  =  sumSq  -  observed[i];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	double  dev  =  sumSq  -  observed[i];	  return    sumSq    -    dev;    int    dev    =    sumSq    -    observed[i];    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	21	None	replace
316	[BUG]  [BUGGY]  int  dev  =  sumSq  /  observed[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  int  dev  =  sumSq  /  observed[i];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	int  dev  =  sumSq  /  observed[i];	  return    sumSq    -    dev;    int    dev    =    sumSq    -    observed[i];    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	21	None	replace
317	[BUG]  [BUGGY]  int  dev  =  observed[i]  -  sumSq;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                      AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  int  dev  =  observed[i]  -  sumSq;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	int  dev  =  observed[i]  -  sumSq;	  return    sumSq    -    dev;    int    dev    =    sumSq    -    observed[i];    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	21	None	replace
318	[BUG]  [BUGGY]  return  sumSq  /  dev.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev.doubleValue();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  dev.doubleValue();	  return    sumSq    /    dev;    if(sumSq    >    dev)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    *    dev;    }    	non-compiled	[CE]  double  cannot  be  dereferenced	108	None	replace
319	[BUG]  [BUGGY]  return  new  long[sumSq  +  dev  -  1];  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  long[sumSq  +  dev  -  1];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  long[sumSq  +  dev  -  1];	  return    new    long[sumSq    +    dev];    	non-compiled	[CE]  possible  loss  of  precision	57	None	replace
320	[BUG]  [BUGGY]  return  sumSq  +  observed.length;  long[]  dev  =  observed[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  observed.length;  long[]  dev  =  observed[i];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  +  observed.length;  long[]  dev  =  observed[i];	  return    sumSq    +    dev;    long[]    dev    =    observed[i];    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	55	None	replace
321	[BUG]  [BUGGY]  return  sumSq  +  observed;  long[]  dev  =  observed[i];  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  observed;  long[]  dev  =  observed[i];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  +  observed;  long[]  dev  =  observed[i];	  return    sumSq    +    dev;    long[]    dev    =    observed[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	55	None	replace
322	[BUG]  [BUGGY]  while(!sumSq  >  dev)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  while(!sumSq  >  dev)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	while(!sumSq  >  dev)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  return    dev;    if(sumSq    >    dev)    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
323	[BUG]  [BUGGY]  return  sumSq  -  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    observed.length;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	123	None	add
324	[BUG]  [BUGGY]  return  sumSq  -  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    observed.length;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	123	None	add
325	[BUG]  [BUGGY]  return  sumSq  -  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    observed.length;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	123	None	add
326	[BUG]  [BUGGY]  return  sumSq  -  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    observed.length;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	123	None	add
327	[BUG]  [BUGGY]  return  sumSq  -  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    observed.length;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	123	None	add
328	[BUG]  [BUGGY]  return  dev;  long[]  dev  =  observed[i]  /  sumSq;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev;  long[]  dev  =  observed[i]  /  sumSq;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  dev;  long[]  dev  =  observed[i]  /  sumSq;	  return    dev;    long[]    dev    =    observed[i]    -    sumSq;    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	33	None	replace
329	[BUG]  [BUGGY]  return  dev;  int  dev  =  observed[i]  -  sumSq;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev;  int  dev  =  observed[i]  -  sumSq;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  dev;  int  dev  =  observed[i]  -  sumSq;	  return    dev;    long[]    dev    =    observed[i]    -    sumSq;    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	33	None	replace
330	[BUG]  [BUGGY]  luate(x,  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  dev;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  luate(x,  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  dev;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	luate(x,  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  dev;  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    /    dev;    }    	non-compiled	[CE]  ';'  expected	129	None	replace
331	[BUG]  [BUGGY]  while(expected  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  dev;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  while(expected  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  dev;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	while(expected  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  dev;  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    /    dev;    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
332	[BUG]  [BUGGY]  luate(x,  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  dev;  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  luate(x,  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	luate(x,  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  dev;  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    /    dev;    }    	non-compiled	[CE]  ';'  expected	129	None	replace
333	[BUG]  [BUGGY]  return  new  double[sumSq  /  observed[0];  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  double[sumSq  /  observed[0];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  /  observed[0];	  return    new    double[sumSq    +    observed[0];    	non-compiled	[CE]  ']'  expected	109	None	replace
334	[BUG]  [BUGGY]  return  new  double[sumSq  +  expected[0];  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  double[sumSq  +  expected[0];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  +  expected[0];	  return    new    double[sumSq    +    observed[0];    	non-compiled	[CE]  ']'  expected	109	None	replace
335	[BUG]  [BUGGY]  luate(x,  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  luate(x,  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	luate(x,  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  if(sumSq    ==    observed[i])    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	86	None	replace
336	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  1;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  +  1;	  return    sumSq    +    dev;    if(sumSq    >    observed[i])    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	122	6	replace
337	[BUG]  [BUGGY]  return  sumSq  +  1;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  1;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  +  1;	  return    sumSq    +    dev;    if(sumSq    >    observed[i])    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	122	6	replace
338	[BUG]  [BUGGY]  return  sumSq  /  expected;  long[]  dev  =  observed[i]  -  sumSq;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  expected;  long[]  dev  =  observed[i]  -  sumSq;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  expected;  long[]  dev  =  observed[i]  -  sumSq;	  return    sumSq    /    dev;    long[]    dev    =    observed[i]    -    sumSq;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	42	None	replace
339	[BUG]  [BUGGY]  return  sumSq  /  dev;  long[]  dev  =  observed[i]  -  dev;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev;  long[]  dev  =  observed[i]  -  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  dev;  long[]  dev  =  observed[i]  -  dev;	  return    sumSq    /    dev;    long[]    dev    =    observed[i]    -    sumSq;    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	42	None	replace
340	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  *  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  /  dev  *  dev;	  return    sumSq    /    dev;    if(sumSq    >    dev)    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	104	6	replace
341	[BUG]  [BUGGY]  return  sumSq  /  dev  *  dev;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  *  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  dev  *  dev;	  return    sumSq    /    dev;    if(sumSq    >    dev)    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	104	6	replace
342	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  +  1L;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  /  dev  +  1L;	  return    sumSq    /    dev    +    1;    	compilable	  [FE]  AssertionFailedError  	26	6	replace
343	[BUG]  [BUGGY]  return  sumSq  /  dev  +  1L;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  +  1L;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  dev  +  1L;	  return    sumSq    /    dev    +    1;    	compilable	  [FE]  AssertionFailedError  	26	6	replace
344	[BUG]  [BUGGY]  return  expected;  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  expected;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  expected;	  return    dev;    long[]    expected    =    observed.length;    	non-compiled	[CE]  incompatible  types	31	None	replace
345	[BUG]  [BUGGY]  return  dev;  int[]  expected  =  observed.length;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev;  int[]  expected  =  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  dev;  int[]  expected  =  observed.length;	  return    dev;    long[]    expected    =    observed.length;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	31	None	replace
346	[BUG]  [BUGGY]  while(!isPositive(expected)&&!isNegative(observed))  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ")+ "  expected  counts  must  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  while(!isPositive(expected)&&!isNegative(observed))  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ")+ "  expected  counts  must  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	while(!isPositive(expected)&&!isNegative(observed))  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ")+ "  expected  counts  must	  return    dev;    if(sumSq    >    sumSq)    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ")    +   "    expected    counts    must    be    non-negative    and    expected    counts    must    be    postive.   ");    }    	non-compiled	[CE]  unclosed  string  literal	113	None	replace
347	[BUG]  [BUGGY]  return  sumSq  /  distribution.length;  int  dev  =  sumSq  /  distribution.length;  [CE]  cannot  find  symbol  length  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  distribution.length;  int  dev  =  sumSq  /  distribution.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  distribution.length;  int  dev  =  sumSq  /  distribution.length;	  return    sumSq    -    dev;    int    dev    =    sumSq    /    distribution.length;    	non-compiled	[CE]  cannot  find  symbol  length	90	None	replace
348	[BUG]  [BUGGY]  return  dev  -  sumSq;  int  dev  =  sumSq  /  distribution.length;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev  -  sumSq;  int  dev  =  sumSq  /  distribution.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  dev  -  sumSq;  int  dev  =  sumSq  /  distribution.length;	  return    sumSq    -    dev;    int    dev    =    sumSq    /    distribution.length;    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	90	None	replace
349	[BUG]  [BUGGY]  return  sumSq  /  dev;  int  dev  =  sumSq  /  distribution.length;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev;  int  dev  =  sumSq  /  distribution.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  dev;  int  dev  =  sumSq  /  distribution.length;	  return    sumSq    -    dev;    int    dev    =    sumSq    /    distribution.length;    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	90	None	replace
350	[BUG]  [BUGGY]  double  expected  =  sumSq  -  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  double  expected  =  sumSq  -  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	double  expected  =  sumSq  -  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }	  return    sumSq    -    dev;    for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
351	[BUG]  [BUGGY]  return  sumSq  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    *    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
352	[BUG]  [BUGGY]  return  sumSq  -  dev;  long[]  dev  =  observed[i]  -  dev;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  dev;  long[]  dev  =  observed[i]  -  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  -  dev;  long[]  dev  =  observed[i]  -  dev;	  return    sumSq    -    dev;    long[]    dev    =    observed[i]    -    sumSq;    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	20	None	replace
353	[BUG]  [BUGGY]  return  dev  -  sumSq;  long[]  dev  =  observed[i]  -  dev;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev  -  sumSq;  long[]  dev  =  observed[i]  -  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  dev  -  sumSq;  long[]  dev  =  observed[i]  -  dev;	  return    sumSq    -    dev;    long[]    dev    =    observed[i]    -    sumSq;    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	20	None	replace
354	[BUG]  [BUGGY]  return  sumSq  -  expected;  long[]  dev  =  observed[i]  -  sumSq;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  expected;  long[]  dev  =  observed[i]  -  sumSq;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  -  expected;  long[]  dev  =  observed[i]  -  sumSq;	  return    sumSq    -    dev;    long[]    dev    =    observed[i]    -    sumSq;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	20	None	replace
355	[BUG]  [BUGGY]  return  dev  -  sumSq;  long[]  dev  =  x.longValue();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev  -  sumSq;  long[]  dev  =  x.longValue();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  dev  -  sumSq;  long[]  dev  =  x.longValue();	  return    sumSq    -    dev;    long[]    dev    =    x.longValue();    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	87	None	replace
356	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  +  expected.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  /  dev  +  expected.length;	  return    sumSq    /    dev    +    observed.length;    	compilable	  [FE]  AssertionFailedError  	28	6	replace
357	[BUG]  [BUGGY]  return  sumSq  /  dev  +  expected.length;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  +  expected.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  dev  +  expected.length;	  return    sumSq    /    dev    +    observed.length;    	compilable	  [FE]  AssertionFailedError  	28	6	replace
358	[BUG]  [BUGGY]  return  sumSq  /  expected;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  expected;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  expected;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  return    sumSq    /    dev;    for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
359	[BUG]  [BUGGY]  return  sumSq  -  expected;  long[]  dev  =  observed[i].doubleValue();  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  expected;  long[]  dev  =  observed[i].doubleValue();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  -  expected;  long[]  dev  =  observed[i].doubleValue();	  return    sumSq    -    dev;    long[]    dev    =    observed[i].doubleValue();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	18	None	replace
360	[BUG]  [BUGGY]  return  SumSquare.doubleValue(sumSq,  sumSq  +  1);  [CE]  cannot  find  symbol  SumSquare  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  SumSquare.doubleValue(sumSq,  sumSq  +  1);  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  SumSquare.doubleValue(sumSq,  sumSq  +  1);	  return    SumSquare.doubleValue(sumSq,    sumSq);    	non-compiled	[CE]  cannot  find  symbol  SumSquare	91	None	replace
361	[BUG]  [BUGGY]  return  new  double[sumSq  *  2];  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  double[sumSq  *  2];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  *  2];	  return    new    double[sumSq    +    2];    	non-compiled	[CE]  possible  loss  of  precision	16	None	replace
362	[BUG]  [BUGGY]  return  sumSq  -  dev  +  1;  double  dev  =  sumSq  /  distribution.doubleValue();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  dev  +  1;  double  dev  =  sumSq  /  distribution.doubleValue();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    dev    +    1;    double  dev  =  sumSq  /  distribution.doubleValue();	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	72	None	add
363	[BUG]  [BUGGY]  return  sumSq  -  dev  +  1;  int  dev  =  sumSq  /  distribution.length;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  dev  +  1;  int  dev  =  sumSq  /  distribution.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    dev    +    1;    int  dev  =  sumSq  /  distribution.length;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	72	None	add
364	[BUG]  [BUGGY]  if(sumSq  >  dev)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  dev;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(sumSq  >  dev)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  dev;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >  dev)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  dev;  }	  return    dev;    if(sumSq    >    sumSq)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    dev    *    sumSq;    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
365	[BUG]  [BUGGY]  if(sumSq  >  observed.length)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  dev;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(sumSq  >  observed.length)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  dev;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >  observed.length)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  dev;  }	  return    dev;    if(sumSq    >    sumSq)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    dev    *    sumSq;    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
366	[BUG]  [BUGGY]  return  sumSq  -  expected[i];  [CE]  cannot  find  symbol  i  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  expected[i];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  -  expected[i];	  return    sumSq    -    observed[i];    	non-compiled	[CE]  cannot  find  symbol  i	48	None	replace
367	[BUG]  [BUGGY]  return  sumSq  -  observed[sq];  [CE]  cannot  find  symbol  sq  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  observed[sq];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  -  observed[sq];	  return    sumSq    -    observed[i];    	non-compiled	[CE]  cannot  find  symbol  sq	48	None	replace
368	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  *  sumSq;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  *  sumSq;	  return    sumSq    -    sumSq;    	compilable	  [FE]  AssertionFailedError  	135	6	replace
369	[BUG]  [BUGGY]  return  sumSq  *  sumSq;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  *  sumSq;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  *  sumSq;	  return    sumSq    -    sumSq;    	compilable	  [FE]  AssertionFailedError  	135	6	replace
370	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  sumSq;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  +  sumSq;	  return    sumSq    -    sumSq;    	compilable	  [FE]  AssertionFailedError  	135	6	replace
371	[BUG]  [BUGGY]  return  sumSq  +  sumSq;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  sumSq;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  +  sumSq;	  return    sumSq    -    sumSq;    	compilable	  [FE]  AssertionFailedError  	135	6	replace
372	[BUG]  [BUGGY]  if(sumSq  >  expected.length)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(sumSq  >  expected.length)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >  expected.length)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  return    dev;    if(sumSq    >    sumSq)    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
373	[BUG]  [BUGGY]  return  sumSq  /  expected;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  expected;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  expected;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  return    sumSq    /    dev;    for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)&&!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
374	[BUG]  [BUGGY]  return  sumSq  +  observed;  long[]  dev  =  observed.length;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  observed;  long[]  dev  =  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  +  observed;  long[]  dev  =  observed.length;	  return    sumSq    +    dev;    long[]    dev    =    observed.length;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	51	None	replace
375	[BUG]  [BUGGY]  return  sumSq  /  dev  +  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  +  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev    +    observed.length;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
376	[BUG]  [BUGGY]  return  sumSq  /  dev.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  dev.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }	  return    sumSq    /    dev;    for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNegative(sumSq))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
377	[BUG]  [BUGGY]  return  sumSq  +  dev  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev    *    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	101	None	add
378	[BUG]  [BUGGY]  return  sumSq  +  dev  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev    *    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	101	None	add
379	[BUG]  [BUGGY]  return  sumSq  +  dev  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev    *    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	101	None	add
380	[BUG]  [BUGGY]  return  sumSq  +  dev  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev    *    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	101	None	add
381	[BUG]  [BUGGY]  return  sumSq  +  dev  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev    *    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	101	None	add
382	[BUG]  [BUGGY]  return  sumSq  -  observed.length;  long[]  dev  =  x.doubleValue();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  observed.length;  long[]  dev  =  x.doubleValue();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  -  observed.length;  long[]  dev  =  x.doubleValue();	  return    sumSq    -    dev;    long[]    dev    =    x.doubleValue();    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	88	None	replace
383	[BUG]  [BUGGY]  return  sumSq  *  dev  *  observed;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  *  dev  *  observed;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  *  dev  *  observed;	  return    sumSq    /    dev    *    observed;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	22	None	replace
384	[BUG]  [BUGGY]  return  sumSq  /  dev  /  expected;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  /  expected;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  dev  /  expected;	  return    sumSq    /    dev    *    observed;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	22	None	replace
385	[BUG]  [BUGGY]  return  sumSq  /  dev  *  expected;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  *  expected;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  dev  *  expected;	  return    sumSq    /    dev    *    observed;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	22	None	replace
386	[BUG]  [BUGGY]  luate(x,  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  sumSq;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  luate(x,  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  sumSq;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	luate(x,  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  sumSq;  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    *    sumSq;    }    	non-compiled	[CE]  ';'  expected	128	None	replace
387	[BUG]  [BUGGY]  while(expected  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  sumSq;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  while(expected  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  sumSq;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	while(expected  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  sumSq;  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    *    sumSq;    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
388	[BUG]  [BUGGY]  luate(x,  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  *  sumSq;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  luate(x,  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  *  sumSq;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	luate(x,  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  *  sumSq;  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    *    sumSq;    }    	non-compiled	[CE]  ';'  expected	128	None	replace
389	[BUG]  [BUGGY]  return  sumSq  /  dev  +  1;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  +  1;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev    +    1;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
390	[BUG]  [BUGGY]  return  sumSq  /  dev  +  1;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  +  1;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev    +    1;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
391	[BUG]  [BUGGY]  return  sumSq  /  dev  +  1;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  +  1;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev    +    1;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
392	[BUG]  [BUGGY]  return  sumSq  /  dev  +  1;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  +  1;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev    +    1;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
393	[BUG]  [BUGGY]  return  sumSq  /  dev  +  1;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  +  1;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev    +    1;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
394	[BUG]  [BUGGY]  return  sumSq  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( "  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( "	  return    sumSq    -    dev;    for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)&&!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	117	None	replace
395	[BUG]  [BUGGY]  return  sumSq  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&  isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&  isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&  isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  return    sumSq    -    dev;    for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)&&!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
396	[BUG]  [BUGGY]  return  sumSq  +  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    observed.length;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	132	None	add
397	[BUG]  [BUGGY]  return  sumSq  +  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    observed.length;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	132	None	add
398	[BUG]  [BUGGY]  return  sumSq  +  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    observed.length;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	132	None	add
399	[BUG]  [BUGGY]  return  sumSq  +  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    observed.length;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	132	None	add
400	[BUG]  [BUGGY]  return  sumSq  +  observed.length;  if(sumSq  >  observed.length)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  observed.length;  if(sumSq  >  observed.length)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    observed.length;    if(sumSq  >  observed.length)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	132	None	add
401	[BUG]  [BUGGY]  return  sumSq  /  dev  *  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  *  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev    *    observed.length;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	130	None	add
402	[BUG]  [BUGGY]  return  new  double[sumSq  /  dev  +  1];  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  double[sumSq  /  dev  +  1];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  /  dev  +  1];	  return    new    double[sumSq    /    dev];    	non-compiled	[CE]  possible  loss  of  precision	95	None	replace
403	[BUG]  [BUGGY]  return  new  double[sumSq  /  dev,  sumSq];  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  double[sumSq  /  dev,  sumSq];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  /  dev,  sumSq];	  return    new    double[sumSq    /    dev];    	non-compiled	[CE]  ']'  expected	95	None	replace
404	[BUG]  [BUGGY]  if(sumSq  >  dev)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(sumSq  >  dev)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >  dev)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  return    dev;    if(sumSq    >    sumSq)    {    if(!isPositive(expected)&&!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
405	[BUG]  [BUGGY]  if(sumSq  >  expected.length)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(sumSq  >  expected.length)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >  expected.length)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  return    dev;    if(sumSq    >    sumSq)    {    if(!isPositive(expected)&&!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
406	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ")  in  case  of  non-negative  and  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ")  in  case  of  non-negative  and  [BUGGY]      return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ")  in  case  of  non-negative  and	  for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNonNegative(sumSq))    {    throw    new    IllegalArgumentException(   "   ")    in    case    of    non-negative    and    expected    counts    must    	non-compiled	[CE]  	121	None	replace
407	[BUG]  [BUGGY]  return  sumSq  /  dev.length;  long[]  expected  =  observed.length;  [CE]  double  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev.length;  long[]  expected  =  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  dev.length;  long[]  expected  =  observed.length;	  return    sumSq    /    dev;    long[]    expected    =    observed.length;    	non-compiled	[CE]  double  cannot  be  dereferenced	40	None	replace
408	[BUG]  [BUGGY]  return  new  double[sumSq  /  sumSq];  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  double[sumSq  /  sumSq];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  /  sumSq];	  return    new    double[sumSq    +    sumSq];    	non-compiled	[CE]  possible  loss  of  precision	58	None	replace
409	[BUG]  [BUGGY]  else  if(sumSq  >  dev)  {  return  sumSq  +  1;  }  [CE]  'else'  without  'if'  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  else  if(sumSq  >  dev)  {  return  sumSq  +  1;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	else  if(sumSq  >  dev)  {  return  sumSq  +  1;  }	  else    if(sumSq    >    dev)    {    return    sumSq;    }    	non-compiled	[CE]  'else'  without  'if'	3	None	replace
410	[BUG]  [BUGGY]  return  new  double[sumSq  *  dev  /  dev];  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  double[sumSq  *  dev  /  dev];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  *  dev  /  dev];	  return    new    double[sumSq    *    dev];    	non-compiled	[CE]  possible  loss  of  precision	59	None	replace
411	[BUG]  [BUGGY]  return  dev  -  sumSq;  ((  ChiSquareDistribution)distribution).setValue(sumSq);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev  -  sumSq;  ((  ChiSquareDistribution)distribution).setValue(sumSq);  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    dev    -    sumSq;    ((  ChiSquareDistribution)distribution).setValue(sumSq);	  	non-compiled	[CE]  cannot  find  symbol	49	None	add
412	[BUG]  [BUGGY]  return  dev  -  sumSq;  int  sumSq  =  sumSq  *  Math.sqrt(sumSq);  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev  -  sumSq;  int  sumSq  =  sumSq  *  Math.sqrt(sumSq);  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    dev    -    sumSq;    int  sumSq  =  sumSq  *  Math.sqrt(sumSq);	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	49	None	add
413	[BUG]  [BUGGY]  return  dev  -  sumSq;  int  sumSq  =  sumSq;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev  -  sumSq;  int  sumSq  =  sumSq;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    dev    -    sumSq;    int  sumSq  =  sumSq;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	49	None	add
414	[BUG]  [BUGGY]  return  dev  -  sumSq;  ((  ChiSquareDistribution)distribution).square.add(sumSq);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev  -  sumSq;  ((  ChiSquareDistribution)distribution).square.add(sumSq);  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    dev    -    sumSq;    ((  ChiSquareDistribution)distribution).square.add(sumSq);	  	non-compiled	[CE]  cannot  find  symbol	49	None	add
415	[BUG]  [BUGGY]  return  new  double[sumSq  +  dev;  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  double[sumSq  +  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  +  dev;	  return    new    double[sumSq    +    observed[i];    	non-compiled	[CE]  ']'  expected	56	None	replace
416	[BUG]  [BUGGY]  return  sumSq;  dev  =  sumSq  /(int)Math.floor(dev);  [CE]  unreachable  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq;  dev  =  sumSq  /(int)Math.floor(dev);  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq;  dev  =  sumSq  /(int)Math.floor(dev);	  return    dev;    int    dev    =    sumSq    /(int)Math.floor(sumSq);    	non-compiled	[CE]  unreachable  statement	32	None	replace
417	[BUG]  [BUGGY]  return  sumSq;  int  dev  =  sumSq  /(int)Math.floor(dev);  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq;  int  dev  =  sumSq  /(int)Math.floor(dev);  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq;  int  dev  =  sumSq  /(int)Math.floor(dev);	  return    dev;    int    dev    =    sumSq    /(int)Math.floor(sumSq);    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	32	None	replace
418	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  *  expected.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  /  dev  *  expected.length;	  return    sumSq    /    dev    *    observed.length;    	compilable	  [FE]  AssertionFailedError  	131	6	replace
419	[BUG]  [BUGGY]  return  sumSq  /  dev  *  expected.length;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  *  expected.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  dev  *  expected.length;	  return    sumSq    /    dev    *    observed.length;    	compilable	  [FE]  AssertionFailedError  	131	6	replace
420	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  *  observed.length  +  1;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  /  dev  *  observed.length  +  1;	  return    sumSq    /    dev    *    observed.length;    	compilable	  [FE]  AssertionFailedError  	131	6	replace
421	[BUG]  [BUGGY]  return  sumSq  /  dev  *  observed.length  +  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  *  observed.length  +  1;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  dev  *  observed.length  +  1;	  return    sumSq    /    dev    *    observed.length;    	compilable	  [FE]  AssertionFailedError  	131	6	replace
422	[BUG]  [BUGGY]  if(sumSq  >  dev)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(sumSq  >  dev)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >  dev)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  return    dev;    if(sumSq    >    sumSq)    {    if(!isPositive(expected)||!isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
423	[BUG]  [BUGGY]  return  sumSq  +  dev  *  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  *  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev    *    observed.length;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
424	[BUG]  [BUGGY]  return  sumSq  +  dev  *  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  *  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev    *    observed.length;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
425	[BUG]  [BUGGY]  return  sumSq  +  dev  *  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  *  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev    *    observed.length;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
426	[BUG]  [BUGGY]  return  sumSq  +  dev  *  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  *  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev    *    observed.length;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
427	[BUG]  [BUGGY]  return  sumSq  +  dev  *  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  *  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev    *    observed.length;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
428	[BUG]  [BUGGY]  return  dev;  long[]  dev  =  sumSq;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev;  long[]  dev  =  sumSq;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  dev;  long[]  dev  =  sumSq;	  return    dev;    long[]    dev    =    observed.length;    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	30	None	replace
429	[BUG]  [BUGGY]  return  sumSq;  int  dev  =  observed.length;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq;  int  dev  =  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq;  int  dev  =  observed.length;	  return    dev;    long[]    dev    =    observed.length;    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	30	None	replace
430	[BUG]  [BUGGY]  return  sumSq  +  dev  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev    /    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
431	[BUG]  [BUGGY]  return  sumSq  +  dev  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev    /    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
432	[BUG]  [BUGGY]  return  sumSq  +  dev  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev    /    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
433	[BUG]  [BUGGY]  return  sumSq  +  dev  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev    /    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
434	[BUG]  [BUGGY]  return  sumSq  +  dev  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev    /    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
435	[BUG]  [BUGGY]  return  dev  -  sumSq;  int  dev  =  sumSq  -  observed[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev  -  sumSq;  int  dev  =  sumSq  -  observed[i];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  dev  -  sumSq;  int  dev  =  sumSq  -  observed[i];	  return    sumSq    -    dev;    int    dev    =    sumSq    -    observed[i];    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	21	None	replace
436	[BUG]  [BUGGY]  return  sumSq  /  dev;  int  dev  =  sumSq  -  observed[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev;  int  dev  =  sumSq  -  observed[i];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  dev;  int  dev  =  sumSq  -  observed[i];	  return    sumSq    -    dev;    int    dev    =    sumSq    -    observed[i];    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	21	None	replace
437	[BUG]  [BUGGY]  return  sumSq  -  observed[i];  dev  =  sumSq  -  observed[i];  [CE]  cannot  find  symbol  i  [FE]                    AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  observed[i];  dev  =  sumSq  -  observed[i];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  -  observed[i];  dev  =  sumSq  -  observed[i];	  return    sumSq    -    dev;    int    dev    =    sumSq    -    observed[i];    	non-compiled	[CE]  cannot  find  symbol  i	21	None	replace
438	[BUG]  [BUGGY]  luate(x,  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  sumSq;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  luate(x,  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  sumSq;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	luate(x,  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  sumSq;  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    dev    *    sumSq;    }    	non-compiled	[CE]  ';'  expected	36	None	replace
439	[BUG]  [BUGGY]  while(expected  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  sumSq;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  while(expected  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  sumSq;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	while(expected  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  sumSq;  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    dev    *    sumSq;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
440	[BUG]  [BUGGY]  luate(x,  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  expected[i];  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  luate(x,  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  expected[i];  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	luate(x,  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  expected[i];  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    dev    *    sumSq;    }    	non-compiled	[CE]  ';'  expected	36	None	replace
441	[BUG]  [BUGGY]  return  sumSq;  dev  =  sumSq  /(int)Math.rint(dev);  [CE]  unreachable  statement  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq;  dev  =  sumSq  /(int)Math.rint(dev);  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq;  dev  =  sumSq  /(int)Math.rint(dev);	  return    dev;    int    dev    =    sumSq    /(int)Math.rint(sumSq);    	non-compiled	[CE]  unreachable  statement	29	None	replace
442	[BUG]  [BUGGY]  return  dev;  i  =  sumSq  /(int)Math.rint(sumSq);  [CE]  cannot  find  symbol  i  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev;  i  =  sumSq  /(int)Math.rint(sumSq);  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  dev;  i  =  sumSq  /(int)Math.rint(sumSq);	  return    dev;    int    dev    =    sumSq    /(int)Math.rint(sumSq);    	non-compiled	[CE]  cannot  find  symbol  i	29	None	replace
443	[BUG]  [BUGGY]  return  new  double[sumSq  *  1]  /  dev;  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  double[sumSq  *  1]  /  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  *  1]  /  dev;	  return    new    double[sumSq    +    1]    /    dev;    	non-compiled	[CE]  possible  loss  of  precision	15	None	replace
444	[BUG]  [BUGGY]  return  new  double[sumSq  +  1]  /  dev.doubleValue();  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  double[sumSq  +  1]  /  dev.doubleValue();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  +  1]  /  dev.doubleValue();	  return    new    double[sumSq    +    1]    /    dev;    	non-compiled	[CE]  possible  loss  of  precision	15	None	replace
445	[BUG]  [BUGGY]  if(sumSq  >  dev)  {  return  sumSq  +  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(expected))  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(sumSq  >  dev)  {  return  sumSq  +  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(expected))  {  throw  new  Il  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >  dev)  {  return  sumSq  +  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(expected))  {  throw  new  Il	  return    sumSq    +    dev;    for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNegative(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  '('  or  '['  expected	71	None	replace
446	[BUG]  [BUGGY]  return  sumSq  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }	  return    sumSq    +    dev;    for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNegative(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
447	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  /  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  /  dev  /  dev;	  return    sumSq    +    dev    /    dev;    	compilable	  [FE]  AssertionFailedError  	100	6	replace
448	[BUG]  [BUGGY]  return  sumSq  /  dev  /  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  /  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  dev  /  dev;	  return    sumSq    +    dev    /    dev;    	compilable	  [FE]  AssertionFailedError  	100	6	replace
449	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev  *  sumSq;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  dev  *  sumSq;	  return    dev    -    sumSq;    	compilable	  [FE]  AssertionFailedError  	50	6	replace
450	[BUG]  [BUGGY]  return  dev  *  sumSq;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev  *  sumSq;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  dev  *  sumSq;	  return    dev    -    sumSq;    	compilable	  [FE]  AssertionFailedError  	50	6	replace
451	[BUG]  [BUGGY]  return  sumSq  -  sumSq;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  sumSq;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    sumSq;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	134	None	add
452	[BUG]  [BUGGY]  return  sumSq  -  sumSq;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  sumSq;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    sumSq;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	134	None	add
453	[BUG]  [BUGGY]  return  sumSq  -  sumSq;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  sumSq;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    sumSq;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	134	None	add
454	[BUG]  [BUGGY]  return  sumSq  -  sumSq;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  sumSq;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    sumSq;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	134	None	add
455	[BUG]  [BUGGY]  return  sumSq  -  sumSq;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  sumSq;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    sumSq;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	134	None	add
456	[BUG]  [BUGGY]  luate(x,  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  sumSq);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  luate(x,  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  sumSq);  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	luate(x,  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  sumSq);  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    ((    double)observed[i]    -    sumSq);    }    	non-compiled	[CE]  ';'  expected	37	None	replace
457	[BUG]  [BUGGY]  luate(x,  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  expected[i]);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  luate(x,  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  expected[i]);  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	luate(x,  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  expected[i]);  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    ((    double)observed[i]    -    estimated[i]);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
458	[BUG]  [BUGGY]  return  new  double[sumSq  +  sumSq  *  dev  /  dev];  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  double[sumSq  +  sumSq  *  dev  /  dev];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  +  sumSq  *  dev  /  dev];	  return    new    double[sumSq    +    sumSq    *    dev];    	non-compiled	[CE]  possible  loss  of  precision	96	None	replace
459	[BUG]  [BUGGY]  return  new  double[sumSq  *  sumSq  *  dev];  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  double[sumSq  *  sumSq  *  dev];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  *  sumSq  *  dev];	  return    new    double[sumSq    +    sumSq    *    dev];    	non-compiled	[CE]  possible  loss  of  precision	96	None	replace
460	[BUG]  [BUGGY]  return  new  double[sumSq  /  sumSq  *  dev];  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  double[sumSq  /  sumSq  *  dev];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  /  sumSq  *  dev];	  return    new    double[sumSq    +    sumSq    *    dev];    	non-compiled	[CE]  possible  loss  of  precision	96	None	replace
461	[BUG]  [BUGGY]  luate(x,  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i].doubleValue();  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  luate(x,  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i].doubleValue();  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	luate(x,  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i].doubleValue();  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i].doubleValue();    }    	non-compiled	[CE]  ';'  expected	126	None	replace
462	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  monitored[i].doubleValue();  }  [CE]  cannot  find  symbol  monitored  [FE]                    AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  monitored[i].doubleValue();  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  monitored[i].doubleValue();  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i].doubleValue();    }    	non-compiled	[CE]  cannot  find  symbol  monitored	126	None	replace
463	[BUG]  [BUGGY]  return  sumSq  /  expected.length;  long[]  dev  =  observed[i].doubleValue();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  expected.length;  long[]  dev  =  observed[i].doubleValue();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  expected.length;  long[]  dev  =  observed[i].doubleValue();	  return    sumSq    /    dev;    long[]    dev    =    observed[i].doubleValue();    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	39	None	replace
464	[BUG]  [BUGGY]  return  sumSq  +  expected;  long[]  dev  =  observed[i].doubleValue();  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  expected;  long[]  dev  =  observed[i].doubleValue();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  +  expected;  long[]  dev  =  observed[i].doubleValue();	  return    sumSq    +    dev;    long[]    dev    =    observed[i].doubleValue();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	52	None	replace
465	[BUG]  [BUGGY]  return  sumSq  +  observed.length;  long[]  dev  =  observed[i].doubleValue();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  observed.length;  long[]  dev  =  observed[i].doubleValue();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  +  observed.length;  long[]  dev  =  observed[i].doubleValue();	  return    sumSq    +    dev;    long[]    dev    =    observed[i].doubleValue();    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	52	None	replace
466	[BUG]  [BUGGY]  return  dev  -  sumSq;  long[]  dev  =  observed[i].getDistribution();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev  -  sumSq;  long[]  dev  =  observed[i].getDistribution();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  dev  -  sumSq;  long[]  dev  =  observed[i].getDistribution();	  return    sumSq    -    dev;    long[]    dev    =    observed[i].getDistribution();    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	19	None	replace
467	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  *  observed.length  /  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  +  dev  *  observed.length  /  dev;	  return    sumSq    +    dev    *    observed.length;    	compilable	  [FE]  AssertionFailedError  	63	6	replace
468	[BUG]  [BUGGY]  return  sumSq  +  dev  *  observed.length  /  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  *  observed.length  /  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  +  dev  *  observed.length  /  dev;	  return    sumSq    +    dev    *    observed.length;    	compilable	  [FE]  AssertionFailedError  	63	6	replace
469	[BUG]  [BUGGY]  return  sumSq  /  expected.length;  long[]  dev  =  observed[i].getDistribution();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  expected.length;  long[]  dev  =  observed[i].getDistribution();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  expected.length;  long[]  dev  =  observed[i].getDistribution();	  return    sumSq    /    dev;    long[]    dev    =    observed[i].getDistribution();    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	41	None	replace
470	[BUG]  [BUGGY]  luate(x,  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i].longValue();  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  luate(x,  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i].longValue();  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	luate(x,  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i].longValue();  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i].longValue();    }    	non-compiled	[CE]  ';'  expected	127	None	replace
471	[BUG]  [BUGGY]  sumSq  +=  observed[i].longValue();  [CE]  cannot  find  symbol  i  [FE]                      AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  sumSq  +=  observed[i].longValue();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	sumSq  +=  observed[i].longValue();	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i].longValue();    }    	non-compiled	[CE]  cannot  find  symbol  i	127	None	replace
472	[BUG]  [BUGGY]  return  SumSquare.doubleValue(sumSq  +  dev);  [CE]  cannot  find  symbol  SumSquare  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  SumSquare.doubleValue(sumSq  +  dev);  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  SumSquare.doubleValue(sumSq  +  dev);	  return    SumSquare.doubleValue(sumSq);    	non-compiled	[CE]  cannot  find  symbol  SumSquare	92	None	replace
473	[BUG]  [BUGGY]  return  SumSquare.doubleValue(sumSq  +  1);  [CE]  cannot  find  symbol  SumSquare  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  SumSquare.doubleValue(sumSq  +  1);  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  SumSquare.doubleValue(sumSq  +  1);	  return    SumSquare.doubleValue(sumSq);    	non-compiled	[CE]  cannot  find  symbol  SumSquare	92	None	replace
474	[BUG]  [BUGGY]  return  sumSq  +  observed[sqq];  [CE]  cannot  find  symbol  sqq  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  observed[sqq];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  +  observed[sqq];	  return    sumSq    +    observed[i];    	non-compiled	[CE]  cannot  find  symbol  sqq	60	None	replace
475	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)&&  isNonNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)&&  isNonNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)&&  isNonNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)&&    isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
476	[BUG]  [BUGGY]  return  sumSq  -  observed.length;  long[]  dev  =  x.longValues();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  observed.length;  long[]  dev  =  x.longValues();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  -  observed.length;  long[]  dev  =  x.longValues();	  return    sumSq    -    dev;    long[]    dev    =    x.longValues();    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	89	None	replace
477	[BUG]  [BUGGY]  return  sumSq  -  expected;  long[]  dev  =  observed.length;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  expected;  long[]  dev  =  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  -  expected;  long[]  dev  =  observed.length;	  return    sumSq    -    dev;    long[]    dev    =    observed.length;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	17	None	replace
478	[BUG]  [BUGGY]  return  sumSq  +  dev;  int  dev  =  observed[i].getDistribution();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev;  int  dev  =  observed[i].getDistribution();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  +  dev;  int  dev  =  observed[i].getDistribution();	  return    sumSq    +    dev;    long[]    dev    =    observed[i].getDistribution();    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	54	None	replace
479	[BUG]  [BUGGY]  if(sumSq  >  expected.length)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(sumSq  >  expected.length)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >  expected.length)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  return    dev;    if(sumSq    >    sumSq)    {    if(!isPositive(expected)||!isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ")    +   "    expected    counts    must    be    non-negative    and    expected    counts    must    be    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
480	[BUG]  [BUGGY]  while(!sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  while(!sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	while(!sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  return    dev;    if(sumSq    >    observed[i])    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
481	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  dev  /  1;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  -  dev  /  1;	  return    sumSq    -    dev    +    1;    	compilable	  [FE]  AssertionFailedError  	73	6	replace
482	[BUG]  [BUGGY]  return  sumSq  -  dev  /  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  dev  /  1;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  -  dev  /  1;	  return    sumSq    -    dev    +    1;    	compilable	  [FE]  AssertionFailedError  	73	6	replace
483	[BUG]  [BUGGY]  return  dev  -  sumSq;  long[]  dev  =  x.doubleValue();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev  -  sumSq;  long[]  dev  =  x.doubleValue();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  dev  -  sumSq;  long[]  dev  =  x.doubleValue();	  return    sumSq    -    dev;    long[]    dev    =    x.doubleValue();    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	88	None	replace
484	[BUG]  [BUGGY]  if(sumSq  >=  expected.length)  {  return  sumSq  +  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(sumSq  >=  expected.length)  {  return  sumSq  +  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  Il  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >=  expected.length)  {  return  sumSq  +  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  Il	  return    sumSq    +    dev;    for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)&&!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  '('  or  '['  expected	69	None	replace
485	[BUG]  [BUGGY]  return  sumSq  +  dev  *  observed.length;  if(sumSq  >  observed.length)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  *  observed.length;  if(sumSq  >  observed.length)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev    *    observed.length;    if(sumSq  >  observed.length)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
486	[BUG]  [BUGGY]  return  sumSq  +  dev  *  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(isPositive(expected)||  isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  *  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(isPositive(expected)||  isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev    *    observed.length;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(isPositive(expected)||  isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
487	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  dev  *  dev  +  1;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  -  dev  *  dev  +  1;	  return    sumSq    -    dev    +    1;    	compilable	  [FE]  AssertionFailedError  	73	6	replace
488	[BUG]  [BUGGY]  return  sumSq  -  dev  *  dev  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  dev  *  dev  +  1;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  -  dev  *  dev  +  1;	  return    sumSq    -    dev    +    1;    	compilable	  [FE]  AssertionFailedError  	73	6	replace
489	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  +  sumSq  *  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  /  dev  +  sumSq  *  dev;	  return    sumSq    +    dev    *    dev;    	compilable	  [FE]  AssertionFailedError  	102	6	replace
490	[BUG]  [BUGGY]  return  sumSq  /  dev  +  sumSq  *  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  +  sumSq  *  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  dev  +  sumSq  *  dev;	  return    sumSq    +    dev    *    dev;    	compilable	  [FE]  AssertionFailedError  	102	6	replace
491	[BUG]  [BUGGY]  return  sumSq  +  observed  *  dev;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  observed  *  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  +  observed  *  dev;	  return    sumSq    +    dev    *    observed;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	61	None	replace
492	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  observed.length  *  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  +  observed.length  *  dev;	  return    sumSq    +    dev    *    observed;    	compilable	  [FE]  AssertionFailedError  	61	6	replace
493	[BUG]  [BUGGY]  return  sumSq  +  observed.length  *  dev;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  observed.length  *  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  +  observed.length  *  dev;	  return    sumSq    +    dev    *    observed;    	compilable	  [FE]  AssertionFailedError  	61	6	replace
494	[BUG]  [BUGGY]  return  dev  -  sumSq;  long[]  dev  =  observed[i].doubleValue();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev  -  sumSq;  long[]  dev  =  observed[i].doubleValue();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  dev  -  sumSq;  long[]  dev  =  observed[i].doubleValue();	  return    sumSq    -    dev;    long[]    dev    =    observed[i].doubleValue();    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	18	None	replace
495	[BUG]  [BUGGY]  if(sumSq  >=  expected.length)  {  return  sumSq  +  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(sumSq  >=  expected.length)  {  return  sumSq  +  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  Il  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >=  expected.length)  {  return  sumSq  +  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  Il	  return    sumSq    +    dev;    for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  '('  or  '['  expected	67	None	replace
496	[BUG]  [BUGGY]  return  sumSq  /  expected.length;  long[]  dev  =  observed.length;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  expected.length;  long[]  dev  =  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  expected.length;  long[]  dev  =  observed.length;	  return    sumSq    /    dev;    long[]    dev    =    observed.length;    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	38	None	replace
497	[BUG]  [BUGGY]  return  sumSq  /  expected.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  expected.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  expected.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  return    sumSq    /    dev;    for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
498	[BUG]  [BUGGY]  if(dev  >  expected.length)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(dev  >  expected.length)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(dev  >  expected.length)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  return    dev;    if(sumSq    >    sumSq)    {    if(!isPositive(expected)||!isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
499	[BUG]  [BUGGY]  if(dev  >  expected)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(dev  >  expected)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(dev  >  expected)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  return    dev;    if(sumSq    >    sumSq)    {    if(!isPositive(expected)||!isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
500	[BUG]  [BUGGY]  if(dev  >  expected.length)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(dev  >  expected.length)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(dev  >  expected.length)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  return    dev;    if(sumSq    >    sumSq)    {    if(!isPositive(expected)||!isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
501	[BUG]  [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)&&!isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	46	None	replace
502	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!isPositive(expected)||!isNegative(sumSq))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	66	None	replace
503	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev  -  sumSq  +  1;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  dev  -  sumSq  +  1;	  return    dev    -    sumSq;    	compilable	  [FE]  AssertionFailedError  	50	6	replace
504	[BUG]  [BUGGY]  return  dev  -  sumSq  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev  -  sumSq  +  1;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  dev  -  sumSq  +  1;	  return    dev    -    sumSq;    	compilable	  [FE]  AssertionFailedError  	50	6	replace
505	[BUG]  [BUGGY]  else  if(dev  >  sumSq)  {  return  sumSq;  }  [CE]  'else'  without  'if'  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  else  if(dev  >  sumSq)  {  return  sumSq;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	else  if(dev  >  sumSq)  {  return  sumSq;  }	  else    if(sumSq    >    dev)    {    return    sumSq;    }    	non-compiled	[CE]  'else'  without  'if'	3	None	replace
506	[BUG]  [BUGGY]  return  dev;  int  dev  =  sumSq  /(int)Math.floor(dev);  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev;  int  dev  =  sumSq  /(int)Math.floor(dev);  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  dev;  int  dev  =  sumSq  /(int)Math.floor(dev);	  return    dev;    int    dev    =    sumSq    /(int)Math.floor(sumSq);    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	32	None	replace
507	[BUG]  [BUGGY]  return  dev;  dev  =  sumSq  /(double)Math.floor(sumSq);  [CE]  unreachable  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev;  dev  =  sumSq  /(double)Math.floor(sumSq);  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  dev;  dev  =  sumSq  /(double)Math.floor(sumSq);	  return    dev;    int    dev    =    sumSq    /(int)Math.floor(sumSq);    	non-compiled	[CE]  unreachable  statement	32	None	replace
508	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  *  1  +  1;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  /  dev  *  1  +  1;	  return    sumSq    /    dev    +    1;    	compilable	  [FE]  AssertionFailedError  	26	6	replace
509	[BUG]  [BUGGY]  return  sumSq  /  dev  *  1  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  *  1  +  1;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  dev  *  1  +  1;	  return    sumSq    /    dev    +    1;    	compilable	  [FE]  AssertionFailedError  	26	6	replace
510	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  expected[i];  }  [CE]  missing  return  statement  [FE]                      AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  expected[i];  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  expected[i];  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    dev    *    sumSq;    }    	non-compiled	[CE]  missing  return  statement	36	None	replace
511	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  totalSq;  }  [CE]  cannot  find  symbol  totalSq  [FE]                        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  totalSq;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  totalSq;  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    dev    *    sumSq;    }    	non-compiled	[CE]  cannot  find  symbol  totalSq	36	None	replace
512	[BUG]  [BUGGY]  sumSq  +=  observed[i]  *  sumSq;  [CE]  cannot  find  symbol  i  [FE]                          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  sumSq  +=  observed[i]  *  sumSq;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	sumSq  +=  observed[i]  *  sumSq;	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    dev    *    sumSq;    }    	non-compiled	[CE]  cannot  find  symbol  i	36	None	replace
513	[BUG]  [BUGGY]  return  new  double[sumSq  +  observed[i].doubleValue();  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  double[sumSq  +  observed[i].doubleValue();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  +  observed[i].doubleValue();	  return    new    double[sumSq    +    observed[i];    	non-compiled	[CE]  ']'  expected	56	None	replace
514	[BUG]  [BUGGY]  while(expected  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i].longValue();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  while(expected  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i].longValue();  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	while(expected  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i].longValue();  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i].longValue();    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
515	[BUG]  [BUGGY]  return  sumSq.doubleValue(sumSq,  dev);  [CE]  double  cannot  be  dereferenced  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq.doubleValue(sumSq,  dev);  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq.doubleValue(sumSq,  dev);	  return    SumSquare.doubleValue(sumSq,    sumSq);    	non-compiled	[CE]  double  cannot  be  dereferenced	91	None	replace
516	[BUG]  [BUGGY]  return  sumSq  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    *    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
517	[BUG]  [BUGGY]  return  sumSq  +  dev  /  dev;  if(sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  /  dev;  if(sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev    /    dev;    if(sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
518	[BUG]  [BUGGY]  return  dev;  int  dev  =  observed.length;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev;  int  dev  =  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  dev;  int  dev  =  observed.length;	  return    dev;    long[]    dev    =    observed.length;    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	30	None	replace
519	[BUG]  [BUGGY]  return  sumSq  /  dev  +  observed.length;  if(sumSq  >  observed.length)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  +  observed.length;  if(sumSq  >  observed.length)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev    +    observed.length;    if(sumSq  >  observed.length)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
520	[BUG]  [BUGGY]  return  sumSq  /  dev  +  observed.length;  if(sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  +  observed.length;  if(sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev    +    observed.length;    if(sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
521	[BUG]  [BUGGY]  sumSq  +=  ((  double)observed[i]  -  expected[i]);  [CE]  cannot  find  symbol  i  [FE]                    AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  sumSq  +=  ((  double)observed[i]  -  expected[i]);  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	sumSq  +=  ((  double)observed[i]  -  expected[i]);	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    ((    double)observed[i]    -    estimated[i]);    }    	non-compiled	[CE]  cannot  find  symbol  i	35	None	replace
522	[BUG]  [BUGGY]  if(sumSq  >  dev)  {  return  sumSq  -  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(sumSq  >  dev)  {  return  sumSq  -  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  Il  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >  dev)  {  return  sumSq  -  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  Il	  return    sumSq    -    dev;    for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  '('  or  '['  expected	116	None	replace
523	[BUG]  [BUGGY]  if(dev  >  expected[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(dev  >  expected[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(dev  >  expected[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  return    dev;    if(sumSq    >    observed[i])    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
524	[BUG]  [BUGGY]  return  dev  -  expected;  long[]  dev  =  observed[i]  -  sumSq;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev  -  expected;  long[]  dev  =  observed[i]  -  sumSq;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  dev  -  expected;  long[]  dev  =  observed[i]  -  sumSq;	  return    sumSq    -    dev;    long[]    dev    =    observed[i]    -    sumSq;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	20	None	replace
525	[BUG]  [BUGGY]  return  sumSq  +  dev  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(isPositive(expected)||  isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(isPositive(expected)||  isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev    *    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(isPositive(expected)||  isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	101	None	add
526	[BUG]  [BUGGY]  return  sumSq  *  observed  /  dev;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  *  observed  /  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  *  observed  /  dev;	  return    sumSq    /    dev    *    observed;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	22	None	replace
527	[BUG]  [BUGGY]  return  dev  -  sumSq;  if(sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev  -  sumSq;  if(sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    dev    -    sumSq;    if(sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
528	[BUG]  [BUGGY]  return  dev  -  sumSq;  if(sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev  -  sumSq;  if(sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    dev    -    sumSq;    if(sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
529	[BUG]  [BUGGY]  return  dev  -  sumSq;  if(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  dev;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev  -  sumSq;  if(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  dev;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    dev    -    sumSq;    if(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  dev;  }	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
530	[BUG]  [BUGGY]  return  dev  -  sumSq;  if(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  dev;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev  -  sumSq;  if(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    dev    -    sumSq;    if(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  dev;  }	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
531	[BUG]  [BUGGY]  return  new  double[sumSq  +  dev  *  sumSq];  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  double[sumSq  +  dev  *  sumSq];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  +  dev  *  sumSq];	  return    new    double[sumSq    +    sumSq    *    dev];    	non-compiled	[CE]  possible  loss  of  precision	96	None	replace
532	[BUG]  [BUGGY]  return  dev  -  sumSq;  long[]  dev  =  x.longValues();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev  -  sumSq;  long[]  dev  =  x.longValues();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  dev  -  sumSq;  long[]  dev  =  x.longValues();	  return    sumSq    -    dev;    long[]    dev    =    x.longValues();    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	89	None	replace
533	[BUG]  [BUGGY]  return  expected  /  dev;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  expected  /  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  expected  /  dev;	  return    sumSq    /    dev;    for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNonNegative(sumSq))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	79	None	replace
534	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  sumSq.length;  i++)  {  if(!isPositive(expected)||  isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  for(int  i  =  0;  i  <  sumSq.length;  i++)  {  if(!isPositive(expected)||  isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  sumSq.length;  i++)  {  if(!isPositive(expected)||  isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||    isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
535	[BUG]  [BUGGY]  return  new  double[sumSq  *  observed[0];  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  double[sumSq  *  observed[0];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  *  observed[0];	  return    new    double[sumSq    *    dev];    	non-compiled	[CE]  ']'  expected	59	None	replace
536	[BUG]  [BUGGY]  if(sumSq!=  expected[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(sumSq!=  expected[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq!=  expected[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  if(sumSq!=    observed[i])    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
537	[BUG]  [BUGGY]  return  SumSquare.valueOf(sumSq  /  dev);  [CE]  cannot  find  symbol  SumSquare  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  SumSquare.valueOf(sumSq  /  dev);  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  SumSquare.valueOf(sumSq  /  dev);	  return    SumSquare.valueOf(sumSq);    	non-compiled	[CE]  cannot  find  symbol  SumSquare	93	None	replace
538	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  *  observed.length  -  1;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  +  dev  *  observed.length  -  1;	  return    sumSq    +    dev    *    observed.length;    	compilable	  [FE]  AssertionFailedError  	63	6	replace
539	[BUG]  [BUGGY]  return  sumSq  +  dev  *  observed.length  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev  *  observed.length  -  1;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  +  dev  *  observed.length  -  1;	  return    sumSq    +    dev    *    observed.length;    	compilable	  [FE]  AssertionFailedError  	63	6	replace
540	[BUG]  [BUGGY]  if(dev  >  expected)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(dev  >  expected)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(dev  >  expected)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  return    dev;    if(sumSq    >    sumSq)    {    if(!isPositive(expected)&&!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
541	[BUG]  [BUGGY]  if(!isPositive(expected)&&!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(!isPositive(expected)&&!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(!isPositive(expected)&&!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }	  return    dev;    if(sumSq    >    sumSq)    {    if(!isPositive(expected)&&!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
542	[BUG]  [BUGGY]  while(!isPositive(expected)&&!isNegative(observed))  {  return  dev;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  while(!isPositive(expected)&&!isNegative(observed))  {  return  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	while(!isPositive(expected)&&!isNegative(observed))  {  return  dev;	  return    dev;    if(sumSq    >    sumSq)    {    if(!isPositive(expected)&&!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
543	[BUG]  [BUGGY]  else  if(sumSq  <  dev)  {  return  dev;  }  [CE]  'else'  without  'if'  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  else  if(sumSq  <  dev)  {  return  dev;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	else  if(sumSq  <  dev)  {  return  dev;  }	  else    if(sumSq    <    =    sumSq)    {    return    dev;    }    	non-compiled	[CE]  'else'  without  'if'	2	None	replace
544	[BUG]  [BUGGY]  return  dev;  int  dev  =  sumSq  /(int)Math.rint(dev);  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev;  int  dev  =  sumSq  /(int)Math.rint(dev);  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  dev;  int  dev  =  sumSq  /(int)Math.rint(dev);	  return    dev;    int    dev    =    sumSq    /(int)Math.rint(sumSq);    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	29	None	replace
545	[BUG]  [BUGGY]  return  dev;  dev  =  sumSq  /(double)Math.rint(sumSq);  [CE]  unreachable  statement  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev;  dev  =  sumSq  /(double)Math.rint(sumSq);  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  dev;  dev  =  sumSq  /(double)Math.rint(sumSq);	  return    dev;    int    dev    =    sumSq    /(int)Math.rint(sumSq);    	non-compiled	[CE]  unreachable  statement	29	None	replace
546	[BUG]  [BUGGY]  return  dev;  dev  =  sumSq  /(int)Math.rint(dev);  [CE]  unreachable  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev;  dev  =  sumSq  /(int)Math.rint(dev);  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  dev;  dev  =  sumSq  /(int)Math.rint(dev);	  return    dev;    int    dev    =    sumSq    /(int)Math.rint(sumSq);    	non-compiled	[CE]  unreachable  statement	29	None	replace
547	[BUG]  [BUGGY]  return  new  long[sumSq  +  observed[0];  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  long[sumSq  +  observed[0];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  long[sumSq  +  observed[0];	  return    new    long[sumSq    +    dev];    	non-compiled	[CE]  ']'  expected	57	None	replace
548	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  monitored[i]  *  sumSq;  }  [CE]  cannot  find  symbol  monitored  [FE]                      AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  monitored[i]  *  sumSq;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  monitored[i]  *  sumSq;  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    *    sumSq;    }    	non-compiled	[CE]  cannot  find  symbol  monitored	128	None	replace
549	[BUG]  [BUGGY]  while(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  while(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	while(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  if(sumSq    ==    observed[i])    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
550	[BUG]  [BUGGY]  return  dev;  if(sumSq  >  observed.length)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ")  + "  expected  counts  must  be  non-negative  and  expected  counts  must  be  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev;  if(sumSq  >  observed.length)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ")  + "  expected  counts  must  be  non-negative  and  expected  counts  must  be  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  dev;  if(sumSq  >  observed.length)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ")  + "  expected  counts  must  be  non-negative  and  expected  counts  must  be	  return    dev;    if(sumSq    >    sumSq)    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ")    +   "    expected    counts    must    be    non-negative    and    expected    counts    must    be    	non-compiled	[CE]  unclosed  string  literal	114	None	replace
551	[BUG]  [BUGGY]  if(dev  >  expected)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ")  + "  expected  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(dev  >  expected)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ")  + "  expected  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(dev  >  expected)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ")  + "  expected  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }	  return    dev;    if(sumSq    >    sumSq)    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ")    +   "    expected    counts    must    be    non-negative    and    expected    counts    must    be    	non-compiled	[CE]  	114	None	replace
552	[BUG]  [BUGGY]  if(sumSq  >  observed.length)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ")  + "  expected  counts  must  be  non-negative  and  expected  counts  must  be  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(sumSq  >  observed.length)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ")  + "  expected  counts  must  be  non-negative  and  expected  counts  must  be  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >  observed.length)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ")  + "  expected  counts  must  be  non-negative  and  expected  counts  must  be	  return    dev;    if(sumSq    >    sumSq)    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ")    +   "    expected    counts    must    be    non-negative    and    expected    counts    must    be    	non-compiled	[CE]  unclosed  string  literal	114	None	replace
553	[BUG]  [BUGGY]  if(sumSq  >  observed.length)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ")  + "  expected  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(sumSq  >  observed.length)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ")  + "  expected  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >  observed.length)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ")  + "  expected  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }	  return    dev;    if(sumSq    >    sumSq)    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ")    +   "    expected    counts    must    be    non-negative    and    expected    counts    must    be    	non-compiled	[CE]  	114	None	replace
554	[BUG]  [BUGGY]  return  sumSq  /  dev  *  observed.length;  if(sumSq  >  observed.length)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  *  observed.length;  if(sumSq  >  observed.length)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev    *    observed.length;    if(sumSq  >  observed.length)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	130	None	add
555	[BUG]  [BUGGY]  return  sumSq  /  dev  *  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(consumed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  *  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(consumed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev    *    observed.length;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(consumed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	130	None	add
556	[BUG]  [BUGGY]  return  sumSq  -  observed[i].doubleValue();  [CE]  cannot  find  symbol  i  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  observed[i].doubleValue();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  -  observed[i].doubleValue();	  return    sumSq    -    observed[i];    	non-compiled	[CE]  cannot  find  symbol  i	48	None	replace
557	[BUG]  [BUGGY]  return  sumSq  -  observed[i]  +  dev;  [CE]  cannot  find  symbol  i  [FE]          AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  observed[i]  +  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  -  observed[i]  +  dev;	  return    sumSq    -    observed[i];    	non-compiled	[CE]  cannot  find  symbol  i	48	None	replace
558	[BUG]  [BUGGY]  return  new  long[sumSq  +  observed.length  *  observed.length];  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  long[sumSq  +  observed.length  *  observed.length];  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  long[sumSq  +  observed.length  *  observed.length];	  return    new    double[sumSq    +    dev    *    observed.length];    	non-compiled	[CE]  possible  loss  of  precision	110	None	replace
559	[BUG]  [BUGGY]  return  new  double[sumSq  +  observed[0]  *  dev;  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  new  double[sumSq  +  observed[0]  *  dev;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  +  observed[0]  *  dev;	  return    new    double[sumSq    +    observed[0];    	non-compiled	[CE]  ']'  expected	109	None	replace
560	[BUG]  [BUGGY]  return  sumSq  +  dev;  int  dev  =  observed.length;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  dev;  int  dev  =  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  +  dev;  int  dev  =  observed.length;	  return    sumSq    +    dev;    long[]    dev    =    observed.length;    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	51	None	replace
561	[BUG]  [BUGGY]  return  sumSq  -  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    observed.length;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	123	None	add
562	[BUG]  [BUGGY]  return  sumSq  -  observed.length;  long[]  dev  =  x.longValue();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  observed.length;  long[]  dev  =  x.longValue();  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  -  observed.length;  long[]  dev  =  x.longValue();	  return    sumSq    -    dev;    long[]    dev    =    x.longValue();    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	87	None	replace
563	[BUG]  [BUGGY]  if(dev  >  expected.length)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  expected[i];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(dev  >  expected.length)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  expected[i];  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(dev  >  expected.length)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  expected[i];  }	  return    dev;    if(sumSq    >    sumSq)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    dev    *    sumSq;    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
564	[BUG]  [BUGGY]  else  if(dev  >  expected[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  expected[i];  }  [CE]  'else'  without  'if'  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  else  if(dev  >  expected[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  expected[i];  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	else  if(dev  >  expected[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  expected[i];  }	  return    dev;    if(sumSq    >    sumSq)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    dev    *    sumSq;    }    	non-compiled	[CE]  'else'  without  'if'	83	None	replace
565	[BUG]  [BUGGY]  else  if(dev  >  expected.length)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  expected[i];  }  [CE]  'else'  without  'if'  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  else  if(dev  >  expected.length)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  expected[i];  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	else  if(dev  >  expected.length)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  expected[i];  }	  return    dev;    if(sumSq    >    sumSq)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    dev    *    sumSq;    }    	non-compiled	[CE]  'else'  without  'if'	83	None	replace
566	[BUG]  [BUGGY]  sumSq  +=  ((  double)observed[i]  -  sumSq);  [CE]  cannot  find  symbol  i  [FE]                        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  sumSq  +=  ((  double)observed[i]  -  sumSq);  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	sumSq  +=  ((  double)observed[i]  -  sumSq);	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    ((    double)observed[i]    -    sumSq);    }    	non-compiled	[CE]  cannot  find  symbol  i	37	None	replace
567	[BUG]  [BUGGY]  else  if(sumSq  >  dev)  {  return  dev;  }  [CE]  'else'  without  'if'  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  else  if(sumSq  >  dev)  {  return  dev;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	else  if(sumSq  >  dev)  {  return  dev;  }	  else    if(sumSq    >    sumSq)    {    return    dev;    }    	non-compiled	[CE]  'else'  without  'if'	1	None	replace
568	[BUG]  [BUGGY]  while(expected  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  while(expected  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i].doubleValue();  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	while(expected  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i].doubleValue();  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
569	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ")  in  case  of  non-negative  and  expected  counts  must  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ")  in  case  of  non-negative  and  expected  counts  must  [BUGGY]      return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ")  in  case  of  non-negative  and  expected  counts  must	  for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNegative(sumSq))    {    throw    new    IllegalArgumentException(   "   ")    in    case    of    non-negative    and    expected    counts    must    be    	non-compiled	[CE]  	120	None	replace
570	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ")  in  case  of  non-negative  and  expected  counts  must  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ")  in  case  of  non-negative  and  expected  counts  must  [BUGGY]      return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ")  in  case  of  non-negative  and  expected  counts  must	  for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNegative(sumSq))    {    throw    new    IllegalArgumentException(   "   ")    in    case    of    non-negative    and    expected    counts    must    be    	non-compiled	[CE]  	120	None	replace
571	[BUG]  [BUGGY]  return  dev;  long[]  dev  =  observed[i]  -  sumSq  +  1;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev;  long[]  dev  =  observed[i]  -  sumSq  +  1;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  dev;  long[]  dev  =  observed[i]  -  sumSq  +  1;	  return    dev;    long[]    dev    =    observed[i]    -    sumSq;    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	33	None	replace
572	[BUG]  [BUGGY]  int  dev  =  observed.length  -  sumSq;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  int  dev  =  observed.length  -  sumSq;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	int  dev  =  observed.length  -  sumSq;	  return    sumSq    -    dev;    int    dev    =    sumSq    -    observed[i];    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	21	None	replace
573	[BUG]  [BUGGY]  return  sumSq  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }	  return    sumSq    +    dev;    for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNegative(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
574	[BUG]  [BUGGY]  return  sumSq  -  dev  +  1;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  dev  +  1;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    dev    +    1;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
575	[BUG]  [BUGGY]  return  sumSq  -  dev  +  1;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  dev  +  1;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    dev    +    1;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
576	[BUG]  [BUGGY]  return  sumSq  -  dev  +  1;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  dev  +  1;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    dev    +    1;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
577	[BUG]  [BUGGY]  return  sumSq  -  dev  +  1;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  dev  +  1;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    dev    +    1;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
578	[BUG]  [BUGGY]  return  sumSq  -  dev  +  1;  if(sumSq  >  dev)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  dev  +  1;  if(sumSq  >  dev)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    dev    +    1;    if(sumSq  >  dev)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
579	[BUG]  [BUGGY]  while(i  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  dev;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  while(i  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  dev;  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	while(i  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  dev;  }	  if(sumSq    >    observed[i])    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    /    dev;    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
580	[BUG]  [BUGGY]  return  sumSq  -  sumSq;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  -  sumSq;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    sumSq;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	134	None	add
581	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  sumSq.length;  i++)  {  if(!isPositive(expected)&&  isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  for(int  i  =  0;  i  <  sumSq.length;  i++)  {  if(!isPositive(expected)&&  isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  sumSq.length;  i++)  {  if(!isPositive(expected)&&  isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)&&    isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
582	[BUG]  [BUGGY]  if(sumSq  >  dev)  {  return  sumSq  -  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(sumSq  >  dev)  {  return  sumSq  -  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  Il  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >  dev)  {  return  sumSq  -  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  Il	  return    sumSq    -    dev;    for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)&&!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  '('  or  '['  expected	117	None	replace
583	[BUG]  [BUGGY]  double  expected  =  sumSq  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  double  expected  =  sumSq  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	double  expected  =  sumSq  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  return    sumSq    -    dev;    for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)&&!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
584	[BUG]  [BUGGY]  return  sumSq  +  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( "Unexpected  counts  must  be  non-negative  and  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  +  observed.length;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( "Unexpected  counts  must  be  non-negative  and  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    observed.length;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( "Unexpected  counts  must  be  non-negative  and	  	non-compiled	[CE]  unclosed  string  literal	132	None	add
585	[BUG]  [BUGGY]  if(dev  >  expected)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ")  + "  expected  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(dev  >  expected)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ")  + "  expected  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(dev  >  expected)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ")  + "  expected  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }	  return    dev;    if(sumSq    >    sumSq)    {    if(!isPositive(expected)||!isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ")    +   "    expected    counts    must    be    non-negative    and    expected    counts    must    be    	non-compiled	[CE]  	84	None	replace
586	[BUG]  [BUGGY]  if(sumSq  >  observed.length)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ")  + "  expected  counts  must  be  non-negative  and  expected  counts  must  be  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(sumSq  >  observed.length)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ")  + "  expected  counts  must  be  non-negative  and  expected  counts  must  be  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >  observed.length)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ")  + "  expected  counts  must  be  non-negative  and  expected  counts  must  be	  return    dev;    if(sumSq    >    sumSq)    {    if(!isPositive(expected)||!isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ")    +   "    expected    counts    must    be    non-negative    and    expected    counts    must    be    	non-compiled	[CE]  unclosed  string  literal	84	None	replace
587	[BUG]  [BUGGY]  if(dev  >  expected)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ")  + "  expected  counts  must  be  non-negative  and  expected  counts  must  be  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(dev  >  expected)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ")  + "  expected  counts  must  be  non-negative  and  expected  counts  must  be  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(dev  >  expected)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ")  + "  expected  counts  must  be  non-negative  and  expected  counts  must  be	  return    dev;    if(sumSq    >    sumSq)    {    if(!isPositive(expected)||!isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ")    +   "    expected    counts    must    be    non-negative    and    expected    counts    must    be    	non-compiled	[CE]  unclosed  string  literal	84	None	replace
588	[BUG]  [BUGGY]  if(dev  >  expected)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ")  + "  expected  counts  must  be  non-negative  and  expected  counts  must  be  postive. ");  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(dev  >  expected)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ")  + "  expected  counts  must  be  non-negative  and  expected  counts  must  be  postive. ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(dev  >  expected)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ")  + "  expected  counts  must  be  non-negative  and  expected  counts  must  be  postive. ");  }	  return    dev;    if(sumSq    >    sumSq)    {    if(!isPositive(expected)||!isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ")    +   "    expected    counts    must    be    non-negative    and    expected    counts    must    be    	non-compiled	[CE]  	84	None	replace
589	[BUG]  [BUGGY]  return  dev  -  sumSq;  long[]  dev  =  observed.length;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  dev  -  sumSq;  long[]  dev  =  observed.length;  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  dev  -  sumSq;  long[]  dev  =  observed.length;	  return    sumSq    -    dev;    long[]    dev    =    observed.length;    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	17	None	replace
590	[BUG]  [BUGGY]  if(sumSq  >=  dev)  {  return  sumSq  -  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  if(sumSq  >=  dev)  {  return  sumSq  -  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  Il  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >=  dev)  {  return  sumSq  -  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  Il	  return    sumSq    -    dev;    for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)&&!isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  '('  or  '['  expected	118	None	replace
591	[BUG]  [BUGGY]  return  sumSq  /  dev  +  1;  if(sumSq  >  dev)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }      [BUGGY]  return  sumSq  /  dev  +  1;  if(sumSq  >  dev)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev    +    1;    if(sumSq  >  dev)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
