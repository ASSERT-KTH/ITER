bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  else  if(sumSq  >  sumSq)  {  return  dev;  }  [CE]  'else'  without  'if'  [FE]    AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  else  if(sumSq  >  sumSq)  {  return  dev;  }  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	else  if(sumSq  >  sumSq)  {  return  dev;  }	  return    dev;    	non-compiled	[CE]  'else'  without  'if'	2	None	replace
2	[BUG]  [BUGGY]  else  if(sumSq  <  =  sumSq)  {  return  dev;  }  [CE]  'else'  without  'if'  [FE]      AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  else  if(sumSq  <  =  sumSq)  {  return  dev;  }  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	else  if(sumSq  <  =  sumSq)  {  return  dev;  }	  return    dev;    	non-compiled	[CE]  'else'  without  'if'	2	None	replace
3	[BUG]  [BUGGY]  else  if(sumSq  >  dev)  {  return  sumSq;  }  [CE]  'else'  without  'if'  [FE]        AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  else  if(sumSq  >  dev)  {  return  sumSq;  }  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	else  if(sumSq  >  dev)  {  return  sumSq;  }	  return    dev;    	non-compiled	[CE]  'else'  without  'if'	2	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)&&!isNonNegative(sumSq))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
5	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)&&!isNonNegative(sumSq))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	17	None	replace
6	[BUG]  [BUGGY]  if(sumSq  >=  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  if(sumSq  >=  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >=  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	      if(sumSq    >    observed[i])    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
7	[BUG]  [BUGGY]  while(sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  while(sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	while(sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	      if(sumSq    >    observed[i])    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)&&!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)&&!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)&&!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)&&!isNegative(sumSq))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
11	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)&&!isNegative(sumSq))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	16	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  estimated.length;  i++)  {  if(!isPositive(expected)&&!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  for(int  i  =  0;  i  <  estimated.length;  i++)  {  if(!isPositive(expected)&&!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  estimated.length;  i++)  {  if(!isPositive(expected)&&!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)&&!isNegative(sumSq))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ")  in  case  of  non-negative  and  expected  counts  must  be  [CE]  [FE]              AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ")  in  case  of  non-negative  and  expected  counts  must  be  [BUGGY]    return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ")  in  case  of  non-negative  and  expected  counts  must  be	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNonNegative(sumSq))    {    throw    new    IllegalArgumentException(   "   ")    in    case    of    non-negative    and    expected    counts    must    be    	non-compiled	[CE]  	18	None	replace
14	[BUG]  [BUGGY]  return  new  long[sumSq  +  1];  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  new  long[sumSq  +  1];  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  long[sumSq  +  1];	  return    new    double[sumSq    +    1];    	non-compiled	[CE]  possible  loss  of  precision	20	None	replace
15	[BUG]  [BUGGY]  return  new  double[sumSq  +  1]  /  dev;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  new  double[sumSq  +  1]  /  dev;  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  +  1]  /  dev;	  return    new    double[sumSq    +    1];    	non-compiled	[CE]  possible  loss  of  precision	20	None	replace
16	[BUG]  [BUGGY]  return  new  double[sumSq  +  2];  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  new  double[sumSq  +  2];  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  +  2];	  return    new    double[sumSq    +    1];    	non-compiled	[CE]  possible  loss  of  precision	20	None	replace
17	[BUG]  [BUGGY]  return  sumSq  -  dev;  long[]  dev  =  observed.length;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  -  dev;  long[]  dev  =  observed.length;  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    dev;    long[]  dev  =  observed.length;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	13	None	add
18	[BUG]  [BUGGY]  return  sumSq  -  dev;  long[]  dev  =  observed[i].doubleValue();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  -  dev;  long[]  dev  =  observed[i].doubleValue();  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    dev;    long[]  dev  =  observed[i].doubleValue();	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	13	None	add
19	[BUG]  [BUGGY]  return  sumSq  -  dev;  long[]  dev  =  observed[i].getDistribution();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  -  dev;  long[]  dev  =  observed[i].getDistribution();  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    dev;    long[]  dev  =  observed[i].getDistribution();	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	13	None	add
20	[BUG]  [BUGGY]  return  sumSq  -  dev;  long[]  dev  =  observed[i]  -  sumSq;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  -  dev;  long[]  dev  =  observed[i]  -  sumSq;  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    dev;    long[]  dev  =  observed[i]  -  sumSq;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	13	None	add
21	[BUG]  [BUGGY]  return  sumSq  -  dev;  int  dev  =  sumSq  -  observed[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  -  dev;  int  dev  =  sumSq  -  observed[i];  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    dev;    int  dev  =  sumSq  -  observed[i];	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	13	None	add
22	[BUG]  [BUGGY]  return  sumSq  /  dev  *  observed;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  /  dev  *  observed;  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  dev  *  observed;	  return    sumSq    /    dev;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	4	None	replace
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  *  dev;  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  *  dev;	  return    sumSq    /    dev;    	compilable	  [FE]  AssertionFailedError  	4	6	replace
24	[BUG]  [BUGGY]  return  sumSq  *  dev;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  *  dev;  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  *  dev;	  return    sumSq    /    dev;    	compilable	  [FE]  AssertionFailedError  	4	6	replace
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  /  dev  +  1;  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  /  dev  +  1;	  return    sumSq    /    dev;    	compilable	  [FE]  AssertionFailedError  	4	6	replace
26	[BUG]  [BUGGY]  return  sumSq  /  dev  +  1;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  /  dev  +  1;  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  dev  +  1;	  return    sumSq    /    dev;    	compilable	  [FE]  AssertionFailedError  	4	6	replace
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  /  dev  +  observed.length;  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  /  dev  +  observed.length;	  return    sumSq    /    dev;    	compilable	  [FE]  AssertionFailedError  	4	6	replace
28	[BUG]  [BUGGY]  return  sumSq  /  dev  +  observed.length;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  /  dev  +  observed.length;  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  dev  +  observed.length;	  return    sumSq    /    dev;    	compilable	  [FE]  AssertionFailedError  	4	6	replace
29	[BUG]  [BUGGY]  return  dev;  int  dev  =  sumSq  /(int)Math.rint(sumSq);  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  dev;  int  dev  =  sumSq  /(int)Math.rint(sumSq);  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    dev;    int  dev  =  sumSq  /(int)Math.rint(sumSq);	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	1	None	add
30	[BUG]  [BUGGY]  return  dev;  long[]  dev  =  observed.length;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  dev;  long[]  dev  =  observed.length;  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    dev;    long[]  dev  =  observed.length;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	1	None	add
31	[BUG]  [BUGGY]  return  dev;  long[]  expected  =  observed.length;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  dev;  long[]  expected  =  observed.length;  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    dev;    long[]  expected  =  observed.length;	  	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	1	None	add
32	[BUG]  [BUGGY]  return  dev;  int  dev  =  sumSq  /(int)Math.floor(sumSq);  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  dev;  int  dev  =  sumSq  /(int)Math.floor(sumSq);  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    dev;    int  dev  =  sumSq  /(int)Math.floor(sumSq);	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	1	None	add
33	[BUG]  [BUGGY]  return  dev;  long[]  dev  =  observed[i]  -  sumSq;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  dev;  long[]  dev  =  observed[i]  -  sumSq;  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    dev;    long[]  dev  =  observed[i]  -  sumSq;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	1	None	add
34	[BUG]  [BUGGY]  if(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  expected[i]);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  if(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  expected[i]);  }  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  expected[i]);  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
35	[BUG]  [BUGGY]  if(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  estimated[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  if(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  estimated[i]);  }  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  estimated[i]);  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
36	[BUG]  [BUGGY]  if(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  sumSq;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  if(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  sumSq;  }  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  sumSq;  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
37	[BUG]  [BUGGY]  if(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  sumSq);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  if(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  sumSq);  }  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  sumSq);  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
38	[BUG]  [BUGGY]  return  sumSq  /  dev;  long[]  dev  =  observed.length;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  /  dev;  long[]  dev  =  observed.length;  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev;    long[]  dev  =  observed.length;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	3	None	add
39	[BUG]  [BUGGY]  return  sumSq  /  dev;  long[]  dev  =  observed[i].doubleValue();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  /  dev;  long[]  dev  =  observed[i].doubleValue();  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev;    long[]  dev  =  observed[i].doubleValue();	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	3	None	add
40	[BUG]  [BUGGY]  return  sumSq  /  dev;  long[]  expected  =  observed.length;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  /  dev;  long[]  expected  =  observed.length;  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev;    long[]  expected  =  observed.length;	  	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	3	None	add
41	[BUG]  [BUGGY]  return  sumSq  /  dev;  long[]  dev  =  observed[i].getDistribution();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  /  dev;  long[]  dev  =  observed[i].getDistribution();  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev;    long[]  dev  =  observed[i].getDistribution();	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	3	None	add
42	[BUG]  [BUGGY]  return  sumSq  /  dev;  long[]  dev  =  observed[i]  -  sumSq;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  /  dev;  long[]  dev  =  observed[i]  -  sumSq;  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev;    long[]  dev  =  observed[i]  -  sumSq;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	3	None	add
43	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)||  isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)||  isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)||  isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||    isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
44	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)&&  isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)&&  isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)&&  isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||    isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
45	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&  isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&  isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&  isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||    isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
46	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)&&!isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	11	None	replace
47	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)&&!isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
48	[BUG]  [BUGGY]  return  sumSq  -  observed[i];  [CE]  cannot  find  symbol  i  [FE]    AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  -  observed[i];  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  -  observed[i];	  return    sumSq    -    dev;    	non-compiled	[CE]  cannot  find  symbol  i	14	None	replace
49	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  dev  -  sumSq;  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  dev  -  sumSq;	  return    sumSq    -    dev;    	compilable	  [FE]  AssertionFailedError  	14	6	replace
50	[BUG]  [BUGGY]  return  dev  -  sumSq;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  dev  -  sumSq;  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  dev  -  sumSq;	  return    sumSq    -    dev;    	compilable	  [FE]  AssertionFailedError  	14	6	replace
51	[BUG]  [BUGGY]  return  sumSq  +  dev;  long[]  dev  =  observed.length;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  +  dev;  long[]  dev  =  observed.length;  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev;    long[]  dev  =  observed.length;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	5	None	add
52	[BUG]  [BUGGY]  return  sumSq  +  dev;  long[]  dev  =  observed[i].doubleValue();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  +  dev;  long[]  dev  =  observed[i].doubleValue();  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev;    long[]  dev  =  observed[i].doubleValue();	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	5	None	add
53	[BUG]  [BUGGY]  return  sumSq  +  dev;  long[]  expected  =  observed.length;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  +  dev;  long[]  expected  =  observed.length;  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev;    long[]  expected  =  observed.length;	  	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	5	None	add
54	[BUG]  [BUGGY]  return  sumSq  +  dev;  long[]  dev  =  observed[i].getDistribution();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  +  dev;  long[]  dev  =  observed[i].getDistribution();  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev;    long[]  dev  =  observed[i].getDistribution();	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	5	None	add
55	[BUG]  [BUGGY]  return  sumSq  +  dev;  long[]  dev  =  observed[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  +  dev;  long[]  dev  =  observed[i];  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev;    long[]  dev  =  observed[i];	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	5	None	add
56	[BUG]  [BUGGY]  return  new  double[sumSq  +  observed[i];  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  new  double[sumSq  +  observed[i];  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  +  observed[i];	  return    new    double[sumSq    +    dev];    	non-compiled	[CE]  ']'  expected	19	None	replace
57	[BUG]  [BUGGY]  return  new  long[sumSq  +  dev];  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  new  long[sumSq  +  dev];  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  long[sumSq  +  dev];	  return    new    double[sumSq    +    dev];    	non-compiled	[CE]  possible  loss  of  precision	19	None	replace
58	[BUG]  [BUGGY]  return  new  double[sumSq  +  sumSq];  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  new  double[sumSq  +  sumSq];  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  +  sumSq];	  return    new    double[sumSq    +    dev];    	non-compiled	[CE]  possible  loss  of  precision	19	None	replace
59	[BUG]  [BUGGY]  return  new  double[sumSq  *  dev];  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  new  double[sumSq  *  dev];  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  *  dev];	  return    new    double[sumSq    +    dev];    	non-compiled	[CE]  possible  loss  of  precision	19	None	replace
60	[BUG]  [BUGGY]  return  sumSq  +  observed[i];  [CE]  cannot  find  symbol  i  [FE]    AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  +  observed[i];  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  +  observed[i];	  return    sumSq    +    dev;    	non-compiled	[CE]  cannot  find  symbol  i	6	None	replace
61	[BUG]  [BUGGY]  return  sumSq  +  dev  *  observed;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]      AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  +  dev  *  observed;  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  +  dev  *  observed;	  return    sumSq    +    dev;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	6	None	replace
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  +  dev  *  observed.length;  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  +  dev  *  observed.length;	  return    sumSq    +    dev;    	compilable	  [FE]  AssertionFailedError  	6	6	replace
63	[BUG]  [BUGGY]  return  sumSq  +  dev  *  observed.length;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  +  dev  *  observed.length;  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  +  dev  *  observed.length;	  return    sumSq    +    dev;    	compilable	  [FE]  AssertionFailedError  	6	6	replace
64	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
65	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNonNegative(sumSq))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
66	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNegative(sumSq))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
67	[BUG]  [BUGGY]  return  sumSq  +  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  +  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
68	[BUG]  [BUGGY]  return  sumSq  +  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  +  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
69	[BUG]  [BUGGY]  return  sumSq  +  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  +  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
70	[BUG]  [BUGGY]  return  sumSq  +  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  +  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
71	[BUG]  [BUGGY]  return  sumSq  +  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  +  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
72	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  -  dev  +  1;  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  -  dev  +  1;	  return    sumSq    -    dev;    	compilable	  [FE]  AssertionFailedError  	14	6	replace
73	[BUG]  [BUGGY]  return  sumSq  -  dev  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  -  dev  +  1;  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  -  dev  +  1;	  return    sumSq    -    dev;    	compilable	  [FE]  AssertionFailedError  	14	6	replace
74	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)&&!isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
75	[BUG]  [BUGGY]  return  sumSq  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
76	[BUG]  [BUGGY]  return  sumSq  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
77	[BUG]  [BUGGY]  return  sumSq  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
78	[BUG]  [BUGGY]  return  sumSq  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
79	[BUG]  [BUGGY]  return  sumSq  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
80	[BUG]  [BUGGY]  return  dev;  if(sumSq  >  sumSq)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  dev;  if(sumSq  >  sumSq)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    dev;    if(sumSq  >  sumSq)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
81	[BUG]  [BUGGY]  return  dev;  if(sumSq  >  sumSq)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  dev;  if(sumSq  >  sumSq)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    dev;    if(sumSq  >  sumSq)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
82	[BUG]  [BUGGY]  return  dev;  if(sumSq  >  sumSq)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  dev;  if(sumSq  >  sumSq)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    dev;    if(sumSq  >  sumSq)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
83	[BUG]  [BUGGY]  return  dev;  if(sumSq  >  sumSq)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  sumSq;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  dev;  if(sumSq  >  sumSq)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  sumSq;  }  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    dev;    if(sumSq  >  sumSq)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  sumSq;  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
84	[BUG]  [BUGGY]  return  dev;  if(sumSq  >  sumSq)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ")  + "  expected  counts  must  be  non-negative  and  expected  counts  must  be  [CE]  unclosed  string  literal  [FE]            AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  dev;  if(sumSq  >  sumSq)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ")  + "  expected  counts  must  be  non-negative  and  expected  counts  must  be  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    dev;    if(sumSq  >  sumSq)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ")  + "  expected  counts  must  be  non-negative  and  expected  counts  must  be	  	non-compiled	[CE]  unclosed  string  literal	1	None	add
85	[BUG]  [BUGGY]  if(sumSq!=  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  if(sumSq!=  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq!=  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	      if(sumSq    >    observed[i])    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
86	[BUG]  [BUGGY]  if(sumSq  ==  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  if(sumSq  ==  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  ==  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	      if(sumSq    >    observed[i])    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
87	[BUG]  [BUGGY]  return  sumSq  -  dev;  long[]  dev  =  x.longValue();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  -  dev;  long[]  dev  =  x.longValue();  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    dev;    long[]  dev  =  x.longValue();	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	13	None	add
88	[BUG]  [BUGGY]  return  sumSq  -  dev;  long[]  dev  =  x.doubleValue();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  -  dev;  long[]  dev  =  x.doubleValue();  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    dev;    long[]  dev  =  x.doubleValue();	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	13	None	add
89	[BUG]  [BUGGY]  return  sumSq  -  dev;  long[]  dev  =  x.longValues();  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  -  dev;  long[]  dev  =  x.longValues();  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    dev;    long[]  dev  =  x.longValues();	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	13	None	add
90	[BUG]  [BUGGY]  return  sumSq  -  dev;  int  dev  =  sumSq  /  distribution.length;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  -  dev;  int  dev  =  sumSq  /  distribution.length;  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    dev;    int  dev  =  sumSq  /  distribution.length;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	13	None	add
91	[BUG]  [BUGGY]  return  SumSquare.doubleValue(sumSq,  sumSq);  [CE]  cannot  find  symbol  SumSquare  [FE]    AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  SumSquare.doubleValue(sumSq,  sumSq);  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  SumSquare.doubleValue(sumSq,  sumSq);	  return    dev;    	non-compiled	[CE]  cannot  find  symbol  SumSquare	2	None	replace
92	[BUG]  [BUGGY]  return  SumSquare.doubleValue(sumSq);  [CE]  cannot  find  symbol  SumSquare  [FE]      AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  SumSquare.doubleValue(sumSq);  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  SumSquare.doubleValue(sumSq);	  return    dev;    	non-compiled	[CE]  cannot  find  symbol  SumSquare	2	None	replace
93	[BUG]  [BUGGY]  return  SumSquare.valueOf(sumSq);  [CE]  cannot  find  symbol  SumSquare  [FE]        AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  SumSquare.valueOf(sumSq);  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  SumSquare.valueOf(sumSq);	  return    dev;    	non-compiled	[CE]  cannot  find  symbol  SumSquare	2	None	replace
94	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ")  in  case  of  non-negative  and  expected  counts  must  [CE]  [FE]              AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ")  in  case  of  non-negative  and  expected  counts  must  [BUGGY]    return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ")  in  case  of  non-negative  and  expected  counts  must	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNonNegative(sumSq))    {    throw    new    IllegalArgumentException(   "   ")    in    case    of    non-negative    and    expected    counts    must    be    	non-compiled	[CE]  	18	None	replace
95	[BUG]  [BUGGY]  return  new  double[sumSq  /  dev];  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  new  double[sumSq  /  dev];  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  /  dev];	  return    new    double[sumSq    +    dev];    	non-compiled	[CE]  possible  loss  of  precision	19	None	replace
96	[BUG]  [BUGGY]  return  new  double[sumSq  +  sumSq  *  dev];  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  new  double[sumSq  +  sumSq  *  dev];  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  +  sumSq  *  dev];	  return    new    double[sumSq    +    dev];    	non-compiled	[CE]  possible  loss  of  precision	19	None	replace
97	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)||  isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)||  isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)||  isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||    isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
98	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||  isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||  isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||  isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||    isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
99	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  +  dev  /  dev;  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  +  dev  /  dev;	  return    sumSq    +    dev;    	compilable	  [FE]  AssertionFailedError  	6	6	replace
100	[BUG]  [BUGGY]  return  sumSq  +  dev  /  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  +  dev  /  dev;  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  +  dev  /  dev;	  return    sumSq    +    dev;    	compilable	  [FE]  AssertionFailedError  	6	6	replace
101	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  +  dev  *  dev;  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  +  dev  *  dev;	  return    sumSq    +    dev;    	compilable	  [FE]  AssertionFailedError  	6	6	replace
102	[BUG]  [BUGGY]  return  sumSq  +  dev  *  dev;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  +  dev  *  dev;  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  +  dev  *  dev;	  return    sumSq    +    dev;    	compilable	  [FE]  AssertionFailedError  	6	6	replace
103	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(sumSq)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(sumSq)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(sumSq)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
104	[BUG]  [BUGGY]  return  sumSq  /  dev;  if(sumSq  >  dev)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  /  dev;  if(sumSq  >  dev)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev;    if(sumSq  >  dev)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
105	[BUG]  [BUGGY]  return  sumSq  /  dev;  if(sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  /  dev;  if(sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev;    if(sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
106	[BUG]  [BUGGY]  return  sumSq  /  dev;  if(sumSq  >  dev)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  /  dev;  if(sumSq  >  dev)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev;    if(sumSq  >  dev)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
107	[BUG]  [BUGGY]  return  sumSq  /  dev;  if(sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  /  dev;  if(sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev;    if(sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
108	[BUG]  [BUGGY]  return  sumSq  /  dev;  if(sumSq  >  dev)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  dev;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  /  dev;  if(sumSq  >  dev)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    /    dev;    if(sumSq  >  dev)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  dev;  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
109	[BUG]  [BUGGY]  return  new  double[sumSq  +  observed[0];  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  new  double[sumSq  +  observed[0];  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  +  observed[0];	  return    new    double[sumSq    +    dev];    	non-compiled	[CE]  ']'  expected	19	None	replace
110	[BUG]  [BUGGY]  return  new  double[sumSq  +  dev  *  observed.length];  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  new  double[sumSq  +  dev  *  observed.length];  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  new  double[sumSq  +  dev  *  observed.length];	  return    new    double[sumSq    +    dev];    	non-compiled	[CE]  possible  loss  of  precision	19	None	replace
111	[BUG]  [BUGGY]  return  dev;  if(sumSq  >  dev)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  dev;  if(sumSq  >  dev)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    dev;    if(sumSq  >  dev)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
112	[BUG]  [BUGGY]  return  dev;  if(sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  dev;  if(sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    dev;    if(sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
113	[BUG]  [BUGGY]  return  dev;  if(sumSq  >  sumSq)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ")  + "  expected  counts  must  be  non-negative  and  expected  counts  must  be  postive. ");  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  dev;  if(sumSq  >  sumSq)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ")  + "  expected  counts  must  be  non-negative  and  expected  counts  must  be  postive. ");  }  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    dev;    if(sumSq  >  sumSq)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ")  + "  expected  counts  must  be  non-negative  and  expected  counts  must  be  postive. ");  }	  	non-compiled	[CE]  	1	None	add
114	[BUG]  [BUGGY]  return  dev;  if(sumSq  >  sumSq)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ")  + "  expected  counts  must  be  non-negative  and  expected  counts  must  be  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  dev;  if(sumSq  >  sumSq)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ")  + "  expected  counts  must  be  non-negative  and  expected  counts  must  be  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    dev;    if(sumSq  >  sumSq)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ")  + "  expected  counts  must  be  non-negative  and  expected  counts  must  be	  	non-compiled	[CE]  unclosed  string  literal	1	None	add
115	[BUG]  [BUGGY]  return  sumSq  -  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  -  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
116	[BUG]  [BUGGY]  return  sumSq  -  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  -  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
117	[BUG]  [BUGGY]  return  sumSq  -  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  -  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
118	[BUG]  [BUGGY]  return  sumSq  -  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  -  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNonNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
119	[BUG]  [BUGGY]  return  sumSq  -  dev;  if(sumSq  >  dev)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  -  dev;  if(sumSq  >  dev)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    -    dev;    if(sumSq  >  dev)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
120	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ")  in  case  of  non-negative  and  expected  counts  must  be  [CE]  [FE]              AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ")  in  case  of  non-negative  and  expected  counts  must  be  [BUGGY]    return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ")  in  case  of  non-negative  and  expected  counts  must  be	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNonNegative(sumSq))    {    throw    new    IllegalArgumentException(   "   ")    in    case    of    non-negative    and    expected    counts    must    be    	non-compiled	[CE]  	18	None	replace
121	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ")  in  case  of  non-negative  and  expected  counts  must  [CE]  [FE]                AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ")  in  case  of  non-negative  and  expected  counts  must  [BUGGY]    return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNonNegative(sumSq))  {  throw  new  IllegalArgumentException( " ")  in  case  of  non-negative  and  expected  counts  must	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNonNegative(sumSq))    {    throw    new    IllegalArgumentException(   "   ")    in    case    of    non-negative    and    expected    counts    must    be    	non-compiled	[CE]  	18	None	replace
122	[BUG]  [BUGGY]  return  sumSq  +  dev;  if(sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  +  dev;  if(sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return    sumSq    +    dev;    if(sumSq  >  observed[i])  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
123	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  -  observed.length;  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  -  observed.length;	  return    sumSq    -    dev;    	compilable	  [FE]  AssertionFailedError  	14	6	replace
124	[BUG]  [BUGGY]  return  sumSq  -  observed.length;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  -  observed.length;  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  -  observed.length;	  return    sumSq    -    dev;    	compilable	  [FE]  AssertionFailedError  	14	6	replace
125	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  sumSq.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  for(int  i  =  0;  i  <  sumSq.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  sumSq.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)&&!isNonNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
126	[BUG]  [BUGGY]  if(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  if(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i].doubleValue();  }  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i].doubleValue();  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
127	[BUG]  [BUGGY]  if(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i].longValue();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  if(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i].longValue();  }  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i].longValue();  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
128	[BUG]  [BUGGY]  if(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  sumSq;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  if(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  sumSq;  }  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  sumSq;  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
129	[BUG]  [BUGGY]  if(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  dev;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  if(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  dev;  }  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	if(sumSq  >  observed[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  dev;  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
130	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  /  dev  *  observed.length;  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  /  dev  *  observed.length;	  return    sumSq    /    dev;    	compilable	  [FE]  AssertionFailedError  	4	6	replace
131	[BUG]  [BUGGY]  return  sumSq  /  dev  *  observed.length;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  /  dev  *  observed.length;  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  dev  *  observed.length;	  return    sumSq    /    dev;    	compilable	  [FE]  AssertionFailedError  	4	6	replace
132	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  +  observed.length;  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  +  observed.length;	  return    sumSq    +    dev;    	compilable	  [FE]  AssertionFailedError  	6	6	replace
133	[BUG]  [BUGGY]  return  sumSq  +  observed.length;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  +  observed.length;  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  +  observed.length;	  return    sumSq    +    dev;    	compilable	  [FE]  AssertionFailedError  	6	6	replace
134	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  -  sumSq;  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  -  sumSq;	  return    dev;    	compilable	  [FE]  AssertionFailedError  	2	6	replace
135	[BUG]  [BUGGY]  return  sumSq  -  sumSq;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  return  sumSq  -  sumSq;  [BUGGY]    }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  -  sumSq;	  return    dev;    	compilable	  [FE]  AssertionFailedError  	2	6	replace
136	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  sumSq.length;  i++)  {  if(!isPositive(expected)&&!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }    [BUGGY]  for(int  i  =  0;  i  <  sumSq.length;  i++)  {  if(!isPositive(expected)&&!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	for(int  i  =  0;  i  <  sumSq.length;  i++)  {  if(!isPositive(expected)&&!isNegative(sumSq))  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)&&!isNegative(sumSq))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
