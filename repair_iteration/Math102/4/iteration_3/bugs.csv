bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  dev  =  0.002;  double  dev  =  0.002;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.002;  double  dev  =  0.002;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.002;    double  dev  =  0.002;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	19	None	add
2	[BUG]  [BUGGY]  double  dev  =  0.002;  Double  dev  =  0.002;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.002;  Double  dev  =  0.002;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.002;    Double  dev  =  0.002;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	19	None	add
3	[BUG]  [BUGGY]  double  dev  =  0.002;  int  dev  =  0.002;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.002;  int  dev  =  0.002;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.002;    int  dev  =  0.002;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	19	None	add
4	[BUG]  [BUGGY]  double  dev  =  0.002;  long  dev  =  0.002;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.002;  long  dev  =  0.002;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.002;    long  dev  =  0.002;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	19	None	add
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  long[i]  *  long[i];  }  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  long[i]  *  long[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  long[i]  *  long[i];  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    long[i]    *    long[i];    }    	non-compiled	[CE]  ']'  expected	82	None	replace
6	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  long[i];  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  long[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  long[i];  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    long[i]    *    long[i];    }    	non-compiled	[CE]  >  expected	82	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  Long[i]  *  long[i];  }  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  Long[i]  *  long[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  Long[i]  *  long[i];  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    long[i]    *    long[i];    }    	non-compiled	[CE]  ']'  expected	82	None	replace
8	[BUG]  [BUGGY]  long[]  expected  =  observed.length  /  1;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  long[]  expected  =  observed.length  /  1;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long[]  expected  =  observed.length  /  1;	  long[]    expected    =    observed.length    +    1;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	84	None	replace
9	[BUG]  [BUGGY]  long[]  expected  =  observed.length  +  2;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  long[]  expected  =  observed.length  +  2;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long[]  expected  =  observed.length  +  2;	  long[]    expected    =    observed.length    +    1;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	84	None	replace
10	[BUG]  [BUGGY]  long[]  expected  =  observed.length  *  1;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  long[]  expected  =  observed.length  *  1;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long[]  expected  =  observed.length  *  1;	  long[]    expected    =    observed.length    +    1;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	84	None	replace
11	[BUG]  [BUGGY]  int  dev  =  0.5;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  dev  =  0.5;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  dev  =  0.5;	  double    dev    =    0.5;    int    dev    =    0.5;    	non-compiled	[CE]  possible  loss  of  precision	54	None	replace
12	[BUG]  [BUGGY]  long  dev  =  0.5;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  long  dev  =  0.5;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long  dev  =  0.5;	  double    dev    =    0.5;    int    dev    =    0.5;    	non-compiled	[CE]  possible  loss  of  precision	54	None	replace
13	[BUG]  [BUGGY]  double  observed.length  =  observed[1];  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  observed.length  =  observed[1];  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double  observed.length  =  observed[1];	  double    observed.length    =    observed[0];    	non-compiled	[CE]  ';'  expected	114	None	replace
14	[BUG]  [BUGGY]  double  observed.length  =  observed[0]  /  2;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  observed.length  =  observed[0]  /  2;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double  observed.length  =  observed[0]  /  2;	  double    observed.length    =    observed[0];    	non-compiled	[CE]  ';'  expected	114	None	replace
15	[BUG]  [BUGGY]  long  observed.length  =  observed[0];  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  long  observed.length  =  observed[0];  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long  observed.length  =  observed[0];	  double    observed.length    =    observed[0];    	non-compiled	[CE]  ';'  expected	114	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  observed[i]  /  1;  }  [CE]  long  cannot  be  dereferenced  [FE]                      AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  observed[i]  /  1;  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  observed[i]  /  1;  }	  for(int    i    =    0;    i    <    observed[i].length;    i++)    {    sumSq    +=    observed[i]    -    1;    }    	non-compiled	[CE]  long  cannot  be  dereferenced	6	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected[i].length;  i++)  {  sumSq  +=  observed[i]  -  1;  }  [CE]  double  cannot  be  dereferenced  [FE]                        AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected[i].length;  i++)  {  sumSq  +=  observed[i]  -  1;  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected[i].length;  i++)  {  sumSq  +=  observed[i]  -  1;  }	  for(int    i    =    0;    i    <    observed[i].length;    i++)    {    sumSq    +=    observed[i]    -    1;    }    	non-compiled	[CE]  double  cannot  be  dereferenced	6	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  observed[i]  *  1;  }  [CE]  long  cannot  be  dereferenced  [FE]                          AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  observed[i]  *  1;  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  observed[i]  *  1;  }	  for(int    i    =    0;    i    <    observed[i].length;    i++)    {    sumSq    +=    observed[i]    -    1;    }    	non-compiled	[CE]  long  cannot  be  dereferenced	6	None	replace
19	[BUG]  [BUGGY]  int  dev  =  1.0;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  dev  =  1.0;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  dev  =  1.0;	  double    dev    =    1.0;    int    dev    =    1.0;    	non-compiled	[CE]  possible  loss  of  precision	67	None	replace
20	[BUG]  [BUGGY]  long  dev  =  1.0;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  long  dev  =  1.0;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long  dev  =  1.0;	  double    dev    =    1.0;    int    dev    =    1.0;    	non-compiled	[CE]  possible  loss  of  precision	67	None	replace
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  Double  dev  =  0.0001;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	add	Double  dev  =  0.0001;	  double    dev    =    0.0001;    Double    dev    =    0.0001;    	compilable	  [FE]  AssertionFailedError  	58	6	replace
22	[BUG]  [BUGGY]  Double  dev  =  0.0001;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  Double  dev  =  0.0001;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	Double  dev  =  0.0001;	  double    dev    =    0.0001;    Double    dev    =    0.0001;    	compilable	  [FE]  AssertionFailedError  	58	6	replace
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.0000;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	add	double  dev  =  0.0000;	  double    dev    =    0.0001;    Double    dev    =    0.0001;    	compilable	  [FE]  AssertionFailedError  	58	6	replace
24	[BUG]  [BUGGY]  double  dev  =  0.0000;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.0000;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double  dev  =  0.0000;	  double    dev    =    0.0001;    Double    dev    =    0.0001;    	compilable	  [FE]  AssertionFailedError  	58	6	replace
25	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  1;  }  [CE]  cannot  find  symbol  dev  [FE]                        AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  1;  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  1;  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i]    -    1;    }    	non-compiled	[CE]  cannot  find  symbol  dev	7	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected[i].length;  i++)  {  sumSq  +=  long[i]  *  observed[i];  }  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected[i].length;  i++)  {  sumSq  +=  long[i]  *  observed[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected[i].length;  i++)  {  sumSq  +=  long[i]  *  observed[i];  }	  for(int    i    =    0;    i    <    observed[i].length;    i++)    {    sumSq    +=    long[i]    *    observed[i];    }    	non-compiled	[CE]  ']'  expected	27	None	replace
27	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  long[i]  *  observed[i];  }  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  long[i]  *  observed[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  long[i]  *  observed[i];  }	  for(int    i    =    0;    i    <    observed[i].length;    i++)    {    sumSq    +=    long[i]    *    observed[i];    }    	non-compiled	[CE]  ']'  expected	27	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected[i];  i++)  {  sumSq  +=  observed[i];  }  [CE]  cannot  find  symbol  dev  [FE]                      AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected[i];  i++)  {  sumSq  +=  observed[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected[i];  i++)  {  sumSq  +=  observed[i];  }	  for(int    i    =    0;    i    <    observed[i];    i++)    {    sumSq    +=    observed[i];    }    	non-compiled	[CE]  cannot  find  symbol  dev	35	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i]  -  1;  i++)  {  sumSq  +=  observed[i];  }  [CE]  cannot  find  symbol  dev  [FE]                        AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed[i]  -  1;  i++)  {  sumSq  +=  observed[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed[i]  -  1;  i++)  {  sumSq  +=  observed[i];  }	  for(int    i    =    0;    i    <    observed[i];    i++)    {    sumSq    +=    observed[i];    }    	non-compiled	[CE]  cannot  find  symbol  dev	35	None	replace
30	[BUG]  [BUGGY]  long[]  expected  =  observed.length  -  1L;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  long[]  expected  =  observed.length  -  1L;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long[]  expected  =  observed.length  -  1L;	  long[]    expected    =    observed.length    -    1;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	73	None	replace
31	[BUG]  [BUGGY]  long  dev  =  0.0001;  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  long  dev  =  0.0001;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long  dev  =  0.0001;	  double    dev    =    0.0001;    double    dev    =    0.001;    	non-compiled	[CE]  possible  loss  of  precision	61	None	replace
32	[BUG]  [BUGGY]  int  observed.length  =  observed.length  /  2;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  observed.length  =  observed.length  /  2;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  observed.length  =  observed.length  /  2;	  int    observed.length    =    observed.length    -    2;    	non-compiled	[CE]  ';'  expected	33	None	replace
33	[BUG]  [BUGGY]  int  observed.length  =  observed.length  -  3;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  observed.length  =  observed.length  -  3;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  observed.length  =  observed.length  -  3;	  int    observed.length    =    observed.length    -    2;    	non-compiled	[CE]  ';'  expected	33	None	replace
34	[BUG]  [BUGGY]  int  dev  =  0.0;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  dev  =  0.0;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  dev  =  0.0;	  double    dev    =    0.0;    int    dev    =    0.0;    	non-compiled	[CE]  possible  loss  of  precision	14	None	replace
35	[BUG]  [BUGGY]  long  dev  =  0.0;  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  long  dev  =  0.0;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long  dev  =  0.0;	  double    dev    =    0.0;    int    dev    =    0.0;    	non-compiled	[CE]  possible  loss  of  precision	14	None	replace
36	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  long[i]  /  long[i];  }  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  long[i]  /  long[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  long[i]  /  long[i];  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    long[i]    /    long[i];    }    	non-compiled	[CE]  ']'  expected	76	None	replace
37	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  /  long[i];  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  /  long[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  /  long[i];  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    long[i]    /    long[i];    }    	non-compiled	[CE]  >  expected	76	None	replace
38	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  Double  dev  =  1.0;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	add	Double  dev  =  1.0;	  double    dev    =    1.0;    Double    dev    =    1.0;    	compilable	  [FE]  AssertionFailedError  	66	6	replace
39	[BUG]  [BUGGY]  Double  dev  =  1.0;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  Double  dev  =  1.0;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	Double  dev  =  1.0;	  double    dev    =    1.0;    Double    dev    =    1.0;    	compilable	  [FE]  AssertionFailedError  	66	6	replace
40	[BUG]  [BUGGY]  if(sumSq  >=  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  long[i];  }  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  if(sumSq  >=  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  long[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	if(sumSq  >=  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  long[i];  }	  if(sumSq    >=    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    long[i]    /    long[i];    }    	non-compiled	[CE]  ']'  expected	83	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected[i]  *  distribution[i];  i++)  {  sumSq  +=  observed[i]  *  distribution[i];  }  [CE]  array  required,  but  ChiSquaredDistribution  found  [FE]                    AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected[i]  *  distribution[i];  i++)  {  sumSq  +=  observed[i]  *  distribution[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected[i]  *  distribution[i];  i++)  {  sumSq  +=  observed[i]  *  distribution[i];  }	  for(int    i    =    0;    i    <    observed[i]    *    distribution[i];    i++)    {    sumSq    +=    observed[i]    *    distribution[i];    }    	non-compiled	[CE]  array  required,  but  ChiSquaredDistribution  found	43	None	replace
42	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i]  *  expected[i];  i++)  {  sumSq  +=  observed[i]  *  distribution[i];  }  [CE]  array  required,  but  ChiSquaredDistribution  found  [FE]                      AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed[i]  *  expected[i];  i++)  {  sumSq  +=  observed[i]  *  distribution[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed[i]  *  expected[i];  i++)  {  sumSq  +=  observed[i]  *  distribution[i];  }	  for(int    i    =    0;    i    <    observed[i]    *    distribution[i];    i++)    {    sumSq    +=    observed[i]    *    distribution[i];    }    	non-compiled	[CE]  array  required,  but  ChiSquaredDistribution  found	43	None	replace
43	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i]  *  distribution[i]  +  1;  i++)  {  sumSq  +=  observed[i]  *  distribution[i];  }  [CE]  array  required,  but  ChiSquaredDistribution  found  [FE]                        AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed[i]  *  distribution[i]  +  1;  i++)  {  sumSq  +=  observed[i]  *  distribution[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed[i]  *  distribution[i]  +  1;  i++)  {  sumSq  +=  observed[i]  *  distribution[i];  }	  for(int    i    =    0;    i    <    observed[i]    *    distribution[i];    i++)    {    sumSq    +=    observed[i]    *    distribution[i];    }    	non-compiled	[CE]  array  required,  but  ChiSquaredDistribution  found	43	None	replace
44	[BUG]  [BUGGY]  double  observed.length  =  expected[0];  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  observed.length  =  expected[0];  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double  observed.length  =  expected[0];	  int    observed.length    =    expected[0];    	non-compiled	[CE]  ';'  expected	80	None	replace
45	[BUG]  [BUGGY]  long  observed.length  =  expected[0];  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  long  observed.length  =  expected[0];  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long  observed.length  =  expected[0];	  int    observed.length    =    expected[0];    	non-compiled	[CE]  ';'  expected	80	None	replace
46	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected[i].length;  i++)  {  sumSq  +=  observed[i];  }  [CE]  double  cannot  be  dereferenced  [FE]                        AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected[i].length;  i++)  {  sumSq  +=  observed[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected[i].length;  i++)  {  sumSq  +=  observed[i];  }	  for(int    i    =    0;    i    <    observed[i].length;    i++)    {    sumSq    +=    observed[i];    }    	non-compiled	[CE]  double  cannot  be  dereferenced	36	None	replace
47	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  expected[i];  }  [CE]  long  cannot  be  dereferenced  [FE]                          AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  expected[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  expected[i];  }	  for(int    i    =    0;    i    <    observed[i].length;    i++)    {    sumSq    +=    observed[i];    }    	non-compiled	[CE]  long  cannot  be  dereferenced	36	None	replace
48	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  expected[i];  }  [CE]  cannot  find  symbol  dev  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  expected[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  expected[i];  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    distributed[i]    /    expected[i];    }    	non-compiled	[CE]  cannot  find  symbol  dev	23	None	replace
49	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  /  observed[i];  }  [CE]  cannot  find  symbol  dev  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  /  observed[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  /  observed[i];  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    distributed[i]    /    expected[i];    }    	non-compiled	[CE]  cannot  find  symbol  dev	23	None	replace
50	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  /  expected[i];  }  [CE]  cannot  find  symbol  dev  [FE]                    AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  /  expected[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  /  expected[i];  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    distributed[i]    /    expected[i];    }    	non-compiled	[CE]  cannot  find  symbol  dev	23	None	replace
51	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  estimated[i]  /  observed[i];  }  [CE]  cannot  find  symbol  estimated  [FE]                      AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  estimated[i]  /  observed[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  estimated[i]  /  observed[i];  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    distributed[i]    /    expected[i];    }    	non-compiled	[CE]  cannot  find  symbol  estimated	23	None	replace
52	[BUG]  [BUGGY]  int  dev  =  0.0001;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  dev  =  0.0001;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  dev  =  0.0001;	  double    dev    =    0.0001;    int    dev    =    0.0001;    	non-compiled	[CE]  possible  loss  of  precision	59	None	replace
53	[BUG]  [BUGGY]  int  dev  =  0.001;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  dev  =  0.001;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  dev  =  0.001;	  double    dev    =    0.0001;    int    dev    =    0.0001;    	non-compiled	[CE]  possible  loss  of  precision	59	None	replace
54	[BUG]  [BUGGY]  long[]  expected  =  observed.length  -  sumSq;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  long[]  expected  =  observed.length  -  sumSq;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long[]  expected  =  observed.length  -  sumSq;	  long[]    expected    =    observed.length    -    2;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	74	None	replace
55	[BUG]  [BUGGY]  long[]  expected  =  observed.length  /  2  +  sumSq;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  long[]  expected  =  observed.length  /  2  +  sumSq;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long[]  expected  =  observed.length  /  2  +  sumSq;	  long[]    expected    =    observed.length    /    2;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	75	None	replace
56	[BUG]  [BUGGY]  long[]  expected  =  observed.length  /  2L;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  long[]  expected  =  observed.length  /  2L;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long[]  expected  =  observed.length  /  2L;	  long[]    expected    =    observed.length    /    2;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	75	None	replace
57	[BUG]  [BUGGY]  long[]  expected  =  observed.length  /  2  +  1;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                      AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  long[]  expected  =  observed.length  /  2  +  1;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long[]  expected  =  observed.length  /  2  +  1;	  long[]    expected    =    observed.length    /    2;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	75	None	replace
58	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  *  distribution[i];  }  [CE]  array  required,  but  ChiSquaredDistribution  found  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  *  distribution[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  *  distribution[i];  }	  if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    *    distribution[i];    }    	non-compiled	[CE]  array  required,  but  ChiSquaredDistribution  found	99	None	replace
59	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  reported[i]  *  distribution[i];  }  [CE]  cannot  find  symbol  reported  [FE]                    AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  reported[i]  *  distribution[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  reported[i]  *  distribution[i];  }	  if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    *    distribution[i];    }    	non-compiled	[CE]  cannot  find  symbol  reported	99	None	replace
60	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected[i]  -  1;  i++)  {  sumSq  +=  observed[i]  -  1;  }  [CE]  cannot  find  symbol  dev  [FE]                    AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected[i]  -  1;  i++)  {  sumSq  +=  observed[i]  -  1;  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected[i]  -  1;  i++)  {  sumSq  +=  observed[i]  -  1;  }	  for(int    i    =    0;    i    <    observed[i]    -    1;    i++)    {    sumSq    +=    observed[i]    -    1;    }    	non-compiled	[CE]  cannot  find  symbol  dev	5	None	replace
61	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i]  -  1;  i++)  {  sumSq  +=  observed[i]  /  1;  }  [CE]  cannot  find  symbol  dev  [FE]                      AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed[i]  -  1;  i++)  {  sumSq  +=  observed[i]  /  1;  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed[i]  -  1;  i++)  {  sumSq  +=  observed[i]  /  1;  }	  for(int    i    =    0;    i    <    observed[i]    -    1;    i++)    {    sumSq    +=    observed[i]    -    1;    }    	non-compiled	[CE]  cannot  find  symbol  dev	5	None	replace
62	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i]  /  1;  i++)  {  sumSq  +=  observed[i]  -  1;  }  [CE]  cannot  find  symbol  dev  [FE]                        AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed[i]  /  1;  i++)  {  sumSq  +=  observed[i]  -  1;  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed[i]  /  1;  i++)  {  sumSq  +=  observed[i]  -  1;  }	  for(int    i    =    0;    i    <    observed[i]    -    1;    i++)    {    sumSq    +=    observed[i]    -    1;    }    	non-compiled	[CE]  cannot  find  symbol  dev	5	None	replace
63	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distribution[i]  /  observed[i];  }  [CE]  array  required,  but  ChiSquaredDistribution  found  [FE]            AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distribution[i]  /  observed[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distribution[i]  /  observed[i];  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    /    distribution[i];    }    	non-compiled	[CE]  array  required,  but  ChiSquaredDistribution  found	106	None	replace
64	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distributed[i]  /  this.distribution[i];  }  [CE]  cannot  find  symbol  distributed  [FE]              AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distributed[i]  /  this.distribution[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distributed[i]  /  this.distribution[i];  }	  if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    /    distribution[i];    }    	non-compiled	[CE]  cannot  find  symbol  distributed	107	None	replace
65	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  expected[i];  }  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  expected[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  expected[i];  }	  if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    long[i]    *    observed[i];    }    	non-compiled	[CE]  ']'  expected	104	None	replace
66	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  Long[i]  *  observed[i];  }  [CE]  cannot  find  symbol  Long  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  Long[i]  *  observed[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  Long[i]  *  observed[i];  }	  if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    long[i]    *    observed[i];    }    	non-compiled	[CE]  cannot  find  symbol  Long	104	None	replace
67	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i]  /  long[i];  i++)  {  sumSq  +=  observed[i]  *  long[i];  }  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed[i]  /  long[i];  i++)  {  sumSq  +=  observed[i]  *  long[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed[i]  /  long[i];  i++)  {  sumSq  +=  observed[i]  *  long[i];  }	  for(int    i    =    0;    i    <    observed[i]    /    long[i];    i++)    {    sumSq    +=    observed[i]    /    long[i];    }    	non-compiled	[CE]  ']'  expected	78	None	replace
68	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected[i]  /  long[i];  i++)  {  sumSq  +=  observed[i]  /  long[i];  }  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected[i]  /  long[i];  i++)  {  sumSq  +=  observed[i]  /  long[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected[i]  /  long[i];  i++)  {  sumSq  +=  observed[i]  /  long[i];  }	  for(int    i    =    0;    i    <    observed[i]    /    long[i];    i++)    {    sumSq    +=    observed[i]    /    long[i];    }    	non-compiled	[CE]  ']'  expected	78	None	replace
69	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i]  *  long[i];  i++)  {  sumSq  +=  observed[i]  *  long[i];  }  [CE]  ']'  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed[i]  *  long[i];  i++)  {  sumSq  +=  observed[i]  *  long[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed[i]  *  long[i];  i++)  {  sumSq  +=  observed[i]  *  long[i];  }	  for(int    i    =    0;    i    <    observed[i]    /    long[i];    i++)    {    sumSq    +=    observed[i]    /    long[i];    }    	non-compiled	[CE]  ']'  expected	78	None	replace
70	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i];  }  [CE]  cannot  find  symbol  dev  [FE]                          AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i];  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i];    }    	non-compiled	[CE]  cannot  find  symbol  dev	37	None	replace
71	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  Double  dev  =  0.001;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	add	Double  dev  =  0.001;	  double    dev    =    0.001;    Double    dev    =    0.001;    	compilable	  [FE]  AssertionFailedError  	48	6	replace
72	[BUG]  [BUGGY]  Double  dev  =  0.001;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  Double  dev  =  0.001;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	Double  dev  =  0.001;	  double    dev    =    0.001;    Double    dev    =    0.001;    	compilable	  [FE]  AssertionFailedError  	48	6	replace
73	[BUG]  [BUGGY]  long  observed[]  =  observed.length  /  2;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  long  observed[]  =  observed.length  /  2;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long  observed[]  =  observed.length  /  2;	  long    observed[]    =    observed.length    -    2;    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	64	None	replace
74	[BUG]  [BUGGY]  int  observed[]  =  observed.length  -  2;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  observed[]  =  observed.length  -  2;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  observed[]  =  observed.length  -  2;	  long    observed[]    =    observed.length    -    2;    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	64	None	replace
75	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  -  observed[i];  }  [CE]  cannot  find  symbol  dev  [FE]              AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  -  observed[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  -  observed[i];  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    distribution[i]    -    expected[i];    }    	non-compiled	[CE]  cannot  find  symbol  dev	88	None	replace
76	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  distribution[i]  -  observed[i];  }  [CE]  array  required,  but  ChiSquaredDistribution  found  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  distribution[i]  -  observed[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  distribution[i]  -  observed[i];  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    distribution[i]    -    expected[i];    }    	non-compiled	[CE]  array  required,  but  ChiSquaredDistribution  found	88	None	replace
77	[BUG]  [BUGGY]  long[]  observed  =  observed.length  -  1L;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  long[]  observed  =  observed.length  -  1L;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long[]  observed  =  observed.length  -  1L;	  long[]    observed    =    observed.length    -    1;    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	38	None	replace
78	[BUG]  [BUGGY]  long[]  observed  =  observed.length  /  1;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  long[]  observed  =  observed.length  /  1;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long[]  observed  =  observed.length  /  1;	  long[]    observed    =    observed.length    -    1;    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	38	None	replace
79	[BUG]  [BUGGY]  long  observed.length  =  observed[1];  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  long  observed.length  =  observed[1];  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long  observed.length  =  observed[1];	  int    observed.length    =    observed[1];    	non-compiled	[CE]  ';'  expected	2	None	replace
80	[BUG]  [BUGGY]  int  observed.length  =  observed[1]  &  0xff;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  observed.length  =  observed[1]  &  0xff;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  observed.length  =  observed[1]  &  0xff;	  int    observed.length    =    observed[1];    	non-compiled	[CE]  ';'  expected	2	None	replace
81	[BUG]  [BUGGY]  float  dev  =  0.0;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  float  dev  =  0.0;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	float  dev  =  0.0;	  double    dev    =    0.0;    long    dev    =    0.0;    	non-compiled	[CE]  possible  loss  of  precision	13	None	replace
82	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  distribution[i]  /  observed[i];  }  [CE]  array  required,  but  ChiSquaredDistribution  found  [FE]              AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  distribution[i]  /  observed[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  distribution[i]  /  observed[i];  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    distribution[i]    /    expected[i];    }    	non-compiled	[CE]  array  required,  but  ChiSquaredDistribution  found	22	None	replace
83	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  /  distribution[i];  }  [CE]  array  required,  but  ChiSquaredDistribution  found  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  /  distribution[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  /  distribution[i];  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    distribution[i]    /    expected[i];    }    	non-compiled	[CE]  array  required,  but  ChiSquaredDistribution  found	22	None	replace
84	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i];  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i];  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i];    }    	non-compiled	[CE]  >  expected	34	None	replace
85	[BUG]  [BUGGY]  int  observed.length  =  observed[0]  /  1;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  observed.length  =  observed[0]  /  1;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  observed.length  =  observed[0]  /  1;	  int    observed.length    =    observed[0]    -    1;    	non-compiled	[CE]  ';'  expected	1	None	replace
86	[BUG]  [BUGGY]  int  observed.length  =  observed[1]  -  1;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  observed.length  =  observed[1]  -  1;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  observed.length  =  observed[1]  -  1;	  int    observed.length    =    observed[0]    -    1;    	non-compiled	[CE]  ';'  expected	1	None	replace
87	[BUG]  [BUGGY]  double  observed.length  =  observed[0]  -  1;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  observed.length  =  observed[0]  -  1;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double  observed.length  =  observed[0]  -  1;	  int    observed.length    =    observed[0]    -    1;    	non-compiled	[CE]  ';'  expected	1	None	replace
88	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=((  double)expected[i]  -  expected[i]);  }  [CE]  long  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=((  double)expected[i]  -  expected[i]);  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=((  double)expected[i]  -  expected[i]);  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    ((    double)expected[i]    -    observed[i]);    }    	non-compiled	[CE]  long  cannot  be  dereferenced	93	None	replace
89	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected[i];  i++)  {  sumSq  +=  long[i]  *  observed[i];  }  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected[i];  i++)  {  sumSq  +=  long[i]  *  observed[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected[i];  i++)  {  sumSq  +=  long[i]  *  observed[i];  }	  for(int    i    =    0;    i    <    observed[i];    i++)    {    sumSq    +=    long[i]    *    observed[i];    }    	non-compiled	[CE]  ']'  expected	28	None	replace
90	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed[i];  i++)  {  sumSq  +=  long[i]  *  observed[i];  }  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  i  =  0;  i  <  observed[i];  i++)  {  sumSq  +=  long[i]  *  observed[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  i  =  0;  i  <  observed[i];  i++)  {  sumSq  +=  long[i]  *  observed[i];  }	  for(int    i    =    0;    i    <    observed[i];    i++)    {    sumSq    +=    long[i]    *    observed[i];    }    	non-compiled	[CE]  ']'  expected	28	None	replace
91	[BUG]  [BUGGY]  float  dev  =  0.0001;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  float  dev  =  0.0001;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	float  dev  =  0.0001;	  double    dev    =    0.0001;    float    dev    =    0.0001;    	non-compiled	[CE]  possible  loss  of  precision	85	None	replace
92	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.3;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	add	double  dev  =  0.3;	  double    dev    =    0.5;    double    dev    =    0.3;    	compilable	  [FE]  AssertionFailedError  	56	6	replace
93	[BUG]  [BUGGY]  double  dev  =  0.3;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.3;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double  dev  =  0.3;	  double    dev    =    0.5;    double    dev    =    0.3;    	compilable	  [FE]  AssertionFailedError  	56	6	replace
94	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	add	double  dev  =  0.;	  double    dev    =    0.5;    double    dev    =    0.;    	compilable	  [FE]  AssertionFailedError  	113	6	replace
95	[BUG]  [BUGGY]  double  dev  =  0.;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double  dev  =  0.;	  double    dev    =    0.5;    double    dev    =    0.;    	compilable	  [FE]  AssertionFailedError  	113	6	replace
96	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distributed[i]  *  Distribution[i];  }  [CE]  cannot  find  symbol  distributed  [FE]                    AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distributed[i]  *  Distribution[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distributed[i]  *  Distribution[i];  }	  if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    distributed[i]    *    distribution[i];    }    	non-compiled	[CE]  cannot  find  symbol  distributed	100	None	replace
97	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  distributed[i]  *  distribution[i];  }  [CE]  cannot  find  symbol  distributed  [FE]                      AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  distributed[i]  *  distribution[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  distributed[i]  *  distribution[i];  }	  if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    distributed[i]    *    distribution[i];    }    	non-compiled	[CE]  cannot  find  symbol  distributed	100	None	replace
98	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  long[i];  }  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  long[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  long[i];  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i]    /    long[i];    }    	non-compiled	[CE]  ']'  expected	77	None	replace
99	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  observed[i]  /  long[i];  }  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  observed[i]  /  long[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  observed[i]  /  long[i];  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i]    /    long[i];    }    	non-compiled	[CE]  ']'  expected	77	None	replace
100	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  long[i];  }  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  long[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  long[i];  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i]    /    long[i];    }    	non-compiled	[CE]  >  expected	77	None	replace
101	[BUG]  [BUGGY]  double  dev  =  0.5d;  double  dev  =  0.5d;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.5d;  double  dev  =  0.5d;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.5d;    double  dev  =  0.5d;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	89	None	add
102	[BUG]  [BUGGY]  double  dev  =  0.5d;  Double  dev  =  0.5d;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.5d;  Double  dev  =  0.5d;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.5d;    Double  dev  =  0.5d;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	89	None	add
103	[BUG]  [BUGGY]  double  dev  =  0.5d;  long  dev  =  0.5d;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.5d;  long  dev  =  0.5d;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.5d;    long  dev  =  0.5d;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	89	None	add
104	[BUG]  [BUGGY]  double  dev  =  0.5d;  int  dev  =  0.5d;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.5d;  int  dev  =  0.5d;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.5d;    int  dev  =  0.5d;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	89	None	add
105	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  constant[i]  *  long[i];  }  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  constant[i]  *  long[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  constant[i]  *  long[i];  }	  if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    *    long[i];    }    	non-compiled	[CE]  ']'  expected	103	None	replace
106	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  monitored[i]  *  long[i];  }  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  monitored[i]  *  long[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  monitored[i]  *  long[i];  }	  if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    *    long[i];    }    	non-compiled	[CE]  ']'  expected	103	None	replace
107	[BUG]  [BUGGY]  long  dev  =  0.001;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  long  dev  =  0.001;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long  dev  =  0.001;	  double    dev    =    0.001;    long    dev    =    0.001;    	non-compiled	[CE]  possible  loss  of  precision	50	None	replace
108	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  distribution[i];  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  distribution[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  distribution[i];  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    *    distribution[i];    }    	non-compiled	[CE]  >  expected	98	None	replace
109	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  -  1;  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  -  1;  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  -  1;  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    -    1;    }    	non-compiled	[CE]  >  expected	4	None	replace
110	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  distribution[i]  *  observed[i];  }  [CE]  array  required,  but  ChiSquaredDistribution  found  [FE]                      AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  distribution[i]  *  observed[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  distribution[i]  *  observed[i];  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    distribution[i]    *    expected[i];    }    	non-compiled	[CE]  array  required,  but  ChiSquaredDistribution  found	44	None	replace
111	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distribution[i]  *  expected[i];  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distribution[i]  *  expected[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distribution[i]  *  expected[i];  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    distribution[i]    *    expected[i];    }    	non-compiled	[CE]  >  expected	44	None	replace
112	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.00;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	add	double  dev  =  0.00;	  double    dev    =    0.0;    double    dev    =    0.00;    	compilable	  [FE]  AssertionFailedError  	95	6	replace
113	[BUG]  [BUGGY]  double  dev  =  0.00;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.00;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double  dev  =  0.00;	  double    dev    =    0.0;    double    dev    =    0.00;    	compilable	  [FE]  AssertionFailedError  	95	6	replace
114	[BUG]  [BUGGY]  double  dev  =  0.5  +  observed.length;  double  dev  =  0.5  +  observed.length;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.5  +  observed.length;  double  dev  =  0.5  +  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.5    +    observed.length;    double  dev  =  0.5  +  observed.length;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	15	None	add
115	[BUG]  [BUGGY]  double  dev  =  0.5  +  observed.length;  Double  dev  =  0.5  +  observed.length;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.5  +  observed.length;  Double  dev  =  0.5  +  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.5    +    observed.length;    Double  dev  =  0.5  +  observed.length;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	15	None	add
116	[BUG]  [BUGGY]  double  dev  =  0.5  +  observed.length;  int  dev  =  0.5  +  observed.length;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.5  +  observed.length;  int  dev  =  0.5  +  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.5    +    observed.length;    int  dev  =  0.5  +  observed.length;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	15	None	add
117	[BUG]  [BUGGY]  double  dev  =  0.5  +  observed.length;  long  dev  =  0.5  +  observed.length;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.5  +  observed.length;  long  dev  =  0.5  +  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.5    +    observed.length;    long  dev  =  0.5  +  observed.length;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	15	None	add
118	[BUG]  [BUGGY]  double  dev  =  0.5  +  observed.length;  double  dev  =  0.5  +  observation.length;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.5  +  observed.length;  double  dev  =  0.5  +  observation.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.5    +    observed.length;    double  dev  =  0.5  +  observation.length;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	15	None	add
119	[BUG]  [BUGGY]  double  dev  =  0.0002;  double  dev  =  0.0002;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.0002;  double  dev  =  0.0002;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.0002;    double  dev  =  0.0002;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	8	None	add
120	[BUG]  [BUGGY]  double  dev  =  0.0002;  Double  dev  =  0.0002;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.0002;  Double  dev  =  0.0002;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.0002;    Double  dev  =  0.0002;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	8	None	add
121	[BUG]  [BUGGY]  double  dev  =  0.0002;  int  dev  =  0.0002;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.0002;  int  dev  =  0.0002;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.0002;    int  dev  =  0.0002;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	8	None	add
122	[BUG]  [BUGGY]  double  dev  =  0.0002;  long  dev  =  0.0002;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.0002;  long  dev  =  0.0002;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.0002;    long  dev  =  0.0002;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	8	None	add
123	[BUG]  [BUGGY]  double  dev  =  0.0002;  double  dev  =  0.002;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.0002;  double  dev  =  0.002;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.0002;    double  dev  =  0.002;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	8	None	add
124	[BUG]  [BUGGY]  int  observed[]  =  observed.length  -  1;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  observed[]  =  observed.length  -  1;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  observed[]  =  observed.length  -  1;	  long    observed[]    =    observed.length    -    1;    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	63	None	replace
125	[BUG]  [BUGGY]  long  observed[]  =  observed.length  /  1;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  long  observed[]  =  observed.length  /  1;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long  observed[]  =  observed.length  /  1;	  long    observed[]    =    observed.length    -    1;    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	63	None	replace
126	[BUG]  [BUGGY]  long  observed[]  =  observed.length  -  1L;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  long  observed[]  =  observed.length  -  1L;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long  observed[]  =  observed.length  -  1L;	  long    observed[]    =    observed.length    -    1;    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	63	None	replace
127	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  Double  dev  =  0.0;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	add	Double  dev  =  0.0;	  double    dev    =    0.0;    Double    dev    =    0.0;    	compilable	  [FE]  AssertionFailedError  	12	6	replace
128	[BUG]  [BUGGY]  Double  dev  =  0.0;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  Double  dev  =  0.0;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	Double  dev  =  0.0;	  double    dev    =    0.0;    Double    dev    =    0.0;    	compilable	  [FE]  AssertionFailedError  	12	6	replace
129	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  long[i]  *  expected[i];  }  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  long[i]  *  expected[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  long[i]  *  expected[i];  }	  if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    long[i]    *    expected[i];    }    	non-compiled	[CE]  ']'  expected	105	None	replace
130	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  short[i]  *  expected[i];  }  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  short[i]  *  expected[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  short[i]  *  expected[i];  }	  if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    long[i]    *    expected[i];    }    	non-compiled	[CE]  ']'  expected	105	None	replace
131	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  Long[i]  *  expected[i];  }  [CE]  cannot  find  symbol  Long  [FE]                    AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  Long[i]  *  expected[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  Long[i]  *  expected[i];  }	  if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    long[i]    *    expected[i];    }    	non-compiled	[CE]  cannot  find  symbol  Long	105	None	replace
132	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected[i].length;  i++)  {  sumSq  +=  ((  double)expected[i]  -  observed[i]);  }  [CE]  double  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected[i].length;  i++)  {  sumSq  +=  ((  double)expected[i]  -  observed[i]);  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected[i].length;  i++)  {  sumSq  +=  ((  double)expected[i]  -  observed[i]);  }	  for(int    i    =    0;    i    <    observed[i].length;    i++)    {    sumSq    +=    ((    double)expected[i]    -    observed[i]);    }    	non-compiled	[CE]  double  cannot  be  dereferenced	72	None	replace
133	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  ((  double)expected[i]  *  observed[i]);  }  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  ((  double)expected[i]  *  observed[i]);  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  ((  double)expected[i]  *  observed[i]);  }	  for(int    i    =    0;    i    <    observed[i].length;    i++)    {    sumSq    +=    ((    double)expected[i]    -    observed[i]);    }    	non-compiled	[CE]  long  cannot  be  dereferenced	72	None	replace
134	[BUG]  [BUGGY]  int  observed.length  =  observed.length  /  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  observed.length  =  observed.length  /  1;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  observed.length  =  observed.length  /  1;	  int    observed.length    =    observed.length    -    1;    	non-compiled	[CE]  ';'  expected	31	None	replace
135	[BUG]  [BUGGY]  double  observed.length  =  observed.length  -  1;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  observed.length  =  observed.length  -  1;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double  observed.length  =  observed.length  -  1;	  int    observed.length    =    observed.length    -    1;    	non-compiled	[CE]  ';'  expected	31	None	replace
136	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =.001;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	add	double  dev  =.001;	  double    dev    =    0.001;    double    dev    =.001;    	compilable	  [FE]  AssertionFailedError  	51	6	replace
137	[BUG]  [BUGGY]  double  dev  =.001;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =.001;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double  dev  =.001;	  double    dev    =    0.001;    double    dev    =.001;    	compilable	  [FE]  AssertionFailedError  	51	6	replace
138	[BUG]  [BUGGY]  double  dev  =  0.0f;  double  dev  =  0.0f;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.0f;  double  dev  =  0.0f;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.0f;    double  dev  =  0.0f;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	45	None	add
139	[BUG]  [BUGGY]  double  dev  =  0.0f;  Double  dev  =  0.0f;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.0f;  Double  dev  =  0.0f;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.0f;    Double  dev  =  0.0f;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	45	None	add
140	[BUG]  [BUGGY]  double  dev  =  0.0f;  int  dev  =  0.0f;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.0f;  int  dev  =  0.0f;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.0f;    int  dev  =  0.0f;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	45	None	add
141	[BUG]  [BUGGY]  double  dev  =  0.0f;  long  dev  =  0.0f;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.0f;  long  dev  =  0.0f;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.0f;    long  dev  =  0.0f;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	45	None	add
142	[BUG]  [BUGGY]  double  dev  =  0.0f;  float  dev  =  0.0f;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.0f;  float  dev  =  0.0f;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.0f;    float  dev  =  0.0f;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	45	None	add
143	[BUG]  [BUGGY]  long[]  observed  =  observed.length  /  2  +  sumSq;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  long[]  observed  =  observed.length  /  2  +  sumSq;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long[]  observed  =  observed.length  /  2  +  sumSq;	  long[]    observed    =    observed.length    /    2;    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	109	None	replace
144	[BUG]  [BUGGY]  long[]  observed  =  observed.length  /  2L;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  long[]  observed  =  observed.length  /  2L;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long[]  observed  =  observed.length  /  2L;	  long[]    observed    =    observed.length    /    2;    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	109	None	replace
145	[BUG]  [BUGGY]  long[]  observed  =  observed.length  /  2  +  1;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  long[]  observed  =  observed.length  /  2  +  1;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long[]  observed  =  observed.length  /  2  +  1;	  long[]    observed    =    observed.length    /    2;    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	109	None	replace
146	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distributed[i]  *  expected[i];  }  [CE]  cannot  find  symbol  distributed  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distributed[i]  *  expected[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distributed[i]  *  expected[i];  }	  if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    distribution[i]    *    expected[i];    }    	non-compiled	[CE]  cannot  find  symbol  distributed	86	None	replace
147	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  Distribution[i]  *  expected[i];  }  [CE]  cannot  find  symbol  Distribution  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  Distribution[i]  *  expected[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  Distribution[i]  *  expected[i];  }	  if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    distribution[i]    *    expected[i];    }    	non-compiled	[CE]  cannot  find  symbol  Distribution	86	None	replace
148	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  distribution[i]  *  expected[i];  }  [CE]  array  required,  but  ChiSquaredDistribution  found  [FE]                    AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  distribution[i]  *  expected[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  distribution[i]  *  expected[i];  }	  if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    distribution[i]    *    expected[i];    }    	non-compiled	[CE]  array  required,  but  ChiSquaredDistribution  found	86	None	replace
149	[BUG]  [BUGGY]  double  observed.length  =  expected.length;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  observed.length  =  expected.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double  observed.length  =  expected.length;	  int    observed.length    =    expected.length;    	non-compiled	[CE]  ';'  expected	32	None	replace
150	[BUG]  [BUGGY]  int  observed.length  -=  expected.length;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  observed.length  -=  expected.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  observed.length  -=  expected.length;	  int    observed.length    =    expected.length;    	non-compiled	[CE]  ';'  expected	32	None	replace
151	[BUG]  [BUGGY]  double  observed[]  =  observed.length;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  observed[]  =  observed.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double  observed[]  =  observed.length;	  int    observed[]    =    observed.length;    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	62	None	replace
152	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  short[i]  *  observed[i];  }  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  short[i]  *  observed[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  short[i]  *  observed[i];  }	  if(expected    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    long[i]    *    observed[i];    }    	non-compiled	[CE]  ']'  expected	97	None	replace
153	[BUG]  [BUGGY]  long[]  observed  =  observed.length  -  sumSq;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  long[]  observed  =  observed.length  -  sumSq;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long[]  observed  =  observed.length  -  sumSq;	  long[]    observed    =    observed.length    -    2;    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	39	None	replace
154	[BUG]  [BUGGY]  sumSq  +=((  double)expected[i]  /  expected[i]);  [CE]  cannot  find  symbol  i  [FE]              AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  sumSq  +=((  double)expected[i]  /  expected[i]);  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	sumSq  +=((  double)expected[i]  /  expected[i]);	  sumSq    +=((    double)expected[i]    -    expected[i]);    	non-compiled	[CE]  cannot  find  symbol  i	112	None	replace
155	[BUG]  [BUGGY]  sumSq  +=((  double)expected[0]  -  expected[0]);  [CE]  cannot  find  symbol  dev  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  sumSq  +=((  double)expected[0]  -  expected[0]);  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	sumSq  +=((  double)expected[0]  -  expected[0]);	  sumSq    +=((    double)expected[i]    -    expected[i]);    	non-compiled	[CE]  cannot  find  symbol  dev	112	None	replace
156	[BUG]  [BUGGY]  sumSq  +=((  double)expected[i]  *  expected[i]);  [CE]  cannot  find  symbol  i  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  sumSq  +=((  double)expected[i]  *  expected[i]);  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	sumSq  +=((  double)expected[i]  *  expected[i]);	  sumSq    +=((    double)expected[i]    -    expected[i]);    	non-compiled	[CE]  cannot  find  symbol  i	112	None	replace
157	[BUG]  [BUGGY]  sumSq  +=((  double)expected[i]  /  observed[i]);  [CE]  cannot  find  symbol  i  [FE]            AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  sumSq  +=((  double)expected[i]  /  observed[i]);  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	sumSq  +=((  double)expected[i]  /  observed[i]);	  sumSq    +=((    double)expected[i]    -    observed[i]);    	non-compiled	[CE]  cannot  find  symbol  i	110	None	replace
158	[BUG]  [BUGGY]  sumSq  +=((  double)expected[0]  -  observed[0]);  [CE]  cannot  find  symbol  dev  [FE]              AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  sumSq  +=((  double)expected[0]  -  observed[0]);  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	sumSq  +=((  double)expected[0]  -  observed[0]);	  sumSq    +=((    double)expected[i]    -    observed[i]);    	non-compiled	[CE]  cannot  find  symbol  dev	110	None	replace
159	[BUG]  [BUGGY]  sumSq  +=((  double)expected[i]  *  observed[i]);  [CE]  cannot  find  symbol  i  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  sumSq  +=((  double)expected[i]  *  observed[i]);  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	sumSq  +=((  double)expected[i]  *  observed[i]);	  sumSq    +=((    double)expected[i]    -    observed[i]);    	non-compiled	[CE]  cannot  find  symbol  i	110	None	replace
160	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  distribution[i]  /  total;  }  [CE]  array  required,  but  ChiSquaredDistribution  found  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  distribution[i]  /  total;  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  distribution[i]  /  total;  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    distribution[i]    /    total;    }    	non-compiled	[CE]  array  required,  but  ChiSquaredDistribution  found	24	None	replace
161	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  /  total;  }  [CE]  cannot  find  symbol  total  [FE]                    AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  /  total;  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  /  total;  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    distribution[i]    /    total;    }    	non-compiled	[CE]  cannot  find  symbol  total	24	None	replace
162	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  total;  }  [CE]  cannot  find  symbol  total  [FE]                      AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  total;  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  total;  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    distribution[i]    /    total;    }    	non-compiled	[CE]  cannot  find  symbol  total	24	None	replace
163	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distribution[i]  *  total;  }  [CE]  array  required,  but  ChiSquaredDistribution  found  [FE]                        AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distribution[i]  *  total;  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distribution[i]  *  total;  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    distribution[i]    /    total;    }    	non-compiled	[CE]  array  required,  but  ChiSquaredDistribution  found	24	None	replace
164	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  observed[i];  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  observed[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  observed[i];  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    long[i]    *    observed[i];    }    	non-compiled	[CE]  >  expected	26	None	replace
165	[BUG]  [BUGGY]  int  observed.length  =  observed[0]  /  2  +  1;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  observed.length  =  observed[0]  /  2  +  1;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  observed.length  =  observed[0]  /  2  +  1;	  int    observed.length    =    observed[0]    /    2;    	non-compiled	[CE]  ';'  expected	3	None	replace
166	[BUG]  [BUGGY]  int  observed.length  =  observed[0]  /  2L;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  observed.length  =  observed[0]  /  2L;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  observed.length  =  observed[0]  /  2L;	  int    observed.length    =    observed[0]    /    2;    	non-compiled	[CE]  ';'  expected	3	None	replace
167	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  Double  dev  =  0.5;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	add	Double  dev  =  0.5;	  double    dev    =    0.5;    Double    dev    =    0.5;    	compilable	  [FE]  AssertionFailedError  	53	6	replace
168	[BUG]  [BUGGY]  Double  dev  =  0.5;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  Double  dev  =  0.5;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	Double  dev  =  0.5;	  double    dev    =    0.5;    Double    dev    =    0.5;    	compilable	  [FE]  AssertionFailedError  	53	6	replace
169	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  expected[i];  }  [CE]  cannot  find  symbol  dev  [FE]                      AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  expected[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  expected[i];  }	  if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    expected[i];    }    	non-compiled	[CE]  cannot  find  symbol  dev	92	None	replace
170	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i];  i++)  {  sumSq  +=  expected[i];  }  [CE]  cannot  find  symbol  dev  [FE]                        AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed[i];  i++)  {  sumSq  +=  expected[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed[i];  i++)  {  sumSq  +=  expected[i];  }	  if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    expected[i];    }    	non-compiled	[CE]  cannot  find  symbol  dev	92	None	replace
171	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  constant[i]  /  long[i];  }  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  constant[i]  /  long[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  constant[i]  /  long[i];  }	  if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    /    long[i];    }    	non-compiled	[CE]  ']'  expected	102	None	replace
172	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  /  Long.MAX_VALUE;  }  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  /  Long.MAX_VALUE;  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  /  Long.MAX_VALUE;  }	  if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    /    long[i];    }    	non-compiled	[CE]  ']'  expected	102	None	replace
173	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  expected[i];  }  [CE]  cannot  find  symbol  dev  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  expected[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  expected[i];  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    distributed[i]    *    distribution[i];    }    	non-compiled	[CE]  cannot  find  symbol  dev	42	None	replace
174	[BUG]  [BUGGY]  double  dev  =  1.0d;  double  dev  =  1.0d;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  1.0d;  double  dev  =  1.0d;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    1.0d;    double  dev  =  1.0d;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	17	None	add
175	[BUG]  [BUGGY]  double  dev  =  1.0d;  Double  dev  =  1.0d;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  1.0d;  Double  dev  =  1.0d;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    1.0d;    Double  dev  =  1.0d;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	17	None	add
176	[BUG]  [BUGGY]  double  dev  =  1.0d;  long  dev  =  1.0d;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  1.0d;  long  dev  =  1.0d;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    1.0d;    long  dev  =  1.0d;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	17	None	add
177	[BUG]  [BUGGY]  double  dev  =  1.0d;  int  dev  =  1.0d;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  1.0d;  int  dev  =  1.0d;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    1.0d;    int  dev  =  1.0d;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	17	None	add
178	[BUG]  [BUGGY]  double  dev  =  1.0d;  double  dev  =  0.0d;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  1.0d;  double  dev  =  0.0d;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    1.0d;    double  dev  =  0.0d;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	17	None	add
179	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.0003;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	add	double  dev  =  0.0003;	  double    dev    =    0.0001;    double    dev    =    0.0001;    	compilable	  [FE]  AssertionFailedError  	57	6	replace
180	[BUG]  [BUGGY]  double  dev  =  0.0003;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.0003;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double  dev  =  0.0003;	  double    dev    =    0.0001;    double    dev    =    0.0001;    	compilable	  [FE]  AssertionFailedError  	57	6	replace
181	[BUG]  [BUGGY]  int  observed[]  =  expected.length;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  observed[]  =  expected.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  observed[]  =  expected.length;	  long    observed[]    =    expected.length;    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	81	None	replace
182	[BUG]  [BUGGY]  double  observed[]  =  expected.length;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  observed[]  =  expected.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double  observed[]  =  expected.length;	  long    observed[]    =    expected.length;    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	81	None	replace
183	[BUG]  [BUGGY]  short  observed[]  =  expected.length;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  short  observed[]  =  expected.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	short  observed[]  =  expected.length;	  long    observed[]    =    expected.length;    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	81	None	replace
184	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.5  *  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	add	double  dev  =  0.5  *  observed.length;	  double    dev    =    0.5    +    observed.length;    	compilable	  [FE]  AssertionFailedError  	16	6	replace
185	[BUG]  [BUGGY]  double  dev  =  0.5  *  observed.length;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.5  *  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double  dev  =  0.5  *  observed.length;	  double    dev    =    0.5    +    observed.length;    	compilable	  [FE]  AssertionFailedError  	16	6	replace
186	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.5  +  expected.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	add	double  dev  =  0.5  +  expected.length;	  double    dev    =    0.5    +    observed.length;    	compilable	  [FE]  AssertionFailedError  	16	6	replace
187	[BUG]  [BUGGY]  double  dev  =  0.5  +  expected.length;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.5  +  expected.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double  dev  =  0.5  +  expected.length;	  double    dev    =    0.5    +    observed.length;    	compilable	  [FE]  AssertionFailedError  	16	6	replace
188	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.5d  +  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	add	double  dev  =  0.5d  +  observed.length;	  double    dev    =    0.5    +    observed.length;    	compilable	  [FE]  AssertionFailedError  	16	6	replace
189	[BUG]  [BUGGY]  double  dev  =  0.5d  +  observed.length;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.5d  +  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double  dev  =  0.5d  +  observed.length;	  double    dev    =    0.5    +    observed.length;    	compilable	  [FE]  AssertionFailedError  	16	6	replace
190	[BUG]  [BUGGY]  double  observed.length  -=  observed.length;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  observed.length  -=  observed.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double  observed.length  -=  observed.length;	  double    observed.length    =    observed.length;    	non-compiled	[CE]  ';'  expected	108	None	replace
191	[BUG]  [BUGGY]  float  dev  =  0.001;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  float  dev  =  0.001;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	float  dev  =  0.001;	  double    dev    =    0.001;    float    dev    =    0.001;    	non-compiled	[CE]  possible  loss  of  precision	94	None	replace
192	[BUG]  [BUGGY]  int[]  observed  =  expected.length;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int[]  observed  =  expected.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int[]  observed  =  expected.length;	  long[]    observed    =    expected.length;    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	40	None	replace
193	[BUG]  [BUGGY]  long[]  observed  =  expected.length  -  1;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                      AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  long[]  observed  =  expected.length  -  1;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long[]  observed  =  expected.length  -  1;	  long[]    observed    =    expected.length;    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	40	None	replace
194	[BUG]  [BUGGY]  long[]  observed  =  expected.length  -  2;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                        AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  long[]  observed  =  expected.length  -  2;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long[]  observed  =  expected.length  -  2;	  long[]    observed    =    expected.length;    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	40	None	replace
195	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i]  -  expected[i];  i++)  {  sumSq  +=  observed[i]  /  long[i];  }  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed[i]  -  expected[i];  i++)  {  sumSq  +=  observed[i]  /  long[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed[i]  -  expected[i];  i++)  {  sumSq  +=  observed[i]  /  long[i];  }	  for(int    i    =    0;    i    <    observed[i]    -    long[i];    i++)    {    sumSq    +=    observed[i]    /    long[i];    }    	non-compiled	[CE]  ']'  expected	79	None	replace
196	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed[i]  -  expected[i];  i++)  {  sumSq  +=  observed[i]  /  long[i];  }  [CE]  ']'  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  i  =  0;  i  <  observed[i]  -  expected[i];  i++)  {  sumSq  +=  observed[i]  /  long[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  i  =  0;  i  <  observed[i]  -  expected[i];  i++)  {  sumSq  +=  observed[i]  /  long[i];  }	  for(int    i    =    0;    i    <    observed[i]    -    long[i];    i++)    {    sumSq    +=    observed[i]    /    long[i];    }    	non-compiled	[CE]  ']'  expected	79	None	replace
197	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected[i]  -  long[i];  i++)  {  sumSq  +=  observed[i]  /  long[i];  }  [CE]  ']'  expected  [FE]                          AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected[i]  -  long[i];  i++)  {  sumSq  +=  observed[i]  /  long[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected[i]  -  long[i];  i++)  {  sumSq  +=  observed[i]  /  long[i];  }	  for(int    i    =    0;    i    <    observed[i]    -    long[i];    i++)    {    sumSq    +=    observed[i]    /    long[i];    }    	non-compiled	[CE]  ']'  expected	79	None	replace
198	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected[i];  i++)  {  sumSq  +=  ((  double)expected[i]  -  observed[i]);  }  [CE]  cannot  find  symbol  dev  [FE]              AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected[i];  i++)  {  sumSq  +=  ((  double)expected[i]  -  observed[i]);  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected[i];  i++)  {  sumSq  +=  ((  double)expected[i]  -  observed[i]);  }	  for(int    i    =    0;    i    <    observed[i];    i++)    {    sumSq    +=    ((    double)expected[i]    -    observed[i]);    }    	non-compiled	[CE]  cannot  find  symbol  dev	71	None	replace
199	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  -  1;  }  [CE]  cannot  find  symbol  dev  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  -  1;  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  -  1;  }	  if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    -    1;    }    	non-compiled	[CE]  cannot  find  symbol  dev	111	None	replace
200	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  monitored[i]  -  1;  }  [CE]  cannot  find  symbol  monitored  [FE]                    AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  monitored[i]  -  1;  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  monitored[i]  -  1;  }	  if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    -    1;    }    	non-compiled	[CE]  cannot  find  symbol  monitored	111	None	replace
201	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  duration[i];  }  [CE]  cannot  find  symbol  duration  [FE]            AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  duration[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  duration[i];  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    distributed[i]    /    distribution[i];    }    	non-compiled	[CE]  cannot  find  symbol  duration	87	None	replace
202	[BUG]  [BUGGY]  if(sumSq  >=  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  expected[i];  }  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  if(sumSq  >=  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  expected[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	if(sumSq  >=  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  expected[i];  }	  if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    long[i]    *    expected[i];    }    	non-compiled	[CE]  ']'  expected	105	None	replace
203	[BUG]  [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  short[i]  *  expected[i];  }  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  short[i]  *  expected[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  short[i]  *  expected[i];  }	  if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    long[i]    *    expected[i];    }    	non-compiled	[CE]  ']'  expected	105	None	replace
204	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i]  *  distribution[i];  i++)  {  sumSq  +=  expected[i]  *  distribution[i];  }  [CE]  array  required,  but  ChiSquaredDistribution  found  [FE]                    AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed[i]  *  distribution[i];  i++)  {  sumSq  +=  expected[i]  *  distribution[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed[i]  *  distribution[i];  i++)  {  sumSq  +=  expected[i]  *  distribution[i];  }	  for(int    i    =    0;    i    <    observed[i]    *    distribution[i];    i++)    {    sumSq    +=    observed[i]    *    distribution[i];    }    	non-compiled	[CE]  array  required,  but  ChiSquaredDistribution  found	43	None	replace
205	[BUG]  [BUGGY]  int  observed.length  =  expected[1];  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  observed.length  =  expected[1];  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  observed.length  =  expected[1];	  int    observed.length    =    observed[1];    	non-compiled	[CE]  ';'  expected	2	None	replace
206	[BUG]  [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  long[i]  *  long[i];  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  long[i]  *  long[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  long[i]  *  long[i];  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    long[i]    *    long[i];    }    	non-compiled	[CE]  >  expected	82	None	replace
207	[BUG]  [BUGGY]  int  observed.length  =  expected.length  -  1;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  observed.length  =  expected.length  -  1;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  observed.length  =  expected.length  -  1;	  int    observed.length    =    expected.length;    	non-compiled	[CE]  ';'  expected	32	None	replace
208	[BUG]  [BUGGY]  int  observed.length  =  expected.length  -  2;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  observed.length  =  expected.length  -  2;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  observed.length  =  expected.length  -  2;	  int    observed.length    =    expected.length;    	non-compiled	[CE]  ';'  expected	32	None	replace
209	[BUG]  [BUGGY]  int  dev  =  0.0;  int  dev  =  0.0;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  dev  =  0.0;  int  dev  =  0.0;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  dev  =  0.0;  int  dev  =  0.0;	  double    dev    =    0.0;    long    dev    =    0.0;    	non-compiled	[CE]  possible  loss  of  precision	13	None	replace
210	[BUG]  [BUGGY]  int  dev  =  0.0;  long  dev  =  0.0;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  dev  =  0.0;  long  dev  =  0.0;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  dev  =  0.0;  long  dev  =  0.0;	  double    dev    =    0.0;    long    dev    =    0.0;    	non-compiled	[CE]  possible  loss  of  precision	13	None	replace
211	[BUG]  [BUGGY]  int  dev  =  0.0001;  long  dev  =  0.0001;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  dev  =  0.0001;  long  dev  =  0.0001;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  dev  =  0.0001;  long  dev  =  0.0001;	  double    dev    =    0.0001;    long    dev    =    0.0001;    	non-compiled	[CE]  possible  loss  of  precision	60	None	replace
212	[BUG]  [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  -  1;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  -  1;  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  -  1;  }	  if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    -    1;    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
213	[BUG]  [BUGGY]  if(sumSq  >=  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  Long[i]  /  long[i];  }  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  if(sumSq  >=  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  Long[i]  /  long[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	if(sumSq  >=  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  Long[i]  /  long[i];  }	  if(sumSq    >=    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    long[i]    /    long[i];    }    	non-compiled	[CE]  ']'  expected	83	None	replace
214	[BUG]  [BUGGY]  long[]  observed  =  observed.length  /  2  *  sumSq;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  long[]  observed  =  observed.length  /  2  *  sumSq;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long[]  observed  =  observed.length  /  2  *  sumSq;	  long[]    observed    =    observed.length    /    2;    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	109	None	replace
215	[BUG]  [BUGGY]  int  dev  =  0.001;  long  dev  =  0.001;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  dev  =  0.001;  long  dev  =  0.001;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  dev  =  0.001;  long  dev  =  0.001;	  double    dev    =    0.001;    long    dev    =    0.001;    	non-compiled	[CE]  possible  loss  of  precision	50	None	replace
216	[BUG]  [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  expected[i];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  expected[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  expected[i];  }	  if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    expected[i];    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
217	[BUG]  [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)expected[i]  -  expected[i]);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)expected[i]  -  expected[i]);  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)expected[i]  -  expected[i]);  }	  if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    expected[i];    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
218	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed[i]  /  long[i];  i++)  {  sumSq  +=  observed[i]  *  long[i];  }  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  i  =  0;  i  <  observed[i]  /  long[i];  i++)  {  sumSq  +=  observed[i]  *  long[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  i  =  0;  i  <  observed[i]  /  long[i];  i++)  {  sumSq  +=  observed[i]  *  long[i];  }	  for(int    i    =    0;    i    <    observed[i]    /    long[i];    i++)    {    sumSq    +=    observed[i]    /    long[i];    }    	non-compiled	[CE]  ']'  expected	78	None	replace
219	[BUG]  [BUGGY]  if(sumSq  >=  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  observed[i];  }  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  if(sumSq  >=  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  observed[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	if(sumSq  >=  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  observed[i];  }	  if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    long[i]    *    observed[i];    }    	non-compiled	[CE]  ']'  expected	104	None	replace
220	[BUG]  [BUGGY]  sumSq  +=((  double)expected[1]  -  expected[1]);  [CE]  cannot  find  symbol  dev  [FE]              AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  sumSq  +=((  double)expected[1]  -  expected[1]);  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	sumSq  +=((  double)expected[1]  -  expected[1]);	  sumSq    +=((    double)expected[i]    -    expected[i]);    	non-compiled	[CE]  cannot  find  symbol  dev	112	None	replace
221	[BUG]  [BUGGY]  sumSq  +=((  double)expected[str.length  -  expected[str.length]);  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  sumSq  +=((  double)expected[str.length  -  expected[str.length]);  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	sumSq  +=((  double)expected[str.length  -  expected[str.length]);	  sumSq    +=((    double)expected[i]    -    expected[i]);    	non-compiled	[CE]  ']'  expected	112	None	replace
222	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  1;  }  [CE]  cannot  find  symbol  dev  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  1;  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  1;  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    -    1;    }    	non-compiled	[CE]  cannot  find  symbol  dev	4	None	replace
223	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i]  -  1;  i++)  {  sumSq  +=  observed[i]  *  1;  }  [CE]  cannot  find  symbol  dev  [FE]                    AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed[i]  -  1;  i++)  {  sumSq  +=  observed[i]  *  1;  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed[i]  -  1;  i++)  {  sumSq  +=  observed[i]  *  1;  }	  for(int    i    =    0;    i    <    observed[i]    -    1;    i++)    {    sumSq    +=    observed[i]    -    1;    }    	non-compiled	[CE]  cannot  find  symbol  dev	5	None	replace
224	[BUG]  [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  long[i]  /  long[i];  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  long[i]  /  long[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  long[i]  /  long[i];  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    long[i]    /    long[i];    }    	non-compiled	[CE]  >  expected	76	None	replace
225	[BUG]  [BUGGY]  long[]  expected  =  observed.length  /  2  *  sumSq;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  long[]  expected  =  observed.length  /  2  *  sumSq;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long[]  expected  =  observed.length  /  2  *  sumSq;	  long[]    expected    =    observed.length    /    2;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	75	None	replace
226	[BUG]  [BUGGY]  sumSq  +=((  double)expected[1]  -  observed[1]);  [CE]  cannot  find  symbol  dev  [FE]            AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  sumSq  +=((  double)expected[1]  -  observed[1]);  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	sumSq  +=((  double)expected[1]  -  observed[1]);	  sumSq    +=((    double)expected[i]    -    observed[i]);    	non-compiled	[CE]  cannot  find  symbol  dev	110	None	replace
227	[BUG]  [BUGGY]  sumSq  +=((  double)expected[str.length  -  observed[str.length]);  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  sumSq  +=((  double)expected[str.length  -  observed[str.length]);  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	sumSq  +=((  double)expected[str.length  -  observed[str.length]);	  sumSq    +=((    double)expected[i]    -    observed[i]);    	non-compiled	[CE]  ']'  expected	110	None	replace
228	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  ((  double)expected[i]  /  observed[i]);  }  [CE]  long  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  ((  double)expected[i]  /  observed[i]);  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  ((  double)expected[i]  /  observed[i]);  }	  for(int    i    =    0;    i    <    observed[i].length;    i++)    {    sumSq    +=    ((    double)expected[i]    -    observed[i]);    }    	non-compiled	[CE]  long  cannot  be  dereferenced	72	None	replace
229	[BUG]  [BUGGY]  int  observed.length  =  expected[0]  -  1;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  observed.length  =  expected[0]  -  1;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  observed.length  =  expected[0]  -  1;	  int    observed.length    =    expected[0];    	non-compiled	[CE]  ';'  expected	80	None	replace
230	[BUG]  [BUGGY]  int  observed.length  =  expected[0]  /  2;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  observed.length  =  expected[0]  /  2;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  observed.length  =  expected[0]  /  2;	  int    observed.length    =    expected[0];    	non-compiled	[CE]  ';'  expected	80	None	replace
231	[BUG]  [BUGGY]  if(sumSq  >=  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distribution[i]  *  expected[i];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  if(sumSq  >=  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distribution[i]  *  expected[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	if(sumSq  >=  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distribution[i]  *  expected[i];  }	  if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    distribution[i]    *    expected[i];    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
232	[BUG]  [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distributed[i]  *  expected[i];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distributed[i]  *  expected[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distributed[i]  *  expected[i];  }	  if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    distribution[i]    *    expected[i];    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
233	[BUG]  [BUGGY]  if(sumSq  >=  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  distribution[i];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  if(sumSq  >=  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  distribution[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	if(sumSq  >=  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  distribution[i];  }	  if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    /    distribution[i];    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
234	[BUG]  [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distributed[i]  /  distribution[i];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distributed[i]  /  distribution[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distributed[i]  /  distribution[i];  }	  if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    /    distribution[i];    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
235	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distribution[i]  *  observed[i];  }  [CE]  array  required,  but  ChiSquaredDistribution  found  [FE]            AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distribution[i]  *  observed[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distribution[i]  *  observed[i];  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    /    distribution[i];    }    	non-compiled	[CE]  array  required,  but  ChiSquaredDistribution  found	106	None	replace
236	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distribution[i]  -  observed[i];  }  [CE]  array  required,  but  ChiSquaredDistribution  found  [FE]              AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distribution[i]  -  observed[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distribution[i]  -  observed[i];  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    /    distribution[i];    }    	non-compiled	[CE]  array  required,  but  ChiSquaredDistribution  found	106	None	replace
237	[BUG]  [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  long[i];  }  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  long[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  long[i];  }	  if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    /    long[i];    }    	non-compiled	[CE]  ']'  expected	102	None	replace
238	[BUG]  [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  /  long[i];  }  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  /  long[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  /  long[i];  }	  if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    /    long[i];    }    	non-compiled	[CE]  ']'  expected	102	None	replace
239	[BUG]  [BUGGY]  long  observed[]  =  expected.length  -  1;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  long  observed[]  =  expected.length  -  1;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long  observed[]  =  expected.length  -  1;	  long    observed[]    =    expected.length;    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	81	None	replace
240	[BUG]  [BUGGY]  if(sumSq  >=  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  distribution[i];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  if(sumSq  >=  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  distribution[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	if(sumSq  >=  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  distribution[i];  }	  if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    *    distribution[i];    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
241	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  /  distributed[i];  }  [CE]  cannot  find  symbol  distributed  [FE]            AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  /  distributed[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  /  distributed[i];  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    distributed[i]    /    distribution[i];    }    	non-compiled	[CE]  cannot  find  symbol  distributed	87	None	replace
242	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  distributed[i]  /  distribution[i];  }  [CE]  cannot  find  symbol  distributed  [FE]              AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  distributed[i]  /  distribution[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  distributed[i]  /  distribution[i];  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    distributed[i]    /    distribution[i];    }    	non-compiled	[CE]  cannot  find  symbol  distributed	87	None	replace
243	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  *  long[i];  }  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  *  long[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  *  long[i];  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i]    /    long[i];    }    	non-compiled	[CE]  ']'  expected	77	None	replace
244	[BUG]  [BUGGY]  double  dev  =  0.002;  double  dev  =  0.002);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.002;  double  dev  =  0.002);  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.002;    double  dev  =  0.002);	  	non-compiled	[CE]  ';'  expected	19	None	add
245	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  distributed[i]  /  total;  }  [CE]  cannot  find  symbol  distributed  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  distributed[i]  /  total;  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  distributed[i]  /  total;  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    distribution[i]    /    total;    }    	non-compiled	[CE]  cannot  find  symbol  distributed	24	None	replace
246	[BUG]  [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  /  long[i];  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  /  long[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  /  long[i];  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    /    long[i];    }    	non-compiled	[CE]  >  expected	101	None	replace
247	[BUG]  [BUGGY]  long[]  observed  =  observed;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  long[]  observed  =  observed;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long[]  observed  =  observed;	  long[]    observed    =    expected.length;    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	40	None	replace
248	[BUG]  [BUGGY]  long[]  observed  =  sumSq;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                      AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  long[]  observed  =  sumSq;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long[]  observed  =  sumSq;	  long[]    observed    =    expected.length;    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	40	None	replace
249	[BUG]  [BUGGY]  int  observed.length  =  observed.length  -  1  +  sumSq;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  observed.length  =  observed.length  -  1  +  sumSq;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  observed.length  =  observed.length  -  1  +  sumSq;	  int    observed.length    =    observed.length    -    1;    	non-compiled	[CE]  ';'  expected	31	None	replace
250	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  distribution[i]  -  expected[i];  }  [CE]  array  required,  but  ChiSquaredDistribution  found  [FE]              AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  distribution[i]  -  expected[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  distribution[i]  -  expected[i];  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    distribution[i]    -    expected[i];    }    	non-compiled	[CE]  array  required,  but  ChiSquaredDistribution  found	88	None	replace
251	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  -  expected[i];  }  [CE]  cannot  find  symbol  dev  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  -  expected[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  -  expected[i];  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    distribution[i]    -    expected[i];    }    	non-compiled	[CE]  cannot  find  symbol  dev	88	None	replace
252	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  distributed[i]  -  expected[i];  }  [CE]  cannot  find  symbol  distributed  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  distributed[i]  -  expected[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  distributed[i]  -  expected[i];  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    distribution[i]    -    expected[i];    }    	non-compiled	[CE]  cannot  find  symbol  distributed	88	None	replace
253	[BUG]  [BUGGY]  int  observed.length  =  observed[0]  /  2  +  sumSq;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  observed.length  =  observed[0]  /  2  +  sumSq;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  observed.length  =  observed[0]  /  2  +  sumSq;	  int    observed.length    =    observed[0]    /    2;    	non-compiled	[CE]  ';'  expected	3	None	replace
254	[BUG]  [BUGGY]  int  observed.length  =  observed[1]  /  2;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  observed.length  =  observed[1]  /  2;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  observed.length  =  observed[1]  /  2;	  int    observed.length    =    observed[0]    /    2;    	non-compiled	[CE]  ';'  expected	3	None	replace
255	[BUG]  [BUGGY]  double  observed.length  =  observed.length  -  2;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  observed.length  =  observed.length  -  2;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double  observed.length  =  observed.length  -  2;	  double    observed.length    =    observed.length;    	non-compiled	[CE]  ';'  expected	108	None	replace
256	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  *  expected[i];  }  [CE]  cannot  find  symbol  dev  [FE]                      AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  *  expected[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  *  expected[i];  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    distribution[i]    *    expected[i];    }    	non-compiled	[CE]  cannot  find  symbol  dev	44	None	replace
257	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  *  observed[i];  }  [CE]  cannot  find  symbol  dev  [FE]                        AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  *  observed[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  *  observed[i];  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    distribution[i]    *    expected[i];    }    	non-compiled	[CE]  cannot  find  symbol  dev	44	None	replace
258	[BUG]  [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  expected[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  expected[i]);  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  expected[i]);  }	  if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    *    long[i];    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
259	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i].length  *  distribution[i];  i++)  {  sumSq  +=  observed[i]  *  distribution[i];  }  [CE]  long  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed[i].length  *  distribution[i];  i++)  {  sumSq  +=  observed[i]  *  distribution[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed[i].length  *  distribution[i];  i++)  {  sumSq  +=  observed[i]  *  distribution[i];  }	  for(int    i    =    0;    i    <    observed[i]    *    distribution[i];    i++)    {    sumSq    +=    observed[i]    *    distribution[i];    }    	non-compiled	[CE]  long  cannot  be  dereferenced	43	None	replace
260	[BUG]  [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  *  distribution[i];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  *  distribution[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  *  distribution[i];  }	  if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    *    distribution[i];    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
261	[BUG]  [BUGGY]  sumSq  +=  observed[i]  *  distribution[i];  [CE]  cannot  find  symbol  i  [FE]                    AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  sumSq  +=  observed[i]  *  distribution[i];  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	sumSq  +=  observed[i]  *  distribution[i];	  if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    *    distribution[i];    }    	non-compiled	[CE]  cannot  find  symbol  i	99	None	replace
262	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  *  distributed[i];  }  [CE]  cannot  find  symbol  distributed  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  *  distributed[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  *  distributed[i];  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    distributed[i]    *    distribution[i];    }    	non-compiled	[CE]  cannot  find  symbol  distributed	42	None	replace
263	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  estimated[i];  }  [CE]  cannot  find  symbol  estimated  [FE]                    AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  estimated[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  estimated[i];  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    distributed[i]    *    distribution[i];    }    	non-compiled	[CE]  cannot  find  symbol  estimated	42	None	replace
264	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i]  *  long[i];  i++)  {  sumSq  +=  observed[i]  /  long[i];  }  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed[i]  *  long[i];  i++)  {  sumSq  +=  observed[i]  /  long[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed[i]  *  long[i];  i++)  {  sumSq  +=  observed[i]  /  long[i];  }	  for(int    i    =    0;    i    <    observed[i]    -    long[i];    i++)    {    sumSq    +=    observed[i]    /    long[i];    }    	non-compiled	[CE]  ']'  expected	79	None	replace
265	[BUG]  [BUGGY]  sumSq  +=((  double)observed[i]  -  expected[i]);  [CE]  cannot  find  symbol  i  [FE]              AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  sumSq  +=((  double)observed[i]  -  expected[i]);  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	sumSq  +=((  double)observed[i]  -  expected[i]);	  sumSq    +=((    double)expected[i]    -    expected[i]);    	non-compiled	[CE]  cannot  find  symbol  i	112	None	replace
266	[BUG]  [BUGGY]  int  observed.length  -  expected.length;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  observed.length  -  expected.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  observed.length  -  expected.length;	  int    observed.length    =    expected.length;    	non-compiled	[CE]  ';'  expected	32	None	replace
267	[BUG]  [BUGGY]  sumSq  +=((  long)expected[i]  -  observed[i]);  [CE]  cannot  find  symbol  i  [FE]            AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  sumSq  +=((  long)expected[i]  -  observed[i]);  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	sumSq  +=((  long)expected[i]  -  observed[i]);	  sumSq    +=((    double)expected[i]    -    observed[i]);    	non-compiled	[CE]  cannot  find  symbol  i	110	None	replace
268	[BUG]  [BUGGY]  double  dev  =  0.5  +  observed.length;  double  dev  =  0.  +  observed.length;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.5  +  observed.length;  double  dev  =  0.  +  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.5    +    observed.length;    double  dev  =  0.  +  observed.length;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	15	None	add
269	[BUG]  [BUGGY]  double[]  observed  =  expected.length;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double[]  observed  =  expected.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double[]  observed  =  expected.length;	  long[]    observed    =    expected.length;    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	40	None	replace
270	[BUG]  [BUGGY]  for(int  i  =  expected.length;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  expected.length;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  expected.length;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }	  long    observed[]    =    expected.length;    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
271	[BUG]  [BUGGY]  for(int  i  =  expected.length;  i  <  observed.length;  i++)  {  if(!isPositive(expected[i]))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  expected.length;  i  <  observed.length;  i++)  {  if(!isPositive(expected[i]))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  expected.length;  i  <  observed.length;  i++)  {  if(!isPositive(expected[i]))  {  throw  new  IllegalArgumentException( " ");  }	  long    observed[]    =    expected.length;    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
272	[BUG]  [BUGGY]  if(expected.length  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  observed[i];  }  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  if(expected.length  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  observed[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	if(expected.length  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  observed[i];  }	  if(expected    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    long[i]    *    observed[i];    }    	non-compiled	[CE]  ']'  expected	96	None	replace
273	[BUG]  [BUGGY]  if(expected.length  >  0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  observed[i];  }  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  if(expected.length  >  0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  observed[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	if(expected.length  >  0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  observed[i];  }	  if(expected    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    long[i]    *    observed[i];    }    	non-compiled	[CE]  ']'  expected	96	None	replace
274	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  /  1;  }  [CE]  cannot  find  symbol  dev  [FE]                        AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  /  1;  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  /  1;  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i]    -    1;    }    	non-compiled	[CE]  cannot  find  symbol  dev	7	None	replace
275	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  observed[i].doubleValue();  }  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  observed[i].doubleValue();  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  observed[i].doubleValue();  }	  if(expected    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    long[i]    *    observed[i];    }    	non-compiled	[CE]  ']'  expected	97	None	replace
276	[BUG]  [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  Long[i]  *  expected[i];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  Long[i]  *  expected[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  Long[i]  *  expected[i];  }	  if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    long[i]    *    expected[i];    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
277	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected[i];  i++)  {  sumSq  +=  observed[i]  /  long[i];  }  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected[i];  i++)  {  sumSq  +=  observed[i]  /  long[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected[i];  i++)  {  sumSq  +=  observed[i]  /  long[i];  }	  for(int    i    =    0;    i    <    observed[i]    /    long[i];    i++)    {    sumSq    +=    observed[i]    /    long[i];    }    	non-compiled	[CE]  ']'  expected	78	None	replace
278	[BUG]  [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  Long[i]  *  observed[i];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  Long[i]  *  observed[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  Long[i]  *  observed[i];  }	  if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    long[i]    *    observed[i];    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
279	[BUG]  [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  predicted[i];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  predicted[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  predicted[i];  }	  if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    expected[i];    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
280	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  /  total;  }  [CE]  cannot  find  symbol  total  [FE]                  AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  /  total;  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  /  total;  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    distribution[i]    /    total;    }    	non-compiled	[CE]  cannot  find  symbol  total	24	None	replace
281	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  total;  }  [CE]  cannot  find  symbol  total  [FE]                    AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  total;  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  total;  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    distribution[i]    /    total;    }    	non-compiled	[CE]  cannot  find  symbol  total	24	None	replace
282	[BUG]  [BUGGY]  double  dev  =  0.5d;  double  dev  =  0.d;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.5d;  double  dev  =  0.d;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.5d;    double  dev  =  0.d;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	89	None	add
283	[BUG]  [BUGGY]  double  dev  =  0.5d;  double  dev  =  0.25;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  double  dev  =  0.5d;  double  dev  =  0.25;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.5d;    double  dev  =  0.25;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	89	None	add
284	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  long[i];  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  long[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  long[i];  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    observed[i]    /    long[i];    }    	non-compiled	[CE]  >  expected	101	None	replace
285	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  -  expected[i];  }  [CE]  cannot  find  symbol  dev  [FE]              AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  -  expected[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  -  expected[i];  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    distribution[i]    -    expected[i];    }    	non-compiled	[CE]  cannot  find  symbol  dev	88	None	replace
286	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  -  distribution[i];  }  [CE]  array  required,  but  ChiSquaredDistribution  found  [FE]                AssertionFailedError      [CONTEXT]      throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  -  distribution[i];  }  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  -  distribution[i];  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    distribution[i]    -    expected[i];    }    	non-compiled	[CE]  array  required,  but  ChiSquaredDistribution  found	88	None	replace
