bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  observed.length  =  observed[0]  -  1;  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  int  observed.length  =  observed[0]  -  1;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  observed.length  =  observed[0]  -  1;	      int    observed.length    =    observed[0];    	non-compiled	[CE]  ';'  expected	5	None	replace
2	[BUG]  [BUGGY]  int  observed.length  =  observed[1];  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  int  observed.length  =  observed[1];  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  observed.length  =  observed[1];	      int    observed.length    =    observed[0];    	non-compiled	[CE]  ';'  expected	5	None	replace
3	[BUG]  [BUGGY]  int  observed.length  =  observed[0]  /  2;  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  int  observed.length  =  observed[0]  /  2;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  observed.length  =  observed[0]  /  2;	      int    observed.length    =    observed[0];    	non-compiled	[CE]  ';'  expected	5	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  -  1;  }  [CE]  cannot  find  symbol  dev  [FE]              AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  -  1;  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  -  1;  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i]    -    1;    }    	non-compiled	[CE]  cannot  find  symbol  dev	17	None	replace
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i]  -  1;  i++)  {  sumSq  +=  observed[i]  -  1;  }  [CE]  cannot  find  symbol  dev  [FE]                AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  observed[i]  -  1;  i++)  {  sumSq  +=  observed[i]  -  1;  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed[i]  -  1;  i++)  {  sumSq  +=  observed[i]  -  1;  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i]    -    1;    }    	non-compiled	[CE]  cannot  find  symbol  dev	17	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  observed[i]  -  1;  }  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  observed[i]  -  1;  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  observed[i]  -  1;  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i]    -    1;    }    	non-compiled	[CE]  long  cannot  be  dereferenced	17	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  -  1;  }  [CE]  cannot  find  symbol  dev  [FE]                    AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  -  1;  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  -  1;  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i]    -    1;    }    	non-compiled	[CE]  cannot  find  symbol  dev	17	None	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  0.0002;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	add	double  dev  =  0.0002;	  double    dev    =    0.0001;    	compilable	  [FE]  AssertionFailedError  	13	6	replace
9	[BUG]  [BUGGY]  double  dev  =  0.0002;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  0.0002;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double  dev  =  0.0002;	  double    dev    =    0.0001;    	compilable	  [FE]  AssertionFailedError  	13	6	replace
10	[BUG]  [BUGGY]  double  dev  =  0.0001L;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  0.0001L;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double  dev  =  0.0001L;	  double    dev    =    0.0001;    	non-compiled	[CE]  ';'  expected	13	None	replace
11	[BUG]  [BUGGY]  double  dev  =  0.0;  double  dev  =  0.0;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  0.0;  double  dev  =  0.0;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.0;    double  dev  =  0.0;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	6	None	add
12	[BUG]  [BUGGY]  double  dev  =  0.0;  Double  dev  =  0.0;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  0.0;  Double  dev  =  0.0;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.0;    Double  dev  =  0.0;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	6	None	add
13	[BUG]  [BUGGY]  double  dev  =  0.0;  long  dev  =  0.0;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  0.0;  long  dev  =  0.0;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.0;    long  dev  =  0.0;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	6	None	add
14	[BUG]  [BUGGY]  double  dev  =  0.0;  int  dev  =  0.0;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  0.0;  int  dev  =  0.0;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.0;    int  dev  =  0.0;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	6	None	add
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  0.5  +  observed.length;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	add	double  dev  =  0.5  +  observed.length;	  double    dev    =    0.5;    	compilable	  [FE]  AssertionFailedError  	20	6	replace
16	[BUG]  [BUGGY]  double  dev  =  0.5  +  observed.length;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  0.5  +  observed.length;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double  dev  =  0.5  +  observed.length;	  double    dev    =    0.5;    	compilable	  [FE]  AssertionFailedError  	20	6	replace
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  1.0d;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	add	double  dev  =  1.0d;	  double    dev    =    1.0;    	compilable	  [FE]  AssertionFailedError  	9	6	replace
18	[BUG]  [BUGGY]  double  dev  =  1.0d;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  1.0d;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double  dev  =  1.0d;	  double    dev    =    1.0;    	compilable	  [FE]  AssertionFailedError  	9	6	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  0.002;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	add	double  dev  =  0.002;	  double    dev    =    0.001;    	compilable	  [FE]  AssertionFailedError  	11	6	replace
20	[BUG]  [BUGGY]  double  dev  =  0.002;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  0.002;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double  dev  =  0.002;	  double    dev    =    0.001;    	compilable	  [FE]  AssertionFailedError  	11	6	replace
21	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  /  distribution[i];  }  [CE]  array  required,  but  ChiSquaredDistribution  found  [FE]        AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  /  distribution[i];  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  /  distribution[i];  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i]    /    distribution[i];    }    	non-compiled	[CE]  array  required,  but  ChiSquaredDistribution  found	14	None	replace
22	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distribution[i]  /  expected[i];  }  [CE]  array  required,  but  ChiSquaredDistribution  found  [FE]          AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distribution[i]  /  expected[i];  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distribution[i]  /  expected[i];  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i]    /    distribution[i];    }    	non-compiled	[CE]  array  required,  but  ChiSquaredDistribution  found	14	None	replace
23	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distributed[i]  /  expected[i];  }  [CE]  cannot  find  symbol  distributed  [FE]            AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distributed[i]  /  expected[i];  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distributed[i]  /  expected[i];  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i]    /    distribution[i];    }    	non-compiled	[CE]  cannot  find  symbol  distributed	14	None	replace
24	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distribution[i]  /  total;  }  [CE]  array  required,  but  ChiSquaredDistribution  found  [FE]              AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distribution[i]  /  total;  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distribution[i]  /  total;  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i]    /    distribution[i];    }    	non-compiled	[CE]  array  required,  but  ChiSquaredDistribution  found	14	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  observed[i];  }  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  observed[i];  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  observed[i];  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    long[i]    *    observed[i];    }    	non-compiled	[CE]  ']'  expected	15	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  long[i]  *  observed[i];  }  [CE]  ']'  expected  [FE]            AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  long[i]  *  observed[i];  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  long[i]  *  observed[i];  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    long[i]    *    observed[i];    }    	non-compiled	[CE]  ']'  expected	15	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  long[i]  *  observed[i];  }  [CE]  ']'  expected  [FE]              AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  long[i]  *  observed[i];  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  long[i]  *  observed[i];  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    long[i]    *    observed[i];    }    	non-compiled	[CE]  ']'  expected	15	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i];  i++)  {  sumSq  +=  long[i]  *  observed[i];  }  [CE]  ']'  expected  [FE]                AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  observed[i];  i++)  {  sumSq  +=  long[i]  *  observed[i];  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed[i];  i++)  {  sumSq  +=  long[i]  *  observed[i];  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    long[i]    *    observed[i];    }    	non-compiled	[CE]  ']'  expected	15	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  ((  double)expected[i]  -  expected[i]);  }  [CE]  cannot  find  symbol  dev  [FE]          AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  ((  double)expected[i]  -  expected[i]);  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  ((  double)expected[i]  -  expected[i]);  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    ((    double)expected[i]    -    expected[i]);    }    	non-compiled	[CE]  cannot  find  symbol  dev	22	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)expected[i]  -  expected[i]);  }  [CE]  cannot  find  symbol  dev  [FE]            AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)expected[i]  -  expected[i]);  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)expected[i]  -  expected[i]);  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    ((    double)expected[i]    -    expected[i]);    }    	non-compiled	[CE]  cannot  find  symbol  dev	22	None	replace
31	[BUG]  [BUGGY]  int  observed.length  =  observed.length  -  1;  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  int  observed.length  =  observed.length  -  1;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  observed.length  =  observed.length  -  1;	      int    observed.length    =    observed.length;    	non-compiled	[CE]  ';'  expected	4	None	replace
32	[BUG]  [BUGGY]  int  observed.length  =  expected.length;  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  int  observed.length  =  expected.length;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  observed.length  =  expected.length;	      int    observed.length    =    observed.length;    	non-compiled	[CE]  ';'  expected	4	None	replace
33	[BUG]  [BUGGY]  int  observed.length  =  observed.length  -  2;  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  int  observed.length  =  observed.length  -  2;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  observed.length  =  observed.length  -  2;	      int    observed.length    =    observed.length;    	non-compiled	[CE]  ';'  expected	4	None	replace
34	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i];  }  [CE]  cannot  find  symbol  dev  [FE]                AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i];  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i];  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i];    }    	non-compiled	[CE]  cannot  find  symbol  dev	18	None	replace
35	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i];  i++)  {  sumSq  +=  observed[i];  }  [CE]  cannot  find  symbol  dev  [FE]                  AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  observed[i];  i++)  {  sumSq  +=  observed[i];  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed[i];  i++)  {  sumSq  +=  observed[i];  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i];    }    	non-compiled	[CE]  cannot  find  symbol  dev	18	None	replace
36	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  observed[i];  }  [CE]  long  cannot  be  dereferenced  [FE]                    AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  observed[i];  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  observed[i];  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i];    }    	non-compiled	[CE]  long  cannot  be  dereferenced	18	None	replace
37	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i];  }  [CE]  cannot  find  symbol  dev  [FE]                      AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i];  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i];  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i];    }    	non-compiled	[CE]  cannot  find  symbol  dev	18	None	replace
38	[BUG]  [BUGGY]  long[]  observed  =  observed.length  -  1;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  long[]  observed  =  observed.length  -  1;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long[]  observed  =  observed.length  -  1;	      long[]    observed    =    observed.length;    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	3	None	replace
39	[BUG]  [BUGGY]  long[]  observed  =  observed.length  -  2;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  long[]  observed  =  observed.length  -  2;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long[]  observed  =  observed.length  -  2;	      long[]    observed    =    observed.length;    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	3	None	replace
40	[BUG]  [BUGGY]  long[]  observed  =  expected.length;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  long[]  observed  =  expected.length;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long[]  observed  =  expected.length;	      long[]    observed    =    observed.length;    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	3	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  *  distribution[i];  }  [CE]  array  required,  but  ChiSquaredDistribution  found  [FE]            AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  *  distribution[i];  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  *  distribution[i];  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i]    *    distribution[i];    }    	non-compiled	[CE]  array  required,  but  ChiSquaredDistribution  found	16	None	replace
42	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distributed[i]  *  distribution[i];  }  [CE]  cannot  find  symbol  distributed  [FE]              AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distributed[i]  *  distribution[i];  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distributed[i]  *  distribution[i];  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i]    *    distribution[i];    }    	non-compiled	[CE]  cannot  find  symbol  distributed	16	None	replace
43	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i]  *  distribution[i];  i++)  {  sumSq  +=  observed[i]  *  distribution[i];  }  [CE]  array  required,  but  ChiSquaredDistribution  found  [FE]                AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  observed[i]  *  distribution[i];  i++)  {  sumSq  +=  observed[i]  *  distribution[i];  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed[i]  *  distribution[i];  i++)  {  sumSq  +=  observed[i]  *  distribution[i];  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i]    *    distribution[i];    }    	non-compiled	[CE]  array  required,  but  ChiSquaredDistribution  found	16	None	replace
44	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distribution[i]  *  expected[i];  }  [CE]  array  required,  but  ChiSquaredDistribution  found  [FE]                  AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distribution[i]  *  expected[i];  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distribution[i]  *  expected[i];  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i]    *    distribution[i];    }    	non-compiled	[CE]  array  required,  but  ChiSquaredDistribution  found	16	None	replace
45	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  0.0f;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	add	double  dev  =  0.0f;	  double    dev    =    0.0;    	compilable	  [FE]  AssertionFailedError  	7	6	replace
46	[BUG]  [BUGGY]  double  dev  =  0.0f;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  0.0f;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double  dev  =  0.0f;	  double    dev    =    0.0;    	compilable	  [FE]  AssertionFailedError  	7	6	replace
47	[BUG]  [BUGGY]  double  dev  =  0.001;  double  dev  =  0.001;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  0.001;  double  dev  =  0.001;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.001;    double  dev  =  0.001;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	10	None	add
48	[BUG]  [BUGGY]  double  dev  =  0.001;  Double  dev  =  0.001;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  0.001;  Double  dev  =  0.001;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.001;    Double  dev  =  0.001;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	10	None	add
49	[BUG]  [BUGGY]  double  dev  =  0.001;  int  dev  =  0.001;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  0.001;  int  dev  =  0.001;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.001;    int  dev  =  0.001;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	10	None	add
50	[BUG]  [BUGGY]  double  dev  =  0.001;  long  dev  =  0.001;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  0.001;  long  dev  =  0.001;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.001;    long  dev  =  0.001;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	10	None	add
51	[BUG]  [BUGGY]  double  dev  =  0.001;  double  dev  =.001;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  0.001;  double  dev  =.001;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.001;    double  dev  =.001;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	10	None	add
52	[BUG]  [BUGGY]  double  dev  =  0.5;  double  dev  =  0.5;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  0.5;  double  dev  =  0.5;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.5;    double  dev  =  0.5;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	19	None	add
53	[BUG]  [BUGGY]  double  dev  =  0.5;  Double  dev  =  0.5;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  0.5;  Double  dev  =  0.5;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.5;    Double  dev  =  0.5;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	19	None	add
54	[BUG]  [BUGGY]  double  dev  =  0.5;  int  dev  =  0.5;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  0.5;  int  dev  =  0.5;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.5;    int  dev  =  0.5;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	19	None	add
55	[BUG]  [BUGGY]  double  dev  =  0.5;  long  dev  =  0.5;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  0.5;  long  dev  =  0.5;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.5;    long  dev  =  0.5;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	19	None	add
56	[BUG]  [BUGGY]  double  dev  =  0.5;  double  dev  =  0.3;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  0.5;  double  dev  =  0.3;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.5;    double  dev  =  0.3;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	19	None	add
57	[BUG]  [BUGGY]  double  dev  =  0.0001;  double  dev  =  0.0001;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  0.0001;  double  dev  =  0.0001;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.0001;    double  dev  =  0.0001;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	12	None	add
58	[BUG]  [BUGGY]  double  dev  =  0.0001;  Double  dev  =  0.0001;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  0.0001;  Double  dev  =  0.0001;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.0001;    Double  dev  =  0.0001;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	12	None	add
59	[BUG]  [BUGGY]  double  dev  =  0.0001;  int  dev  =  0.0001;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  0.0001;  int  dev  =  0.0001;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.0001;    int  dev  =  0.0001;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	12	None	add
60	[BUG]  [BUGGY]  double  dev  =  0.0001;  long  dev  =  0.0001;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  0.0001;  long  dev  =  0.0001;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.0001;    long  dev  =  0.0001;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	12	None	add
61	[BUG]  [BUGGY]  double  dev  =  0.0001;  double  dev  =  0.001;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  0.0001;  double  dev  =  0.001;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.0001;    double  dev  =  0.001;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	12	None	add
62	[BUG]  [BUGGY]  int  observed[]  =  observed.length;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  int  observed[]  =  observed.length;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  observed[]  =  observed.length;	      long    observed[]    =    observed.length;    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	1	None	replace
63	[BUG]  [BUGGY]  long  observed[]  =  observed.length  -  1;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  long  observed[]  =  observed.length  -  1;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long  observed[]  =  observed.length  -  1;	      long    observed[]    =    observed.length;    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	1	None	replace
64	[BUG]  [BUGGY]  long  observed[]  =  observed.length  -  2;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  long  observed[]  =  observed.length  -  2;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long  observed[]  =  observed.length  -  2;	      long    observed[]    =    observed.length;    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	1	None	replace
65	[BUG]  [BUGGY]  double  dev  =  1.0;  double  dev  =  1.0;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  1.0;  double  dev  =  1.0;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    1.0;    double  dev  =  1.0;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	8	None	add
66	[BUG]  [BUGGY]  double  dev  =  1.0;  Double  dev  =  1.0;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  1.0;  Double  dev  =  1.0;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    1.0;    Double  dev  =  1.0;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	8	None	add
67	[BUG]  [BUGGY]  double  dev  =  1.0;  int  dev  =  1.0;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  1.0;  int  dev  =  1.0;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    1.0;    int  dev  =  1.0;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	8	None	add
68	[BUG]  [BUGGY]  double  dev  =  1.0;  long  dev  =  1.0;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  1.0;  long  dev  =  1.0;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    1.0;    long  dev  =  1.0;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	8	None	add
69	[BUG]  [BUGGY]  double  dev  =  1.0;  double  dev  =  0.0;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  1.0;  double  dev  =  0.0;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    1.0;    double  dev  =  0.0;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	8	None	add
70	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)expected[i]  -  observed[i]);  }  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)expected[i]  -  observed[i]);  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)expected[i]  -  observed[i]);  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    ((    double)expected[i]    -    observed[i]);    }    	non-compiled	[CE]  cannot  find  symbol  dev	21	None	replace
71	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i];  i++)  {  sumSq  +=  ((  double)expected[i]  -  observed[i]);  }  [CE]  cannot  find  symbol  dev  [FE]          AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  observed[i];  i++)  {  sumSq  +=  ((  double)expected[i]  -  observed[i]);  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed[i];  i++)  {  sumSq  +=  ((  double)expected[i]  -  observed[i]);  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    ((    double)expected[i]    -    observed[i]);    }    	non-compiled	[CE]  cannot  find  symbol  dev	21	None	replace
72	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  ((  double)expected[i]  -  observed[i]);  }  [CE]  long  cannot  be  dereferenced  [FE]            AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  ((  double)expected[i]  -  observed[i]);  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  ((  double)expected[i]  -  observed[i]);  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    ((    double)expected[i]    -    observed[i]);    }    	non-compiled	[CE]  long  cannot  be  dereferenced	21	None	replace
73	[BUG]  [BUGGY]  long[]  expected  =  observed.length  -  1;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  long[]  expected  =  observed.length  -  1;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long[]  expected  =  observed.length  -  1;	      long[]    expected    =    observed.length;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	2	None	replace
74	[BUG]  [BUGGY]  long[]  expected  =  observed.length  -  2;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  long[]  expected  =  observed.length  -  2;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long[]  expected  =  observed.length  -  2;	      long[]    expected    =    observed.length;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	2	None	replace
75	[BUG]  [BUGGY]  long[]  expected  =  observed.length  /  2;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  long[]  expected  =  observed.length  /  2;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long[]  expected  =  observed.length  /  2;	      long[]    expected    =    observed.length;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	2	None	replace
76	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  /  long[i];  }  [CE]  ']'  expected  [FE]            AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  /  long[i];  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  /  long[i];  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i]    /    long[i];    }    	non-compiled	[CE]  ']'  expected	23	None	replace
77	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  /  long[i];  }  [CE]  ']'  expected  [FE]              AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  /  long[i];  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  /  long[i];  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i]    /    long[i];    }    	non-compiled	[CE]  ']'  expected	23	None	replace
78	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i]  /  long[i];  i++)  {  sumSq  +=  observed[i]  /  long[i];  }  [CE]  ']'  expected  [FE]                AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  observed[i]  /  long[i];  i++)  {  sumSq  +=  observed[i]  /  long[i];  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed[i]  /  long[i];  i++)  {  sumSq  +=  observed[i]  /  long[i];  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i]    /    long[i];    }    	non-compiled	[CE]  ']'  expected	23	None	replace
79	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i]  -  long[i];  i++)  {  sumSq  +=  observed[i]  /  long[i];  }  [CE]  ']'  expected  [FE]                  AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  observed[i]  -  long[i];  i++)  {  sumSq  +=  observed[i]  /  long[i];  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed[i]  -  long[i];  i++)  {  sumSq  +=  observed[i]  /  long[i];  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i]    /    long[i];    }    	non-compiled	[CE]  ']'  expected	23	None	replace
80	[BUG]  [BUGGY]  int  observed.length  =  expected[0];  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  int  observed.length  =  expected[0];  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	int  observed.length  =  expected[0];	      int    observed.length    =    observed[0];    	non-compiled	[CE]  ';'  expected	5	None	replace
81	[BUG]  [BUGGY]  long  observed[]  =  expected.length;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  long  observed[]  =  expected.length;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long  observed[]  =  expected.length;	      long    observed[]    =    observed.length;    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	1	None	replace
82	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  long[i];  }  [CE]  ']'  expected  [FE]            AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  long[i];  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  long[i];  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i]    /    long[i];    }    	non-compiled	[CE]  ']'  expected	23	None	replace
83	[BUG]  [BUGGY]  if(sumSq  >=  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  /  long[i];  }  [CE]  ']'  expected  [FE]              AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  if(sumSq  >=  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  /  long[i];  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	if(sumSq  >=  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  /  long[i];  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i]    /    long[i];    }    	non-compiled	[CE]  ']'  expected	23	None	replace
84	[BUG]  [BUGGY]  long[]  expected  =  observed.length  +  1;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  long[]  expected  =  observed.length  +  1;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long[]  expected  =  observed.length  +  1;	      long[]    expected    =    observed.length;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	2	None	replace
85	[BUG]  [BUGGY]  double  dev  =  0.0001;  float  dev  =  0.0001;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  0.0001;  float  dev  =  0.0001;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.0001;    float  dev  =  0.0001;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	12	None	add
86	[BUG]  [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distribution[i]  *  expected[i];  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distribution[i]  *  expected[i];  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distribution[i]  *  expected[i];  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i]    *    distribution[i];    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
87	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distributed[i]  /  distribution[i];  }  [CE]  cannot  find  symbol  distributed  [FE]        AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distributed[i]  /  distribution[i];  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distributed[i]  /  distribution[i];  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i]    /    distribution[i];    }    	non-compiled	[CE]  cannot  find  symbol  distributed	14	None	replace
88	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distribution[i]  -  expected[i];  }  [CE]  array  required,  but  ChiSquaredDistribution  found  [FE]          AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distribution[i]  -  expected[i];  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distribution[i]  -  expected[i];  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i]    /    distribution[i];    }    	non-compiled	[CE]  array  required,  but  ChiSquaredDistribution  found	14	None	replace
89	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  0.5d;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	add	double  dev  =  0.5d;	  double    dev    =    0.5;    	compilable	  [FE]  AssertionFailedError  	20	6	replace
90	[BUG]  [BUGGY]  double  dev  =  0.5d;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  0.5d;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double  dev  =  0.5d;	  double    dev    =    0.5;    	compilable	  [FE]  AssertionFailedError  	20	6	replace
91	[BUG]  [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i];  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i];  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i];    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
92	[BUG]  [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i];  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i];  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i];    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
93	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  ((  double)expected[i]  -  observed[i]);  }  [CE]  cannot  find  symbol  dev  [FE]        AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  ((  double)expected[i]  -  observed[i]);  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  ((  double)expected[i]  -  observed[i]);  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    ((    double)expected[i]    -    observed[i]);    }    	non-compiled	[CE]  cannot  find  symbol  dev	21	None	replace
94	[BUG]  [BUGGY]  double  dev  =  0.001;  float  dev  =  0.001;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  0.001;  float  dev  =  0.001;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.001;    float  dev  =  0.001;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	10	None	add
95	[BUG]  [BUGGY]  double  dev  =  0.0;  double  dev  =  0.00;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  0.0;  double  dev  =  0.00;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.0;    double  dev  =  0.00;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	6	None	add
96	[BUG]  [BUGGY]  if(expected  >  0.0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  long[i]  *  observed[i];  }  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  if(expected  >  0.0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  long[i]  *  observed[i];  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	if(expected  >  0.0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  long[i]  *  observed[i];  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    long[i]    *    observed[i];    }    	non-compiled	[CE]  ']'  expected	15	None	replace
97	[BUG]  [BUGGY]  if(expected  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  observed[i];  }  [CE]  ']'  expected  [FE]            AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  if(expected  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  observed[i];  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	if(expected  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  observed[i];  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    long[i]    *    observed[i];    }    	non-compiled	[CE]  ']'  expected	15	None	replace
98	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  distribution[i];  }  [CE]  array  required,  but  ChiSquaredDistribution  found  [FE]            AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  distribution[i];  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  distribution[i];  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i]    *    distribution[i];    }    	non-compiled	[CE]  array  required,  but  ChiSquaredDistribution  found	16	None	replace
99	[BUG]  [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  distribution[i];  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  distribution[i];  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  distribution[i];  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i]    *    distribution[i];    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
100	[BUG]  [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distributed[i]  *  distribution[i];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distributed[i]  *  distribution[i];  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  distributed[i]  *  distribution[i];  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i]    *    distribution[i];    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
101	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  long[i];  }  [CE]  ']'  expected  [FE]            AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  long[i];  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  long[i];  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i]    /    long[i];    }    	non-compiled	[CE]  ']'  expected	23	None	replace
102	[BUG]  [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  long[i];  }  [CE]  ']'  expected  [FE]              AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  long[i];  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  long[i];  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i]    /    long[i];    }    	non-compiled	[CE]  ']'  expected	23	None	replace
103	[BUG]  [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  long[i];  }  [CE]  ']'  expected  [FE]                AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  long[i];  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  long[i];  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i]    /    long[i];    }    	non-compiled	[CE]  ']'  expected	23	None	replace
104	[BUG]  [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  observed[i];  }  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  observed[i];  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  observed[i];  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    long[i]    *    observed[i];    }    	non-compiled	[CE]  ']'  expected	15	None	replace
105	[BUG]  [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  expected[i];  }  [CE]  ']'  expected  [FE]            AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  expected[i];  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  expected[i];  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    long[i]    *    observed[i];    }    	non-compiled	[CE]  ']'  expected	15	None	replace
106	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  distribution[i];  }  [CE]  array  required,  but  ChiSquaredDistribution  found  [FE]        AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  distribution[i];  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  distribution[i];  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i]    /    distribution[i];    }    	non-compiled	[CE]  array  required,  but  ChiSquaredDistribution  found	14	None	replace
107	[BUG]  [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  distribution[i];  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  distribution[i];  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  distribution[i];  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i]    /    distribution[i];    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
108	[BUG]  [BUGGY]  double  observed.length  =  observed.length;  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  observed.length  =  observed.length;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double  observed.length  =  observed.length;	      int    observed.length    =    observed.length;    	non-compiled	[CE]  ';'  expected	4	None	replace
109	[BUG]  [BUGGY]  long[]  observed  =  observed.length  /  2;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  long[]  observed  =  observed.length  /  2;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	long[]  observed  =  observed.length  /  2;	      long[]    observed    =    observed.length;    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	3	None	replace
110	[BUG]  [BUGGY]  sumSq  +=((  double)expected[i]  -  observed[i]);  [CE]  cannot  find  symbol  i  [FE]        AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  sumSq  +=((  double)expected[i]  -  observed[i]);  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	sumSq  +=((  double)expected[i]  -  observed[i]);	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    ((    double)expected[i]    -    observed[i]);    }    	non-compiled	[CE]  cannot  find  symbol  i	21	None	replace
111	[BUG]  [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  -  1;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  -  1;  }  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  -  1;  }	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    observed[i]    -    1;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
112	[BUG]  [BUGGY]  sumSq  +=((  double)expected[i]  -  expected[i]);  [CE]  cannot  find  symbol  i  [FE]          AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  sumSq  +=((  double)expected[i]  -  expected[i]);  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	sumSq  +=((  double)expected[i]  -  expected[i]);	      if(sumSq    >    0.0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    sumSq    +=    ((    double)expected[i]    -    expected[i]);    }    	non-compiled	[CE]  cannot  find  symbol  i	22	None	replace
113	[BUG]  [BUGGY]  double  dev  =  0.5;  double  dev  =  0.;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  dev  =  0.5;  double  dev  =  0.;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double    dev    =    0.5;    double  dev  =  0.;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	19	None	add
114	[BUG]  [BUGGY]  double  observed.length  =  observed[0];  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;    [BUGGY]  double  observed.length  =  observed[0];  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double  observed.length  =  observed[0];	      int    observed.length    =    observed[0];    	non-compiled	[CE]  ';'  expected	5	None	replace
