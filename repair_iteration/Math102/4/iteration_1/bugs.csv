bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    long  observed[]  =  observed.length;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]    long  observed[]  =  observed.length;  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	    long  observed[]  =  observed.length;		non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	8	None	add
2	[BUG]  [BUGGY]    long[]  expected  =  observed.length;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]    long[]  expected  =  observed.length;  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	    long[]  expected  =  observed.length;		non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	8	None	add
3	[BUG]  [BUGGY]    long[]  observed  =  observed.length;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]    long[]  observed  =  observed.length;  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	    long[]  observed  =  observed.length;		non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	8	None	add
4	[BUG]  [BUGGY]    int  observed.length  =  observed.length;  [CE]  ';'  expected  [FE]          AssertionFailedError  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]    int  observed.length  =  observed.length;  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	    int  observed.length  =  observed.length;		non-compiled	[CE]  ';'  expected	8	None	add
5	[BUG]  [BUGGY]    int  observed.length  =  observed[0];  [CE]  ';'  expected  [FE]            AssertionFailedError  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]    int  observed.length  =  observed[0];  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	    int  observed.length  =  observed[0];		non-compiled	[CE]  ';'  expected	8	None	add
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]  double  dev  =  0.0;  [BUGGY]  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	add	double  dev  =  0.0;	double  dev  =  0.0d;  	compilable	  [FE]  AssertionFailedError  	7	6	replace
7	[BUG]  [BUGGY]  double  dev  =  0.0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]  double  dev  =  0.0;  [BUGGY]  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double  dev  =  0.0;	double  dev  =  0.0d;  	compilable	  [FE]  AssertionFailedError  	7	6	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]  double  dev  =  1.0;  [BUGGY]  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	add	double  dev  =  1.0;	double  dev  =  0.0d;  	compilable	  [FE]  AssertionFailedError  	7	6	replace
9	[BUG]  [BUGGY]  double  dev  =  1.0;  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]  double  dev  =  1.0;  [BUGGY]  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double  dev  =  1.0;	double  dev  =  0.0d;  	compilable	  [FE]  AssertionFailedError  	7	6	replace
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]  double  dev  =  0.001;  [BUGGY]  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	add	double  dev  =  0.001;	double  dev  =  0.0d;  	compilable	  [FE]  AssertionFailedError  	7	6	replace
11	[BUG]  [BUGGY]  double  dev  =  0.001;  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]  double  dev  =  0.001;  [BUGGY]  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double  dev  =  0.001;	double  dev  =  0.0d;  	compilable	  [FE]  AssertionFailedError  	7	6	replace
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]  double  dev  =  0.0001;  [BUGGY]  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	add	double  dev  =  0.0001;	double  dev  =  0.0d;  	compilable	  [FE]  AssertionFailedError  	7	6	replace
13	[BUG]  [BUGGY]  double  dev  =  0.0001;  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]  double  dev  =  0.0001;  [BUGGY]  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double  dev  =  0.0001;	double  dev  =  0.0d;  	compilable	  [FE]  AssertionFailedError  	7	6	replace
14	[BUG]  [BUGGY]    if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  /  distribution[i];  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]    if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  /  distribution[i];  }  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	    if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  /  distribution[i];  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
15	[BUG]  [BUGGY]    if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  long[i]  *  observed[i];  }  [CE]  ']'  expected  [FE]      AssertionFailedError  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]    if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  long[i]  *  observed[i];  }  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	    if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  long[i]  *  observed[i];  }		non-compiled	[CE]  ']'  expected	8	None	add
16	[BUG]  [BUGGY]    if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  *  distribution[i];  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]    if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  *  distribution[i];  }  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	    if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  *  distribution[i];  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
17	[BUG]  [BUGGY]    if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  -  1;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]    if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  -  1;  }  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	    if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  -  1;  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
18	[BUG]  [BUGGY]    if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i];  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]    if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i];  }  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	    if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i];  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]  double  dev  =  0.5;  [BUGGY]  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	add	double  dev  =  0.5;	double  dev  =  0.0d;  	compilable	  [FE]  AssertionFailedError  	7	6	replace
20	[BUG]  [BUGGY]  double  dev  =  0.5;  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]  double  dev  =  0.5;  [BUGGY]  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double  dev  =  0.5;	double  dev  =  0.0d;  	compilable	  [FE]  AssertionFailedError  	7	6	replace
21	[BUG]  [BUGGY]    if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  ((  double)expected[i]  -  observed[i]);  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]    if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  ((  double)expected[i]  -  observed[i]);  }  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	    if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  ((  double)expected[i]  -  observed[i]);  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
22	[BUG]  [BUGGY]    if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  ((  double)expected[i]  -  expected[i]);  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]    if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  ((  double)expected[i]  -  expected[i]);  }  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	    if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  ((  double)expected[i]  -  expected[i]);  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
23	[BUG]  [BUGGY]    if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  /  long[i];  }  [CE]  ']'  expected  [FE]        AssertionFailedError  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]    if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  /  long[i];  }  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	    if(sumSq  >  0.0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  /  long[i];  }		non-compiled	[CE]  ']'  expected	8	None	add
