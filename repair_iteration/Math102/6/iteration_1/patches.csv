bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  observed[i]  /  expected[i];  dev  =  observed[i]  /  expected[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev    =    observed[i]    /    expected[i];    dev  =  observed[i]  /  expected[i];	  	compilable	  [FE]  AssertionFailedError  	8	6	add
2	[BUG]  [BUGGY]  dev  =  observed[i]  /  expected[i];  dev  =  observed[i]  /  expected[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  observed[i]  /  expected[i];  dev  =  observed[i]  /  expected[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    /    expected[i];    dev  =  observed[i]  /  expected[i];	  	compilable	  [FE]  AssertionFailedError  	8	6	add
3	[BUG]  [BUGGY]  dev  =  observed[i]  /  expected[i];  Dev  =  observed[i]  /  expected[i];  [CE]  cannot  find  symbol  Dev  [FE]      AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  observed[i]  /  expected[i];  Dev  =  observed[i]  /  expected[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    /    expected[i];    Dev  =  observed[i]  /  expected[i];	  	non-compiled	[CE]  cannot  find  symbol  Dev	8	None	add
4	[BUG]  [BUGGY]  dev  =  observed[i]  /  expected[i];  int  dev  =  observed[i]  /  expected[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  observed[i]  /  expected[i];  int  dev  =  observed[i]  /  expected[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    /    expected[i];    int  dev  =  observed[i]  /  expected[i];	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	8	None	add
5	[BUG]  [BUGGY]  dev  =  observed[i]  /  expected[i];  double  dev  =  observed[i]  /  expected[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  observed[i]  /  expected[i];  double  dev  =  observed[i]  /  expected[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    /    expected[i];    double  dev  =  observed[i]  /  expected[i];	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	8	None	add
6	[BUG]  [BUGGY]  ((  double)expected[i]  /  observed[i]);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  ((  double)expected[i]  /  observed[i]);  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)expected[i]  /  observed[i]);	      ((    double)expected[i]    -    observed[i]);    	non-compiled	[CE]  not  a  statement	1	None	replace
7	[BUG]  [BUGGY]  ((  long)expected[i]  -  observed[i]);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  ((  long)expected[i]  -  observed[i]);  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  long)expected[i]  -  observed[i]);	      ((    double)expected[i]    -    observed[i]);    	non-compiled	[CE]  not  a  statement	1	None	replace
8	[BUG]  [BUGGY]  ((  double)expected[i]  *  observed[i]);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  ((  double)expected[i]  *  observed[i]);  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)expected[i]  *  observed[i]);	      ((    double)expected[i]    -    observed[i]);    	non-compiled	[CE]  not  a  statement	1	None	replace
9	[BUG]  [BUGGY]  ((  double)expected[i]  /  expected[i]);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  ((  double)expected[i]  /  expected[i]);  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)expected[i]  /  expected[i]);	      ((    double)expected[i]    -    expected[i]);    	non-compiled	[CE]  not  a  statement	5	None	replace
10	[BUG]  [BUGGY]  ((  double)expected[i]  *  expected[i]);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  ((  double)expected[i]  *  expected[i]);  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)expected[i]  *  expected[i]);	      ((    double)expected[i]    -    expected[i]);    	non-compiled	[CE]  not  a  statement	5	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  ((  double)expected[i]  -  observed[i]);  dev  =  ((  double)expected[i]  -  observed[i]);  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev    =    ((    double)expected[i]    -    observed[i]);    dev  =  ((  double)expected[i]  -  observed[i]);	  	compilable	  [FE]  AssertionFailedError  	6	6	add
12	[BUG]  [BUGGY]  dev  =  ((  double)expected[i]  -  observed[i]);  dev  =  ((  double)expected[i]  -  observed[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  ((  double)expected[i]  -  observed[i]);  dev  =  ((  double)expected[i]  -  observed[i]);  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    ((    double)expected[i]    -    observed[i]);    dev  =  ((  double)expected[i]  -  observed[i]);	  	compilable	  [FE]  AssertionFailedError  	6	6	add
13	[BUG]  [BUGGY]  dev  =  ((  double)expected[i]  -  observed[i]);  Dev  =  ((  double)expected[i]  -  observed[i]);  [CE]  cannot  find  symbol  Dev  [FE]      AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  ((  double)expected[i]  -  observed[i]);  Dev  =  ((  double)expected[i]  -  observed[i]);  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    ((    double)expected[i]    -    observed[i]);    Dev  =  ((  double)expected[i]  -  observed[i]);	  	non-compiled	[CE]  cannot  find  symbol  Dev	6	None	add
14	[BUG]  [BUGGY]  dev  =  ((  double)expected[i]  -  observed[i]);  int  dev  =  ((  double)expected[i]  -  observed[i]);  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  ((  double)expected[i]  -  observed[i]);  int  dev  =  ((  double)expected[i]  -  observed[i]);  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    ((    double)expected[i]    -    observed[i]);    int  dev  =  ((  double)expected[i]  -  observed[i]);	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	6	None	add
15	[BUG]  [BUGGY]  dev  =  ((  double)expected[i]  -  observed[i]);  ((  double)expected[i]  -  observed[i]);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  ((  double)expected[i]  -  observed[i]);  ((  double)expected[i]  -  observed[i]);  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    ((    double)expected[i]    -    observed[i]);    ((  double)expected[i]  -  observed[i]);	  	non-compiled	[CE]  not  a  statement	6	None	add
16	[BUG]  [BUGGY]  dev  =  observed[i]  /  sumSq[i];  [CE]  array  required,  but  double  found  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  observed[i]  /  sumSq[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  /  sumSq[i];	  dev    =    observed[i]    /    expected[i];    	non-compiled	[CE]  array  required,  but  double  found	9	None	replace
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  observed[i]  *  expected[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  observed[i]  *  expected[i];	  dev    =    observed[i]    /    expected[i];    	compilable	  [FE]  AssertionFailedError  	9	6	replace
18	[BUG]  [BUGGY]  dev  =  observed[i]  *  expected[i];  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  observed[i]  *  expected[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  *  expected[i];	  dev    =    observed[i]    /    expected[i];    	compilable	  [FE]  AssertionFailedError  	9	6	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  expected[i]  /  observed[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  expected[i]  /  observed[i];	  dev    =    observed[i]    /    expected[i];    	compilable	  [FE]  AssertionFailedError  	9	6	replace
20	[BUG]  [BUGGY]  dev  =  expected[i]  /  observed[i];  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  expected[i]  /  observed[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  expected[i]  /  observed[i];	  dev    =    observed[i]    /    expected[i];    	compilable	  [FE]  AssertionFailedError  	9	6	replace
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  observed[i]  -  expected[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  observed[i]  -  expected[i];	  dev    =    expected[i]    -    observed[i];    	compilable	  [FE]  AssertionFailedError  	11	6	replace
22	[BUG]  [BUGGY]  dev  =  observed[i]  -  expected[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  observed[i]  -  expected[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  -  expected[i];	  dev    =    expected[i]    -    observed[i];    	compilable	  [FE]  AssertionFailedError  	11	6	replace
23	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
24	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  ((  long)expected[i]  /  observed[i]);  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  ((  long)expected[i]  /  observed[i]);	  dev    =    ((    long)expected[i]    -    observed[i]);    	compilable	  [FE]  AssertionFailedError  	15	6	replace
26	[BUG]  [BUGGY]  dev  =  ((  long)expected[i]  /  observed[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  ((  long)expected[i]  /  observed[i]);  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  long)expected[i]  /  observed[i]);	  dev    =    ((    long)expected[i]    -    observed[i]);    	compilable	  [FE]  AssertionFailedError  	15	6	replace
27	[BUG]  [BUGGY]  ((  double)observed[i]  -  observed[i]);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  ((  double)observed[i]  -  observed[i]);  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)observed[i]  -  observed[i]);	      ((    double)observed[i]    -    expected[i]);    	non-compiled	[CE]  not  a  statement	2	None	replace
28	[BUG]  [BUGGY]  ((  double)observed[i]  /  expected[i]);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  ((  double)observed[i]  /  expected[i]);  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)observed[i]  /  expected[i]);	      ((    double)observed[i]    -    expected[i]);    	non-compiled	[CE]  not  a  statement	2	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
31	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]            AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	16	None	replace
32	[BUG]  [BUGGY]  ((  double)expected[i]  /  expected[i]).doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]        AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  ((  double)expected[i]  /  expected[i]).doubleValue();  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)expected[i]  /  expected[i]).doubleValue();	      ((    double)expected[i]    -    expected[i]).doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	12	None	replace
33	[BUG]  [BUGGY]  ((  double)expected[i]  *  expected[i]).doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  ((  double)expected[i]  *  expected[i]).doubleValue();  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)expected[i]  *  expected[i]).doubleValue();	      ((    double)expected[i]    -    expected[i]).doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	12	None	replace
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  ((  long)expected[i]  -  observed[i]);  dev  =  ((  long)expected[i]  -  observed[i]);  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev    =    ((    long)expected[i]    -    observed[i]);    dev  =  ((  long)expected[i]  -  observed[i]);	  	compilable	  [FE]  AssertionFailedError  	14	6	add
35	[BUG]  [BUGGY]  dev  =  ((  long)expected[i]  -  observed[i]);  dev  =  ((  long)expected[i]  -  observed[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  ((  long)expected[i]  -  observed[i]);  dev  =  ((  long)expected[i]  -  observed[i]);  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    ((    long)expected[i]    -    observed[i]);    dev  =  ((  long)expected[i]  -  observed[i]);	  	compilable	  [FE]  AssertionFailedError  	14	6	add
36	[BUG]  [BUGGY]  dev  =  ((  long)expected[i]  -  observed[i]);  Dev  =  ((  long)expected[i]  -  observed[i]);  [CE]  cannot  find  symbol  Dev  [FE]      AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  ((  long)expected[i]  -  observed[i]);  Dev  =  ((  long)expected[i]  -  observed[i]);  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    ((    long)expected[i]    -    observed[i]);    Dev  =  ((  long)expected[i]  -  observed[i]);	  	non-compiled	[CE]  cannot  find  symbol  Dev	14	None	add
37	[BUG]  [BUGGY]  dev  =  ((  long)expected[i]  -  observed[i]);  int  dev  =  ((  long)expected[i]  -  observed[i]);  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  ((  long)expected[i]  -  observed[i]);  int  dev  =  ((  long)expected[i]  -  observed[i]);  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    ((    long)expected[i]    -    observed[i]);    int  dev  =  ((  long)expected[i]  -  observed[i]);	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	14	None	add
38	[BUG]  [BUGGY]  dev  =  ((  long)expected[i]  -  observed[i]);  ((  long)expected[i]  -  observed[i]);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  ((  long)expected[i]  -  observed[i]);  ((  long)expected[i]  -  observed[i]);  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    ((    long)expected[i]    -    observed[i]);    ((  long)expected[i]  -  observed[i]);	  	non-compiled	[CE]  not  a  statement	14	None	add
39	[BUG]  [BUGGY]  ((  double)expected[i]  /  observed[i]).doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  ((  double)expected[i]  /  observed[i]).doubleValue();  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)expected[i]  /  observed[i]).doubleValue();	      ((    double)expected[i]    -    observed[i]).doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	13	None	replace
40	[BUG]  [BUGGY]  ((  double)expected[i]  -  observed[i]),  sumSq,  observed[i]).doubleValue();  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  ((  double)expected[i]  -  observed[i]),  sumSq,  observed[i]).doubleValue();  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)expected[i]  -  observed[i]),  sumSq,  observed[i]).doubleValue();	      ((    double)expected[i]    -    observed[i]).doubleValue();    	non-compiled	[CE]  not  a  statement	13	None	replace
41	[BUG]  [BUGGY]  ((  double)expected[i]  -  observed[i]).doubleValue()  +  1;  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  ((  double)expected[i]  -  observed[i]).doubleValue()  +  1;  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)expected[i]  -  observed[i]).doubleValue()  +  1;	      ((    double)expected[i]    -    observed[i]).doubleValue();    	non-compiled	[CE]  not  a  statement	13	None	replace
42	[BUG]  [BUGGY]  double  expected[]  =  observed[i].doubleValue()  +  sumSq;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  double  expected[]  =  observed[i].doubleValue()  +  sumSq;  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	double  expected[]  =  observed[i].doubleValue()  +  sumSq;	      double    expected[]    =    observed[i].doubleValue();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	3	None	replace
43	[BUG]  [BUGGY]  long  expected[]  =  observed[i].doubleValue();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  long  expected[]  =  observed[i].doubleValue();  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	long  expected[]  =  observed[i].doubleValue();	      double    expected[]    =    observed[i].doubleValue();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	3	None	replace
44	[BUG]  [BUGGY]  double  expected[]  =  observed[i].doubleValue()  /  sumSq;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  double  expected[]  =  observed[i].doubleValue()  /  sumSq;  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	double  expected[]  =  observed[i].doubleValue()  /  sumSq;	      double    expected[]    =    observed[i].doubleValue();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	3	None	replace
45	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  ((  double)expected[i]  /  observed[i]);  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  ((  double)expected[i]  /  observed[i]);	  dev    =    ((    double)observed[i]    /    expected[i]);    	compilable	  [FE]  AssertionFailedError  	20	6	replace
46	[BUG]  [BUGGY]  dev  =  ((  double)expected[i]  /  observed[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  ((  double)expected[i]  /  observed[i]);  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  double)expected[i]  /  observed[i]);	  dev    =    ((    double)observed[i]    /    expected[i]);    	compilable	  [FE]  AssertionFailedError  	20	6	replace
47	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  ((  double)observed[i]  *  expected[i]);  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  ((  double)observed[i]  *  expected[i]);	  dev    =    ((    double)observed[i]    /    expected[i]);    	compilable	  [FE]  AssertionFailedError  	20	6	replace
48	[BUG]  [BUGGY]  dev  =  ((  double)observed[i]  *  expected[i]);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  ((  double)observed[i]  *  expected[i]);  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  double)observed[i]  *  expected[i]);	  dev    =    ((    double)observed[i]    /    expected[i]);    	compilable	  [FE]  AssertionFailedError  	20	6	replace
49	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  expected[i]  -  observed[i];  dev  =  expected[i]  -  observed[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev    =    expected[i]    -    observed[i];    dev  =  expected[i]  -  observed[i];	  	compilable	  [FE]  AssertionFailedError  	10	6	add
50	[BUG]  [BUGGY]  dev  =  expected[i]  -  observed[i];  dev  =  expected[i]  -  observed[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  expected[i]  -  observed[i];  dev  =  expected[i]  -  observed[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    expected[i]    -    observed[i];    dev  =  expected[i]  -  observed[i];	  	compilable	  [FE]  AssertionFailedError  	10	6	add
51	[BUG]  [BUGGY]  dev  =  expected[i]  -  observed[i];  Dev  =  expected[i]  -  observed[i];  [CE]  cannot  find  symbol  Dev  [FE]      AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  expected[i]  -  observed[i];  Dev  =  expected[i]  -  observed[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    expected[i]    -    observed[i];    Dev  =  expected[i]  -  observed[i];	  	non-compiled	[CE]  cannot  find  symbol  Dev	10	None	add
52	[BUG]  [BUGGY]  dev  =  expected[i]  -  observed[i];  int  dev  =  expected[i]  -  observed[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  expected[i]  -  observed[i];  int  dev  =  expected[i]  -  observed[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    expected[i]    -    observed[i];    int  dev  =  expected[i]  -  observed[i];	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	10	None	add
53	[BUG]  [BUGGY]  dev  =  expected[i]  -  observed[i];  double  dev  =  expected[i]  -  observed[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  expected[i]  -  observed[i];  double  dev  =  expected[i]  -  observed[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    expected[i]    -    observed[i];    double  dev  =  expected[i]  -  observed[i];	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	10	None	add
54	[BUG]  [BUGGY]  dev  =  expected[i]  -  observed[i];  long[]  expected[i]  =  observed[i]  -  observed[i];  [CE]  ']'  expected  [FE]            AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  expected[i]  -  observed[i];  long[]  expected[i]  =  observed[i]  -  observed[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    expected[i]    -    observed[i];    long[]  expected[i]  =  observed[i]  -  observed[i];	  	non-compiled	[CE]  ']'  expected	10	None	add
55	[BUG]  [BUGGY]  int  expected[]  =  observed[i].doubleValue()  +  sumSq;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  int  expected[]  =  observed[i].doubleValue()  +  sumSq;  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	int  expected[]  =  observed[i].doubleValue()  +  sumSq;	      int    expected[]    =    observed[i].doubleValue();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	4	None	replace
56	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly ");  }  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected))    {    throw    new    IllegalArgumentException(   "Unexpected    array    lengths    incorrectly   ");    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
57	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly. ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly. ");  }  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly. ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected))    {    throw    new    IllegalArgumentException(   "Unexpected    array    lengths    incorrectly   ");    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
58	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  ((  double)expected[i]  *  observed[i]);  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  ((  double)expected[i]  *  observed[i]);	  dev    =    ((    double)expected[i]    -    observed[i]);    	compilable	  [FE]  AssertionFailedError  	7	6	replace
59	[BUG]  [BUGGY]  dev  =  ((  double)expected[i]  *  observed[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  ((  double)expected[i]  *  observed[i]);  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  double)expected[i]  *  observed[i]);	  dev    =    ((    double)expected[i]    -    observed[i]);    	compilable	  [FE]  AssertionFailedError  	7	6	replace
60	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  ((  double)observed[i]  /  expected[i]);  dev  =  ((  double)observed[i]  /  expected[i]);  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev    =    ((    double)observed[i]    /    expected[i]);    dev  =  ((  double)observed[i]  /  expected[i]);	  	compilable	  [FE]  AssertionFailedError  	19	6	add
61	[BUG]  [BUGGY]  dev  =  ((  double)observed[i]  /  expected[i]);  dev  =  ((  double)observed[i]  /  expected[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  ((  double)observed[i]  /  expected[i]);  dev  =  ((  double)observed[i]  /  expected[i]);  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    ((    double)observed[i]    /    expected[i]);    dev  =  ((  double)observed[i]  /  expected[i]);	  	compilable	  [FE]  AssertionFailedError  	19	6	add
62	[BUG]  [BUGGY]  dev  =  ((  double)observed[i]  /  expected[i]);  Dev  =  ((  double)observed[i]  /  expected[i]);  [CE]  cannot  find  symbol  Dev  [FE]      AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  ((  double)observed[i]  /  expected[i]);  Dev  =  ((  double)observed[i]  /  expected[i]);  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    ((    double)observed[i]    /    expected[i]);    Dev  =  ((  double)observed[i]  /  expected[i]);	  	non-compiled	[CE]  cannot  find  symbol  Dev	19	None	add
63	[BUG]  [BUGGY]  dev  =  ((  double)observed[i]  /  expected[i]);  int  dev  =  ((  double)observed[i]  /  expected[i]);  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  ((  double)observed[i]  /  expected[i]);  int  dev  =  ((  double)observed[i]  /  expected[i]);  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    ((    double)observed[i]    /    expected[i]);    int  dev  =  ((  double)observed[i]  /  expected[i]);	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	19	None	add
64	[BUG]  [BUGGY]  int  expected[]  =  observed[i].doubleValue()  +  1;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  int  expected[]  =  observed[i].doubleValue()  +  1;  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	int  expected[]  =  observed[i].doubleValue()  +  1;	      int    expected[]    =    observed[i].doubleValue();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	4	None	replace
65	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isNonNegative(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isNonNegative(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly ");  }  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isNonNegative(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected))    {    throw    new    IllegalArgumentException(   "Unexpected    array    lengths    incorrectly   ");    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
66	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isNegative(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isNegative(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly ");  }  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isNegative(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected))    {    throw    new    IllegalArgumentException(   "Unexpected    array    lengths    incorrectly   ");    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
67	[BUG]  [BUGGY]  dev  =  observed[i]  /  expected[i];  chiSquare  =  distribution.doubleValue();  [CE]  cannot  find  symbol  chiSquare  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  observed[i]  /  expected[i];  chiSquare  =  distribution.doubleValue();  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    /    expected[i];    chiSquare  =  distribution.doubleValue();	  	non-compiled	[CE]  cannot  find  symbol  chiSquare	8	None	add
68	[BUG]  [BUGGY]  ((  double)expected[i]  -  observed[i]),  sumSq).doubleValue();  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  ((  double)expected[i]  -  observed[i]),  sumSq).doubleValue();  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)expected[i]  -  observed[i]),  sumSq).doubleValue();	      ((    double)expected[i]    -    observed[i]).doubleValue();    	non-compiled	[CE]  not  a  statement	13	None	replace
69	[BUG]  [BUGGY]  double  expected[]  =  sumSq  +  observed[i].doubleValue();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  double  expected[]  =  sumSq  +  observed[i].doubleValue();  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	double  expected[]  =  sumSq  +  observed[i].doubleValue();	      double    expected[]    =    observed[i].doubleValue();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	3	None	replace
70	[BUG]  [BUGGY]  dev  =  expected[i]  -  observed[i];  chiSquare  =  distribution.doubleValue();  [CE]  cannot  find  symbol  chiSquare  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  expected[i]  -  observed[i];  chiSquare  =  distribution.doubleValue();  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    expected[i]    -    observed[i];    chiSquare  =  distribution.doubleValue();	  	non-compiled	[CE]  cannot  find  symbol  chiSquare	10	None	add
71	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  ((  long)expected[i]  *  observed[i]);  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  ((  long)expected[i]  *  observed[i]);	  dev    =    ((    long)expected[i]    -    observed[i]);    	compilable	  [FE]  AssertionFailedError  	15	6	replace
72	[BUG]  [BUGGY]  dev  =  ((  long)expected[i]  *  observed[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  ((  long)expected[i]  *  observed[i]);  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  long)expected[i]  *  observed[i]);	  dev    =    ((    long)expected[i]    -    observed[i]);    	compilable	  [FE]  AssertionFailedError  	15	6	replace
73	[BUG]  [BUGGY]  ((  double)expected[i]  -  estimated[i]).doubleValue();  [CE]  cannot  find  symbol  estimated  [FE]        AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  ((  double)expected[i]  -  estimated[i]).doubleValue();  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)expected[i]  -  estimated[i]).doubleValue();	      ((    double)expected[i]    -    expected[i]).doubleValue();    	non-compiled	[CE]  cannot  find  symbol  estimated	12	None	replace
74	[BUG]  [BUGGY]  dev  =  ((  double)expected[i]  -  observed[i]);  chiSquare  =  ((  double)expected[i]  -  observed[i]);  [CE]  cannot  find  symbol  chiSquare  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  ((  double)expected[i]  -  observed[i]);  chiSquare  =  ((  double)expected[i]  -  observed[i]);  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    ((    double)expected[i]    -    observed[i]);    chiSquare  =  ((  double)expected[i]  -  observed[i]);	  	non-compiled	[CE]  cannot  find  symbol  chiSquare	6	None	add
75	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  observed[i]  /  sumSq;  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  observed[i]  /  sumSq;	  dev    =    observed[i]    /    expected[i];    	compilable	  [FE]  AssertionFailedError  	9	6	replace
76	[BUG]  [BUGGY]  dev  =  observed[i]  /  sumSq;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  observed[i]  /  sumSq;  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  /  sumSq;	  dev    =    observed[i]    /    expected[i];    	compilable	  [FE]  AssertionFailedError  	9	6	replace
77	[BUG]  [BUGGY]  dev  =  ((  double)observed[i]  /  expected[i]);  ((  double)observed[i]  /  expected[i]);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  ((  double)observed[i]  /  expected[i]);  ((  double)observed[i]  /  expected[i]);  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    ((    double)observed[i]    /    expected[i]);    ((  double)observed[i]  /  expected[i]);	  	non-compiled	[CE]  not  a  statement	19	None	add
78	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  sumSq  -  observed[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  sumSq  -  observed[i];	  dev    =    expected[i]    -    observed[i];    	compilable	  [FE]  AssertionFailedError  	11	6	replace
79	[BUG]  [BUGGY]  dev  =  sumSq  -  observed[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  sumSq  -  observed[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  sumSq  -  observed[i];	  dev    =    expected[i]    -    observed[i];    	compilable	  [FE]  AssertionFailedError  	11	6	replace
80	[BUG]  [BUGGY]  ((  double)observed[i]  -  sumSq[i]);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  ((  double)observed[i]  -  sumSq[i]);  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)observed[i]  -  sumSq[i]);	      ((    double)observed[i]    -    expected[i]);    	non-compiled	[CE]  not  a  statement	2	None	replace
81	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isNonNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isNonNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isNonNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
82	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
83	[BUG]  [BUGGY]  ((  double)expected[i]  -  observed[i]),  sumSq,  dev).doubleValue();  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  ((  double)expected[i]  -  observed[i]),  sumSq,  dev).doubleValue();  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)expected[i]  -  observed[i]),  sumSq,  dev).doubleValue();	      ((    double)expected[i]    -    observed[i]).doubleValue();    	non-compiled	[CE]  not  a  statement	13	None	replace
84	[BUG]  [BUGGY]  ((  long)expected[i]  -  observed[i]).doubleValue();  [CE]  long  cannot  be  dereferenced  [FE]            AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  ((  long)expected[i]  -  observed[i]).doubleValue();  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  long)expected[i]  -  observed[i]).doubleValue();	      ((    double)expected[i]    -    observed[i]).doubleValue();    	non-compiled	[CE]  long  cannot  be  dereferenced	13	None	replace
85	[BUG]  [BUGGY]  ((  double)expected[i]  -  observed[i].doubleValue());  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  ((  double)expected[i]  -  observed[i].doubleValue());  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)expected[i]  -  observed[i].doubleValue());	      ((    double)expected[i]    -    observed[i]);    	non-compiled	[CE]  not  a  statement	1	None	replace
86	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  ((  int)expected[i]  -  observed[i]);  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  ((  int)expected[i]  -  observed[i]);	  dev    =    ((    long)expected[i]    -    observed[i]);    	compilable	  [FE]  AssertionFailedError  	15	6	replace
87	[BUG]  [BUGGY]  dev  =  ((  int)expected[i]  -  observed[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  ((  int)expected[i]  -  observed[i]);  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  int)expected[i]  -  observed[i]);	  dev    =    ((    long)expected[i]    -    observed[i]);    	compilable	  [FE]  AssertionFailedError  	15	6	replace
88	[BUG]  [BUGGY]  ((  double)observed[i]  -  dev);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  ((  double)observed[i]  -  dev);  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)observed[i]  -  dev);	      ((    double)observed[i]    -    expected[i]);    	non-compiled	[CE]  not  a  statement	2	None	replace
89	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  expected[i]  -  observed[i];  if(dev  >=  expected[i])  {  dev  =  expected[i]  -  observed[i];  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev    =    expected[i]    -    observed[i];    if(dev  >=  expected[i])  {  dev  =  expected[i]  -  observed[i];  }	  	compilable	  [FE]  AssertionFailedError  	10	6	add
90	[BUG]  [BUGGY]  dev  =  expected[i]  -  observed[i];  if(dev  >=  expected[i])  {  dev  =  expected[i]  -  observed[i];  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  expected[i]  -  observed[i];  if(dev  >=  expected[i])  {  dev  =  expected[i]  -  observed[i];  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    expected[i]    -    observed[i];    if(dev  >=  expected[i])  {  dev  =  expected[i]  -  observed[i];  }	  	compilable	  [FE]  AssertionFailedError  	10	6	add
91	[BUG]  [BUGGY]  double  expected[]  =  observed[i].doubleValue()  /  dev;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  double  expected[]  =  observed[i].doubleValue()  /  dev;  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	double  expected[]  =  observed[i].doubleValue()  /  dev;	      double    expected[]    =    observed[i].doubleValue();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	3	None	replace
92	[BUG]  [BUGGY]  double  expected[]  =  observed[i].doubleValue()  +  1;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  double  expected[]  =  observed[i].doubleValue()  +  1;  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	double  expected[]  =  observed[i].doubleValue()  +  1;	      double    expected[]    =    observed[i].doubleValue();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	3	None	replace
93	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  observed[i]  /  dev;  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  observed[i]  /  dev;	  dev    =    observed[i]    /    expected[i];    	compilable	  [FE]  AssertionFailedError  	9	6	replace
94	[BUG]  [BUGGY]  dev  =  observed[i]  /  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  observed[i]  /  dev;  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  /  dev;	  dev    =    observed[i]    /    expected[i];    	compilable	  [FE]  AssertionFailedError  	9	6	replace
95	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  observed[i]  /  observed[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  observed[i]  /  observed[i];	  dev    =    expected[i]    -    observed[i];    	compilable	  [FE]  AssertionFailedError  	11	6	replace
96	[BUG]  [BUGGY]  dev  =  observed[i]  /  observed[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  observed[i]  /  observed[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  /  observed[i];	  dev    =    expected[i]    -    observed[i];    	compilable	  [FE]  AssertionFailedError  	11	6	replace
97	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  -=  observed[i]  -  expected[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  -=  observed[i]  -  expected[i];	  dev    =    expected[i]    -    observed[i];    	compilable	  [FE]  AssertionFailedError  	11	6	replace
98	[BUG]  [BUGGY]  dev  -=  observed[i]  -  expected[i];  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  -=  observed[i]  -  expected[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  -=  observed[i]  -  expected[i];	  dev    =    expected[i]    -    observed[i];    	compilable	  [FE]  AssertionFailedError  	11	6	replace
99	[BUG]  [BUGGY]  float  expected[]  =  observed[i].doubleValue();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  float  expected[]  =  observed[i].doubleValue();  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	float  expected[]  =  observed[i].doubleValue();	      int    expected[]    =    observed[i].doubleValue();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	4	None	replace
100	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly ");  }  [CE]  >  expected  [FE]            AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly ");  }  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected))    {    throw    new    IllegalArgumentException(   "Unexpected    array    lengths    incorrectly   ");    }    	non-compiled	[CE]  >  expected	18	None	replace
101	[BUG]  [BUGGY]  dev  =  observed[i]  /  expected[i];  if(dev  >=  expected[i])  {  dev  =  observed[i]  /  expected[i];  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  observed[i]  /  expected[i];  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  observed[i]  /  expected[i];  if(dev  >=  expected[i])  {  dev  =  observed[i]  /  expected[i];  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  observed[i]  /  expected[i];  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    /    expected[i];    if(dev  >=  expected[i])  {  dev  =  observed[i]  /  expected[i];  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  observed[i]  /  expected[i];  }	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
102	[BUG]  [BUGGY]  dev  =  observed[i]  /  expected[i];  if(dev  >=  expected[i])  {  dev  =  observed[i]  /  expected[i];  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  observed[i]  /  unknown[i];  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {    [BUGGY]  dev  =  observed[i]  /  expected[i];  if(dev  >=  expected[i])  {  dev  =  observed[i]  /  expected[i];  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  observed[i]  /  unknown[i];  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    /    expected[i];    if(dev  >=  expected[i])  {  dev  =  observed[i]  /  expected[i];  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  observed[i]  /  unknown[i];  }	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
