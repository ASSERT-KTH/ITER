bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    ((  double)expected[i]  -  observed[i]);  [CE]  not  a  statement  [FE]    AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]    ((  double)expected[i]  -  observed[i]);  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	    ((  double)expected[i]  -  observed[i]);		non-compiled	[CE]  not  a  statement	12	None	add
2	[BUG]  [BUGGY]    ((  double)observed[i]  -  expected[i]);  [CE]  not  a  statement  [FE]      AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]    ((  double)observed[i]  -  expected[i]);  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	    ((  double)observed[i]  -  expected[i]);		non-compiled	[CE]  not  a  statement	12	None	add
3	[BUG]  [BUGGY]    double  expected[]  =  observed[i].doubleValue();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]    double  expected[]  =  observed[i].doubleValue();  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	    double  expected[]  =  observed[i].doubleValue();		non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	12	None	add
4	[BUG]  [BUGGY]    int  expected[]  =  observed[i].doubleValue();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]    int  expected[]  =  observed[i].doubleValue();  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	    int  expected[]  =  observed[i].doubleValue();		non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	12	None	add
5	[BUG]  [BUGGY]    ((  double)expected[i]  -  expected[i]);  [CE]  not  a  statement  [FE]            AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]    ((  double)expected[i]  -  expected[i]);  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	    ((  double)expected[i]  -  expected[i]);		non-compiled	[CE]  not  a  statement	12	None	add
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]  dev  =  ((  double)expected[i]  -  observed[i]);  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  ((  double)expected[i]  -  observed[i]);	dev  =  ((double)  observed[i]  -  expected[i]);  	compilable	  [FE]  AssertionFailedError  	11	6	replace
7	[BUG]  [BUGGY]  dev  =  ((  double)expected[i]  -  observed[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]  dev  =  ((  double)expected[i]  -  observed[i]);  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  double)expected[i]  -  observed[i]);	dev  =  ((double)  observed[i]  -  expected[i]);  	compilable	  [FE]  AssertionFailedError  	11	6	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]  dev  =  observed[i]  /  expected[i];  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  observed[i]  /  expected[i];	dev  =  ((double)  observed[i]  -  expected[i]);  	compilable	  [FE]  AssertionFailedError  	11	6	replace
9	[BUG]  [BUGGY]  dev  =  observed[i]  /  expected[i];  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]  dev  =  observed[i]  /  expected[i];  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  /  expected[i];	dev  =  ((double)  observed[i]  -  expected[i]);  	compilable	  [FE]  AssertionFailedError  	11	6	replace
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]  dev  =  expected[i]  -  observed[i];  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  expected[i]  -  observed[i];	dev  =  ((double)  observed[i]  -  expected[i]);  	compilable	  [FE]  AssertionFailedError  	11	6	replace
11	[BUG]  [BUGGY]  dev  =  expected[i]  -  observed[i];  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]  dev  =  expected[i]  -  observed[i];  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  expected[i]  -  observed[i];	dev  =  ((double)  observed[i]  -  expected[i]);  	compilable	  [FE]  AssertionFailedError  	11	6	replace
12	[BUG]  [BUGGY]    ((  double)expected[i]  -  expected[i]).doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]    AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]    ((  double)expected[i]  -  expected[i]).doubleValue();  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	    ((  double)expected[i]  -  expected[i]).doubleValue();		non-compiled	[CE]  double  cannot  be  dereferenced	12	None	add
13	[BUG]  [BUGGY]    ((  double)expected[i]  -  observed[i]).doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]      AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]    ((  double)expected[i]  -  observed[i]).doubleValue();  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	    ((  double)expected[i]  -  observed[i]).doubleValue();		non-compiled	[CE]  double  cannot  be  dereferenced	12	None	add
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]  dev  =  ((  long)expected[i]  -  observed[i]);  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  ((  long)expected[i]  -  observed[i]);	dev  =  ((double)  observed[i]  -  expected[i]);  	compilable	  [FE]  AssertionFailedError  	11	6	replace
15	[BUG]  [BUGGY]  dev  =  ((  long)expected[i]  -  observed[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]  dev  =  ((  long)expected[i]  -  observed[i]);  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  long)expected[i]  -  observed[i]);	dev  =  ((double)  observed[i]  -  expected[i]);  	compilable	  [FE]  AssertionFailedError  	11	6	replace
16	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
17	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
18	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly ");  }  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly ");  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]  dev  =  ((  double)observed[i]  /  expected[i]);  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  ((  double)observed[i]  /  expected[i]);	dev  =  ((double)  observed[i]  -  expected[i]);  	compilable	  [FE]  AssertionFailedError  	11	6	replace
20	[BUG]  [BUGGY]  dev  =  ((  double)observed[i]  /  expected[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]  dev  =  ((  double)observed[i]  /  expected[i]);  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  double)observed[i]  /  expected[i]);	dev  =  ((double)  observed[i]  -  expected[i]);  	compilable	  [FE]  AssertionFailedError  	11	6	replace
