bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ((  double)expected[i]  -  observed[i]),  sumSq,  observed[i].doubleValue();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  double)expected[i]  -  observed[i]),  sumSq,  observed[i].doubleValue();  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)expected[i]  -  observed[i]),  sumSq,  observed[i].doubleValue();	  ((    double)expected[i]    -    observed[i]),    sumSq).doubleValue();    	non-compiled	[CE]  not  a  statement	68	None	replace
2	[BUG]  [BUGGY]  ((  double)expected[i]  -  observed[i]),  sumSq,  observed[i].doubleValue());  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  double)expected[i]  -  observed[i]),  sumSq,  observed[i].doubleValue());  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)expected[i]  -  observed[i]),  sumSq,  observed[i].doubleValue());	  ((    double)expected[i]    -    observed[i]),    sumSq).doubleValue();    	non-compiled	[CE]  not  a  statement	68	None	replace
3	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  if(isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(isPositive(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(isNonNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(isNonNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  if(isNonNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(isPositive(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(isPositive(expected[i]))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(isPositive(expected[i]))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  if(isPositive(expected[i]))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(isPositive(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
6	[BUG]  [BUGGY]  int  expected[]  =  observed[i].doubleValue()  /  sumSq;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  int  expected[]  =  observed[i].doubleValue()  /  sumSq;  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	int  expected[]  =  observed[i].doubleValue()  /  sumSq;	  int    expected[]    =    observed[i].doubleValue()    +    sumSq;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	55	None	replace
7	[BUG]  [BUGGY]  int  expected[]  =  observed[i].doubleValue()  *  sumSq;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  int  expected[]  =  observed[i].doubleValue()  *  sumSq;  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	int  expected[]  =  observed[i].doubleValue()  *  sumSq;	  int    expected[]    =    observed[i].doubleValue()    +    sumSq;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	55	None	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)expected[i]  /  observed[i]);  dev  =  ((  double)expected[i]  /  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev    =    ((    double)expected[i]    /    observed[i]);    dev  =  ((  double)expected[i]  /  observed[i]);	  	compilable	  [FE]  AssertionFailedError  	45	6	add
9	[BUG]  [BUGGY]  dev  =  ((  double)expected[i]  /  observed[i]);  dev  =  ((  double)expected[i]  /  observed[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)expected[i]  /  observed[i]);  dev  =  ((  double)expected[i]  /  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    ((    double)expected[i]    /    observed[i]);    dev  =  ((  double)expected[i]  /  observed[i]);	  	compilable	  [FE]  AssertionFailedError  	45	6	add
10	[BUG]  [BUGGY]  dev  =  ((  double)expected[i]  /  observed[i]);  Dev  =  ((  double)expected[i]  /  observed[i]);  [CE]  cannot  find  symbol  Dev  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)expected[i]  /  observed[i]);  Dev  =  ((  double)expected[i]  /  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    ((    double)expected[i]    /    observed[i]);    Dev  =  ((  double)expected[i]  /  observed[i]);	  	non-compiled	[CE]  cannot  find  symbol  Dev	45	None	add
11	[BUG]  [BUGGY]  dev  =  ((  double)expected[i]  /  observed[i]);  int  dev  =  ((  double)expected[i]  /  observed[i]);  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)expected[i]  /  observed[i]);  int  dev  =  ((  double)expected[i]  /  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    ((    double)expected[i]    /    observed[i]);    int  dev  =  ((  double)expected[i]  /  observed[i]);	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	45	None	add
12	[BUG]  [BUGGY]  dev  =  ((  double)expected[i]  /  observed[i]);  ((  double)expected[i]  /  observed[i]);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)expected[i]  /  observed[i]);  ((  double)expected[i]  /  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    ((    double)expected[i]    /    observed[i]);    ((  double)expected[i]  /  observed[i]);	  	non-compiled	[CE]  not  a  statement	45	None	add
13	[BUG]  [BUGGY]  dev  =  observed[i]  *  expected[i];  Dev  =  observed[i]  *  expected[i];  [CE]  cannot  find  symbol  Dev  [FE]          AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  *  expected[i];  Dev  =  observed[i]  *  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  *  expected[i];  Dev  =  observed[i]  *  expected[i];	  dev    =    observed[i]    /    expected[i];    Dev    =    observed[i]    /    expected[i];    	non-compiled	[CE]  cannot  find  symbol  Dev	3	None	replace
14	[BUG]  [BUGGY]  Dev  =  observed[i]  /  expected[i];  [CE]  cannot  find  symbol  Dev  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  Dev  =  observed[i]  /  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	Dev  =  observed[i]  /  expected[i];	  dev    =    observed[i]    /    expected[i];    Dev    =    observed[i]    /    expected[i];    	non-compiled	[CE]  cannot  find  symbol  Dev	3	None	replace
15	[BUG]  [BUGGY]  dev  =  observed[i]  *  expected[i];  Dev  =  observed[i]  /  expected[i];  [CE]  cannot  find  symbol  Dev  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  *  expected[i];  Dev  =  observed[i]  /  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  *  expected[i];  Dev  =  observed[i]  /  expected[i];	  dev    =    observed[i]    /    expected[i];    Dev    =    observed[i]    /    expected[i];    	non-compiled	[CE]  cannot  find  symbol  Dev	3	None	replace
16	[BUG]  [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }	  int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	31	None	replace
17	[BUG]  [BUGGY]  long  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  long  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	long  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }	  int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	31	None	replace
18	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed[i].length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  int  i  =  0;  i  <  observed[i].length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	int  i  =  0;  i  <  observed[i].length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }	  int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	31	None	replace
19	[BUG]  [BUGGY]  ((  double)expected[i]  -  observed[i]),  sumSq,  0,  observed[i].doubleValue();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  double)expected[i]  -  observed[i]),  sumSq,  0,  observed[i].doubleValue();  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)expected[i]  -  observed[i]),  sumSq,  0,  observed[i].doubleValue();	  ((    double)expected[i]    -    observed[i]),    sumSq,    dev).doubleValue();    	non-compiled	[CE]  not  a  statement	83	None	replace
20	[BUG]  [BUGGY]  ((  double)expected[i]  -  observed[i]),  dev,  sumSq).doubleValue();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  double)expected[i]  -  observed[i]),  dev,  sumSq).doubleValue();  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)expected[i]  -  observed[i]),  dev,  sumSq).doubleValue();	  ((    double)expected[i]    -    observed[i]),    sumSq,    dev).doubleValue();    	non-compiled	[CE]  not  a  statement	83	None	replace
21	[BUG]  [BUGGY]  ((  double)expected[i]  /  observed[i]),  sumSq,  dev).doubleValue();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  double)expected[i]  /  observed[i]),  sumSq,  dev).doubleValue();  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)expected[i]  /  observed[i]),  sumSq,  dev).doubleValue();	  ((    double)expected[i]    -    observed[i]),    sumSq,    dev).doubleValue();    	non-compiled	[CE]  not  a  statement	83	None	replace
22	[BUG]  [BUGGY]  dev  =  observed[i]  -  expected[i];  Dev  =  ((  long)expected[i]  -  observed[i]);  [CE]  cannot  find  symbol  Dev  [FE]          AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  -  expected[i];  Dev  =  ((  long)expected[i]  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  -  expected[i];  Dev  =  ((  long)expected[i]  -  observed[i]);	  dev    =    ((    long)expected[i]    -    observed[i]);    Dev    =    ((    long)expected[i]    -    observed[i]);    	non-compiled	[CE]  cannot  find  symbol  Dev	36	None	replace
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  -  ((  long)expected[i]  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  observed[i]  -  ((  long)expected[i]  -  observed[i]);	  dev    =    ((    long)expected[i]    -    observed[i]);    Dev    =    ((    long)expected[i]    -    observed[i]);    	compilable	  [FE]  AssertionFailedError  	36	6	replace
24	[BUG]  [BUGGY]  dev  =  observed[i]  -  ((  long)expected[i]  -  observed[i]);  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  -  ((  long)expected[i]  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  -  ((  long)expected[i]  -  observed[i]);	  dev    =    ((    long)expected[i]    -    observed[i]);    Dev    =    ((    long)expected[i]    -    observed[i]);    	compilable	  [FE]  AssertionFailedError  	36	6	replace
25	[BUG]  [BUGGY]  dev  =  ((  long)expected[i]  -  observed[i]);  Dev  =  observed[i]  -  dev;  [CE]  cannot  find  symbol  Dev  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  long)expected[i]  -  observed[i]);  Dev  =  observed[i]  -  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  long)expected[i]  -  observed[i]);  Dev  =  observed[i]  -  dev;	  dev    =    ((    long)expected[i]    -    observed[i]);    Dev    =    ((    long)expected[i]    -    observed[i]);    	non-compiled	[CE]  cannot  find  symbol  Dev	36	None	replace
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  sumSq  -  observed[i];  dev  =  sumSq  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev    =    sumSq    -    observed[i];    dev  =  sumSq  -  observed[i];	  	compilable	  [FE]  AssertionFailedError  	78	6	add
27	[BUG]  [BUGGY]  dev  =  sumSq  -  observed[i];  dev  =  sumSq  -  observed[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  sumSq  -  observed[i];  dev  =  sumSq  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    sumSq    -    observed[i];    dev  =  sumSq  -  observed[i];	  	compilable	  [FE]  AssertionFailedError  	78	6	add
28	[BUG]  [BUGGY]  dev  =  sumSq  -  observed[i];  int  dev  =  sumSq  -  observed[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  sumSq  -  observed[i];  int  dev  =  sumSq  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    sumSq    -    observed[i];    int  dev  =  sumSq  -  observed[i];	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	78	None	add
29	[BUG]  [BUGGY]  dev  =  sumSq  -  observed[i];  Dev  =  sumSq  -  observed[i];  [CE]  cannot  find  symbol  Dev  [FE]        AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  sumSq  -  observed[i];  Dev  =  sumSq  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    sumSq    -    observed[i];    Dev  =  sumSq  -  observed[i];	  	non-compiled	[CE]  cannot  find  symbol  Dev	78	None	add
30	[BUG]  [BUGGY]  dev  =  sumSq  -  observed[i];  double  dev  =  sumSq  -  observed[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  sumSq  -  observed[i];  double  dev  =  sumSq  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    sumSq    -    observed[i];    double  dev  =  sumSq  -  observed[i];	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	78	None	add
31	[BUG]  [BUGGY]  dev  =  sumSq  -  observed[i];  int  i  =  sumSq  -  observed[i];  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  sumSq  -  observed[i];  int  i  =  sumSq  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    sumSq    -    observed[i];    int  i  =  sumSq  -  observed[i];	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	78	None	add
32	[BUG]  [BUGGY]  int  dev  =  ((  int)expected[i]  -  observed[i]);  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  int  dev  =  ((  int)expected[i]  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	int  dev  =  ((  int)expected[i]  -  observed[i]);	  dev    =    ((    long)expected[i]    -    observed[i]);    int    dev    =    ((    long)expected[i]    -    observed[i]);    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	37	None	replace
33	[BUG]  [BUGGY]  int  dev  =  ((  long)expected[i]  -  observed[i]);  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  int  dev  =  ((  long)expected[i]  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	int  dev  =  ((  long)expected[i]  -  observed[i]);	  dev    =    ((    long)expected[i]    -    observed[i]);    int    dev    =    ((    long)expected[i]    -    observed[i]);    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	37	None	replace
34	[BUG]  [BUGGY]  dev  =  ((  double)observed[i]  *  sumSq[i]);  [CE]  array  required,  but  double  found  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)observed[i]  *  sumSq[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  double)observed[i]  *  sumSq[i]);	  dev    =    ((    double)observed[i]    *    expected[i]);    	non-compiled	[CE]  array  required,  but  double  found	48	None	replace
35	[BUG]  [BUGGY]  double  expected[]  =  sumSq  +  observed[i].doubleValue()  /  dev;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  double  expected[]  =  sumSq  +  observed[i].doubleValue()  /  dev;  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	double  expected[]  =  sumSq  +  observed[i].doubleValue()  /  dev;	  double    expected[]    =    sumSq    +    observed[i].doubleValue();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	69	None	replace
36	[BUG]  [BUGGY]  double  expected[]  =  sumSq  +  observed[i].longValue();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  double  expected[]  =  sumSq  +  observed[i].longValue();  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	double  expected[]  =  sumSq  +  observed[i].longValue();	  double    expected[]    =    sumSq    +    observed[i].doubleValue();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	69	None	replace
37	[BUG]  [BUGGY]  double  expected[]  =  sumSq  /  observed[i].doubleValue();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  double  expected[]  =  sumSq  /  observed[i].doubleValue();  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	double  expected[]  =  sumSq  /  observed[i].doubleValue();	  double    expected[]    =    sumSq    +    observed[i].doubleValue();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	69	None	replace
38	[BUG]  [BUGGY]  ((  int)expected[i]  -  observed[i]).doubleValue();  [CE]  long  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  int)expected[i]  -  observed[i]).doubleValue();  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  int)expected[i]  -  observed[i]).doubleValue();	  ((    long)expected[i]    -    observed[i]).doubleValue();    	non-compiled	[CE]  long  cannot  be  dereferenced	84	None	replace
39	[BUG]  [BUGGY]  ((  long)expected[i]  /  observed[i]).doubleValue();  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  long)expected[i]  /  observed[i]).doubleValue();  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  long)expected[i]  /  observed[i]).doubleValue();	  ((    long)expected[i]    -    observed[i]).doubleValue();    	non-compiled	[CE]  long  cannot  be  dereferenced	84	None	replace
40	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  expected[i]  *  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  expected[i]  *  observed[i];	  dev    =    expected[i]    /    observed[i];    	compilable	  [FE]  AssertionFailedError  	20	6	replace
41	[BUG]  [BUGGY]  dev  =  expected[i]  *  observed[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  expected[i]  *  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  expected[i]  *  observed[i];	  dev    =    expected[i]    /    observed[i];    	compilable	  [FE]  AssertionFailedError  	20	6	replace
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  -  expected[i];  dev  =  observed[i]  -  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev    =    observed[i]    -    expected[i];    dev  =  observed[i]  -  expected[i];	  	compilable	  [FE]  AssertionFailedError  	21	6	add
43	[BUG]  [BUGGY]  dev  =  observed[i]  -  expected[i];  dev  =  observed[i]  -  expected[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  -  expected[i];  dev  =  observed[i]  -  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    -    expected[i];    dev  =  observed[i]  -  expected[i];	  	compilable	  [FE]  AssertionFailedError  	21	6	add
44	[BUG]  [BUGGY]  dev  =  observed[i]  -  expected[i];  int  dev  =  observed[i]  -  expected[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  -  expected[i];  int  dev  =  observed[i]  -  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    -    expected[i];    int  dev  =  observed[i]  -  expected[i];	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	21	None	add
45	[BUG]  [BUGGY]  dev  =  observed[i]  -  expected[i];  Dev  =  observed[i]  -  expected[i];  [CE]  cannot  find  symbol  Dev  [FE]        AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  -  expected[i];  Dev  =  observed[i]  -  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    -    expected[i];    Dev  =  observed[i]  -  expected[i];	  	non-compiled	[CE]  cannot  find  symbol  Dev	21	None	add
46	[BUG]  [BUGGY]  dev  =  observed[i]  -  expected[i];  double  dev  =  observed[i]  -  expected[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  -  expected[i];  double  dev  =  observed[i]  -  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    -    expected[i];    double  dev  =  observed[i]  -  expected[i];	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	21	None	add
47	[BUG]  [BUGGY]  dev  =  observed[i]  -  expected[i];  int  i  =  observed[i]  -  expected[i];  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  -  expected[i];  int  i  =  observed[i]  -  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    -    expected[i];    int  i  =  observed[i]  -  expected[i];	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	21	None	add
48	[BUG]  [BUGGY]  dev  =  observed[i]  -  sumSq[i];  [CE]  array  required,  but  double  found  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  -  sumSq[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  -  sumSq[i];	  dev    =    observed[i]    -    expected[i];    	non-compiled	[CE]  array  required,  but  double  found	22	None	replace
49	[BUG]  [BUGGY]  long  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly ");  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  long  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly ");  }  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	long  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly ");  }	  int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected))    {    throw    new    IllegalArgumentException(   "Unexpected    array    lengths    incorrectly   ");    }    	non-compiled	[CE]  >  expected	100	None	replace
50	[BUG]  [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly ");  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly ");  }  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly ");  }	  int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected))    {    throw    new    IllegalArgumentException(   "Unexpected    array    lengths    incorrectly   ");    }    	non-compiled	[CE]  >  expected	100	None	replace
51	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed[i].length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  int  i  =  0;  i  <  observed[i].length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly ");  }  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	int  i  =  0;  i  <  observed[i].length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly ");  }	  int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected))    {    throw    new    IllegalArgumentException(   "Unexpected    array    lengths    incorrectly   ");    }    	non-compiled	[CE]  	100	None	replace
52	[BUG]  [BUGGY]  int  expected[]  =  observed[i].doubleValue().doubleValue();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  int  expected[]  =  observed[i].doubleValue().doubleValue();  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	int  expected[]  =  observed[i].doubleValue().doubleValue();	  int    expected[]    =    observed[i].doubleValue()    +    1;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	64	None	replace
53	[BUG]  [BUGGY]  int  expected[]  =  observed[i].doubleValue()  /  1;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  int  expected[]  =  observed[i].doubleValue()  /  1;  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	int  expected[]  =  observed[i].doubleValue()  /  1;	  int    expected[]    =    observed[i].doubleValue()    +    1;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	64	None	replace
54	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)observed[i]  *  expected[i]);  dev  =  ((  double)observed[i]  *  expected[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev    =    ((    double)observed[i]    *    expected[i]);    dev  =  ((  double)observed[i]  *  expected[i]);	  	compilable	  [FE]  AssertionFailedError  	47	6	add
55	[BUG]  [BUGGY]  dev  =  ((  double)observed[i]  *  expected[i]);  dev  =  ((  double)observed[i]  *  expected[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)observed[i]  *  expected[i]);  dev  =  ((  double)observed[i]  *  expected[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    ((    double)observed[i]    *    expected[i]);    dev  =  ((  double)observed[i]  *  expected[i]);	  	compilable	  [FE]  AssertionFailedError  	47	6	add
56	[BUG]  [BUGGY]  dev  =  ((  double)observed[i]  *  expected[i]);  Dev  =  ((  double)observed[i]  *  expected[i]);  [CE]  cannot  find  symbol  Dev  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)observed[i]  *  expected[i]);  Dev  =  ((  double)observed[i]  *  expected[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    ((    double)observed[i]    *    expected[i]);    Dev  =  ((  double)observed[i]  *  expected[i]);	  	non-compiled	[CE]  cannot  find  symbol  Dev	47	None	add
57	[BUG]  [BUGGY]  dev  =  ((  double)observed[i]  *  expected[i]);  int  dev  =  ((  double)observed[i]  *  expected[i]);  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)observed[i]  *  expected[i]);  int  dev  =  ((  double)observed[i]  *  expected[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    ((    double)observed[i]    *    expected[i]);    int  dev  =  ((  double)observed[i]  *  expected[i]);	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	47	None	add
58	[BUG]  [BUGGY]  ((  double)expected[i]  *  observed[i]).doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  double)expected[i]  *  observed[i]).doubleValue();  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)expected[i]  *  observed[i]).doubleValue();	  ((    double)expected[i]    /    observed[i]).doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	39	None	replace
59	[BUG]  [BUGGY]  ((  double)expected[i]  /  observed[i]),  sumSq,  observed[i]).doubleValue();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  double)expected[i]  /  observed[i]),  sumSq,  observed[i]).doubleValue();  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)expected[i]  /  observed[i]),  sumSq,  observed[i]).doubleValue();	  ((    double)expected[i]    /    observed[i]).doubleValue();    	non-compiled	[CE]  not  a  statement	39	None	replace
60	[BUG]  [BUGGY]  ((  double)expected[i]  /  observed[i]),  sumSq).doubleValue();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  double)expected[i]  /  observed[i]),  sumSq).doubleValue();  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)expected[i]  /  observed[i]),  sumSq).doubleValue();	  ((    double)expected[i]    /    observed[i]).doubleValue();    	non-compiled	[CE]  not  a  statement	39	None	replace
61	[BUG]  [BUGGY]  dev  =  observed[i]  -  expected[i];  long[]  expected[i]  =  observed[i]  -  sumSq;  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  -  expected[i];  long[]  expected[i]  =  observed[i]  -  sumSq;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  -  expected[i];  long[]  expected[i]  =  observed[i]  -  sumSq;	  dev    =    expected[i]    -    observed[i];    long[]    expected[i]    =    observed[i]    -    observed[i];    	non-compiled	[CE]  ']'  expected	54	None	replace
62	[BUG]  [BUGGY]  dev  =  observed[i]  -  expected[i];  long[]  expected[i]  =  observed[i]  /  observed[i];  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  -  expected[i];  long[]  expected[i]  =  observed[i]  /  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  -  expected[i];  long[]  expected[i]  =  observed[i]  /  observed[i];	  dev    =    expected[i]    -    observed[i];    long[]    expected[i]    =    observed[i]    -    observed[i];    	non-compiled	[CE]  ']'  expected	54	None	replace
63	[BUG]  [BUGGY]  dev  =  observed[i]  -  expected[i];  long[]  expected[i]  =  observed[i]  -  observed[i];  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  -  expected[i];  long[]  expected[i]  =  observed[i]  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  -  expected[i];  long[]  expected[i]  =  observed[i]  -  observed[i];	  dev    =    expected[i]    -    observed[i];    long[]    expected[i]    =    observed[i]    -    observed[i];    	non-compiled	[CE]  ']'  expected	54	None	replace
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  sumSq  /  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  sumSq  /  observed[i];	  dev    =    sumSq    -    observed[i];    	compilable	  [FE]  AssertionFailedError  	79	6	replace
65	[BUG]  [BUGGY]  dev  =  sumSq  /  observed[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  sumSq  /  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  sumSq  /  observed[i];	  dev    =    sumSq    -    observed[i];    	compilable	  [FE]  AssertionFailedError  	79	6	replace
66	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  -  sumSq;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  observed[i]  -  sumSq;	  dev    =    sumSq    -    observed[i];    	compilable	  [FE]  AssertionFailedError  	79	6	replace
67	[BUG]  [BUGGY]  dev  =  observed[i]  -  sumSq;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  -  sumSq;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  -  sumSq;	  dev    =    sumSq    -    observed[i];    	compilable	  [FE]  AssertionFailedError  	79	6	replace
68	[BUG]  [BUGGY]  dev  =  observed[i  -  sumSq];  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i  -  sumSq];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i  -  sumSq];	  dev    =    sumSq    -    observed[i];    	non-compiled	[CE]  possible  loss  of  precision	79	None	replace
69	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  sumSq  *  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  sumSq  *  observed[i];	  dev    =    sumSq    -    observed[i];    	compilable	  [FE]  AssertionFailedError  	79	6	replace
70	[BUG]  [BUGGY]  dev  =  sumSq  *  observed[i];  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  sumSq  *  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  sumSq  *  observed[i];	  dev    =    sumSq    -    observed[i];    	compilable	  [FE]  AssertionFailedError  	79	6	replace
71	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  *  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  observed[i]  *  dev;	  dev    =    observed[i]    /    dev;    	compilable	  [FE]  AssertionFailedError  	94	6	replace
72	[BUG]  [BUGGY]  dev  =  observed[i]  *  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  *  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  *  dev;	  dev    =    observed[i]    /    dev;    	compilable	  [FE]  AssertionFailedError  	94	6	replace
73	[BUG]  [BUGGY]  dev  =  observed[i]  /  total;  [CE]  cannot  find  symbol  total  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  /  total;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  /  total;	  dev    =    observed[i]    /    dev;    	non-compiled	[CE]  cannot  find  symbol  total	94	None	replace
74	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  long)expected[i]  *  observed[i]);  dev  =  ((  long)expected[i]  *  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev    =    ((    long)expected[i]    *    observed[i]);    dev  =  ((  long)expected[i]  *  observed[i]);	  	compilable	  [FE]  AssertionFailedError  	71	6	add
75	[BUG]  [BUGGY]  dev  =  ((  long)expected[i]  *  observed[i]);  dev  =  ((  long)expected[i]  *  observed[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  long)expected[i]  *  observed[i]);  dev  =  ((  long)expected[i]  *  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    ((    long)expected[i]    *    observed[i]);    dev  =  ((  long)expected[i]  *  observed[i]);	  	compilable	  [FE]  AssertionFailedError  	71	6	add
76	[BUG]  [BUGGY]  dev  =  ((  long)expected[i]  *  observed[i]);  Dev  =  ((  long)expected[i]  *  observed[i]);  [CE]  cannot  find  symbol  Dev  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  long)expected[i]  *  observed[i]);  Dev  =  ((  long)expected[i]  *  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    ((    long)expected[i]    *    observed[i]);    Dev  =  ((  long)expected[i]  *  observed[i]);	  	non-compiled	[CE]  cannot  find  symbol  Dev	71	None	add
77	[BUG]  [BUGGY]  dev  =  ((  long)expected[i]  *  observed[i]);  int  dev  =  ((  long)expected[i]  *  observed[i]);  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  long)expected[i]  *  observed[i]);  int  dev  =  ((  long)expected[i]  *  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    ((    long)expected[i]    *    observed[i]);    int  dev  =  ((  long)expected[i]  *  observed[i]);	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	71	None	add
78	[BUG]  [BUGGY]  dev  =  ((  long)expected[i]  *  observed[i]);  ((  long)expected[i]  *  observed[i]);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  long)expected[i]  *  observed[i]);  ((  long)expected[i]  *  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    ((    long)expected[i]    *    observed[i]);    ((  long)expected[i]  *  observed[i]);	  	non-compiled	[CE]  not  a  statement	71	None	add
79	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    ((    double)expected[i]    -    observed[i]);    dev  =  ((  double)expected[i]  -  observed[i]);  dev  =  ((  double)expected[i]  -  observed[i]);  dev  =  ((  double)expected[i]  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev        =        ((        double)expected[i]        -        observed[i]);        dev    =    ((    double)expected[i]    -    observed[i]);    dev  =  ((  double)expected[i]  -  observed[i]);  dev  =  ((  double)expected[i]  -  observed[i]);	  	compilable	  [FE]  AssertionFailedError  	11	6	add
80	[BUG]  [BUGGY]  dev    =    ((    double)expected[i]    -    observed[i]);    dev  =  ((  double)expected[i]  -  observed[i]);  dev  =  ((  double)expected[i]  -  observed[i]);  dev  =  ((  double)expected[i]  -  observed[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    ((    double)expected[i]    -    observed[i]);    dev  =  ((  double)expected[i]  -  observed[i]);  dev  =  ((  double)expected[i]  -  observed[i]);  dev  =  ((  double)expected[i]  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev        =        ((        double)expected[i]        -        observed[i]);        dev    =    ((    double)expected[i]    -    observed[i]);    dev  =  ((  double)expected[i]  -  observed[i]);  dev  =  ((  double)expected[i]  -  observed[i]);	  	compilable	  [FE]  AssertionFailedError  	11	6	add
81	[BUG]  [BUGGY]  dev    =    ((    double)expected[i]    -    observed[i]);    dev  =  ((  double)expected[i]  -  observed[i]);  Dev  =  ((  double)expected[i]  -  observed[i]);  dev  =  ((  double)expected[i]  -  observed[i]);  [CE]  cannot  find  symbol  Dev  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    ((    double)expected[i]    -    observed[i]);    dev  =  ((  double)expected[i]  -  observed[i]);  Dev  =  ((  double)expected[i]  -  observed[i]);  dev  =  ((  double)expected[i]  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev        =        ((        double)expected[i]        -        observed[i]);        dev    =    ((    double)expected[i]    -    observed[i]);    Dev  =  ((  double)expected[i]  -  observed[i]);  dev  =  ((  double)expected[i]  -  observed[i]);	  	non-compiled	[CE]  cannot  find  symbol  Dev	11	None	add
82	[BUG]  [BUGGY]  dev    =    ((    double)expected[i]    -    observed[i]);    dev  =  ((  double)expected[i]  -  observed[i]);  int  dev  =  ((  double)expected[i]  -  observed[i]);  dev  =  ((  double)expected[i]  -  observed[i]);  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    ((    double)expected[i]    -    observed[i]);    dev  =  ((  double)expected[i]  -  observed[i]);  int  dev  =  ((  double)expected[i]  -  observed[i]);  dev  =  ((  double)expected[i]  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev        =        ((        double)expected[i]        -        observed[i]);        dev    =    ((    double)expected[i]    -    observed[i]);    int  dev  =  ((  double)expected[i]  -  observed[i]);  dev  =  ((  double)expected[i]  -  observed[i]);	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	11	None	add
83	[BUG]  [BUGGY]  dev    =    ((    double)expected[i]    -    observed[i]);    dev  =  ((  double)expected[i]  -  observed[i]);  ((  double)expected[i]  -  observed[i]);  dev  =  ((  double)expected[i]  -  observed[i]);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    ((    double)expected[i]    -    observed[i]);    dev  =  ((  double)expected[i]  -  observed[i]);  ((  double)expected[i]  -  observed[i]);  dev  =  ((  double)expected[i]  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev        =        ((        double)expected[i]        -        observed[i]);        dev    =    ((    double)expected[i]    -    observed[i]);    ((  double)expected[i]  -  observed[i]);  dev  =  ((  double)expected[i]  -  observed[i]);	  	non-compiled	[CE]  not  a  statement	11	None	add
84	[BUG]  [BUGGY]  int  dev  =  ((  double)expected[i]  -  observed[i]);  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  int  dev  =  ((  double)expected[i]  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	int  dev  =  ((  double)expected[i]  -  observed[i]);	  dev    =    ((    double)expected[i]    -    observed[i]);    int    dev    =    ((    double)expected[i]    -    observed[i]);    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	14	None	replace
85	[BUG]  [BUGGY]  int  dev  =  observed[i]  -  expected[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  int  dev  =  observed[i]  -  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	int  dev  =  observed[i]  -  expected[i];	  dev    =    ((    double)expected[i]    -    observed[i]);    int    dev    =    ((    double)expected[i]    -    observed[i]);    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	14	None	replace
86	[BUG]  [BUGGY]  double  expected[]  =  observed[i].doubleValue()  *  sumSq;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  double  expected[]  =  observed[i].doubleValue()  *  sumSq;  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	double  expected[]  =  observed[i].doubleValue()  *  sumSq;	  double    expected[]    =    observed[i].doubleValue()    /    sumSq;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	44	None	replace
87	[BUG]  [BUGGY]  double  expected[]  =  observed[i].doubleValue()  /  sumSq  +  1;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                      AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  double  expected[]  =  observed[i].doubleValue()  /  sumSq  +  1;  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	double  expected[]  =  observed[i].doubleValue()  /  sumSq  +  1;	  double    expected[]    =    observed[i].doubleValue()    /    sumSq;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	44	None	replace
88	[BUG]  [BUGGY]  double  expected[]  =  sumSq[i].doubleValue()  /  observed[i].doubleValue();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                        AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  double  expected[]  =  sumSq[i].doubleValue()  /  observed[i].doubleValue();  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	double  expected[]  =  sumSq[i].doubleValue()  /  observed[i].doubleValue();	  double    expected[]    =    observed[i].doubleValue()    /    sumSq;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	44	None	replace
89	[BUG]  [BUGGY]  long  expected[]  =  observed[i].doubleValue()  +  sumSq;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  long  expected[]  =  observed[i].doubleValue()  +  sumSq;  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	long  expected[]  =  observed[i].doubleValue()  +  sumSq;	  long    expected[]    =    observed[i].doubleValue();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	43	None	replace
90	[BUG]  [BUGGY]  ((  int)expected[i]  -  observed[i]);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  int)expected[i]  -  observed[i]);  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  int)expected[i]  -  observed[i]);	  ((    long)expected[i]    -    observed[i]);    	non-compiled	[CE]  not  a  statement	7	None	replace
91	[BUG]  [BUGGY]  ((  long)expected[i]  /  observed[i]);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  long)expected[i]  /  observed[i]);  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  long)expected[i]  /  observed[i]);	  ((    long)expected[i]    -    observed[i]);    	non-compiled	[CE]  not  a  statement	7	None	replace
92	[BUG]  [BUGGY]  int  dev  =  observed[i]  /  expected[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  int  dev  =  observed[i]  /  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	int  dev  =  observed[i]  /  expected[i];	  dev    =    observed[i]    /    expected[i];    int    dev    =    observed[i]    /    expected[i];    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	4	None	replace
93	[BUG]  [BUGGY]  double  dev  =  observed[i]  /  expected[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  double  dev  =  observed[i]  /  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	double  dev  =  observed[i]  /  expected[i];	  dev    =    observed[i]    /    expected[i];    int    dev    =    observed[i]    /    expected[i];    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	4	None	replace
94	[BUG]  [BUGGY]  int  dev  =  observed[i]  *  expected[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  int  dev  =  observed[i]  *  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	int  dev  =  observed[i]  *  expected[i];	  dev    =    observed[i]    /    expected[i];    int    dev    =    observed[i]    /    expected[i];    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	4	None	replace
95	[BUG]  [BUGGY]  int  dev  =  observed[i]  /  sumSq[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  int  dev  =  observed[i]  /  sumSq[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	int  dev  =  observed[i]  /  sumSq[i];	  dev    =    observed[i]    /    expected[i];    int    dev    =    observed[i]    /    expected[i];    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	4	None	replace
96	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  int)expected[i]  -  observed[i]);  dev  =  ((  int)expected[i]  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev    =    ((    int)expected[i]    -    observed[i]);    dev  =  ((  int)expected[i]  -  observed[i]);	  	compilable	  [FE]  AssertionFailedError  	86	6	add
97	[BUG]  [BUGGY]  dev  =  ((  int)expected[i]  -  observed[i]);  dev  =  ((  int)expected[i]  -  observed[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  int)expected[i]  -  observed[i]);  dev  =  ((  int)expected[i]  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    ((    int)expected[i]    -    observed[i]);    dev  =  ((  int)expected[i]  -  observed[i]);	  	compilable	  [FE]  AssertionFailedError  	86	6	add
98	[BUG]  [BUGGY]  dev  =  ((  int)expected[i]  -  observed[i]);  Dev  =  ((  int)expected[i]  -  observed[i]);  [CE]  cannot  find  symbol  Dev  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  int)expected[i]  -  observed[i]);  Dev  =  ((  int)expected[i]  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    ((    int)expected[i]    -    observed[i]);    Dev  =  ((  int)expected[i]  -  observed[i]);	  	non-compiled	[CE]  cannot  find  symbol  Dev	86	None	add
99	[BUG]  [BUGGY]  dev  =  ((  int)expected[i]  -  observed[i]);  int  dev  =  ((  int)expected[i]  -  observed[i]);  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  int)expected[i]  -  observed[i]);  int  dev  =  ((  int)expected[i]  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    ((    int)expected[i]    -    observed[i]);    int  dev  =  ((  int)expected[i]  -  observed[i]);	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	86	None	add
100	[BUG]  [BUGGY]  dev  =  ((  int)expected[i]  -  observed[i]);  ((  int)expected[i]  -  observed[i]);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  int)expected[i]  -  observed[i]);  ((  int)expected[i]  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    ((    int)expected[i]    -    observed[i]);    ((  int)expected[i]  -  observed[i]);	  	non-compiled	[CE]  not  a  statement	86	None	add
101	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  /  sumSq  +  1;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  observed[i]  /  sumSq  +  1;	  dev    =    observed[i]    /    sumSq;    	compilable	  [FE]  AssertionFailedError  	76	6	replace
102	[BUG]  [BUGGY]  dev  =  observed[i]  /  sumSq  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  /  sumSq  +  1;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  /  sumSq  +  1;	  dev    =    observed[i]    /    sumSq;    	compilable	  [FE]  AssertionFailedError  	76	6	replace
103	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  *  sumSq;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  observed[i]  *  sumSq;	  dev    =    observed[i]    /    sumSq;    	compilable	  [FE]  AssertionFailedError  	76	6	replace
104	[BUG]  [BUGGY]  dev  =  observed[i]  *  sumSq;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  *  sumSq;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  *  sumSq;	  dev    =    observed[i]    /    sumSq;    	compilable	  [FE]  AssertionFailedError  	76	6	replace
105	[BUG]  [BUGGY]  dev  =  observed[i]  /  totalSq;  [CE]  cannot  find  symbol  totalSq  [FE]        AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  /  totalSq;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  /  totalSq;	  dev    =    observed[i]    /    sumSq;    	non-compiled	[CE]  cannot  find  symbol  totalSq	76	None	replace
106	[BUG]  [BUGGY]  ((  long)expected[i]  -  observed[i]),  sumSq,  observed[i]).doubleValue();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  long)expected[i]  -  observed[i]),  sumSq,  observed[i]).doubleValue();  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  long)expected[i]  -  observed[i]),  sumSq,  observed[i]).doubleValue();	  ((    double)expected[i]    -    observed[i]),    sumSq,    observed[i]).doubleValue();    	non-compiled	[CE]  not  a  statement	40	None	replace
107	[BUG]  [BUGGY]  ((  double)expected[i]  *  estimated[i]).doubleValue();  [CE]  cannot  find  symbol  estimated  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  double)expected[i]  *  estimated[i]).doubleValue();  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)expected[i]  *  estimated[i]).doubleValue();	  ((    double)expected[i]    *    expected[i]).doubleValue();    	non-compiled	[CE]  cannot  find  symbol  estimated	33	None	replace
108	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  -  ((  double)expected[i]  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  observed[i]  -  ((  double)expected[i]  -  observed[i]);	  dev    =    ((    double)expected[i]    -    observed[i]);    dev    =    ((    double)expected[i]    -    observed[i]);    	compilable	  [FE]  AssertionFailedError  	12	6	replace
109	[BUG]  [BUGGY]  dev  =  observed[i]  -  ((  double)expected[i]  -  observed[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  -  ((  double)expected[i]  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  -  ((  double)expected[i]  -  observed[i]);	  dev    =    ((    double)expected[i]    -    observed[i]);    dev    =    ((    double)expected[i]    -    observed[i]);    	compilable	  [FE]  AssertionFailedError  	12	6	replace
110	[BUG]  [BUGGY]  dev  =  expected[i]  -  observed[i];  sumSq  =  distribution.doubleValue();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  expected[i]  -  observed[i];  sumSq  =  distribution.doubleValue();  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  expected[i]  -  observed[i];  sumSq  =  distribution.doubleValue();	  dev    =    expected[i]    -    observed[i];    chiSquare    =    distribution.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
111	[BUG]  [BUGGY]  dev  =  observed[i]  -  expected[i];  sumSq  =  distribution.doubleValue();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  -  expected[i];  sumSq  =  distribution.doubleValue();  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  -  expected[i];  sumSq  =  distribution.doubleValue();	  dev    =    expected[i]    -    observed[i];    chiSquare    =    distribution.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
112	[BUG]  [BUGGY]  dev  =  expected[i]  -  observed[i];  sumSquare  =  distribution.doubleValue();  [CE]  cannot  find  symbol  sumSquare  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  expected[i]  -  observed[i];  sumSquare  =  distribution.doubleValue();  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  expected[i]  -  observed[i];  sumSquare  =  distribution.doubleValue();	  dev    =    expected[i]    -    observed[i];    chiSquare    =    distribution.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  sumSquare	70	None	replace
113	[BUG]  [BUGGY]  dev  =  expected[i]  -  observed[i];  sumSq  =  distributed.doubleValue();  [CE]  cannot  find  symbol  distributed  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  expected[i]  -  observed[i];  sumSq  =  distributed.doubleValue();  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  expected[i]  -  observed[i];  sumSq  =  distributed.doubleValue();	  dev    =    expected[i]    -    observed[i];    chiSquare    =    distribution.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  distributed	70	None	replace
114	[BUG]  [BUGGY]  double  dev  =  observed[i]  -  expected[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  double  dev  =  observed[i]  -  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	double  dev  =  observed[i]  -  expected[i];	  dev    =    expected[i]    -    observed[i];    double    dev    =    expected[i]    -    observed[i];    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	53	None	replace
115	[BUG]  [BUGGY]  double  dev  =  expected[i]  -  observed[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  double  dev  =  expected[i]  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	double  dev  =  expected[i]  -  observed[i];	  dev    =    expected[i]    -    observed[i];    double    dev    =    expected[i]    -    observed[i];    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	53	None	replace
116	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  expected[i]  /  observed[i];  dev  =  expected[i]  /  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev    =    expected[i]    /    observed[i];    dev  =  expected[i]  /  observed[i];	  	compilable	  [FE]  AssertionFailedError  	19	6	add
117	[BUG]  [BUGGY]  dev  =  expected[i]  /  observed[i];  dev  =  expected[i]  /  observed[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  expected[i]  /  observed[i];  dev  =  expected[i]  /  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    expected[i]    /    observed[i];    dev  =  expected[i]  /  observed[i];	  	compilable	  [FE]  AssertionFailedError  	19	6	add
118	[BUG]  [BUGGY]  dev  =  expected[i]  /  observed[i];  Dev  =  expected[i]  /  observed[i];  [CE]  cannot  find  symbol  Dev  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  expected[i]  /  observed[i];  Dev  =  expected[i]  /  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    expected[i]    /    observed[i];    Dev  =  expected[i]  /  observed[i];	  	non-compiled	[CE]  cannot  find  symbol  Dev	19	None	add
119	[BUG]  [BUGGY]  dev  =  expected[i]  /  observed[i];  int  dev  =  expected[i]  /  observed[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  expected[i]  /  observed[i];  int  dev  =  expected[i]  /  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    expected[i]    /    observed[i];    int  dev  =  expected[i]  /  observed[i];	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	19	None	add
120	[BUG]  [BUGGY]  dev  =  expected[i]  /  observed[i];  double  dev  =  expected[i]  /  observed[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  expected[i]  /  observed[i];  double  dev  =  expected[i]  /  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    expected[i]    /    observed[i];    double  dev  =  expected[i]  /  observed[i];	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	19	None	add
121	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNonNegative(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNonNegative(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly ");  }  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNonNegative(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!isNonNegative(expected))    {    throw    new    IllegalArgumentException(   "Unexpected    array    lengths    incorrectly   ");    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
122	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly ");  }  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!isNonNegative(expected))    {    throw    new    IllegalArgumentException(   "Unexpected    array    lengths    incorrectly   ");    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
123	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNonNegative(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly ");  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNonNegative(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly ");  }  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNonNegative(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!isNonNegative(expected))    {    throw    new    IllegalArgumentException(   "Unexpected    array    lengths    incorrectly   ");    }    	non-compiled	[CE]  >  expected	65	None	replace
124	[BUG]  [BUGGY]  ((  double)sumSq[i]  -  observed[i]);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  double)sumSq[i]  -  observed[i]);  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)sumSq[i]  -  observed[i]);	  ((    double)observed[i]    -    sumSq[i]);    	non-compiled	[CE]  not  a  statement	80	None	replace
125	[BUG]  [BUGGY]  int  dev  =  ((  double)observed[i]  /  expected[i]);  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  int  dev  =  ((  double)observed[i]  /  expected[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	int  dev  =  ((  double)observed[i]  /  expected[i]);	  dev    =    ((    double)observed[i]    /    expected[i]);    int    dev    =    ((    double)observed[i]    /    expected[i]);    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	63	None	replace
126	[BUG]  [BUGGY]  int  dev  =  ((  double)observed[i]  *  expected[i]);  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  int  dev  =  ((  double)observed[i]  *  expected[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	int  dev  =  ((  double)observed[i]  *  expected[i]);	  dev    =    ((    double)observed[i]    /    expected[i]);    int    dev    =    ((    double)observed[i]    /    expected[i]);    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	63	None	replace
127	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  /  dev;  dev  =  observed[i]  /  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev    =    observed[i]    /    dev;    dev  =  observed[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	93	6	add
128	[BUG]  [BUGGY]  dev  =  observed[i]  /  dev;  dev  =  observed[i]  /  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  /  dev;  dev  =  observed[i]  /  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    /    dev;    dev  =  observed[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	93	6	add
129	[BUG]  [BUGGY]  dev  =  observed[i]  /  dev;  Dev  =  observed[i]  /  dev;  [CE]  cannot  find  symbol  Dev  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  /  dev;  Dev  =  observed[i]  /  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    /    dev;    Dev  =  observed[i]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  Dev	93	None	add
130	[BUG]  [BUGGY]  dev  =  observed[i]  /  dev;  int  dev  =  observed[i]  /  dev;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  /  dev;  int  dev  =  observed[i]  /  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    /    dev;    int  dev  =  observed[i]  /  dev;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	93	None	add
131	[BUG]  [BUGGY]  dev  =  observed[i]  /  dev;  if(dev  >=  expected[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  observed[i]  /  dev;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  /  dev;  if(dev  >=  expected[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  observed[i]  /  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    /    dev;    if(dev  >=  expected[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  observed[i]  /  dev;  }	  	non-compiled	[CE]  illegal  start  of  expression	93	None	add
132	[BUG]  [BUGGY]  dev  =  observed[i]  /  dev;  if(dev  >=  expected[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  dev;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  /  dev;  if(dev  >=  expected[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    /    dev;    if(dev  >=  expected[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  dev;  }	  	non-compiled	[CE]  illegal  start  of  expression	93	None	add
133	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  -=  observed[i]  /  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  -=  observed[i]  /  expected[i];	  dev    -=    observed[i]    -    expected[i];    	compilable	  [FE]  AssertionFailedError  	98	6	replace
134	[BUG]  [BUGGY]  dev  -=  observed[i]  /  expected[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  -=  observed[i]  /  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  -=  observed[i]  /  expected[i];	  dev    -=    observed[i]    -    expected[i];    	compilable	  [FE]  AssertionFailedError  	98	6	replace
135	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  -=  expected[i]  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  -=  expected[i]  -  observed[i];	  dev    -=    observed[i]    -    expected[i];    	compilable	  [FE]  AssertionFailedError  	98	6	replace
136	[BUG]  [BUGGY]  dev  -=  expected[i]  -  observed[i];  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  -=  expected[i]  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  -=  expected[i]  -  observed[i];	  dev    -=    observed[i]    -    expected[i];    	compilable	  [FE]  AssertionFailedError  	98	6	replace
137	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  -=  observed[i]  *  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  -=  observed[i]  *  expected[i];	  dev    -=    observed[i]    -    expected[i];    	compilable	  [FE]  AssertionFailedError  	98	6	replace
138	[BUG]  [BUGGY]  dev  -=  observed[i]  *  expected[i];  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  -=  observed[i]  *  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  -=  observed[i]  *  expected[i];	  dev    -=    observed[i]    -    expected[i];    	compilable	  [FE]  AssertionFailedError  	98	6	replace
139	[BUG]  [BUGGY]  ((  double)expected[i]  -  observed[i]).doubleValue()  *  1;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  double)expected[i]  -  observed[i]).doubleValue()  *  1;  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)expected[i]  -  observed[i]).doubleValue()  *  1;	  ((    double)expected[i]    -    observed[i]).doubleValue()    +    1;    	non-compiled	[CE]  not  a  statement	41	None	replace
140	[BUG]  [BUGGY]  ((  double)expected[i]  -  observed[i]).doubleValue().doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  double)expected[i]  -  observed[i]).doubleValue().doubleValue();  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)expected[i]  -  observed[i]).doubleValue().doubleValue();	  ((    double)expected[i]    -    observed[i]).doubleValue()    +    1;    	non-compiled	[CE]  double  cannot  be  dereferenced	41	None	replace
141	[BUG]  [BUGGY]  dev  =  sumSq[i]  /  observed[i];  [CE]  array  required,  but  double  found  [FE]        AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  sumSq[i]  /  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  sumSq[i]  /  observed[i];	  dev    =    observed[i]    /    sumSq[i];    	non-compiled	[CE]  array  required,  but  double  found	16	None	replace
142	[BUG]  [BUGGY]  dev  =  observed[i]  *  sumSq[i];  [CE]  array  required,  but  double  found  [FE]          AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  *  sumSq[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  *  sumSq[i];	  dev    =    observed[i]    /    sumSq[i];    	non-compiled	[CE]  array  required,  but  double  found	16	None	replace
143	[BUG]  [BUGGY]  dev  =  observed[i]  /  sumSq[i]  +  1;  [CE]  array  required,  but  double  found  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  /  sumSq[i]  +  1;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  /  sumSq[i]  +  1;	  dev    =    observed[i]    /    sumSq[i];    	non-compiled	[CE]  array  required,  but  double  found	16	None	replace
144	[BUG]  [BUGGY]  dev  =  observed[i]  /  expected[i];  sumSq  =  distribution.doubleValue();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  /  expected[i];  sumSq  =  distribution.doubleValue();  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  /  expected[i];  sumSq  =  distribution.doubleValue();	  dev    =    observed[i]    /    expected[i];    chiSquare    =    distribution.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
145	[BUG]  [BUGGY]  dev  =  observed[i]  *  expected[i];  chiSquare  =  distribution.doubleValue();  [CE]  cannot  find  symbol  chiSquare  [FE]          AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  *  expected[i];  chiSquare  =  distribution.doubleValue();  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  *  expected[i];  chiSquare  =  distribution.doubleValue();	  dev    =    observed[i]    /    expected[i];    chiSquare    =    distribution.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  chiSquare	67	None	replace
146	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNonNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNonNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNonNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!isNonNegative(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
147	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!isNonNegative(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
148	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNonNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNonNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNonNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!isNonNegative(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	81	None	replace
149	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly.   ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly.   ");  }  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly.   ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!isPositive(expected))    {    throw    new    IllegalArgumentException(   "Unexpected    array    lengths    incorrectly.   ");    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
150	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    ((    double)observed[i]    /    expected[i]);    dev  =  ((  double)observed[i]  /  expected[i]);  dev  =  ((  double)observed[i]  /  expected[i]);  dev  =  ((  double)observed[i]  /  expected[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev        =        ((        double)observed[i]        /        expected[i]);        dev    =    ((    double)observed[i]    /    expected[i]);    dev  =  ((  double)observed[i]  /  expected[i]);  dev  =  ((  double)observed[i]  /  expected[i]);	  	compilable	  [FE]  AssertionFailedError  	60	6	add
151	[BUG]  [BUGGY]  dev    =    ((    double)observed[i]    /    expected[i]);    dev  =  ((  double)observed[i]  /  expected[i]);  dev  =  ((  double)observed[i]  /  expected[i]);  dev  =  ((  double)observed[i]  /  expected[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    ((    double)observed[i]    /    expected[i]);    dev  =  ((  double)observed[i]  /  expected[i]);  dev  =  ((  double)observed[i]  /  expected[i]);  dev  =  ((  double)observed[i]  /  expected[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev        =        ((        double)observed[i]        /        expected[i]);        dev    =    ((    double)observed[i]    /    expected[i]);    dev  =  ((  double)observed[i]  /  expected[i]);  dev  =  ((  double)observed[i]  /  expected[i]);	  	compilable	  [FE]  AssertionFailedError  	60	6	add
152	[BUG]  [BUGGY]  dev    =    ((    double)observed[i]    /    expected[i]);    dev  =  ((  double)observed[i]  /  expected[i]);  Dev  =  ((  double)observed[i]  /  expected[i]);  dev  =  ((  double)observed[i]  /  expected[i]);  [CE]  cannot  find  symbol  Dev  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    ((    double)observed[i]    /    expected[i]);    dev  =  ((  double)observed[i]  /  expected[i]);  Dev  =  ((  double)observed[i]  /  expected[i]);  dev  =  ((  double)observed[i]  /  expected[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev        =        ((        double)observed[i]        /        expected[i]);        dev    =    ((    double)observed[i]    /    expected[i]);    Dev  =  ((  double)observed[i]  /  expected[i]);  dev  =  ((  double)observed[i]  /  expected[i]);	  	non-compiled	[CE]  cannot  find  symbol  Dev	60	None	add
153	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    ((    double)observed[i]    /    expected[i]);    dev  =  ((  double)observed[i]  /  expected[i]);  dev  =  ((  double)expected[i]  /  expected[i]);  dev  =  ((  double)observed[i]  /  expected[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev        =        ((        double)observed[i]        /        expected[i]);        dev    =    ((    double)observed[i]    /    expected[i]);    dev  =  ((  double)expected[i]  /  expected[i]);  dev  =  ((  double)observed[i]  /  expected[i]);	  	compilable	  [FE]  AssertionFailedError  	60	6	add
154	[BUG]  [BUGGY]  dev    =    ((    double)observed[i]    /    expected[i]);    dev  =  ((  double)observed[i]  /  expected[i]);  dev  =  ((  double)expected[i]  /  expected[i]);  dev  =  ((  double)observed[i]  /  expected[i]);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    ((    double)observed[i]    /    expected[i]);    dev  =  ((  double)observed[i]  /  expected[i]);  dev  =  ((  double)expected[i]  /  expected[i]);  dev  =  ((  double)observed[i]  /  expected[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev        =        ((        double)observed[i]        /        expected[i]);        dev    =    ((    double)observed[i]    /    expected[i]);    dev  =  ((  double)expected[i]  /  expected[i]);  dev  =  ((  double)observed[i]  /  expected[i]);	  	compilable	  [FE]  AssertionFailedError  	60	6	add
155	[BUG]  [BUGGY]  dev  =  observed[i]  -  expected[i];  Dev  =  observed[i]  -  dev;  [CE]  cannot  find  symbol  Dev  [FE]          AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  -  expected[i];  Dev  =  observed[i]  -  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  -  expected[i];  Dev  =  observed[i]  -  dev;	  dev    =    expected[i]    -    observed[i];    Dev    =    expected[i]    -    observed[i];    	non-compiled	[CE]  cannot  find  symbol  Dev	51	None	replace
156	[BUG]  [BUGGY]  Dev  =  observed[i]  -  expected[i];  [CE]  cannot  find  symbol  Dev  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  Dev  =  observed[i]  -  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	Dev  =  observed[i]  -  expected[i];	  dev    =    expected[i]    -    observed[i];    Dev    =    expected[i]    -    observed[i];    	non-compiled	[CE]  cannot  find  symbol  Dev	51	None	replace
157	[BUG]  [BUGGY]  dev  =  observed[i]  -  expected[i];  Dev  =  observed[i]  -  observed[i];  [CE]  cannot  find  symbol  Dev  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  -  expected[i];  Dev  =  observed[i]  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  -  expected[i];  Dev  =  observed[i]  -  observed[i];	  dev    =    expected[i]    -    observed[i];    Dev    =    expected[i]    -    observed[i];    	non-compiled	[CE]  cannot  find  symbol  Dev	51	None	replace
158	[BUG]  [BUGGY]  dev  =  observed[i]  -  expected[i];  Dev  =  observed[i]  -  unspecified[i];  [CE]  cannot  find  symbol  Dev  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  -  expected[i];  Dev  =  observed[i]  -  unspecified[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  -  expected[i];  Dev  =  observed[i]  -  unspecified[i];	  dev    =    expected[i]    -    observed[i];    Dev    =    expected[i]    -    observed[i];    	non-compiled	[CE]  cannot  find  symbol  Dev	51	None	replace
159	[BUG]  [BUGGY]  double  expected[]  =  observed[i].doubleValue().doubleValue();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  double  expected[]  =  observed[i].doubleValue().doubleValue();  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	double  expected[]  =  observed[i].doubleValue().doubleValue();	  double    expected[]    =    observed[i].doubleValue()    +    1;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	92	None	replace
160	[BUG]  [BUGGY]  double  expected[]  =  observed[i].doubleValue()  /  1;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  double  expected[]  =  observed[i].doubleValue()  /  1;  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	double  expected[]  =  observed[i].doubleValue()  /  1;	  double    expected[]    =    observed[i].doubleValue()    +    1;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	92	None	replace
161	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  *  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  observed[i]  *  observed[i];	  dev    =    observed[i]    /    observed[i];    	compilable	  [FE]  AssertionFailedError  	96	6	replace
162	[BUG]  [BUGGY]  dev  =  observed[i]  *  observed[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  *  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  *  observed[i];	  dev    =    observed[i]    /    observed[i];    	compilable	  [FE]  AssertionFailedError  	96	6	replace
163	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!isPositive(expected)&&!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
164	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!isPositive(expected)&&!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	24	None	replace
165	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!isNegative(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	82	None	replace
166	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  if(isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!isNegative(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
167	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(expected[i]))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(expected[i]))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(expected[i]))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!isNegative(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
168	[BUG]  [BUGGY]  dev  =  observed[i]  -  expected[i];  Dev  =  ((  double)expected[i]  -  observed[i]);  [CE]  cannot  find  symbol  Dev  [FE]          AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  -  expected[i];  Dev  =  ((  double)expected[i]  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  -  expected[i];  Dev  =  ((  double)expected[i]  -  observed[i]);	  dev    =    ((    double)expected[i]    -    observed[i]);    Dev    =    ((    double)expected[i]    -    observed[i]);    	non-compiled	[CE]  cannot  find  symbol  Dev	13	None	replace
169	[BUG]  [BUGGY]  dev  =  ((  double)expected[i]  /  observed[i]);  Dev  =  ((  double)expected[i]  -  observed[i]);  [CE]  cannot  find  symbol  Dev  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)expected[i]  /  observed[i]);  Dev  =  ((  double)expected[i]  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  double)expected[i]  /  observed[i]);  Dev  =  ((  double)expected[i]  -  observed[i]);	  dev    =    ((    double)expected[i]    -    observed[i]);    Dev    =    ((    double)expected[i]    -    observed[i]);    	non-compiled	[CE]  cannot  find  symbol  Dev	13	None	replace
170	[BUG]  [BUGGY]  dev  =  estimated[i]  -  observed[i];  [CE]  cannot  find  symbol  estimated  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  estimated[i]  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  estimated[i]  -  observed[i];	  dev    =    expected[i]    -    observed[i];    if(dev    >=    expected[i])    {    dev    =    expected[i]    -    observed[i];    }    	non-compiled	[CE]  cannot  find  symbol  estimated	90	None	replace
171	[BUG]  [BUGGY]  dev    =    expected[i]    -    observed[i];    if(dev  >=  expected[i])  {  dev  =  expected[i]  -  observed[i];  }  double  dev  =  expected[i]  -  observed[i];  if(dev  >=  expected[i])  {  dev  =  expected[i]  -  observed[i];  }  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    expected[i]    -    observed[i];    if(dev  >=  expected[i])  {  dev  =  expected[i]  -  observed[i];  }  double  dev  =  expected[i]  -  observed[i];  if(dev  >=  expected[i])  {  dev  =  expected[i]  -  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev        =        expected[i]        -        observed[i];        if(dev    >=    expected[i])    {    dev    =    expected[i]    -    observed[i];    }    double  dev  =  expected[i]  -  observed[i];  if(dev  >=  expected[i])  {  dev  =  expected[i]  -  observed[i];  }	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	89	None	add
172	[BUG]  [BUGGY]  dev    =    expected[i]    -    observed[i];    if(dev  >=  expected[i])  {  dev  =  expected[i]  -  observed[i];  }  int  dev  =  expected[i]  -  observed[i];  if(dev  >=  expected[i])  {  dev  =  expected[i]  -  observed[i];  }  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    expected[i]    -    observed[i];    if(dev  >=  expected[i])  {  dev  =  expected[i]  -  observed[i];  }  int  dev  =  expected[i]  -  observed[i];  if(dev  >=  expected[i])  {  dev  =  expected[i]  -  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev        =        expected[i]        -        observed[i];        if(dev    >=    expected[i])    {    dev    =    expected[i]    -    observed[i];    }    int  dev  =  expected[i]  -  observed[i];  if(dev  >=  expected[i])  {  dev  =  expected[i]  -  observed[i];  }	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	89	None	add
173	[BUG]  [BUGGY]  dev    =    expected[i]    -    observed[i];    if(dev  >=  expected[i])  {  dev  =  expected[i]  -  observed[i];  }  int  dev  =  observed[i]  -  observed[i];  if(dev  >=  expected[i])  {  dev  =  expected[i]  -  observed[i];  }  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    expected[i]    -    observed[i];    if(dev  >=  expected[i])  {  dev  =  expected[i]  -  observed[i];  }  int  dev  =  observed[i]  -  observed[i];  if(dev  >=  expected[i])  {  dev  =  expected[i]  -  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev        =        expected[i]        -        observed[i];        if(dev    >=    expected[i])    {    dev    =    expected[i]    -    observed[i];    }    int  dev  =  observed[i]  -  observed[i];  if(dev  >=  expected[i])  {  dev  =  expected[i]  -  observed[i];  }	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	89	None	add
174	[BUG]  [BUGGY]  dev    =    expected[i]    -    observed[i];    if(dev  >=  expected[i])  {  dev  =  expected[i]  -  observed[i];  }  double  dev  =  expected[i]  -  observed[i];  if(dev!=  expected[i])  {  dev  =  expected[i]  -  observed[i];  }  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    expected[i]    -    observed[i];    if(dev  >=  expected[i])  {  dev  =  expected[i]  -  observed[i];  }  double  dev  =  expected[i]  -  observed[i];  if(dev!=  expected[i])  {  dev  =  expected[i]  -  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev        =        expected[i]        -        observed[i];        if(dev    >=    expected[i])    {    dev    =    expected[i]    -    observed[i];    }    double  dev  =  expected[i]  -  observed[i];  if(dev!=  expected[i])  {  dev  =  expected[i]  -  observed[i];  }	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	89	None	add
175	[BUG]  [BUGGY]  dev    =    expected[i]    -    observed[i];    if(dev  >=  expected[i])  {  dev  =  expected[i]  -  observed[i];  }  int  dev  =  expected[i]  -  observed[i];  if(dev!=  expected[i])  {  dev  =  expected[i]  -  observed[i];  }  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    expected[i]    -    observed[i];    if(dev  >=  expected[i])  {  dev  =  expected[i]  -  observed[i];  }  int  dev  =  expected[i]  -  observed[i];  if(dev!=  expected[i])  {  dev  =  expected[i]  -  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev        =        expected[i]        -        observed[i];        if(dev    >=    expected[i])    {    dev    =    expected[i]    -    observed[i];    }    int  dev  =  expected[i]  -  observed[i];  if(dev!=  expected[i])  {  dev  =  expected[i]  -  observed[i];  }	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	89	None	add
176	[BUG]  [BUGGY]  ((  long)expected[i]  *  observed[i]);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  long)expected[i]  *  observed[i]);  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  long)expected[i]  *  observed[i]);	  ((    double)expected[i]    *    observed[i]);    	non-compiled	[CE]  not  a  statement	8	None	replace
177	[BUG]  [BUGGY]  ((  double)observed[i]  /  observed[i]);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  double)observed[i]  /  observed[i]);  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)observed[i]  /  observed[i]);	  ((    double)observed[i]    -    observed[i]);    	non-compiled	[CE]  not  a  statement	27	None	replace
178	[BUG]  [BUGGY]  ((  long)observed[i]  -  observed[i]);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  long)observed[i]  -  observed[i]);  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  long)observed[i]  -  observed[i]);	  ((    double)observed[i]    -    observed[i]);    	non-compiled	[CE]  not  a  statement	27	None	replace
179	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  *  expected[i];  dev  =  observed[i]  *  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev    =    observed[i]    *    expected[i];    dev  =  observed[i]  *  expected[i];	  	compilable	  [FE]  AssertionFailedError  	17	6	add
180	[BUG]  [BUGGY]  dev  =  observed[i]  *  expected[i];  dev  =  observed[i]  *  expected[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  *  expected[i];  dev  =  observed[i]  *  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    *    expected[i];    dev  =  observed[i]  *  expected[i];	  	compilable	  [FE]  AssertionFailedError  	17	6	add
181	[BUG]  [BUGGY]  dev  =  observed[i]  *  expected[i];  int  dev  =  observed[i]  *  expected[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  *  expected[i];  int  dev  =  observed[i]  *  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    *    expected[i];    int  dev  =  observed[i]  *  expected[i];	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	17	None	add
182	[BUG]  [BUGGY]  dev  =  observed[i]  *  expected[i];  double  dev  =  observed[i]  *  expected[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  *  expected[i];  double  dev  =  observed[i]  *  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    *    expected[i];    double  dev  =  observed[i]  *  expected[i];	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	17	None	add
183	[BUG]  [BUGGY]  dev  =  observed[i]  *  expected[i];  int  i  =  observed[i]  *  expected[i];  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  *  expected[i];  int  i  =  observed[i]  *  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    *    expected[i];    int  i  =  observed[i]  *  expected[i];	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	17	None	add
184	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    observed[i]    /    expected[i];    dev  =  observed[i]  /  expected[i];  dev  =  observed[i]  /  expected[i];  dev  =  observed[i]  /  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev        =        observed[i]        /        expected[i];        dev    =    observed[i]    /    expected[i];    dev  =  observed[i]  /  expected[i];  dev  =  observed[i]  /  expected[i];	  	compilable	  [FE]  AssertionFailedError  	1	6	add
185	[BUG]  [BUGGY]  dev    =    observed[i]    /    expected[i];    dev  =  observed[i]  /  expected[i];  dev  =  observed[i]  /  expected[i];  dev  =  observed[i]  /  expected[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    observed[i]    /    expected[i];    dev  =  observed[i]  /  expected[i];  dev  =  observed[i]  /  expected[i];  dev  =  observed[i]  /  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev        =        observed[i]        /        expected[i];        dev    =    observed[i]    /    expected[i];    dev  =  observed[i]  /  expected[i];  dev  =  observed[i]  /  expected[i];	  	compilable	  [FE]  AssertionFailedError  	1	6	add
186	[BUG]  [BUGGY]  dev    =    observed[i]    /    expected[i];    dev  =  observed[i]  /  expected[i];  Dev  =  observed[i]  /  expected[i];  dev  =  observed[i]  /  expected[i];  [CE]  cannot  find  symbol  Dev  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    observed[i]    /    expected[i];    dev  =  observed[i]  /  expected[i];  Dev  =  observed[i]  /  expected[i];  dev  =  observed[i]  /  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev        =        observed[i]        /        expected[i];        dev    =    observed[i]    /    expected[i];    Dev  =  observed[i]  /  expected[i];  dev  =  observed[i]  /  expected[i];	  	non-compiled	[CE]  cannot  find  symbol  Dev	1	None	add
187	[BUG]  [BUGGY]  dev    =    observed[i]    /    expected[i];    dev  =  observed[i]  /  expected[i];  int  dev  =  observed[i]  /  expected[i];  dev  =  observed[i]  /  expected[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    observed[i]    /    expected[i];    dev  =  observed[i]  /  expected[i];  int  dev  =  observed[i]  /  expected[i];  dev  =  observed[i]  /  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev        =        observed[i]        /        expected[i];        dev    =    observed[i]    /    expected[i];    int  dev  =  observed[i]  /  expected[i];  dev  =  observed[i]  /  expected[i];	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	1	None	add
188	[BUG]  [BUGGY]  dev    =    observed[i]    /    expected[i];    dev  =  observed[i]  /  expected[i];  double  dev  =  observed[i]  /  expected[i];  dev  =  observed[i]  /  expected[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    observed[i]    /    expected[i];    dev  =  observed[i]  /  expected[i];  double  dev  =  observed[i]  /  expected[i];  dev  =  observed[i]  /  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev        =        observed[i]        /        expected[i];        dev    =    observed[i]    /    expected[i];    double  dev  =  observed[i]  /  expected[i];  dev  =  observed[i]  /  expected[i];	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	1	None	add
189	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    observed[i]    /    expected[i];    dev  =  observed[i]  /  expected[i];  dev  =  expected[i]  /  observed[i];  dev  =  observed[i]  /  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev        =        observed[i]        /        expected[i];        dev    =    observed[i]    /    expected[i];    dev  =  expected[i]  /  observed[i];  dev  =  observed[i]  /  expected[i];	  	compilable	  [FE]  AssertionFailedError  	1	6	add
190	[BUG]  [BUGGY]  dev    =    observed[i]    /    expected[i];    dev  =  observed[i]  /  expected[i];  dev  =  expected[i]  /  observed[i];  dev  =  observed[i]  /  expected[i];  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    observed[i]    /    expected[i];    dev  =  observed[i]  /  expected[i];  dev  =  expected[i]  /  observed[i];  dev  =  observed[i]  /  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev        =        observed[i]        /        expected[i];        dev    =    observed[i]    /    expected[i];    dev  =  expected[i]  /  observed[i];  dev  =  observed[i]  /  expected[i];	  	compilable	  [FE]  AssertionFailedError  	1	6	add
191	[BUG]  [BUGGY]  dev  =  ((  long)expected[i]  /  observed[i]);  ((  long)expected[i]  -  observed[i]);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  long)expected[i]  /  observed[i]);  ((  long)expected[i]  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  long)expected[i]  /  observed[i]);  ((  long)expected[i]  -  observed[i]);	  dev    =    ((    long)expected[i]    -    observed[i]);    ((    long)expected[i]    -    observed[i]);    	non-compiled	[CE]  not  a  statement	38	None	replace
192	[BUG]  [BUGGY]  dev  =  ((  long)expected[i]  -  observed[i]);  ((  long)observed[i]  -  observed[i]);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  long)expected[i]  -  observed[i]);  ((  long)observed[i]  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  long)expected[i]  -  observed[i]);  ((  long)observed[i]  -  observed[i]);	  dev    =    ((    long)expected[i]    -    observed[i]);    ((    long)expected[i]    -    observed[i]);    	non-compiled	[CE]  not  a  statement	38	None	replace
193	[BUG]  [BUGGY]  ((  double)observed[i]  /  sumSq[i]);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  double)observed[i]  /  sumSq[i]);  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)observed[i]  /  sumSq[i]);	  ((    double)observed[i]    /    expected[i]);    	non-compiled	[CE]  not  a  statement	28	None	replace
194	[BUG]  [BUGGY]  ((  double)observed[i]  *  expected[i]);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  double)observed[i]  *  expected[i]);  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)observed[i]  *  expected[i]);	  ((    double)observed[i]    /    expected[i]);    	non-compiled	[CE]  not  a  statement	28	None	replace
195	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    expected[i]    -    observed[i];    dev  =  expected[i]  -  observed[i];  dev  =  expected[i]  -  observed[i];  dev  =  expected[i]  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev        =        expected[i]        -        observed[i];        dev    =    expected[i]    -    observed[i];    dev  =  expected[i]  -  observed[i];  dev  =  expected[i]  -  observed[i];	  	compilable	  [FE]  AssertionFailedError  	49	6	add
196	[BUG]  [BUGGY]  dev    =    expected[i]    -    observed[i];    dev  =  expected[i]  -  observed[i];  dev  =  expected[i]  -  observed[i];  dev  =  expected[i]  -  observed[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    expected[i]    -    observed[i];    dev  =  expected[i]  -  observed[i];  dev  =  expected[i]  -  observed[i];  dev  =  expected[i]  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev        =        expected[i]        -        observed[i];        dev    =    expected[i]    -    observed[i];    dev  =  expected[i]  -  observed[i];  dev  =  expected[i]  -  observed[i];	  	compilable	  [FE]  AssertionFailedError  	49	6	add
197	[BUG]  [BUGGY]  dev    =    expected[i]    -    observed[i];    dev  =  expected[i]  -  observed[i];  int  dev  =  expected[i]  -  observed[i];  dev  =  expected[i]  -  observed[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    expected[i]    -    observed[i];    dev  =  expected[i]  -  observed[i];  int  dev  =  expected[i]  -  observed[i];  dev  =  expected[i]  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev        =        expected[i]        -        observed[i];        dev    =    expected[i]    -    observed[i];    int  dev  =  expected[i]  -  observed[i];  dev  =  expected[i]  -  observed[i];	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	49	None	add
198	[BUG]  [BUGGY]  dev    =    expected[i]    -    observed[i];    dev  =  expected[i]  -  observed[i];  Dev  =  expected[i]  -  observed[i];  dev  =  expected[i]  -  observed[i];  [CE]  cannot  find  symbol  Dev  [FE]        AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    expected[i]    -    observed[i];    dev  =  expected[i]  -  observed[i];  Dev  =  expected[i]  -  observed[i];  dev  =  expected[i]  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev        =        expected[i]        -        observed[i];        dev    =    expected[i]    -    observed[i];    Dev  =  expected[i]  -  observed[i];  dev  =  expected[i]  -  observed[i];	  	non-compiled	[CE]  cannot  find  symbol  Dev	49	None	add
199	[BUG]  [BUGGY]  dev    =    expected[i]    -    observed[i];    dev  =  expected[i]  -  observed[i];  double  dev  =  expected[i]  -  observed[i];  dev  =  expected[i]  -  observed[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    expected[i]    -    observed[i];    dev  =  expected[i]  -  observed[i];  double  dev  =  expected[i]  -  observed[i];  dev  =  expected[i]  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev        =        expected[i]        -        observed[i];        dev    =    expected[i]    -    observed[i];    double  dev  =  expected[i]  -  observed[i];  dev  =  expected[i]  -  observed[i];	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	49	None	add
200	[BUG]  [BUGGY]  dev    =    expected[i]    -    observed[i];    dev  =  expected[i]  -  observed[i];  long[]  observed[i]  =  observed[i];  dev  =  expected[i]  -  observed[i];  [CE]  ']'  expected  [FE]            AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    expected[i]    -    observed[i];    dev  =  expected[i]  -  observed[i];  long[]  observed[i]  =  observed[i];  dev  =  expected[i]  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev        =        expected[i]        -        observed[i];        dev    =    expected[i]    -    observed[i];    long[]  observed[i]  =  observed[i];  dev  =  expected[i]  -  observed[i];	  	non-compiled	[CE]  ']'  expected	49	None	add
201	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    ((    long)expected[i]    -    observed[i]);    dev  =  ((  long)expected[i]  -  observed[i]);  dev  =  ((  long)expected[i]  -  observed[i]);  dev  =  ((  long)expected[i]  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev        =        ((        long)expected[i]        -        observed[i]);        dev    =    ((    long)expected[i]    -    observed[i]);    dev  =  ((  long)expected[i]  -  observed[i]);  dev  =  ((  long)expected[i]  -  observed[i]);	  	compilable	  [FE]  AssertionFailedError  	34	6	add
202	[BUG]  [BUGGY]  dev    =    ((    long)expected[i]    -    observed[i]);    dev  =  ((  long)expected[i]  -  observed[i]);  dev  =  ((  long)expected[i]  -  observed[i]);  dev  =  ((  long)expected[i]  -  observed[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    ((    long)expected[i]    -    observed[i]);    dev  =  ((  long)expected[i]  -  observed[i]);  dev  =  ((  long)expected[i]  -  observed[i]);  dev  =  ((  long)expected[i]  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev        =        ((        long)expected[i]        -        observed[i]);        dev    =    ((    long)expected[i]    -    observed[i]);    dev  =  ((  long)expected[i]  -  observed[i]);  dev  =  ((  long)expected[i]  -  observed[i]);	  	compilable	  [FE]  AssertionFailedError  	34	6	add
203	[BUG]  [BUGGY]  dev    =    ((    long)expected[i]    -    observed[i]);    dev  =  ((  long)expected[i]  -  observed[i]);  Dev  =  ((  long)expected[i]  -  observed[i]);  dev  =  ((  long)expected[i]  -  observed[i]);  [CE]  cannot  find  symbol  Dev  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    ((    long)expected[i]    -    observed[i]);    dev  =  ((  long)expected[i]  -  observed[i]);  Dev  =  ((  long)expected[i]  -  observed[i]);  dev  =  ((  long)expected[i]  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev        =        ((        long)expected[i]        -        observed[i]);        dev    =    ((    long)expected[i]    -    observed[i]);    Dev  =  ((  long)expected[i]  -  observed[i]);  dev  =  ((  long)expected[i]  -  observed[i]);	  	non-compiled	[CE]  cannot  find  symbol  Dev	34	None	add
204	[BUG]  [BUGGY]  dev    =    ((    long)expected[i]    -    observed[i]);    dev  =  ((  long)expected[i]  -  observed[i]);  int  dev  =  ((  long)expected[i]  -  observed[i]);  dev  =  ((  long)expected[i]  -  observed[i]);  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    ((    long)expected[i]    -    observed[i]);    dev  =  ((  long)expected[i]  -  observed[i]);  int  dev  =  ((  long)expected[i]  -  observed[i]);  dev  =  ((  long)expected[i]  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev        =        ((        long)expected[i]        -        observed[i]);        dev    =    ((    long)expected[i]    -    observed[i]);    int  dev  =  ((  long)expected[i]  -  observed[i]);  dev  =  ((  long)expected[i]  -  observed[i]);	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	34	None	add
205	[BUG]  [BUGGY]  dev    =    ((    long)expected[i]    -    observed[i]);    dev  =  ((  long)expected[i]  -  observed[i]);  ((  long)expected[i]  -  observed[i]);  dev  =  ((  long)expected[i]  -  observed[i]);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    ((    long)expected[i]    -    observed[i]);    dev  =  ((  long)expected[i]  -  observed[i]);  ((  long)expected[i]  -  observed[i]);  dev  =  ((  long)expected[i]  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev        =        ((        long)expected[i]        -        observed[i]);        dev    =    ((    long)expected[i]    -    observed[i]);    ((  long)expected[i]  -  observed[i]);  dev  =  ((  long)expected[i]  -  observed[i]);	  	non-compiled	[CE]  not  a  statement	34	None	add
206	[BUG]  [BUGGY]  double  expected[]  =  observed[i].doubleValue()  *  dev;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  double  expected[]  =  observed[i].doubleValue()  *  dev;  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	double  expected[]  =  observed[i].doubleValue()  *  dev;	  double    expected[]    =    observed[i].doubleValue()    /    dev;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	91	None	replace
207	[BUG]  [BUGGY]  double  expected[]  =  sumSq  *  observed[i].doubleValue()  /  dev;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  double  expected[]  =  sumSq  *  observed[i].doubleValue()  /  dev;  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	double  expected[]  =  sumSq  *  observed[i].doubleValue()  /  dev;	  double    expected[]    =    observed[i].doubleValue()    /    dev;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	91	None	replace
208	[BUG]  [BUGGY]  dev  =  ((  double)expected[i]  /  observed[i]);  Dev  =  ((  double)observed[i]  /  expected[i]);  [CE]  cannot  find  symbol  Dev  [FE]          AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)expected[i]  /  observed[i]);  Dev  =  ((  double)observed[i]  /  expected[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  double)expected[i]  /  observed[i]);  Dev  =  ((  double)observed[i]  /  expected[i]);	  dev    =    ((    double)observed[i]    /    expected[i]);    Dev    =    ((    double)observed[i]    /    expected[i]);    	non-compiled	[CE]  cannot  find  symbol  Dev	62	None	replace
209	[BUG]  [BUGGY]  dev  =  ((  double)observed[i]  /  expected[i]);  Dev  =  ((  double)observed[i]  *  expected[i]);  [CE]  cannot  find  symbol  Dev  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)observed[i]  /  expected[i]);  Dev  =  ((  double)observed[i]  *  expected[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  double)observed[i]  /  expected[i]);  Dev  =  ((  double)observed[i]  *  expected[i]);	  dev    =    ((    double)observed[i]    /    expected[i]);    Dev    =    ((    double)observed[i]    /    expected[i]);    	non-compiled	[CE]  cannot  find  symbol  Dev	62	None	replace
210	[BUG]  [BUGGY]  double  expected[]  =  observed[i].doubleValue()  +  sumSq  /  dev;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  double  expected[]  =  observed[i].doubleValue()  +  sumSq  /  dev;  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	double  expected[]  =  observed[i].doubleValue()  +  sumSq  /  dev;	  double    expected[]    =    observed[i].doubleValue()    +    sumSq;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	42	None	replace
211	[BUG]  [BUGGY]  dev  =  observed[i]  -  expected[i];  ((  double)expected[i]  -  observed[i]);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  -  expected[i];  ((  double)expected[i]  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  -  expected[i];  ((  double)expected[i]  -  observed[i]);	  dev    =    ((    double)expected[i]    -    observed[i]);    ((    double)expected[i]    -    observed[i]);    	non-compiled	[CE]  not  a  statement	15	None	replace
212	[BUG]  [BUGGY]  dev  =  ((  double)expected[i]  /  observed[i]);  ((  double)expected[i]  -  observed[i]);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)expected[i]  /  observed[i]);  ((  double)expected[i]  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  double)expected[i]  /  observed[i]);  ((  double)expected[i]  -  observed[i]);	  dev    =    ((    double)expected[i]    -    observed[i]);    ((    double)expected[i]    -    observed[i]);    	non-compiled	[CE]  not  a  statement	15	None	replace
213	[BUG]  [BUGGY]  dev  =  ((  double)expected[i]  /  observed[i]);  ((  double)observed[i]  /  expected[i]);  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)expected[i]  /  observed[i]);  ((  double)observed[i]  /  expected[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  double)expected[i]  /  observed[i]);  ((  double)observed[i]  /  expected[i]);	  dev    =    ((    double)observed[i]    /    expected[i]);    ((    double)observed[i]    /    expected[i]);    	non-compiled	[CE]  not  a  statement	77	None	replace
214	[BUG]  [BUGGY]  dev  =  ((  double)observed[i]  *  expected[i]);  ((  double)observed[i]  *  expected[i]);  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)observed[i]  *  expected[i]);  ((  double)observed[i]  *  expected[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  double)observed[i]  *  expected[i]);  ((  double)observed[i]  *  expected[i]);	  dev    =    ((    double)observed[i]    /    expected[i]);    ((    double)observed[i]    /    expected[i]);    	non-compiled	[CE]  not  a  statement	77	None	replace
215	[BUG]  [BUGGY]  dev  =  observed[i]  /  unknown[i];  [CE]  cannot  find  symbol  unknown  [FE]          AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  /  unknown[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  /  unknown[i];	  dev    =    observed[i]    /    expected[i];    if(dev    >=    expected[i])    {    dev    =    observed[i]    /    expected[i];    }    else    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    dev    =    observed[i]    /    unknown[i];    }    	non-compiled	[CE]  cannot  find  symbol  unknown	102	None	replace
216	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  -=  observed[i]  -  expected[i];  dev  -=  observed[i]  -  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev    -=    observed[i]    -    expected[i];    dev  -=  observed[i]  -  expected[i];	  	compilable	  [FE]  AssertionFailedError  	97	6	add
217	[BUG]  [BUGGY]  dev  -=  observed[i]  -  expected[i];  dev  -=  observed[i]  -  expected[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  -=  observed[i]  -  expected[i];  dev  -=  observed[i]  -  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    -=    observed[i]    -    expected[i];    dev  -=  observed[i]  -  expected[i];	  	compilable	  [FE]  AssertionFailedError  	97	6	add
218	[BUG]  [BUGGY]  dev  -=  observed[i]  -  expected[i];  int  dev  -=  observed[i]  -  expected[i];  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  -=  observed[i]  -  expected[i];  int  dev  -=  observed[i]  -  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    -=    observed[i]    -    expected[i];    int  dev  -=  observed[i]  -  expected[i];	  	non-compiled	[CE]  ';'  expected	97	None	add
219	[BUG]  [BUGGY]  dev  -=  observed[i]  -  expected[i];  Dev  -=  observed[i]  -  expected[i];  [CE]  cannot  find  symbol  Dev  [FE]        AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  -=  observed[i]  -  expected[i];  Dev  -=  observed[i]  -  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    -=    observed[i]    -    expected[i];    Dev  -=  observed[i]  -  expected[i];	  	non-compiled	[CE]  cannot  find  symbol  Dev	97	None	add
220	[BUG]  [BUGGY]  dev  -=  observed[i]  -  expected[i];  double  dev  -=  observed[i]  -  expected[i];  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  -=  observed[i]  -  expected[i];  double  dev  -=  observed[i]  -  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    -=    observed[i]    -    expected[i];    double  dev  -=  observed[i]  -  expected[i];	  	non-compiled	[CE]  ';'  expected	97	None	add
221	[BUG]  [BUGGY]  dev  -=  observed[i]  -  expected[i];  long[]  expected  =  observed[i].longValue();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  -=  observed[i]  -  expected[i];  long[]  expected  =  observed[i].longValue();  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    -=    observed[i]    -    expected[i];    long[]  expected  =  observed[i].longValue();	  	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	97	None	add
222	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  /  sumSq;  dev  =  observed[i]  /  sumSq;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev    =    observed[i]    /    sumSq;    dev  =  observed[i]  /  sumSq;	  	compilable	  [FE]  AssertionFailedError  	75	6	add
223	[BUG]  [BUGGY]  dev  =  observed[i]  /  sumSq;  dev  =  observed[i]  /  sumSq;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  /  sumSq;  dev  =  observed[i]  /  sumSq;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    /    sumSq;    dev  =  observed[i]  /  sumSq;	  	compilable	  [FE]  AssertionFailedError  	75	6	add
224	[BUG]  [BUGGY]  dev  =  observed[i]  /  sumSq;  Dev  =  observed[i]  /  sumSq;  [CE]  cannot  find  symbol  Dev  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  /  sumSq;  Dev  =  observed[i]  /  sumSq;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    /    sumSq;    Dev  =  observed[i]  /  sumSq;	  	non-compiled	[CE]  cannot  find  symbol  Dev	75	None	add
225	[BUG]  [BUGGY]  dev  =  observed[i]  /  sumSq;  int  dev  =  observed[i]  /  sumSq;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  /  sumSq;  int  dev  =  observed[i]  /  sumSq;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    /    sumSq;    int  dev  =  observed[i]  /  sumSq;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	75	None	add
226	[BUG]  [BUGGY]  dev  =  observed[i]  /  sumSq;  if(dev  >=  expected[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  observed[i]  /  sumSq;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  /  sumSq;  if(dev  >=  expected[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  observed[i]  /  sumSq;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    /    sumSq;    if(dev  >=  expected[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  observed[i]  /  sumSq;  }	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
227	[BUG]  [BUGGY]  dev  =  observed[i]  /  sumSq;  if(dev  >=  expected[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  sumSq;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  /  sumSq;  if(dev  >=  expected[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  sumSq;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    /    sumSq;    if(dev  >=  expected[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  sumSq;  }	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
228	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(observed))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!isPositive(expected)||!isNegative(observed))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	23	None	replace
229	[BUG]  [BUGGY]  ((  double)observed[i]  -  sumSq);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  double)observed[i]  -  sumSq);  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)observed[i]  -  sumSq);	  ((    double)observed[i]    -    dev);    	non-compiled	[CE]  not  a  statement	88	None	replace
230	[BUG]  [BUGGY]  ((  double)observed[i]  /  dev);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  double)observed[i]  /  dev);  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)observed[i]  /  dev);	  ((    double)observed[i]    -    dev);    	non-compiled	[CE]  not  a  statement	88	None	replace
231	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)expected[i]  -  observed[i]);  sumSq  =  ((  double)expected[i]  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  ((  double)expected[i]  -  observed[i]);  sumSq  =  ((  double)expected[i]  -  observed[i]);	  dev    =    ((    double)expected[i]    -    observed[i]);    chiSquare    =    ((    double)expected[i]    -    observed[i]);    	compilable	  [FE]  AssertionFailedError  	74	6	replace
232	[BUG]  [BUGGY]  dev  =  ((  double)expected[i]  -  observed[i]);  sumSq  =  ((  double)expected[i]  -  observed[i]);  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)expected[i]  -  observed[i]);  sumSq  =  ((  double)expected[i]  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  double)expected[i]  -  observed[i]);  sumSq  =  ((  double)expected[i]  -  observed[i]);	  dev    =    ((    double)expected[i]    -    observed[i]);    chiSquare    =    ((    double)expected[i]    -    observed[i]);    	compilable	  [FE]  AssertionFailedError  	74	6	replace
233	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  /  observed[i];  dev  =  observed[i]  /  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev    =    observed[i]    /    observed[i];    dev  =  observed[i]  /  observed[i];	  	compilable	  [FE]  AssertionFailedError  	95	6	add
234	[BUG]  [BUGGY]  dev  =  observed[i]  /  observed[i];  dev  =  observed[i]  /  observed[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  /  observed[i];  dev  =  observed[i]  /  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    /    observed[i];    dev  =  observed[i]  /  observed[i];	  	compilable	  [FE]  AssertionFailedError  	95	6	add
235	[BUG]  [BUGGY]  dev  =  observed[i]  /  observed[i];  Dev  =  observed[i]  /  observed[i];  [CE]  cannot  find  symbol  Dev  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  /  observed[i];  Dev  =  observed[i]  /  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    /    observed[i];    Dev  =  observed[i]  /  observed[i];	  	non-compiled	[CE]  cannot  find  symbol  Dev	95	None	add
236	[BUG]  [BUGGY]  dev  =  observed[i]  /  observed[i];  int  dev  =  observed[i]  /  observed[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  /  observed[i];  int  dev  =  observed[i]  /  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    /    observed[i];    int  dev  =  observed[i]  /  observed[i];	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	95	None	add
237	[BUG]  [BUGGY]  dev  =  observed[i]  /  observed[i];  double  dev  =  observed[i]  /  observed[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  /  observed[i];  double  dev  =  observed[i]  /  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    /    observed[i];    double  dev  =  observed[i]  /  observed[i];	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	95	None	add
238	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)expected[i]  *  observed[i]);  dev  =  ((  double)expected[i]  *  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev    =    ((    double)expected[i]    *    observed[i]);    dev  =  ((  double)expected[i]  *  observed[i]);	  	compilable	  [FE]  AssertionFailedError  	58	6	add
239	[BUG]  [BUGGY]  dev  =  ((  double)expected[i]  *  observed[i]);  dev  =  ((  double)expected[i]  *  observed[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)expected[i]  *  observed[i]);  dev  =  ((  double)expected[i]  *  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    ((    double)expected[i]    *    observed[i]);    dev  =  ((  double)expected[i]  *  observed[i]);	  	compilable	  [FE]  AssertionFailedError  	58	6	add
240	[BUG]  [BUGGY]  dev  =  ((  double)expected[i]  *  observed[i]);  Dev  =  ((  double)expected[i]  *  observed[i]);  [CE]  cannot  find  symbol  Dev  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)expected[i]  *  observed[i]);  Dev  =  ((  double)expected[i]  *  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    ((    double)expected[i]    *    observed[i]);    Dev  =  ((  double)expected[i]  *  observed[i]);	  	non-compiled	[CE]  cannot  find  symbol  Dev	58	None	add
241	[BUG]  [BUGGY]  dev  =  ((  double)expected[i]  *  observed[i]);  int  dev  =  ((  double)expected[i]  *  observed[i]);  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)expected[i]  *  observed[i]);  int  dev  =  ((  double)expected[i]  *  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    ((    double)expected[i]    *    observed[i]);    int  dev  =  ((  double)expected[i]  *  observed[i]);	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	58	None	add
242	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  *  sumSq  /  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  observed[i]  *  sumSq  /  expected[i];	  dev    =    observed[i]    *    expected[i];    	compilable	  [FE]  AssertionFailedError  	18	6	replace
243	[BUG]  [BUGGY]  dev  =  observed[i]  *  sumSq  /  expected[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  *  sumSq  /  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  *  sumSq  /  expected[i];	  dev    =    observed[i]    *    expected[i];    	compilable	  [FE]  AssertionFailedError  	18	6	replace
244	[BUG]  [BUGGY]  double  dev  =  observed[i]  *  expected[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  double  dev  =  observed[i]  *  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	double  dev  =  observed[i]  *  expected[i];	  dev    =    observed[i]    /    expected[i];    double    dev    =    observed[i]    /    expected[i];    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	5	None	replace
245	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly ");  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly ");  }  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!isNegative(expected))    {    throw    new    IllegalArgumentException(   "Unexpected    array    lengths    incorrectly   ");    }    	non-compiled	[CE]  >  expected	66	None	replace
246	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly. ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly. ");  }  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly. ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!isNegative(expected))    {    throw    new    IllegalArgumentException(   "Unexpected    array    lengths    incorrectly   ");    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
247	[BUG]  [BUGGY]  ((  double)expected[i]  *  sumSq[i]);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  double)expected[i]  *  sumSq[i]);  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)expected[i]  *  sumSq[i]);	  ((    double)expected[i]    *    expected[i]);    	non-compiled	[CE]  not  a  statement	10	None	replace
248	[BUG]  [BUGGY]  ((  double)expected[i]  /  observed[i].doubleValue());  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  double)expected[i]  /  observed[i].doubleValue());  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)expected[i]  /  observed[i].doubleValue());	  ((    double)expected[i]    -    observed[i].doubleValue());    	non-compiled	[CE]  not  a  statement	85	None	replace
249	[BUG]  [BUGGY]  ((  double)expected[i]  -  observed[i].doubleValue()  +  1);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  double)expected[i]  -  observed[i].doubleValue()  +  1);  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)expected[i]  -  observed[i].doubleValue()  +  1);	  ((    double)expected[i]    -    observed[i].doubleValue());    	non-compiled	[CE]  not  a  statement	85	None	replace
250	[BUG]  [BUGGY]  ((  long)expected[i]  -  observed[i].doubleValue());  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  long)expected[i]  -  observed[i].doubleValue());  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  long)expected[i]  -  observed[i].doubleValue());	  ((    double)expected[i]    -    observed[i].doubleValue());    	non-compiled	[CE]  not  a  statement	85	None	replace
251	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  long)expected[i]  /  observed[i]);  dev  =  ((  long)expected[i]  /  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev    =    ((    long)expected[i]    /    observed[i]);    dev  =  ((  long)expected[i]  /  observed[i]);	  	compilable	  [FE]  AssertionFailedError  	25	6	add
252	[BUG]  [BUGGY]  dev  =  ((  long)expected[i]  /  observed[i]);  dev  =  ((  long)expected[i]  /  observed[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  long)expected[i]  /  observed[i]);  dev  =  ((  long)expected[i]  /  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    ((    long)expected[i]    /    observed[i]);    dev  =  ((  long)expected[i]  /  observed[i]);	  	compilable	  [FE]  AssertionFailedError  	25	6	add
253	[BUG]  [BUGGY]  dev  =  ((  long)expected[i]  /  observed[i]);  Dev  =  ((  long)expected[i]  /  observed[i]);  [CE]  cannot  find  symbol  Dev  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  long)expected[i]  /  observed[i]);  Dev  =  ((  long)expected[i]  /  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    ((    long)expected[i]    /    observed[i]);    Dev  =  ((  long)expected[i]  /  observed[i]);	  	non-compiled	[CE]  cannot  find  symbol  Dev	25	None	add
254	[BUG]  [BUGGY]  dev  =  ((  long)expected[i]  /  observed[i]);  int  dev  =  ((  long)expected[i]  /  observed[i]);  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  long)expected[i]  /  observed[i]);  int  dev  =  ((  long)expected[i]  /  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    ((    long)expected[i]    /    observed[i]);    int  dev  =  ((  long)expected[i]  /  observed[i]);	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	25	None	add
255	[BUG]  [BUGGY]  dev  =  ((  long)expected[i]  /  observed[i]);  ((  long)expected[i]  /  observed[i]);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  long)expected[i]  /  observed[i]);  ((  long)expected[i]  /  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    ((    long)expected[i]    /    observed[i]);    ((  long)expected[i]  /  observed[i]);	  	non-compiled	[CE]  not  a  statement	25	None	add
256	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNonNegative(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly.   ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNonNegative(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly.   ");  }  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNonNegative(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly.   ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!isPositive(expected))    {    throw    new    IllegalArgumentException(   "Unexpected    array    lengths    incorrectly.   ");    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
257	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  sumSq  /  observed[i];  dev  =  observed[i]  /  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  sumSq  /  observed[i];  dev  =  observed[i]  /  expected[i];	  dev    =    observed[i]    /    expected[i];    dev    =    observed[i]    /    expected[i];    	compilable	  [FE]  AssertionFailedError  	2	6	replace
258	[BUG]  [BUGGY]  dev  =  sumSq  /  observed[i];  dev  =  observed[i]  /  expected[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  sumSq  /  observed[i];  dev  =  observed[i]  /  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  sumSq  /  observed[i];  dev  =  observed[i]  /  expected[i];	  dev    =    observed[i]    /    expected[i];    dev    =    observed[i]    /    expected[i];    	compilable	  [FE]  AssertionFailedError  	2	6	replace
259	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  /  sumSq;  dev  =  observed[i]  /  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  observed[i]  /  sumSq;  dev  =  observed[i]  /  expected[i];	  dev    =    observed[i]    /    expected[i];    dev    =    observed[i]    /    expected[i];    	compilable	  [FE]  AssertionFailedError  	2	6	replace
260	[BUG]  [BUGGY]  dev  =  observed[i]  /  sumSq;  dev  =  observed[i]  /  expected[i];  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  /  sumSq;  dev  =  observed[i]  /  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  /  sumSq;  dev  =  observed[i]  /  expected[i];	  dev    =    observed[i]    /    expected[i];    dev    =    observed[i]    /    expected[i];    	compilable	  [FE]  AssertionFailedError  	2	6	replace
261	[BUG]  [BUGGY]  dev  =  ((  double)expected[i]  -  observed[i]);  sumSquare  =  ((  double)expected[i]  -  observed[i]);  [CE]  cannot  find  symbol  sumSquare  [FE]        AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)expected[i]  -  observed[i]);  sumSquare  =  ((  double)expected[i]  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  double)expected[i]  -  observed[i]);  sumSquare  =  ((  double)expected[i]  -  observed[i]);	  dev    =    ((    double)expected[i]    -    observed[i]);    chiSquare    =    ((    double)expected[i]    -    observed[i]);    	non-compiled	[CE]  cannot  find  symbol  sumSquare	74	None	replace
262	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  expected[i]  /  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  expected[i]  /  dev;	  dev    =    observed[i]    /    dev;    	compilable	  [FE]  AssertionFailedError  	94	6	replace
263	[BUG]  [BUGGY]  dev  =  expected[i]  /  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  expected[i]  /  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  expected[i]  /  dev;	  dev    =    observed[i]    /    dev;    	compilable	  [FE]  AssertionFailedError  	94	6	replace
264	[BUG]  [BUGGY]  dev  =  observed[i]  -  expected[i];  chiSquare  =  distribution.doubleValue();  [CE]  cannot  find  symbol  chiSquare  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  -  expected[i];  chiSquare  =  distribution.doubleValue();  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    -    expected[i];    chiSquare  =  distribution.doubleValue();	  	non-compiled	[CE]  cannot  find  symbol  chiSquare	21	None	add
265	[BUG]  [BUGGY]  dev  =  observed[i]  -  expected[i];  long[]  expected[i]  =  observed[i]  *  observed[i];  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  -  expected[i];  long[]  expected[i]  =  observed[i]  *  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  -  expected[i];  long[]  expected[i]  =  observed[i]  *  observed[i];	  dev    =    expected[i]    -    observed[i];    long[]    expected[i]    =    observed[i]    -    observed[i];    	non-compiled	[CE]  ']'  expected	54	None	replace
266	[BUG]  [BUGGY]  dev  =  ((  double)observed[i]  /  expected[i]);  ((  double)observed[i]  *  expected[i]);  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)observed[i]  /  expected[i]);  ((  double)observed[i]  *  expected[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  double)observed[i]  /  expected[i]);  ((  double)observed[i]  *  expected[i]);	  dev    =    ((    double)observed[i]    /    expected[i]);    ((    double)observed[i]    /    expected[i]);    	non-compiled	[CE]  not  a  statement	77	None	replace
267	[BUG]  [BUGGY]  dev  =  observed[i]  /  expected[i];  sumSquare  =  distribution.doubleValue();  [CE]  cannot  find  symbol  sumSquare  [FE]        AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  /  expected[i];  sumSquare  =  distribution.doubleValue();  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  /  expected[i];  sumSquare  =  distribution.doubleValue();	  dev    =    observed[i]    /    expected[i];    chiSquare    =    distribution.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  sumSquare	67	None	replace
268	[BUG]  [BUGGY]  dev  =  expected[i]  /  observed[i];  sumSquare  =  distribution.doubleValue();  [CE]  cannot  find  symbol  sumSquare  [FE]          AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  expected[i]  /  observed[i];  sumSquare  =  distribution.doubleValue();  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  expected[i]  /  observed[i];  sumSquare  =  distribution.doubleValue();	  dev    =    observed[i]    /    expected[i];    chiSquare    =    distribution.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  sumSquare	67	None	replace
269	[BUG]  [BUGGY]  double  expected[]  =  observed[i].doubleValue()  +  dev;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  double  expected[]  =  observed[i].doubleValue()  +  dev;  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	double  expected[]  =  observed[i].doubleValue()  +  dev;	  double    expected[]    =    observed[i].doubleValue()    +    sumSq;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	42	None	replace
270	[BUG]  [BUGGY]  int  dev  =  expected[i]  -  observed[i];  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  int  dev  =  expected[i]  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	int  dev  =  expected[i]  -  observed[i];	  dev    =    expected[i]    -    observed[i];    int    dev    =    expected[i]    -    observed[i];    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	52	None	replace
271	[BUG]  [BUGGY]  dev  =  observed[i]  -  expected[i];  Dev  =  expected[i]  -  observed[i];  [CE]  cannot  find  symbol  Dev  [FE]          AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  -  expected[i];  Dev  =  expected[i]  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  -  expected[i];  Dev  =  expected[i]  -  observed[i];	  dev    =    expected[i]    -    observed[i];    Dev    =    expected[i]    -    observed[i];    	non-compiled	[CE]  cannot  find  symbol  Dev	51	None	replace
272	[BUG]  [BUGGY]  dev  =  sumSq  -  observed[i];  Dev  =  expected[i]  -  observed[i];  [CE]  cannot  find  symbol  Dev  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  sumSq  -  observed[i];  Dev  =  expected[i]  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  sumSq  -  observed[i];  Dev  =  expected[i]  -  observed[i];	  dev    =    expected[i]    -    observed[i];    Dev    =    expected[i]    -    observed[i];    	non-compiled	[CE]  cannot  find  symbol  Dev	51	None	replace
273	[BUG]  [BUGGY]  ((  double)expected[i]  -  expected[i]),  sumSq,  observed[i]).doubleValue();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  double)expected[i]  -  expected[i]),  sumSq,  observed[i]).doubleValue();  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)expected[i]  -  expected[i]),  sumSq,  observed[i]).doubleValue();	  ((    double)expected[i]    -    observed[i]),    sumSq,    observed[i]).doubleValue();    	non-compiled	[CE]  not  a  statement	40	None	replace
274	[BUG]  [BUGGY]  dev  =  observed[i]  /  dev;  ((  ChiSquareDistribution)observed[i]).sumSq  /  dev;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  /  dev;  ((  ChiSquareDistribution)observed[i]).sumSq  /  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    /    dev;    ((  ChiSquareDistribution)observed[i]).sumSq  /  dev;	  	non-compiled	[CE]  not  a  statement	93	None	add
275	[BUG]  [BUGGY]  dev  =  observed[i]  /  dev;  ((  ChiSquareDistribution)observed[i]).setDev(dev);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  /  dev;  ((  ChiSquareDistribution)observed[i]).setDev(dev);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    /    dev;    ((  ChiSquareDistribution)observed[i]).setDev(dev);	  	non-compiled	[CE]  cannot  find  symbol	93	None	add
276	[BUG]  [BUGGY]  ((  double)expected[i]  /  dev);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  double)expected[i]  /  dev);  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)expected[i]  /  dev);	  ((    double)expected[i]    /    expected[i]);    	non-compiled	[CE]  not  a  statement	9	None	replace
277	[BUG]  [BUGGY]  ((  double)expected[i]  /  sumSq[i]);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  double)expected[i]  /  sumSq[i]);  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)expected[i]  /  sumSq[i]);	  ((    double)expected[i]    /    expected[i]);    	non-compiled	[CE]  not  a  statement	9	None	replace
278	[BUG]  [BUGGY]  dev  =  ((  double)expected[i]  /  observed[i]);  chiSquare  =  ((  double)expected[i]  /  observed[i]);  [CE]  cannot  find  symbol  chiSquare  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)expected[i]  /  observed[i]);  chiSquare  =  ((  double)expected[i]  /  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    ((    double)expected[i]    /    observed[i]);    chiSquare  =  ((  double)expected[i]  /  observed[i]);	  	non-compiled	[CE]  cannot  find  symbol  chiSquare	45	None	add
279	[BUG]  [BUGGY]  dev  -=  observed[i]  -  expected[i];  long  dev  -=  observed[i]  -  expected[i];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  -=  observed[i]  -  expected[i];  long  dev  -=  observed[i]  -  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    -=    observed[i]    -    expected[i];    long  dev  -=  observed[i]  -  expected[i];	  	non-compiled	[CE]  ';'  expected	97	None	add
280	[BUG]  [BUGGY]  dev  =  ((  double)expected[i]  -  observed[i]);  ((  double)sumSq  +  observed[i]);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)expected[i]  -  observed[i]);  ((  double)sumSq  +  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  double)expected[i]  -  observed[i]);  ((  double)sumSq  +  observed[i]);	  dev    =    ((    double)expected[i]    -    observed[i]);    ((    double)expected[i]    -    observed[i]);    	non-compiled	[CE]  not  a  statement	15	None	replace
281	[BUG]  [BUGGY]  dev  =  ((  double)expected[i]  -  observed[i]);  ((  double)sumSq  *  observed[i]);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)expected[i]  -  observed[i]);  ((  double)sumSq  *  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  double)expected[i]  -  observed[i]);  ((  double)sumSq  *  observed[i]);	  dev    =    ((    double)expected[i]    -    observed[i]);    ((    double)expected[i]    -    observed[i]);    	non-compiled	[CE]  not  a  statement	15	None	replace
282	[BUG]  [BUGGY]  ((  long)expected[i]  -  observed[i]),  sumSq).doubleValue();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  long)expected[i]  -  observed[i]),  sumSq).doubleValue();  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  long)expected[i]  -  observed[i]),  sumSq).doubleValue();	  ((    long)expected[i]    -    observed[i]).doubleValue();    	non-compiled	[CE]  not  a  statement	84	None	replace
283	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  sumSq  *  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  sumSq  *  expected[i];	  dev    =    observed[i]    /    expected[i];    if(dev    >=    expected[i])    {    dev    =    observed[i]    /    expected[i];    }    else    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    dev    =    observed[i]    /    expected[i];    }    	compilable	  [FE]  AssertionFailedError  	101	6	replace
284	[BUG]  [BUGGY]  dev  =  sumSq  *  expected[i];  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  sumSq  *  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  sumSq  *  expected[i];	  dev    =    observed[i]    /    expected[i];    if(dev    >=    expected[i])    {    dev    =    observed[i]    /    expected[i];    }    else    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    dev    =    observed[i]    /    expected[i];    }    	compilable	  [FE]  AssertionFailedError  	101	6	replace
285	[BUG]  [BUGGY]  dev  =  observed[i]  -  expected[i];  sumSquare  =  distribution.doubleValue();  [CE]  cannot  find  symbol  sumSquare  [FE]        AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  -  expected[i];  sumSquare  =  distribution.doubleValue();  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  -  expected[i];  sumSquare  =  distribution.doubleValue();	  dev    =    expected[i]    -    observed[i];    chiSquare    =    distribution.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  sumSquare	70	None	replace
286	[BUG]  [BUGGY]  dev  =  observed[i]  /  observed[i];  chiSquare  =  distribution.doubleValue();  [CE]  cannot  find  symbol  chiSquare  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  /  observed[i];  chiSquare  =  distribution.doubleValue();  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    /    observed[i];    chiSquare  =  distribution.doubleValue();	  	non-compiled	[CE]  cannot  find  symbol  chiSquare	95	None	add
287	[BUG]  [BUGGY]  dev    =    expected[i]    -    observed[i];    dev  =  expected[i]  -  observed[i];  dev  =  expected[i]  -  observed[i];  dev  =  expect[i]  -  observed[i];  [CE]  cannot  find  symbol  expect  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    expected[i]    -    observed[i];    dev  =  expected[i]  -  observed[i];  dev  =  expected[i]  -  observed[i];  dev  =  expect[i]  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev        =        expected[i]        -        observed[i];        dev    =    expected[i]    -    observed[i];    dev  =  expected[i]  -  observed[i];  dev  =  expect[i]  -  observed[i];	  	non-compiled	[CE]  cannot  find  symbol  expect	49	None	add
288	[BUG]  [BUGGY]  Integer  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  Integer  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	Integer  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }	  int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	31	None	replace
289	[BUG]  [BUGGY]  ((  double)expected[i]  -  observed[i]),  dev).doubleValue();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  double)expected[i]  -  observed[i]),  dev).doubleValue();  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)expected[i]  -  observed[i]),  dev).doubleValue();	  ((    double)expected[i]    -    observed[i]),    sumSq).doubleValue();    	non-compiled	[CE]  not  a  statement	68	None	replace
290	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)expected[i]  /  observed[i]);  dev  =  ((  double)expected[i]  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  ((  double)expected[i]  /  observed[i]);  dev  =  ((  double)expected[i]  -  observed[i]);	  dev    =    ((    double)expected[i]    -    observed[i]);    dev    =    ((    double)expected[i]    -    observed[i]);    	compilable	  [FE]  AssertionFailedError  	12	6	replace
291	[BUG]  [BUGGY]  dev  =  ((  double)expected[i]  /  observed[i]);  dev  =  ((  double)expected[i]  -  observed[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)expected[i]  /  observed[i]);  dev  =  ((  double)expected[i]  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  double)expected[i]  /  observed[i]);  dev  =  ((  double)expected[i]  -  observed[i]);	  dev    =    ((    double)expected[i]    -    observed[i]);    dev    =    ((    double)expected[i]    -    observed[i]);    	compilable	  [FE]  AssertionFailedError  	12	6	replace
292	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)expected[i]  -  observed[i]);  dev  =  ((  double)sumSq  *  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  ((  double)expected[i]  -  observed[i]);  dev  =  ((  double)sumSq  *  observed[i]);	  dev    =    ((    double)expected[i]    -    observed[i]);    dev    =    ((    double)expected[i]    -    observed[i]);    	compilable	  [FE]  AssertionFailedError  	12	6	replace
293	[BUG]  [BUGGY]  dev  =  ((  double)expected[i]  -  observed[i]);  dev  =  ((  double)sumSq  *  observed[i]);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)expected[i]  -  observed[i]);  dev  =  ((  double)sumSq  *  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  double)expected[i]  -  observed[i]);  dev  =  ((  double)sumSq  *  observed[i]);	  dev    =    ((    double)expected[i]    -    observed[i]);    dev    =    ((    double)expected[i]    -    observed[i]);    	compilable	  [FE]  AssertionFailedError  	12	6	replace
294	[BUG]  [BUGGY]  dev  =  ((  double)expected[i]  /  observed[i]);  dev  =  ((  double)sumSq[i]  -  observed[i]);  [CE]  array  required,  but  double  found  [FE]        AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)expected[i]  /  observed[i]);  dev  =  ((  double)sumSq[i]  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  double)expected[i]  /  observed[i]);  dev  =  ((  double)sumSq[i]  -  observed[i]);	  dev    =    ((    double)expected[i]    -    observed[i]);    dev    =    ((    double)expected[i]    -    observed[i]);    	non-compiled	[CE]  array  required,  but  double  found	12	None	replace
295	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  -=  observed[i]  +  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  -=  observed[i]  +  expected[i];	  dev    -=    observed[i]    -    expected[i];    	compilable	  [FE]  AssertionFailedError  	98	6	replace
296	[BUG]  [BUGGY]  dev  -=  observed[i]  +  expected[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  -=  observed[i]  +  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  -=  observed[i]  +  expected[i];	  dev    -=    observed[i]    -    expected[i];    	compilable	  [FE]  AssertionFailedError  	98	6	replace
297	[BUG]  [BUGGY]  ((  double)expected[i]  -  observed[i]),  sumSq,  0,  dev).doubleValue();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  double)expected[i]  -  observed[i]),  sumSq,  0,  dev).doubleValue();  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)expected[i]  -  observed[i]),  sumSq,  0,  dev).doubleValue();	  ((    double)expected[i]    -    observed[i]),    sumSq,    dev).doubleValue();    	non-compiled	[CE]  not  a  statement	83	None	replace
298	[BUG]  [BUGGY]  dev  =  ((  long)expected[i]  -  observed[i]);  Dev  =  ((  long)sumSq  -  observed[i]);  [CE]  cannot  find  symbol  Dev  [FE]          AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  long)expected[i]  -  observed[i]);  Dev  =  ((  long)sumSq  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  long)expected[i]  -  observed[i]);  Dev  =  ((  long)sumSq  -  observed[i]);	  dev    =    ((    long)expected[i]    -    observed[i]);    Dev    =    ((    long)expected[i]    -    observed[i]);    	non-compiled	[CE]  cannot  find  symbol  Dev	36	None	replace
299	[BUG]  [BUGGY]  dev  =  observed[i]  *  chiSquare[i];  [CE]  cannot  find  symbol  chiSquare  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  *  chiSquare[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  *  chiSquare[i];	  dev    =    observed[i]    *    expected[i];    	non-compiled	[CE]  cannot  find  symbol  chiSquare	18	None	replace
300	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  sumSq  -  observed[i];  dev  =  expected[i]  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  sumSq  -  observed[i];  dev  =  expected[i]  -  observed[i];	  dev    =    expected[i]    -    observed[i];    dev    =    expected[i]    -    observed[i];    	compilable	  [FE]  AssertionFailedError  	50	6	replace
301	[BUG]  [BUGGY]  dev  =  sumSq  -  observed[i];  dev  =  expected[i]  -  observed[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  sumSq  -  observed[i];  dev  =  expected[i]  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  sumSq  -  observed[i];  dev  =  expected[i]  -  observed[i];	  dev    =    expected[i]    -    observed[i];    dev    =    expected[i]    -    observed[i];    	compilable	  [FE]  AssertionFailedError  	50	6	replace
302	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  sumSq  *  observed[i];  dev  =  expected[i]  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  sumSq  *  observed[i];  dev  =  expected[i]  -  observed[i];	  dev    =    expected[i]    -    observed[i];    dev    =    expected[i]    -    observed[i];    	compilable	  [FE]  AssertionFailedError  	50	6	replace
303	[BUG]  [BUGGY]  dev  =  sumSq  *  observed[i];  dev  =  expected[i]  -  observed[i];  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  sumSq  *  observed[i];  dev  =  expected[i]  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  sumSq  *  observed[i];  dev  =  expected[i]  -  observed[i];	  dev    =    expected[i]    -    observed[i];    dev    =    expected[i]    -    observed[i];    	compilable	  [FE]  AssertionFailedError  	50	6	replace
304	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(isNonNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(isNonNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(isNonNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(isPositive(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
305	[BUG]  [BUGGY]  ((  double)expected[i]  /  reported[i]);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  double)expected[i]  /  reported[i]);  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)expected[i]  /  reported[i]);	  ((    double)expected[i]    /    observed[i]);    	non-compiled	[CE]  not  a  statement	6	None	replace
306	[BUG]  [BUGGY]  dev  =  expected[i]  /  observed[i];  Dev  =  observed[i]  /  expected[i];  [CE]  cannot  find  symbol  Dev  [FE]          AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  expected[i]  /  observed[i];  Dev  =  observed[i]  /  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  expected[i]  /  observed[i];  Dev  =  observed[i]  /  expected[i];	  dev    =    observed[i]    /    expected[i];    Dev    =    observed[i]    /    expected[i];    	non-compiled	[CE]  cannot  find  symbol  Dev	3	None	replace
307	[BUG]  [BUGGY]  dev  =  observed[i]  /  expected[i];  Dev  =  observed[i]  *  expected[i];  [CE]  cannot  find  symbol  Dev  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  /  expected[i];  Dev  =  observed[i]  *  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  /  expected[i];  Dev  =  observed[i]  *  expected[i];	  dev    =    observed[i]    /    expected[i];    Dev    =    observed[i]    /    expected[i];    	non-compiled	[CE]  cannot  find  symbol  Dev	3	None	replace
308	[BUG]  [BUGGY]  dev  =  observed  -  sumSq[i];  [CE]  array  required,  but  double  found  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed  -  sumSq[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed  -  sumSq[i];	  dev    =    sumSq    -    observed[i];    	non-compiled	[CE]  array  required,  but  double  found	79	None	replace
309	[BUG]  [BUGGY]  ((  double)expected[i]  -  dev);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  double)expected[i]  -  dev);  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)expected[i]  -  dev);	  ((    double)observed[i]    -    dev);    	non-compiled	[CE]  not  a  statement	88	None	replace
310	[BUG]  [BUGGY]  ((  double)observed[i]  -  dev,  sumSq);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  double)observed[i]  -  dev,  sumSq);  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)observed[i]  -  dev,  sumSq);	  ((    double)observed[i]    -    dev);    	non-compiled	[CE]  ')'  expected	88	None	replace
311	[BUG]  [BUGGY]  dev  =  expected[i]  /  observed[i];  chiSquare  =  distribution.doubleValue();  [CE]  cannot  find  symbol  chiSquare  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  expected[i]  /  observed[i];  chiSquare  =  distribution.doubleValue();  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    expected[i]    /    observed[i];    chiSquare  =  distribution.doubleValue();	  	non-compiled	[CE]  cannot  find  symbol  chiSquare	19	None	add
312	[BUG]  [BUGGY]  dev  =  observed[i]  *  expected[i];  chiSquare  =  distribution.get(i);  [CE]  cannot  find  symbol  chiSquare  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  *  expected[i];  chiSquare  =  distribution.get(i);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    *    expected[i];    chiSquare  =  distribution.get(i);	  	non-compiled	[CE]  cannot  find  symbol  chiSquare	17	None	add
313	[BUG]  [BUGGY]  Integer  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly ");  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  Integer  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly ");  }  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	Integer  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( "Unexpected  array  lengths  incorrectly ");  }	  int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected))    {    throw    new    IllegalArgumentException(   "Unexpected    array    lengths    incorrectly   ");    }    	non-compiled	[CE]  >  expected	100	None	replace
314	[BUG]  [BUGGY]  ((  double)expected[i]  /  estimated[i]).doubleValue();  [CE]  cannot  find  symbol  estimated  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  double)expected[i]  /  estimated[i]).doubleValue();  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)expected[i]  /  estimated[i]).doubleValue();	  ((    double)expected[i]    /    expected[i]).doubleValue();    	non-compiled	[CE]  cannot  find  symbol  estimated	32	None	replace
315	[BUG]  [BUGGY]  double  dev  =  observed[i]  /  sumSq;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  double  dev  =  observed[i]  /  sumSq;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	double  dev  =  observed[i]  /  sumSq;	  dev    =    observed[i]    /    expected[i];    double    dev    =    observed[i]    /    expected[i];    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	5	None	replace
316	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  long)expected[i]  /  observed[i]);  dev  =  ((  long)expected[i]  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  ((  long)expected[i]  /  observed[i]);  dev  =  ((  long)expected[i]  -  observed[i]);	  dev    =    ((    long)expected[i]    -    observed[i]);    dev    =    ((    long)expected[i]    -    observed[i]);    	compilable	  [FE]  AssertionFailedError  	35	6	replace
317	[BUG]  [BUGGY]  dev  =  ((  long)expected[i]  /  observed[i]);  dev  =  ((  long)expected[i]  -  observed[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  long)expected[i]  /  observed[i]);  dev  =  ((  long)expected[i]  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  long)expected[i]  /  observed[i]);  dev  =  ((  long)expected[i]  -  observed[i]);	  dev    =    ((    long)expected[i]    -    observed[i]);    dev    =    ((    long)expected[i]    -    observed[i]);    	compilable	  [FE]  AssertionFailedError  	35	6	replace
318	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  long)expected[i]  -  observed[i]);  dev  =  ((  long)sumSq  +  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  ((  long)expected[i]  -  observed[i]);  dev  =  ((  long)sumSq  +  observed[i]);	  dev    =    ((    long)expected[i]    -    observed[i]);    dev    =    ((    long)expected[i]    -    observed[i]);    	compilable	  [FE]  AssertionFailedError  	35	6	replace
319	[BUG]  [BUGGY]  dev  =  ((  long)expected[i]  -  observed[i]);  dev  =  ((  long)sumSq  +  observed[i]);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  long)expected[i]  -  observed[i]);  dev  =  ((  long)sumSq  +  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  long)expected[i]  -  observed[i]);  dev  =  ((  long)sumSq  +  observed[i]);	  dev    =    ((    long)expected[i]    -    observed[i]);    dev    =    ((    long)expected[i]    -    observed[i]);    	compilable	  [FE]  AssertionFailedError  	35	6	replace
320	[BUG]  [BUGGY]  ((  double)expected[i]  -  sumSq[i]);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  double)expected[i]  -  sumSq[i]);  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)expected[i]  -  sumSq[i]);	  ((    double)observed[i]    -    sumSq[i]);    	non-compiled	[CE]  not  a  statement	80	None	replace
321	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    observed[i]    /    expected[i];    dev  =  observed[i]  /  expected[i];  dev  =  expected[i]  /  expected[i];  dev  =  observed[i]  /  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev        =        observed[i]        /        expected[i];        dev    =    observed[i]    /    expected[i];    dev  =  expected[i]  /  expected[i];  dev  =  observed[i]  /  expected[i];	  	compilable	  [FE]  AssertionFailedError  	1	6	add
322	[BUG]  [BUGGY]  dev    =    observed[i]    /    expected[i];    dev  =  observed[i]  /  expected[i];  dev  =  expected[i]  /  expected[i];  dev  =  observed[i]  /  expected[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    observed[i]    /    expected[i];    dev  =  observed[i]  /  expected[i];  dev  =  expected[i]  /  expected[i];  dev  =  observed[i]  /  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev        =        observed[i]        /        expected[i];        dev    =    observed[i]    /    expected[i];    dev  =  expected[i]  /  expected[i];  dev  =  observed[i]  /  expected[i];	  	compilable	  [FE]  AssertionFailedError  	1	6	add
323	[BUG]  [BUGGY]  dev  =  ((  long)expected[i]  -  observed[i]);  ((  long)sumSq  +  observed[i]);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  long)expected[i]  -  observed[i]);  ((  long)sumSq  +  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  long)expected[i]  -  observed[i]);  ((  long)sumSq  +  observed[i]);	  dev    =    ((    long)expected[i]    -    observed[i]);    ((    long)expected[i]    -    observed[i]);    	non-compiled	[CE]  not  a  statement	38	None	replace
324	[BUG]  [BUGGY]  dev  =  observed[i]  -  expected[i];  ((  long)expected[i]  -  observed[i]);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  -  expected[i];  ((  long)expected[i]  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  -  expected[i];  ((  long)expected[i]  -  observed[i]);	  dev    =    ((    long)expected[i]    -    observed[i]);    ((    long)expected[i]    -    observed[i]);    	non-compiled	[CE]  not  a  statement	38	None	replace
325	[BUG]  [BUGGY]  dev  =  ((  long)expected[i]  -  observed[i]);  ((  long)sumSq  -  observed[i]);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  long)expected[i]  -  observed[i]);  ((  long)sumSq  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  long)expected[i]  -  observed[i]);  ((  long)sumSq  -  observed[i]);	  dev    =    ((    long)expected[i]    -    observed[i]);    ((    long)expected[i]    -    observed[i]);    	non-compiled	[CE]  not  a  statement	38	None	replace
326	[BUG]  [BUGGY]  dev    =    expected[i]    -    observed[i];    if(dev  >=  expected[i])  {  dev  =  expected[i]  -  observed[i];  }  if(dev  >=  expected[i])  {  dev  =  expected[i]  -  observed[i];  if(dev  >=  expected[i])  {  dev  =  expected[i]  -  observed[i];  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    expected[i]    -    observed[i];    if(dev  >=  expected[i])  {  dev  =  expected[i]  -  observed[i];  }  if(dev  >=  expected[i])  {  dev  =  expected[i]  -  observed[i];  if(dev  >=  expected[i])  {  dev  =  expected[i]  -  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev        =        expected[i]        -        observed[i];        if(dev    >=    expected[i])    {    dev    =    expected[i]    -    observed[i];    }    if(dev  >=  expected[i])  {  dev  =  expected[i]  -  observed[i];  if(dev  >=  expected[i])  {  dev  =  expected[i]  -  observed[i];  }	  	non-compiled	[CE]  illegal  start  of  expression	89	None	add
327	[BUG]  [BUGGY]  dev    =    expected[i]    -    observed[i];    if(dev  >=  expected[i])  {  dev  =  expected[i]  -  observed[i];  }  if(dev  >=  expected[i])  {  dev  =  expected[i]  -  observed[i];  if(dev  >=  expected[i])  {  dev  +=  expected[i]  -  observed[i];  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    expected[i]    -    observed[i];    if(dev  >=  expected[i])  {  dev  =  expected[i]  -  observed[i];  }  if(dev  >=  expected[i])  {  dev  =  expected[i]  -  observed[i];  if(dev  >=  expected[i])  {  dev  +=  expected[i]  -  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev        =        expected[i]        -        observed[i];        if(dev    >=    expected[i])    {    dev    =    expected[i]    -    observed[i];    }    if(dev  >=  expected[i])  {  dev  =  expected[i]  -  observed[i];  if(dev  >=  expected[i])  {  dev  +=  expected[i]  -  observed[i];  }	  	non-compiled	[CE]  illegal  start  of  expression	89	None	add
328	[BUG]  [BUGGY]  dev    =    expected[i]    -    observed[i];    if(dev  >=  expected[i])  {  dev  =  expected[i]  -  observed[i];  }  double  dev  =  expected[i]  -  observed[i];  if(dev  >>  expected[i])  {  dev  =  expected[i]  -  observed[i];  }  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    expected[i]    -    observed[i];    if(dev  >=  expected[i])  {  dev  =  expected[i]  -  observed[i];  }  double  dev  =  expected[i]  -  observed[i];  if(dev  >>  expected[i])  {  dev  =  expected[i]  -  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev        =        expected[i]        -        observed[i];        if(dev    >=    expected[i])    {    dev    =    expected[i]    -    observed[i];    }    double  dev  =  expected[i]  -  observed[i];  if(dev  >>  expected[i])  {  dev  =  expected[i]  -  observed[i];  }	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	89	None	add
329	[BUG]  [BUGGY]  dev  =  ((  double)expected[i]  -  observed[i]);  Dev  =  ((  double)sumSq  *  observed[i]);  [CE]  cannot  find  symbol  Dev  [FE]          AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)expected[i]  -  observed[i]);  Dev  =  ((  double)sumSq  *  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  double)expected[i]  -  observed[i]);  Dev  =  ((  double)sumSq  *  observed[i]);	  dev    =    ((    double)expected[i]    -    observed[i]);    Dev    =    ((    double)expected[i]    -    observed[i]);    	non-compiled	[CE]  cannot  find  symbol  Dev	13	None	replace
330	[BUG]  [BUGGY]  int  expected[]  =  observed[i].doubleValue()  +  dev;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  int  expected[]  =  observed[i].doubleValue()  +  dev;  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	int  expected[]  =  observed[i].doubleValue()  +  dev;	  int    expected[]    =    observed[i].doubleValue()    +    sumSq;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	55	None	replace
331	[BUG]  [BUGGY]  int  dev  =  observed[i]  /  sumSq;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  int  dev  =  observed[i]  /  sumSq;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	int  dev  =  observed[i]  /  sumSq;	  dev    =    observed[i]    /    expected[i];    int    dev    =    observed[i]    /    expected[i];    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	4	None	replace
332	[BUG]  [BUGGY]  dev  =  observed[i]  /  sumSq;  double  dev  =  observed[i]  /  sumSq;  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  /  sumSq;  double  dev  =  observed[i]  /  sumSq;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    /    sumSq;    double  dev  =  observed[i]  /  sumSq;	  	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	75	None	add
333	[BUG]  [BUGGY]  dev  =  observed[i]  /  sumSq;  chiSquare  =  distribution.doubleValue();  [CE]  cannot  find  symbol  chiSquare  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  /  sumSq;  chiSquare  =  distribution.doubleValue();  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    /    sumSq;    chiSquare  =  distribution.doubleValue();	  	non-compiled	[CE]  cannot  find  symbol  chiSquare	75	None	add
334	[BUG]  [BUGGY]  dev  =  sumSq  -  observed[i];  chiSquare.setDev(sumSq  -  observed[i]);  [CE]  cannot  find  symbol  chiSquare  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  sumSq  -  observed[i];  chiSquare.setDev(sumSq  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    sumSq    -    observed[i];    chiSquare.setDev(sumSq  -  observed[i]);	  	non-compiled	[CE]  cannot  find  symbol  chiSquare	78	None	add
335	[BUG]  [BUGGY]  double  expected[]  =  observed[i  +  sumSq.doubleValue();  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  double  expected[]  =  observed[i  +  sumSq.doubleValue();  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	double  expected[]  =  observed[i  +  sumSq.doubleValue();	  double    expected[]    =    sumSq    +    observed[i].doubleValue();    	non-compiled	[CE]  ']'  expected	69	None	replace
336	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  observed[i]  -  observed[i];	  dev    =    expected[i]    -    observed[i];    long[]    expected[i]    =    observed[i]    -    observed[i];    	compilable	  [FE]  AssertionFailedError  	54	6	replace
337	[BUG]  [BUGGY]  dev  =  observed[i]  -  observed[i];  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  -  observed[i];	  dev    =    expected[i]    -    observed[i];    long[]    expected[i]    =    observed[i]    -    observed[i];    	compilable	  [FE]  AssertionFailedError  	54	6	replace
338	[BUG]  [BUGGY]  dev  =  observed[i]  /  observed[i];  long[]  expected[i]  =  observed[i]  -  observed[i];  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  /  observed[i];  long[]  expected[i]  =  observed[i]  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  /  observed[i];  long[]  expected[i]  =  observed[i]  -  observed[i];	  dev    =    expected[i]    -    observed[i];    long[]    expected[i]    =    observed[i]    -    observed[i];    	non-compiled	[CE]  ']'  expected	54	None	replace
339	[BUG]  [BUGGY]  long[]  expected[i]  =  observed[i]  -  observed[i];  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  long[]  expected[i]  =  observed[i]  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	long[]  expected[i]  =  observed[i]  -  observed[i];	  dev    =    expected[i]    -    observed[i];    long[]    expected[i]    =    observed[i]    -    observed[i];    	non-compiled	[CE]  ']'  expected	54	None	replace
340	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  -=  observed[i]  -  expected[i];  if(dev  >  0)  {  dev  -=  observed[i]  -  expected[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev    -=    observed[i]    -    expected[i];    if(dev  >  0)  {  dev  -=  observed[i]  -  expected[i];  }	  	compilable	  [FE]  AssertionFailedError  	97	6	add
341	[BUG]  [BUGGY]  dev  -=  observed[i]  -  expected[i];  if(dev  >  0)  {  dev  -=  observed[i]  -  expected[i];  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  -=  observed[i]  -  expected[i];  if(dev  >  0)  {  dev  -=  observed[i]  -  expected[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    -=    observed[i]    -    expected[i];    if(dev  >  0)  {  dev  -=  observed[i]  -  expected[i];  }	  	compilable	  [FE]  AssertionFailedError  	97	6	add
342	[BUG]  [BUGGY]  dev  =  observed[i]  /  observed[i];  if(dev  >=  expected[i])  {  dev  =  observed[i]  /  observed[i];  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  observed[i]  /  observed[i];  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  /  observed[i];  if(dev  >=  expected[i])  {  dev  =  observed[i]  /  observed[i];  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  observed[i]  /  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    /    observed[i];    if(dev  >=  expected[i])  {  dev  =  observed[i]  /  observed[i];  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  observed[i]  /  observed[i];  }	  	non-compiled	[CE]  illegal  start  of  expression	95	None	add
343	[BUG]  [BUGGY]  dev  =  observed[i]  /  observed[i];  if(dev  >=  expected[i])  {  dev  =  observed[i]  /  observed[i];  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  observed[i]  /  reported[i];  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  /  observed[i];  if(dev  >=  expected[i])  {  dev  =  observed[i]  /  observed[i];  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  observed[i]  /  reported[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    /    observed[i];    if(dev  >=  expected[i])  {  dev  =  observed[i]  /  observed[i];  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  observed[i]  /  reported[i];  }	  	non-compiled	[CE]  illegal  start  of  expression	95	None	add
344	[BUG]  [BUGGY]  dev  =  ((  double)observed[i]  *  expected[i]);  ((  double)observed[i]  /  expected[i]);  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)observed[i]  *  expected[i]);  ((  double)observed[i]  /  expected[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  double)observed[i]  *  expected[i]);  ((  double)observed[i]  /  expected[i]);	  dev    =    ((    double)observed[i]    /    expected[i]);    ((    double)observed[i]    /    expected[i]);    	non-compiled	[CE]  not  a  statement	77	None	replace
345	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  int)expected[i]  /  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  ((  int)expected[i]  /  observed[i]);	  dev    =    ((    long)expected[i]    /    observed[i]);    	compilable	  [FE]  AssertionFailedError  	26	6	replace
346	[BUG]  [BUGGY]  dev  =  ((  int)expected[i]  /  observed[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  int)expected[i]  /  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  int)expected[i]  /  observed[i]);	  dev    =    ((    long)expected[i]    /    observed[i]);    	compilable	  [FE]  AssertionFailedError  	26	6	replace
347	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)observed[i]  *  dev);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  ((  double)observed[i]  *  dev);	  dev    =    ((    double)observed[i]    *    expected[i]);    	compilable	  [FE]  AssertionFailedError  	48	6	replace
348	[BUG]  [BUGGY]  dev  =  ((  double)observed[i]  *  dev);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)observed[i]  *  dev);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  double)observed[i]  *  dev);	  dev    =    ((    double)observed[i]    *    expected[i]);    	compilable	  [FE]  AssertionFailedError  	48	6	replace
349	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)observed[i]  /  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  ((  double)observed[i]  /  observed[i]);	  dev    =    ((    double)observed[i]    /    expected[i]);    dev    =    ((    double)observed[i]    /    expected[i]);    	compilable	  [FE]  AssertionFailedError  	61	6	replace
350	[BUG]  [BUGGY]  dev  =  ((  double)observed[i]  /  observed[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)observed[i]  /  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  double)observed[i]  /  observed[i]);	  dev    =    ((    double)observed[i]    /    expected[i]);    dev    =    ((    double)observed[i]    /    expected[i]);    	compilable	  [FE]  AssertionFailedError  	61	6	replace
351	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  int)expected[i]  *  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  ((  int)expected[i]  *  observed[i]);	  dev    =    ((    long)expected[i]    *    observed[i]);    	compilable	  [FE]  AssertionFailedError  	72	6	replace
352	[BUG]  [BUGGY]  dev  =  ((  int)expected[i]  *  observed[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  int)expected[i]  *  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  int)expected[i]  *  observed[i]);	  dev    =    ((    long)expected[i]    *    observed[i]);    	compilable	  [FE]  AssertionFailedError  	72	6	replace
353	[BUG]  [BUGGY]  ((  short)expected[i]  -  observed[i]).doubleValue();  [CE]  long  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  short)expected[i]  -  observed[i]).doubleValue();  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  short)expected[i]  -  observed[i]).doubleValue();	  ((    long)expected[i]    -    observed[i]).doubleValue();    	non-compiled	[CE]  long  cannot  be  dereferenced	84	None	replace
354	[BUG]  [BUGGY]  dev  =  ((  double)observed[i]  *  expected[i]);  Dev  =  ((  double)observed[i]  /  expected[i]);  [CE]  cannot  find  symbol  Dev  [FE]          AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)observed[i]  *  expected[i]);  Dev  =  ((  double)observed[i]  /  expected[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  double)observed[i]  *  expected[i]);  Dev  =  ((  double)observed[i]  /  expected[i]);	  dev    =    ((    double)observed[i]    /    expected[i]);    Dev    =    ((    double)observed[i]    /    expected[i]);    	non-compiled	[CE]  cannot  find  symbol  Dev	62	None	replace
355	[BUG]  [BUGGY]  dev  =  ((  double)observed[i]  /  observed[i]);  Dev  =  ((  double)observed[i]  /  expected[i]);  [CE]  cannot  find  symbol  Dev  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)observed[i]  /  observed[i]);  Dev  =  ((  double)observed[i]  /  expected[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  double)observed[i]  /  observed[i]);  Dev  =  ((  double)observed[i]  /  expected[i]);	  dev    =    ((    double)observed[i]    /    expected[i]);    Dev    =    ((    double)observed[i]    /    expected[i]);    	non-compiled	[CE]  cannot  find  symbol  Dev	62	None	replace
356	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    ((    double)expected[i]    -    observed[i]);    dev  =  ((  double)expected[i]  -  observed[i]);  dev  =  ((  long)expected[i]  -  observed[i]);  dev  =  ((  double)expected[i]  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev        =        ((        double)expected[i]        -        observed[i]);        dev    =    ((    double)expected[i]    -    observed[i]);    dev  =  ((  long)expected[i]  -  observed[i]);  dev  =  ((  double)expected[i]  -  observed[i]);	  	compilable	  [FE]  AssertionFailedError  	11	6	add
357	[BUG]  [BUGGY]  dev    =    ((    double)expected[i]    -    observed[i]);    dev  =  ((  double)expected[i]  -  observed[i]);  dev  =  ((  long)expected[i]  -  observed[i]);  dev  =  ((  double)expected[i]  -  observed[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    ((    double)expected[i]    -    observed[i]);    dev  =  ((  double)expected[i]  -  observed[i]);  dev  =  ((  long)expected[i]  -  observed[i]);  dev  =  ((  double)expected[i]  -  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev        =        ((        double)expected[i]        -        observed[i]);        dev    =    ((    double)expected[i]    -    observed[i]);    dev  =  ((  long)expected[i]  -  observed[i]);  dev  =  ((  double)expected[i]  -  observed[i]);	  	compilable	  [FE]  AssertionFailedError  	11	6	add
358	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  sumSq  -  observed[i];  if(dev  >=  0.0)  {  sumSq  =  sumSq  -  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev    =    sumSq    -    observed[i];    if(dev  >=  0.0)  {  sumSq  =  sumSq  -  observed[i];  }	  	compilable	  [FE]  AssertionFailedError  	78	6	add
359	[BUG]  [BUGGY]  dev  =  sumSq  -  observed[i];  if(dev  >=  0.0)  {  sumSq  =  sumSq  -  observed[i];  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  sumSq  -  observed[i];  if(dev  >=  0.0)  {  sumSq  =  sumSq  -  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    sumSq    -    observed[i];    if(dev  >=  0.0)  {  sumSq  =  sumSq  -  observed[i];  }	  	compilable	  [FE]  AssertionFailedError  	78	6	add
360	[BUG]  [BUGGY]  double  expected[]  =  observed[i].doubleValue()  /  SumSq;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  double  expected[]  =  observed[i].doubleValue()  /  SumSq;  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	double  expected[]  =  observed[i].doubleValue()  /  SumSq;	  double    expected[]    =    observed[i].doubleValue()    /    dev;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	91	None	replace
361	[BUG]  [BUGGY]  dev  =  expected[i]  -  observed[i];  Dev  =  observed[i]  -  observed[i];  [CE]  cannot  find  symbol  Dev  [FE]          AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  expected[i]  -  observed[i];  Dev  =  observed[i]  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  expected[i]  -  observed[i];  Dev  =  observed[i]  -  observed[i];	  dev    =    expected[i]    -    observed[i];    Dev    =    expected[i]    -    observed[i];    	non-compiled	[CE]  cannot  find  symbol  Dev	51	None	replace
362	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  -=  observed[i]  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  -=  observed[i]  -  observed[i];	  dev    =    expected[i]    -    observed[i];    if(dev    >=    expected[i])    {    dev    =    expected[i]    -    observed[i];    }    	compilable	  [FE]  AssertionFailedError  	90	6	replace
363	[BUG]  [BUGGY]  dev  -=  observed[i]  -  observed[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  -=  observed[i]  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  -=  observed[i]  -  observed[i];	  dev    =    expected[i]    -    observed[i];    if(dev    >=    expected[i])    {    dev    =    expected[i]    -    observed[i];    }    	compilable	  [FE]  AssertionFailedError  	90	6	replace
364	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  dev  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  dev  -  observed[i];	  dev    =    sumSq    -    observed[i];    	compilable	  [FE]  AssertionFailedError  	79	6	replace
365	[BUG]  [BUGGY]  dev  =  dev  -  observed[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  dev  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  dev  -  observed[i];	  dev    =    sumSq    -    observed[i];    	compilable	  [FE]  AssertionFailedError  	79	6	replace
366	[BUG]  [BUGGY]  dev  =  observed.length  -  sumSq[i];  [CE]  array  required,  but  double  found  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed.length  -  sumSq[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed.length  -  sumSq[i];	  dev    =    sumSq    -    observed[i];    	non-compiled	[CE]  array  required,  but  double  found	79	None	replace
367	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	int  i  =  0;  i  <  observed.length;  i++)  {  if(isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(isPositive(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	30	None	replace
368	[BUG]  [BUGGY]  ((  double)expected[i]  *  observed[i]),  sumSq,  dev).doubleValue();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  double)expected[i]  *  observed[i]),  sumSq,  dev).doubleValue();  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)expected[i]  *  observed[i]),  sumSq,  dev).doubleValue();	  ((    double)expected[i]    *    expected[i]).doubleValue();    	non-compiled	[CE]  not  a  statement	33	None	replace
369	[BUG]  [BUGGY]  dev  =  expected[i]  -  observed[i];  sumSq  =  observed.doubleValue();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  expected[i]  -  observed[i];  sumSq  =  observed.doubleValue();  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  expected[i]  -  observed[i];  sumSq  =  observed.doubleValue();	  dev    =    expected[i]    -    observed[i];    chiSquare    =    distribution.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
370	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    ((    double)observed[i]    /    expected[i]);    dev  =  ((  double)observed[i]  /  expected[i]);  dev  =  ((  double)observed[i]  /  observed[i]);  dev  =  ((  double)observed[i]  /  expected[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev        =        ((        double)observed[i]        /        expected[i]);        dev    =    ((    double)observed[i]    /    expected[i]);    dev  =  ((  double)observed[i]  /  observed[i]);  dev  =  ((  double)observed[i]  /  expected[i]);	  	compilable	  [FE]  AssertionFailedError  	60	6	add
371	[BUG]  [BUGGY]  dev    =    ((    double)observed[i]    /    expected[i]);    dev  =  ((  double)observed[i]  /  expected[i]);  dev  =  ((  double)observed[i]  /  observed[i]);  dev  =  ((  double)observed[i]  /  expected[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    ((    double)observed[i]    /    expected[i]);    dev  =  ((  double)observed[i]  /  expected[i]);  dev  =  ((  double)observed[i]  /  observed[i]);  dev  =  ((  double)observed[i]  /  expected[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev        =        ((        double)observed[i]        /        expected[i]);        dev    =    ((    double)observed[i]    /    expected[i]);    dev  =  ((  double)observed[i]  /  observed[i]);  dev  =  ((  double)observed[i]  /  expected[i]);	  	compilable	  [FE]  AssertionFailedError  	60	6	add
372	[BUG]  [BUGGY]  ((  double)expected[i]  *  dev);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  double)expected[i]  *  dev);  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)expected[i]  *  dev);	  ((    double)expected[i]    *    expected[i]);    	non-compiled	[CE]  not  a  statement	10	None	replace
373	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  -=  observed[i]  *  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  -=  observed[i]  *  observed[i];	  dev    -=    observed[i]    -    expected[i];    	compilable	  [FE]  AssertionFailedError  	98	6	replace
374	[BUG]  [BUGGY]  dev  -=  observed[i]  *  observed[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  -=  observed[i]  *  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  -=  observed[i]  *  observed[i];	  dev    -=    observed[i]    -    expected[i];    	compilable	  [FE]  AssertionFailedError  	98	6	replace
375	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  *  expected[i];  if(dev  >=  expected[i])  {  dev  =  observed[i]  *  expected[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev    =    observed[i]    *    expected[i];    if(dev  >=  expected[i])  {  dev  =  observed[i]  *  expected[i];  }	  	compilable	  [FE]  AssertionFailedError  	17	6	add
376	[BUG]  [BUGGY]  dev  =  observed[i]  *  expected[i];  if(dev  >=  expected[i])  {  dev  =  observed[i]  *  expected[i];  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  *  expected[i];  if(dev  >=  expected[i])  {  dev  =  observed[i]  *  expected[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    *    expected[i];    if(dev  >=  expected[i])  {  dev  =  observed[i]  *  expected[i];  }	  	compilable	  [FE]  AssertionFailedError  	17	6	add
377	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  sumSq  -  observed[i];  dev  =  observed[i]  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =  sumSq  -  observed[i];  dev  =  observed[i]  -  observed[i];	  dev    =    expected[i]    -    observed[i];    dev    =    expected[i]    -    observed[i];    	compilable	  [FE]  AssertionFailedError  	50	6	replace
378	[BUG]  [BUGGY]  dev  =  sumSq  -  observed[i];  dev  =  observed[i]  -  observed[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  sumSq  -  observed[i];  dev  =  observed[i]  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  sumSq  -  observed[i];  dev  =  observed[i]  -  observed[i];	  dev    =    expected[i]    -    observed[i];    dev    =    expected[i]    -    observed[i];    	compilable	  [FE]  AssertionFailedError  	50	6	replace
379	[BUG]  [BUGGY]  dev  =  observed[i]  -  expected[i];  if(dev  >=  expected[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  observed[i]  -  expected[i];  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  -  expected[i];  if(dev  >=  expected[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  observed[i]  -  expected[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    observed[i]    -    expected[i];    if(dev  >=  expected[i])  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  observed[i]  -  expected[i];  }	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
380	[BUG]  [BUGGY]  dev  =  expected[i]  /  observed[i];  if(dev  >=  expected[i])  {  dev  =  expected[i]  /  observed[i];  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  expected[i]  /  observed[i];  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  expected[i]  /  observed[i];  if(dev  >=  expected[i])  {  dev  =  expected[i]  /  observed[i];  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  expected[i]  /  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    expected[i]    /    observed[i];    if(dev  >=  expected[i])  {  dev  =  expected[i]  /  observed[i];  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  expected[i]  /  observed[i];  }	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
381	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  expected[i]  /  observed[i];  if(dev  >=  expected[i])  {  dev  =  expected[i]  /  observed[i];  }  else  {  sumSq  +=  dev  *  dev  /  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev    =    expected[i]    /    observed[i];    if(dev  >=  expected[i])  {  dev  =  expected[i]  /  observed[i];  }  else  {  sumSq  +=  dev  *  dev  /  observed[i];  }	  	compilable	  [FE]  AssertionFailedError  	19	6	add
382	[BUG]  [BUGGY]  dev  =  expected[i]  /  observed[i];  if(dev  >=  expected[i])  {  dev  =  expected[i]  /  observed[i];  }  else  {  sumSq  +=  dev  *  dev  /  observed[i];  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  expected[i]  /  observed[i];  if(dev  >=  expected[i])  {  dev  =  expected[i]  /  observed[i];  }  else  {  sumSq  +=  dev  *  dev  /  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev    =    expected[i]    /    observed[i];    if(dev  >=  expected[i])  {  dev  =  expected[i]  /  observed[i];  }  else  {  sumSq  +=  dev  *  dev  /  observed[i];  }	  	compilable	  [FE]  AssertionFailedError  	19	6	add
383	[BUG]  [BUGGY]  dev  =  observed[i]  /  reported[i];  [CE]  cannot  find  symbol  reported  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  /  reported[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  /  reported[i];	  dev    =    observed[i]    /    observed[i];    	non-compiled	[CE]  cannot  find  symbol  reported	96	None	replace
384	[BUG]  [BUGGY]  long  expected[]  =  observed[i].longValue();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  long  expected[]  =  observed[i].longValue();  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	long  expected[]  =  observed[i].longValue();	  long    expected[]    =    observed[i].doubleValue();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	43	None	replace
385	[BUG]  [BUGGY]  double  dev  =  ((  double)observed[i]  /  expected[i]);  [CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  double  dev  =  ((  double)observed[i]  /  expected[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	double  dev  =  ((  double)observed[i]  /  expected[i]);	  dev    =    ((    double)observed[i]    /    expected[i]);    int    dev    =    ((    double)observed[i]    /    expected[i]);    	non-compiled	[CE]  variable  dev  is  already  defined  in  method  chiSquare(double[],long[])	63	None	replace
386	[BUG]  [BUGGY]  dev  =  ((  double)expected[i]  /  observed[i].doubleValue());  [CE]  long  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  ((  double)expected[i]  /  observed[i].doubleValue());  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  ((  double)expected[i]  /  observed[i].doubleValue());	  dev    =    ((    double)expected[i]    /    observed[i]);    	non-compiled	[CE]  long  cannot  be  dereferenced	46	None	replace
387	[BUG]  [BUGGY]  dev  =  observed[i]  /  expected[i];  sumSq  =  observed.doubleValue();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev  =  observed[i]  /  expected[i];  sumSq  =  observed.doubleValue();  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =  observed[i]  /  expected[i];  sumSq  =  observed.doubleValue();	  dev    =    observed[i]    /    expected[i];    chiSquare    =    distribution.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
388	[BUG]  [BUGGY]  ((  double)observed[i]  -  dev[i]);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  double)observed[i]  -  dev[i]);  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)observed[i]  -  dev[i]);	  ((    double)observed[i]    -    sumSq[i]);    	non-compiled	[CE]  not  a  statement	80	None	replace
389	[BUG]  [BUGGY]  ((  double)expected[i]  -  observed[i]),  dev,  observed[i]).doubleValue();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  ((  double)expected[i]  -  observed[i]),  dev,  observed[i]).doubleValue();  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	((  double)expected[i]  -  observed[i]),  dev,  observed[i]).doubleValue();	  ((    double)expected[i]    -    observed[i]),    sumSq,    observed[i]).doubleValue();    	non-compiled	[CE]  not  a  statement	40	None	replace
390	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    expected[i]    -    observed[i];    dev  =  expected[i]  -  observed[i];  dev  =  observed[i]  -  observed[i];  dev  =  expected[i]  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev        =        expected[i]        -        observed[i];        dev    =    expected[i]    -    observed[i];    dev  =  observed[i]  -  observed[i];  dev  =  expected[i]  -  observed[i];	  	compilable	  [FE]  AssertionFailedError  	49	6	add
391	[BUG]  [BUGGY]  dev    =    expected[i]    -    observed[i];    dev  =  expected[i]  -  observed[i];  dev  =  observed[i]  -  observed[i];  dev  =  expected[i]  -  observed[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {      [BUGGY]  dev    =    expected[i]    -    observed[i];    dev  =  expected[i]  -  observed[i];  dev  =  observed[i]  -  observed[i];  dev  =  expected[i]  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev        =        expected[i]        -        observed[i];        dev    =    expected[i]    -    observed[i];    dev  =  observed[i]  -  observed[i];  dev  =  expected[i]  -  observed[i];	  	compilable	  [FE]  AssertionFailedError  	49	6	add
