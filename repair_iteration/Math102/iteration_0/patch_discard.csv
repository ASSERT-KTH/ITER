compilation error,70,add,[CE] ,,  if(double[] count < expected.length) { if(expected.length > 0) { throw new IllegalArgumentException(""); }
compilation error,70,add,[CE] ,,  if(double[] count < expected.length) { if(!isNaN(count)) { throw new IllegalArgumentException(""); }
compilation error,70,add,[CE] variable sumSq is already defined in method chiSquare(double[],long[]),,  double sumSq = Math.min(expected.length, observed.length);
compilation error,70,add,[CE] variable sumSq is already defined in method chiSquare(double[],long[]),,  double sumSq = Math.min(expected.length, observed.length); if(sumSq > 0.0) { throw new IllegalArgumentException(""); }
compilation error,70,add,[CE] variable sumSq is already defined in method chiSquare(double[],long[]),,  double sumSq = Math.max(expected.length, observed.length);
compilation error,74,replace,[CE] malformed floating point literal,double sumSq = 0.0d; ,double sumSq = 0.0e;
compilation error,74,replace,[CE] cannot find symbol sumSq,double sumSq = 0.0d; , 
compilation error,98,add,[CE] cannot find symbol Distribution,,  Distribution.setDegreesOfFreedom(expected.length);
compilation error,98,add,[CE] cannot find symbol Distribution,,  Distribution.setDegreesOfFreedom(expected.length - 1.0);
compilation error,98,add,[CE] cannot find symbol Distribution,,  ChiSquaredDistribution x = Distribution.getDistribution(x, observed);
compilation error,80,replace,[CE] missing return statement,return sumSq; , 
compilation error,97,add,[CE] ChiSquaredDistribution is abstract; cannot be instantiated,,  ChiSquaredDistribution distribution = new ChiSquaredDistribution();
compilation error,97,add,[CE] cannot find symbol x,,  ChiSquaredDistribution distribution =(ChiSquaredDistribution)this.x.getDistribution();
compilation error,97,add,[CE] cannot find symbol x,,  ChiSquaredDistribution distribution = x.getDistribution();
compilation error,97,add,[CE] cannot find symbol x,,  ChiSquaredDistribution distribution = getDistribution(x, observed);
compilation error,97,add,[CE] cannot find symbol,,  ChiSquaredDistribution distribution =(ChiSquaredDistribution)getDistribution();
compilation error,78,add,[CE] array required, but double found,,  sumSq += dev *(( double)dev[i] - expected[i]);
compilation error,78,add,[CE] array required, but double found,,  sumSq += dev *(( double)dev[i] - observed[i]);
compilation error,78,add,[CE] illegal start of expression,,  if(dev > 0.0) { sumSq += expected.sq * dev; if(dev > 0.0) { return sumSq; }
compilation error,75,add,[CE] illegal start of expression,,  for(int i = 0; i < observed.length; i++) { double expected =(( double)expected[i] - observed[i]);
compilation error,75,add,[CE] ')' expected,,  for(int i = 0; i < observed.length; i++) { double expected =(( double)expected[i] - observed[i]; i++) { sumSq *(( double)expected[i] - expected[i]); i++) {
compilation error,75,add,[CE] ')' expected,,  for(int i = 0; i < observed.length; i++) { double sumSq =(( double)expected[i] - observed[i]; if(i > 0) { sumSq += expected[i]; }
compilation error,75,add,[CE] ')' expected,,  for(int i = 0; i < observed.length; i++) { double expected =(( double)expected[i] - observed[i]; i++) { sumSq *(( double)expected[i] - expected[i]);
compilation error,75,add,[CE] illegal start of expression,,  for(int i = 0; i < observed.length; i++) { double sumSq =(( double)expected[i] - observed[i]);
compilation error,76,add,[CE] cannot find symbol Dev,,  sumSq = Math.sqrt(Dev.doubleToLongBits(dev)); dev = Math.sq(dev);
compilation error,76,add,[CE] cannot find symbol Dev,,  sumSq = Math.sqrt(Dev.doubleToLongBits(dev));
compilation error,76,add,[CE] cannot find symbol,,  sumSq = Math.sqrt(sumSq); dev = Math.sq(dev);
compilation error,76,add,[CE] cannot find symbol Dev,,  sumSq = Math.sqrt(Dev.doubleToLongBits(dev)); dev = Math.sq(dev / expected.length);
compilation error,76,add,[CE] cannot find symbol Dev,,  sumSq = Math.sqrt(Dev.doubleToLongBits(dev)); dev = Math.sq(dev * observed.length);
compilation error,78,replace,[CE] bad operand types for binary operator '*',sumSq += dev * dev / expected[i]; ,sumSq += observed * dev / expected[i];
compilation error,78,replace,[CE] bad operand types for binary operator '*',sumSq += dev * dev / expected[i]; ,sumSq += dev * expected / dev[i];
compilation error,78,replace,[CE] bad operand types for binary operator '*',sumSq += dev * dev / expected[i]; ,sumSq += expected * dev / dev[i];
compilation error,77,add,[CE] double cannot be dereferenced,,  sumSq += expected[i].doubleValue();
compilation error,77,add,[CE] long cannot be dereferenced,,  sumSq += expected[i] - observed[i].doubleValue();
compilation error,70,replace,[CE] cannot find symbol,if (!isPositive(expected) || !isNonNegative(observed)) { ,if(!isPositive(expected)||!isNegative(observed)) {
compilation error,70,replace,[CE] cannot find symbol,if (!isPositive(expected) || !isNonNegative(observed)) { ,if(!isNegative(expected)||!isNonNegative(observed)) {
compilation error,77,replace,[CE] array required, but double found,dev = ((double) observed[i] - expected[i]); ,dev =(( double)dev[i] - expected[i]);
compilation error,77,replace,[CE] array required, but double found,dev = ((double) observed[i] - expected[i]); ,dev =(( double)dev[i] - observed[i]);
compilation error,98,replace,[CE] cannot find symbol,return 1.0 - distribution.cumulativeProbability( chiSquare(expected, observed)); ,return 1.0 - distribution.cumulativeProbability(chiSquaredTest(expected, observed));
compilation error,80,add,[CE] illegal start of expression,,  if(dev > 0.0) { if(!isNegative(dev)) { throw new IllegalArgumentException(""); }
compilation error,80,add,[CE] illegal start of expression,,  if(dev > 0) { if(!isNegative(dev)) { throw new IllegalArgumentException(""); }
compilation error,80,add,[CE] cannot find symbol i,,  sumSq += dev / observed[i];
compilation error,66,replace,[CE] illegal start of type,if ((expected.length < 2) || (expected.length != observed.length)) { , 
compilation error,74,add,[CE] variable expected is already defined in method chiSquare(double[],long[]),,  double expected = Math.min(expected.length, observed.length);
compilation error,74,add,[CE] not a statement,,  double 0.0d = Math.min(expected.length, observed.length);
compilation error,74,add,[CE] not a statement,,  double 0.0d = Math.min(expected.length, observed.length)- expected.length;
compilation error,74,add,[CE] not a statement,,  double 0.0d = Math.min(double, observed.length);
compilation error,74,add,[CE] variable expected is already defined in method chiSquare(double[],long[]),,  double expected = Math.min(expected.length - observed.length);
compilation error,66,add,[CE] ';' expected,,  int expected.length = Math.min(expected.length, observed.length);
compilation error,66,add,[CE] ';' expected,,  int expected.length = observed.length;
compilation error,66,add,[CE] ';' expected,,  int expected.length = chiSquaredDistribution.getInstanceCount();
compilation error,66,add,[CE] ';' expected,,  int expected.length = chiSquaredDistribution.getLength();
compilation error,66,add,[CE] ';' expected,,  int expected.length = chiSquareLength();
compilation error,78,replace,[CE] cannot find symbol chiSquareTestImpl,sumSq += dev * dev / expected[i]; ,sumSq += chiSquareTestImpl * dev / expected[i];
compilation error,66,add,[CE] illegal start of expression,,  for(int i = 0; i < expected.length; i++) { if(expected.length!= observed.length) { throw new IllegalArgumentException(""); }
compilation error,66,add,[CE] variable expected is already defined in method chiSquare(double[],long[]),,  int expected = Math.min(expected.length, observed.length);
compilation error,66,add,[CE] illegal start of expression,,  for(int i = 0; i < expected.length; i++) { if(expected.length!= 0 || expected.length > 0) { throw new IllegalArgumentException(""); }
compilation error,66,add,[CE] illegal start of expression,,  for(int i = 0; i < expected.length; i++) { if(expected.length!= 1) { throw new IllegalArgumentException(""); }
compilation error,66,add,[CE] illegal start of expression,,  for(int i = 0; i < expected.length; i++) { if(expected.length!= observed.length) { return false; }
compilation error,77,add,[CE] cannot find symbol chiSquare,,  expected[i] = chiSquare.doubleToLongBits(expected[i]);
compilation error,77,add,[CE] cannot find symbol chiSquare,,  expected[i] = chiSquare.doubleValue();
compilation error,77,add,[CE] cannot find symbol chiSquare,,  expected[i] = chiSquare.doubleToLongBits(dev);
compilation error,77,add,[CE] cannot find symbol chiSquare,,  expected[i] = chiSquare.doubleToLongBits(observed[i]);
compilation error,76,replace,[CE] cannot find symbol anticipated,for (int i = 0; i < observed.length; i++) { ,for(int i = 0; i < anticipated.length; i++) {
compilation error,70,replace,[CE] no suitable method found for isNonNegative(double[]),if (!isPositive(expected) || !isNonNegative(observed)) { ,if(!isNonNegative(expected)||!isPositive(observed)) {
compilation error,70,replace,[CE] cannot find symbol,if (!isPositive(expected) || !isNonNegative(observed)) { ,if(!isVisible(expected)||!isNonNegative(observed)) {
compilation error,75,add,[CE] illegal start of expression,,  for(int i = 0; i < observed.length; i++) { if(expected[i] > expected[i]) { sumSq += expected * sumSq /(( double)expected[i]); }
compilation error,75,add,[CE] illegal start of expression,,  for(int i = 0; i < observed.length; i++) { if(expected[i] > sumSq) { sumSq += expected * sumSq /(( double)expected[i]); }
compilation error,75,add,[CE] illegal start of expression,,  for(int i = 0; i < observed.length; i++) { if(expected[i] > expected[i]) { sumSq += expected * expected /(( double)expected[i]); }
compilation error,75,add,[CE] illegal start of expression,,  for(int i = 0; i < observed.length; i++) { if(expected[i] > expected[i]) { sumSq += expected * sumSq; }
compilation error,75,add,[CE] illegal start of expression,,  for(int i = 0; i < observed.length; i++) { if(expected[i] > sumSq) { sumSq += expected * sumSq; }
compilation error,74,add,[CE] illegal start of expression,,  for(int i = 0; i < expected.length; i++) { if(expected.length!= observed.length) { throw new IllegalArgumentException(""); }
compilation error,74,add,[CE] illegal start of expression,,  for(int i = 0; i < observed.length; i++) { if(expected.length!= observed.length) { throw new IllegalArgumentException(""); }
compilation error,74,add,[CE] illegal start of expression,,  for(int i = 0; i < expected.length; i++) { if(expected.length == observed.length) { throw new IllegalArgumentException(""); }
compilation error,74,add,[CE] illegal start of expression,,  for(int i = 0; i < observed.length; i++) { if(expected.length!= expected.length) { throw new IllegalArgumentException(""); }
compilation error,74,add,[CE] illegal start of expression,,  for(int i = 0; i < expected.length; i++) { if(expected.length!= observed.length) { return false; }
compilation error,80,replace,[CE] cannot find symbol chiSquareTestImpl,return sumSq; ,return sumSq /(chiSquareTestImpl)* dev;
compilation error,80,replace,[CE] cannot find symbol chiSquareTestImpl,return sumSq; ,return sumSq * dev /(chiSquareTestImpl)* dev;
compilation error,98,replace,[CE] '.class' expected,return 1.0 - distribution.cumulativeProbability( chiSquare(expected, observed)); ,return 1.0 - distribution.cumulativeProbability(chiSquare(expected, long));
compilation error,98,replace,[CE] no suitable method found for cumulativeProbability(double,long[]),return 1.0 - distribution.cumulativeProbability( chiSquare(expected, observed)); ,return 1.0 - distribution.cumulativeProbability(chiSquare(expected, observed), observed);
compilation error,98,replace,[CE] '.class' expected,return 1.0 - distribution.cumulativeProbability( chiSquare(expected, observed)); ,return 1.0 - distribution.cumulativeProbability(chiSquare(expected, long[] observed));
compilation error,97,replace,[CE] method setDegreesOfFreedom in interface ChiSquaredDistribution cannot be applied to given types;,distribution.setDegreesOfFreedom(expected.length - 1.0); ,distribution.setDegreesOfFreedom(expected.length - 1.0, observed.length - 1.0);
compilation error,97,add,[CE] cannot find symbol x,,  ChiSquaredDistribution x =(ChiSquaredDistribution)this.x.getInstance();
compilation error,97,add,[CE] cannot find symbol,,  ChiSquaredDistribution x =(ChiSquaredDistribution)x.getDistribution();
compilation error,97,add,[CE] cannot find symbol,,  ChiSquaredDistribution x =(ChiSquaredDistribution)getDistribution();
compilation error,97,add,[CE] cannot find symbol,,  ChiSquaredDistribution x =(ChiSquaredDistribution)x.getMean();
compilation error,97,add,[CE] cannot find symbol,,  ChiSquaredDistribution x =(ChiSquaredDistribution)x.getInstance();
compilation error,76,add,[CE] bad operand types for binary operator '*',,  System.arraycopy(expected, 0, dev, 1, observed.length); sumSq += dev * expected / dev;
compilation error,76,add,[CE] cannot find symbol chiSquare,,  System.arraycopy(chiSquare, 0, dev, 1, observed.length);
compilation error,76,add,[CE] bad operand types for binary operator '*',,  System.arraycopy(expected, 0, dev, 1, observed.length); sumSq += dev * expected - dev;
compilation error,80,add,[CE] cannot find symbol chiSquareTestImpl,,  System.arraycopy(chiSquareTestImpl, observed, 0, dev, observed.length); sumSq += dev * sumSq;
compilation error,80,add,[CE] cannot find symbol chiSquaredDistribution,,  System.arraycopy(chiSquaredDistribution, observed, 0, sumSq, dev);
compilation error,80,add,[CE] cannot find symbol chiSquareTestImpl,,  System.arraycopy(chiSquareTestImpl, observed, 0, sumSq, dev);
compilation error,80,add,[CE] illegal start of expression,,  if(!isNonNegative(dev)) { if(sumSq > 0) { sumSq += dev * sumSq; }
compilation error,80,add,[CE] illegal start of expression,,  if(!isNonNegative(dev)) { if(sumSq > 0.0) { sumSq += dev * sumSq; }
compilation error,78,add,[CE] cannot find symbol chiSquare,,  sumSq += dev * chiSquare.doubleValue();
compilation error,70,add,[CE] cannot find symbol chiSquared,,  System.arraycopy(chiSquared, 0, observed, 0, expected.length);
compilation error,70,add,[CE] cannot find symbol chiSquare,,  System.arraycopy(chiSquare, 0, observed, 0, expected.length);
compilation error,70,add,[CE] illegal start of expression,,  if(expected.length!= observed.length) { if(!expected.isInfinite()) { throw new IllegalArgumentException(""); }
compilation error,98,add,[CE] cannot find symbol distributed,,  distributed.setDegreesOfFreedom(expected.length);
compilation error,97,add,[CE] cannot find symbol x,,  ChiSquaredDistribution distribution =(ChiSquaredDistribution)getDistribution(x, observed);
compilation error,97,add,[CE] cannot find symbol x,,  ChiSquaredDistribution distribution =(ChiSquaredDistribution)getDistribution(x +(long[])observed);
compilation error,97,add,[CE] cannot find symbol,,  ChiSquaredDistribution x =(ChiSquaredDistribution)x.getMillis();
compilation error,97,add,[CE] cannot find symbol X,,  ChiSquaredDistribution x =(ChiSquaredDistribution)X.getMillis();
compilation error,97,add,[CE] cannot find symbol x,,  ChiSquaredDistribution distribution =(ChiSquaredDistribution)getDistribution(x +(long[])observed / 2.0);
compilation error,75,add,[CE] illegal start of expression,,  for(int i = 0; i < expected.length; i++) { expected[i] +=(( double)expected[i] - expected[i]); if(!isNonNegative(expected[i])) { throw new IllegalArgumentException(""); }
compilation error,75,add,[CE] illegal start of expression,,  for(int i = 0; i < expected.length; i++) { expected[i] +=(( double)expected[i] - observed[i]); if(!isNonNegative(expected[i])) { throw new IllegalArgumentException(""); }
compilation error,75,add,[CE] illegal start of expression,,  for(int i = 0; i < expected.length; i++) { expected[i] +=(( double)expected[i] - expected[i]); if(!isPositive(expected)) { throw new IllegalArgumentException(""); }
compilation error,75,add,[CE] no suitable method found for isNonNegative(double[]),,  if(isNonNegative(expected)) { throw new IllegalArgumentException(""); }
compilation error,75,add,[CE] illegal start of expression,,  for(int i = 0; i < expected.length; i++) { expected[i] +=(( double)expected[i] - expected[i]); if(!isPositive(expected[i])) { throw new IllegalArgumentException(""); }
compilation error,78,add,[CE] illegal start of expression,,  if(dev > 0.0) { expected[i] = dev; if(i > 0) { sumSq += expected[i] * dev; }
compilation error,78,add,[CE] illegal start of expression,,  if(dev > 0.0) { expected[i] = dev; if(i > 0) { throw new IllegalArgumentException(""); }
compilation error,78,add,[CE] illegal start of expression,,  if(dev > 0.0) { expected[i] = false; if(dev < dev) { sumSq += observed[i] * dev; }
compilation error,78,add,[CE] ';' expected,,  sumSq += Math.sqrt(expected.length, dev));
compilation error,78,add,[CE] cannot find symbol length,,  sumSq += dev * observed[i] / distribution.length;
compilation error,98,replace,[CE] '.class' expected,return 1.0 - distribution.cumulativeProbability( chiSquare(expected, observed)); ,return 1.0 - distribution.cumulativeProbability(chiSquare(long, observed));
compilation error,98,replace,[CE] cannot find symbol token,return 1.0 - distribution.cumulativeProbability( chiSquare(expected, observed)); ,return 1.0 - distribution.cumulativeProbability(chiSquare(token, observed));
compilation error,66,add,[CE] cannot assign a value to final variable length,,  expected.length = Math.max(expected.length, observed.length);
compilation error,66,add,[CE] ';' expected,,  int expected.length = Math.max(expected.length, observed.length);
compilation error,66,add,[CE] ';' expected,,  int expected.length = Math.abs(expected.length);
compilation error,66,add,[CE] ';' expected,,  int expected.length = Math.min(expected.length - observed.length);
compilation error,70,add,[CE] illegal start of expression,,  if(isNegative()) { if(expected.length!= observed.length) { throw new IllegalArgumentException(""); }
compilation error,70,add,[CE] illegal start of expression,,  if(isNegative()) { if(!(expected.length < 0)|| expected.length > 0) { throw new IllegalArgumentException(""); }
compilation error,70,add,[CE] illegal start of expression,,  if(isNegative()) { if(expected.length == observed.length) { throw new IllegalArgumentException(""); }
compilation error,70,add,[CE] illegal start of expression,,  if(isNegative()) { if(expected.length < observed.length) { throw new IllegalArgumentException(""); }
compilation error,70,add,[CE] cannot find symbol,,  if(!isNegative(expected)) { throw new IllegalArgumentException(""); }
compilation error,76,replace,[CE] ';' expected,for (int i = 0; i < observed.length; i++) { ,for(int i = 0; i < observed.length, i++) {
compilation error,98,add,[CE] cannot find symbol Distribution,,  Distribution.setDegreesOfFreedom(observed.length - 1.0);
compilation error,98,add,[CE] cannot find symbol Distribution,,  Distribution.setDegreesOfFreedom(observed.length);
compilation error,76,add,[CE] cannot find symbol Dev,,  sumSq += Math.sqrt(Dev.doubleValue());
compilation error,76,add,[CE] cannot find symbol Dev,,  sumSq += Math.sqrt(Dev.doubleToLongBits(dev));
compilation error,74,add,[CE] no suitable method found for isNonNegative(double[]),,  if(isNonNegative(expected)) { throw new IllegalArgumentException(""); }
compilation error,74,add,[CE] no suitable method found for isNonNegative(double[]),,  if(!isNonNegative(expected)) { throw new IllegalArgumentException(""); }
compilation error,74,add,[CE] cannot find symbol,,  if(!isVoid(expected)) { throw new IllegalArgumentException(""); }
compilation error,74,add,[CE] cannot find symbol chiSquared,,  System.arraycopy(chiSquared, 0, observed, 0, observed.length);
compilation error,78,replace,[CE] array required, but double found,sumSq += dev * dev / expected[i]; ,sumSq += dev * expected.length / dev[i];
compilation error,78,replace,[CE] cannot find symbol variance,sumSq += dev * dev / expected[i]; ,sumSq += dev * variance / expected[i];
compilation error,77,add,[CE] cannot find symbol,,  expected[i] = distribution.intValue(); sumSq += distribution.intValue();
compilation error,77,add,[CE] cannot find symbol,,  expected[i] = distribution.intValue(); sumSq += distribution.intValue(expected[i] - observed[i]);
compilation error,77,add,[CE] cannot find symbol,,  expected[i] = distribution.intValue(); sumSq += distribution.intValue() * observed[i];
compilation error,75,replace,[CE] cannot find symbol cumulative,double dev = 0.0d; ,double dev =(double)dev * cumulative *(expected[0] - observed[1]);
compilation error,75,replace,[CE] variable dev might not have been initialized,double dev = 0.0d; ,double dev =(double)dev /(double)expected[0];
compilation error,80,add,[CE] method arraycopy in class System cannot be applied to given types;,,  System.arraycopy( observed, 0, sumSq, dev, observed.length);
compilation error,80,add,[CE] cannot find symbol chiSquaredDistribution,,  System.arraycopy(chiSquaredDistribution, observed[i], dev - observed[i]); sumSq += dev * dev;
compilation error,80,add,[CE] bad operand types for binary operator '*',,  sumSq += dev * distribution / observed[i];
compilation error,80,add,[CE] cannot find symbol variance,,  sumSq += dev * variance / distribution.length;
compilation error,80,add,[CE] cannot find symbol chiSquared,,  System.arraycopy(chiSquared, 0, dev, observed[i], observed[i]); sumSq += dev * dev;
