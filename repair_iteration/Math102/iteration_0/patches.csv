bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
this_action1	[BUG]  [BUGGY]    if(double[]  count  <  expected.length)  {  if(expected.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  [BUGGY]    if(double[]  count  <  expected.length)  {  if(expected.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	    if(double[]  count  <  expected.length)  {  if(expected.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  	4	None	add
2	[BUG]  [BUGGY]    if(double[]  count  <  expected.length)  {  if(!isNaN(count))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  [BUGGY]    if(double[]  count  <  expected.length)  {  if(!isNaN(count))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	    if(double[]  count  <  expected.length)  {  if(!isNaN(count))  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  	4	None	add
3	[BUG]  [BUGGY]    double  sumSq  =  Math.min(expected.length,  observed.length);  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  [BUGGY]    double  sumSq  =  Math.min(expected.length,  observed.length);  [BUGGY]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	    double  sumSq  =  Math.min(expected.length,  observed.length);		non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	4	None	add
4	[BUG]  [BUGGY]    double  sumSq  =  Math.min(expected.length,  observed.length);  if(sumSq  >  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  [BUGGY]    double  sumSq  =  Math.min(expected.length,  observed.length);  if(sumSq  >  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	    double  sumSq  =  Math.min(expected.length,  observed.length);  if(sumSq  >  0.0)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	4	None	add
5	[BUG]  [BUGGY]    double  sumSq  =  Math.max(expected.length,  observed.length);  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  [BUGGY]    double  sumSq  =  Math.max(expected.length,  observed.length);  [BUGGY]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	    double  sumSq  =  Math.max(expected.length,  observed.length);		non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	4	None	add
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]  double  sumSq  =  0.0;  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	double  sumSq  =  0.0;	double  sumSq  =  0.0d;  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	5	6
12	[BUG]  [BUGGY]  double  sumSq  =  0.0;  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]  double  sumSq  =  0.0;  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  sumSq  =  0.0;	double  sumSq  =  0.0d;  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	5	6	replace
13	[BUG]  [BUGGY]  double  sumSq  =  0.0e;  [CE]  malformed  floating  point  literal  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]  double  sumSq  =  0.0e;  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  sumSq  =  0.0e;	double  sumSq  =  0.0d;  	non-compiled	[CE]  malformed  floating  point  literal	5	None	replace
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]  double  sumSq  =(double)0.0d;  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	double  sumSq  =(double)0.0d;	double  sumSq  =  0.0d;  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	5	6
15	[BUG]  [BUGGY]  double  sumSq  =(double)0.0d;  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]  double  sumSq  =(double)0.0d;  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  sumSq  =(double)0.0d;	double  sumSq  =  0.0d;  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	5	6	replace
15	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  sumSq  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]    [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	  	double  sumSq  =  0.0d;  	non-compiled	[CE]  cannot  find  symbol  sumSq	5	None	replace
21	[BUG]  [BUGGY]    Distribution.setDegreesOfFreedom(expected.length);  [CE]  cannot  find  symbol  Distribution  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]    Distribution.setDegreesOfFreedom(expected.length);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(    chiSquare(expected,  observed));  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	    Distribution.setDegreesOfFreedom(expected.length);		non-compiled	[CE]  cannot  find  symbol  Distribution	20	None	add
22	[BUG]  [BUGGY]    Distribution.setDegreesOfFreedom(expected.length  -  1.0);  [CE]  cannot  find  symbol  Distribution  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]    Distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(    chiSquare(expected,  observed));  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	    Distribution.setDegreesOfFreedom(expected.length  -  1.0);		non-compiled	[CE]  cannot  find  symbol  Distribution	20	None	add
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]    distribution.setDegreesOfFreedom(expected.length);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(    chiSquare(expected,  observed));  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	add	    distribution.setDegreesOfFreedom(expected.length);		compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	20	6
24	[BUG]  [BUGGY]    distribution.setDegreesOfFreedom(expected.length);  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]    distribution.setDegreesOfFreedom(expected.length);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(    chiSquare(expected,  observed));  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	    distribution.setDegreesOfFreedom(expected.length);		compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	20	6	add
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]    distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(    chiSquare(expected,  observed));  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	add	    distribution.setDegreesOfFreedom(expected.length  -  1.0);		compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	20	6
25	[BUG]  [BUGGY]    distribution.setDegreesOfFreedom(expected.length  -  1.0);  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]    distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(    chiSquare(expected,  observed));  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	    distribution.setDegreesOfFreedom(expected.length  -  1.0);		compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	20	6	add
25	[BUG]  [BUGGY]    ChiSquaredDistribution  x  =  Distribution.getDistribution(x,  observed);  [CE]  cannot  find  symbol  Distribution  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]    ChiSquaredDistribution  x  =  Distribution.getDistribution(x,  observed);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(    chiSquare(expected,  observed));  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	    ChiSquaredDistribution  x  =  Distribution.getDistribution(x,  observed);		non-compiled	[CE]  cannot  find  symbol  Distribution	20	None	add
31	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  [BUGGY]  return  dev;  [BUGGY]  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  dev;	return  sumSq;  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	15	6
32	[BUG]  [BUGGY]  return  dev;  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  [BUGGY]  return  dev;  [BUGGY]  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  dev;	return  sumSq;  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	15	6	replace
32	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  [BUGGY]  return  sumSq  /  dev;  [BUGGY]  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  /  dev;	return  sumSq;  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	15	6
33	[BUG]  [BUGGY]  return  sumSq  /  dev;  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  [BUGGY]  return  sumSq  /  dev;  [BUGGY]  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /  dev;	return  sumSq;  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	15	6	replace
33	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  [BUGGY]  return  sumSq  +  dev;  [BUGGY]  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  +  dev;	return  sumSq;  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	15	6
34	[BUG]  [BUGGY]  return  sumSq  +  dev;  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  [BUGGY]  return  sumSq  +  dev;  [BUGGY]  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  +  dev;	return  sumSq;  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	15	6	replace
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  [BUGGY]  return  sumSq  *  dev;  [BUGGY]  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  *  dev;	return  sumSq;  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	15	6
35	[BUG]  [BUGGY]  return  sumSq  *  dev;  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  [BUGGY]  return  sumSq  *  dev;  [BUGGY]  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  *  dev;	return  sumSq;  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	15	6	replace
35	[BUG]  [BUGGY]    [CE]  missing  return  statement  [CONTEXT]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  [BUGGY]    [BUGGY]  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	  	return  sumSq;  	non-compiled	[CE]  missing  return  statement	15	None	replace
41	[BUG]  [BUGGY]    ChiSquaredDistribution  distribution  =  new  ChiSquaredDistribution();  [CE]  ChiSquaredDistribution  is  abstract;  cannot  be  instantiated  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  [BUGGY]    ChiSquaredDistribution  distribution  =  new  ChiSquaredDistribution();  [BUGGY]  distribution.setDegreesOfFreedom(expected.length  -  1.0);  return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	97	97	6	replace	    ChiSquaredDistribution  distribution  =  new  ChiSquaredDistribution();		non-compiled	[CE]  ChiSquaredDistribution  is  abstract;  cannot  be  instantiated	18	None	add
42	[BUG]  [BUGGY]    ChiSquaredDistribution  distribution  =(ChiSquaredDistribution)this.x.getDistribution();  [CE]  cannot  find  symbol  x  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  [BUGGY]    ChiSquaredDistribution  distribution  =(ChiSquaredDistribution)this.x.getDistribution();  [BUGGY]  distribution.setDegreesOfFreedom(expected.length  -  1.0);  return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	97	97	6	replace	    ChiSquaredDistribution  distribution  =(ChiSquaredDistribution)this.x.getDistribution();		non-compiled	[CE]  cannot  find  symbol  x	18	None	add
43	[BUG]  [BUGGY]    ChiSquaredDistribution  distribution  =  x.getDistribution();  [CE]  cannot  find  symbol  x  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  [BUGGY]    ChiSquaredDistribution  distribution  =  x.getDistribution();  [BUGGY]  distribution.setDegreesOfFreedom(expected.length  -  1.0);  return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	97	97	6	replace	    ChiSquaredDistribution  distribution  =  x.getDistribution();		non-compiled	[CE]  cannot  find  symbol  x	18	None	add
44	[BUG]  [BUGGY]    ChiSquaredDistribution  distribution  =  getDistribution(x,  observed);  [CE]  cannot  find  symbol  x  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  [BUGGY]    ChiSquaredDistribution  distribution  =  getDistribution(x,  observed);  [BUGGY]  distribution.setDegreesOfFreedom(expected.length  -  1.0);  return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	97	97	6	replace	    ChiSquaredDistribution  distribution  =  getDistribution(x,  observed);		non-compiled	[CE]  cannot  find  symbol  x	18	None	add
45	[BUG]  [BUGGY]    ChiSquaredDistribution  distribution  =(ChiSquaredDistribution)getDistribution();  [CE]  cannot  find  symbol  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  [BUGGY]    ChiSquaredDistribution  distribution  =(ChiSquaredDistribution)getDistribution();  [BUGGY]  distribution.setDegreesOfFreedom(expected.length  -  1.0);  return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	97	97	6	replace	    ChiSquaredDistribution  distribution  =(ChiSquaredDistribution)getDistribution();		non-compiled	[CE]  cannot  find  symbol	18	None	add
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]    sumSq  +=  dev  *((  double)expected[i]  -  dev);  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	    sumSq  +=  dev  *((  double)expected[i]  -  dev);		compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	14	6
52	[BUG]  [BUGGY]    sumSq  +=  dev  *((  double)expected[i]  -  dev);  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]    sumSq  +=  dev  *((  double)expected[i]  -  dev);  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	    sumSq  +=  dev  *((  double)expected[i]  -  dev);		compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	14	6	add
52	[BUG]  [BUGGY]    sumSq  +=  dev  *((  double)dev[i]  -  expected[i]);  [CE]  array  required,  but  double  found  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]    sumSq  +=  dev  *((  double)dev[i]  -  expected[i]);  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	    sumSq  +=  dev  *((  double)dev[i]  -  expected[i]);		non-compiled	[CE]  array  required,  but  double  found	14	None	add
53	[BUG]  [BUGGY]    sumSq  +=  dev  *((  double)dev[i]  -  observed[i]);  [CE]  array  required,  but  double  found  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]    sumSq  +=  dev  *((  double)dev[i]  -  observed[i]);  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	    sumSq  +=  dev  *((  double)dev[i]  -  observed[i]);		non-compiled	[CE]  array  required,  but  double  found	14	None	add
54	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]    sumSq  +=  dev  *((  double)expected[i]  /  dev);  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	    sumSq  +=  dev  *((  double)expected[i]  /  dev);		compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	14	6
55	[BUG]  [BUGGY]    sumSq  +=  dev  *((  double)expected[i]  /  dev);  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]    sumSq  +=  dev  *((  double)expected[i]  /  dev);  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	    sumSq  +=  dev  *((  double)expected[i]  /  dev);		compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	14	6	add
55	[BUG]  [BUGGY]    if(dev  >  0.0)  {  sumSq  +=  expected.sq  *  dev;  if(dev  >  0.0)  {  return  sumSq;  }  [CE]  illegal  start  of  expression  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]    if(dev  >  0.0)  {  sumSq  +=  expected.sq  *  dev;  if(dev  >  0.0)  {  return  sumSq;  }  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	    if(dev  >  0.0)  {  sumSq  +=  expected.sq  *  dev;  if(dev  >  0.0)  {  return  sumSq;  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
61	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  observed.length;  i++)  {  double  expected  =((  double)expected[i]  -  observed[i]);  [CE]  illegal  start  of  expression  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]    for(int  i  =  0;  i  <  observed.length;  i++)  {  double  expected  =((  double)expected[i]  -  observed[i]);  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	    for(int  i  =  0;  i  <  observed.length;  i++)  {  double  expected  =((  double)expected[i]  -  observed[i]);		non-compiled	[CE]  illegal  start  of  expression	8	None	add
62	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  observed.length;  i++)  {  double  expected  =((  double)expected[i]  -  observed[i];  i++)  {  sumSq  *((  double)expected[i]  -  expected[i]);  i++)  {  [CE]  ')'  expected  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]    for(int  i  =  0;  i  <  observed.length;  i++)  {  double  expected  =((  double)expected[i]  -  observed[i];  i++)  {  sumSq  *((  double)expected[i]  -  expected[i]);  i++)  {  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	    for(int  i  =  0;  i  <  observed.length;  i++)  {  double  expected  =((  double)expected[i]  -  observed[i];  i++)  {  sumSq  *((  double)expected[i]  -  expected[i]);  i++)  {		non-compiled	[CE]  ')'  expected	8	None	add
63	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  observed.length;  i++)  {  double  sumSq  =((  double)expected[i]  -  observed[i];  if(i  >  0)  {  sumSq  +=  expected[i];  }  [CE]  ')'  expected  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]    for(int  i  =  0;  i  <  observed.length;  i++)  {  double  sumSq  =((  double)expected[i]  -  observed[i];  if(i  >  0)  {  sumSq  +=  expected[i];  }  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	    for(int  i  =  0;  i  <  observed.length;  i++)  {  double  sumSq  =((  double)expected[i]  -  observed[i];  if(i  >  0)  {  sumSq  +=  expected[i];  }		non-compiled	[CE]  ')'  expected	8	None	add
64	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  observed.length;  i++)  {  double  expected  =((  double)expected[i]  -  observed[i];  i++)  {  sumSq  *((  double)expected[i]  -  expected[i]);  [CE]  ')'  expected  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]    for(int  i  =  0;  i  <  observed.length;  i++)  {  double  expected  =((  double)expected[i]  -  observed[i];  i++)  {  sumSq  *((  double)expected[i]  -  expected[i]);  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	    for(int  i  =  0;  i  <  observed.length;  i++)  {  double  expected  =((  double)expected[i]  -  observed[i];  i++)  {  sumSq  *((  double)expected[i]  -  expected[i]);		non-compiled	[CE]  ')'  expected	8	None	add
65	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  observed.length;  i++)  {  double  sumSq  =((  double)expected[i]  -  observed[i]);  [CE]  illegal  start  of  expression  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]    for(int  i  =  0;  i  <  observed.length;  i++)  {  double  sumSq  =((  double)expected[i]  -  observed[i]);  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	    for(int  i  =  0;  i  <  observed.length;  i++)  {  double  sumSq  =((  double)expected[i]  -  observed[i]);		non-compiled	[CE]  illegal  start  of  expression	8	None	add
71	[BUG]  [BUGGY]    sumSq  =  Math.sqrt(Dev.doubleToLongBits(dev));  dev  =  Math.sq(dev);  [CE]  cannot  find  symbol  Dev  [CONTEXT]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  [BUGGY]    sumSq  =  Math.sqrt(Dev.doubleToLongBits(dev));  dev  =  Math.sq(dev);  [BUGGY]  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	    sumSq  =  Math.sqrt(Dev.doubleToLongBits(dev));  dev  =  Math.sq(dev);		non-compiled	[CE]  cannot  find  symbol  Dev	10	None	add
72	[BUG]  [BUGGY]    sumSq  =  Math.sqrt(Dev.doubleToLongBits(dev));  [CE]  cannot  find  symbol  Dev  [CONTEXT]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  [BUGGY]    sumSq  =  Math.sqrt(Dev.doubleToLongBits(dev));  [BUGGY]  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	    sumSq  =  Math.sqrt(Dev.doubleToLongBits(dev));		non-compiled	[CE]  cannot  find  symbol  Dev	10	None	add
73	[BUG]  [BUGGY]    sumSq  =  Math.sqrt(sumSq);  dev  =  Math.sq(dev);  [CE]  cannot  find  symbol  [CONTEXT]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  [BUGGY]    sumSq  =  Math.sqrt(sumSq);  dev  =  Math.sq(dev);  [BUGGY]  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	    sumSq  =  Math.sqrt(sumSq);  dev  =  Math.sq(dev);		non-compiled	[CE]  cannot  find  symbol	10	None	add
74	[BUG]  [BUGGY]    sumSq  =  Math.sqrt(Dev.doubleToLongBits(dev));  dev  =  Math.sq(dev  /  expected.length);  [CE]  cannot  find  symbol  Dev  [CONTEXT]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  [BUGGY]    sumSq  =  Math.sqrt(Dev.doubleToLongBits(dev));  dev  =  Math.sq(dev  /  expected.length);  [BUGGY]  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	    sumSq  =  Math.sqrt(Dev.doubleToLongBits(dev));  dev  =  Math.sq(dev  /  expected.length);		non-compiled	[CE]  cannot  find  symbol  Dev	10	None	add
75	[BUG]  [BUGGY]    sumSq  =  Math.sqrt(Dev.doubleToLongBits(dev));  dev  =  Math.sq(dev  *  observed.length);  [CE]  cannot  find  symbol  Dev  [CONTEXT]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  [BUGGY]    sumSq  =  Math.sqrt(Dev.doubleToLongBits(dev));  dev  =  Math.sq(dev  *  observed.length);  [BUGGY]  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	    sumSq  =  Math.sqrt(Dev.doubleToLongBits(dev));  dev  =  Math.sq(dev  *  observed.length);		non-compiled	[CE]  cannot  find  symbol  Dev	10	None	add
81	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]  sumSq  +=  dev  *  sumSq  /  expected[i];  [BUGGY]  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  *  sumSq  /  expected[i];	sumSq  +=  dev  *  dev  /  expected[i];  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	13	6
82	[BUG]  [BUGGY]  sumSq  +=  dev  *  sumSq  /  expected[i];  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]  sumSq  +=  dev  *  sumSq  /  expected[i];  [BUGGY]  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  sumSq  /  expected[i];	sumSq  +=  dev  *  dev  /  expected[i];  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	13	6	replace
82	[BUG]  [BUGGY]  sumSq  +=  observed  *  dev  /  expected[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]  sumSq  +=  observed  *  dev  /  expected[i];  [BUGGY]  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed  *  dev  /  expected[i];	sumSq  +=  dev  *  dev  /  expected[i];  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	13	None	replace
83	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected  /  dev[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]  sumSq  +=  dev  *  expected  /  dev[i];  [BUGGY]  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  expected  /  dev[i];	sumSq  +=  dev  *  dev  /  expected[i];  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	13	None	replace
84	[BUG]  [BUGGY]  sumSq  +=  expected  *  dev  /  dev[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]  sumSq  +=  expected  *  dev  /  dev[i];  [BUGGY]  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  expected  *  dev  /  dev[i];	sumSq  +=  dev  *  dev  /  expected[i];  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	13	None	replace
91	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]    sumSq  +=((  double)observed[i]  -  expected[i]);  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	    sumSq  +=((  double)observed[i]  -  expected[i]);		compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	12	6
92	[BUG]  [BUGGY]    sumSq  +=((  double)observed[i]  -  expected[i]);  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]    sumSq  +=((  double)observed[i]  -  expected[i]);  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	    sumSq  +=((  double)observed[i]  -  expected[i]);		compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	12	6	add
92	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]    sumSq  +=  observed[i]  -  expected[i];  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	    sumSq  +=  observed[i]  -  expected[i];		compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	12	6
93	[BUG]  [BUGGY]    sumSq  +=  observed[i]  -  expected[i];  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]    sumSq  +=  observed[i]  -  expected[i];  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	    sumSq  +=  observed[i]  -  expected[i];		compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	12	6	add
93	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]    sumSq  +=  expected[i]  -  observed[i];  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	    sumSq  +=  expected[i]  -  observed[i];		compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	12	6
94	[BUG]  [BUGGY]    sumSq  +=  expected[i]  -  observed[i];  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]    sumSq  +=  expected[i]  -  observed[i];  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	    sumSq  +=  expected[i]  -  observed[i];		compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	12	6	add
94	[BUG]  [BUGGY]    sumSq  +=  expected[i].doubleValue();  [CE]  double  cannot  be  dereferenced  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]    sumSq  +=  expected[i].doubleValue();  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	    sumSq  +=  expected[i].doubleValue();		non-compiled	[CE]  double  cannot  be  dereferenced	12	None	add
95	[BUG]  [BUGGY]    sumSq  +=  expected[i]  -  observed[i].doubleValue();  [CE]  long  cannot  be  dereferenced  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]    sumSq  +=  expected[i]  -  observed[i].doubleValue();  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	    sumSq  +=  expected[i]  -  observed[i].doubleValue();		non-compiled	[CE]  long  cannot  be  dereferenced	12	None	add
102	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  [BUGGY]  if(!isPositive(expected)&&!isNonNegative(observed))  {  [BUGGY]  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	add	if(!isPositive(expected)&&!isNonNegative(observed))  {	if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	3	6
103	[BUG]  [BUGGY]  if(!isPositive(expected)&&!isNonNegative(observed))  {  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  [BUGGY]  if(!isPositive(expected)&&!isNonNegative(observed))  {  [BUGGY]  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	if(!isPositive(expected)&&!isNonNegative(observed))  {	if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	3	6	replace
103	[BUG]  [BUGGY]  if(!isPositive(expected)||!isNegative(observed))  {  [CE]  cannot  find  symbol  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  [BUGGY]  if(!isPositive(expected)||!isNegative(observed))  {  [BUGGY]  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	if(!isPositive(expected)||!isNegative(observed))  {	if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
104	[BUG]  [BUGGY]  if(!isNegative(expected)||!isNonNegative(observed))  {  [CE]  cannot  find  symbol  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  [BUGGY]  if(!isNegative(expected)||!isNonNegative(observed))  {  [BUGGY]  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	if(!isNegative(expected)||!isNonNegative(observed))  {	if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
112	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]  dev  =((  double)observed[i]  /  expected[i]);  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =((  double)observed[i]  /  expected[i]);	dev  =  ((double)  observed[i]  -  expected[i]);  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	11	6
113	[BUG]  [BUGGY]  dev  =((  double)observed[i]  /  expected[i]);  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]  dev  =((  double)observed[i]  /  expected[i]);  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =((  double)observed[i]  /  expected[i]);	dev  =  ((double)  observed[i]  -  expected[i]);  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	11	6	replace
113	[BUG]  [BUGGY]  dev  =((  double)dev[i]  -  expected[i]);  [CE]  array  required,  but  double  found  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]  dev  =((  double)dev[i]  -  expected[i]);  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =((  double)dev[i]  -  expected[i]);	dev  =  ((double)  observed[i]  -  expected[i]);  	non-compiled	[CE]  array  required,  but  double  found	11	None	replace
114	[BUG]  [BUGGY]  dev  =((  double)dev[i]  -  observed[i]);  [CE]  array  required,  but  double  found  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]  dev  =((  double)dev[i]  -  observed[i]);  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =((  double)dev[i]  -  observed[i]);	dev  =  ((double)  observed[i]  -  expected[i]);  	non-compiled	[CE]  array  required,  but  double  found	11	None	replace
122	[BUG]  [BUGGY]  [FE]  StackOverflowError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(chiSquareTest(expected,  observed));  [BUGGY]  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	add	return  1.0  -  distribution.cumulativeProbability(chiSquareTest(expected,  observed));	return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  	compilable	  [FE]  StackOverflowError  testChiSquareLargeTestStatistic	19	6
123	[BUG]  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(chiSquareTest(expected,  observed));  [FE]  StackOverflowError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(chiSquareTest(expected,  observed));  [BUGGY]  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	return  1.0  -  distribution.cumulativeProbability(chiSquareTest(expected,  observed));	return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  	compilable	  [FE]  StackOverflowError  testChiSquareLargeTestStatistic	19	6	replace
123	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]  return  1.0  /  distribution.cumulativeProbability(chiSquare(expected,  observed));  [BUGGY]  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	add	return  1.0  /  distribution.cumulativeProbability(chiSquare(expected,  observed));	return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	19	6
124	[BUG]  [BUGGY]  return  1.0  /  distribution.cumulativeProbability(chiSquare(expected,  observed));  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]  return  1.0  /  distribution.cumulativeProbability(chiSquare(expected,  observed));  [BUGGY]  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	return  1.0  /  distribution.cumulativeProbability(chiSquare(expected,  observed));	return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	19	6	replace
124	[BUG]  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(chiSquaredTest(expected,  observed));  [CE]  cannot  find  symbol  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(chiSquaredTest(expected,  observed));  [BUGGY]  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	return  1.0  -  distribution.cumulativeProbability(chiSquaredTest(expected,  observed));	return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  	non-compiled	[CE]  cannot  find  symbol	19	None	replace
132	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  [BUGGY]  for(int  i  =  2;  i  <  observed.length;  i++)  {  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	add	for(int  i  =  2;  i  <  observed.length;  i++)  {	for  (int  i  =  0;  i  <  observed.length;  i++)  {  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	9	6
133	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  observed.length;  i++)  {  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  [BUGGY]  for(int  i  =  2;  i  <  observed.length;  i++)  {  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int  i  =  2;  i  <  observed.length;  i++)  {	for  (int  i  =  0;  i  <  observed.length;  i++)  {  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	9	6	replace
133	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	add	for(int  i  =  0;  i  <  expected.length;  i++)  {	for  (int  i  =  0;  i  <  observed.length;  i++)  {  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	9	6
134	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {	for  (int  i  =  0;  i  <  observed.length;  i++)  {  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	9	6	replace
134	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  [BUGGY]  for(int  i  =  1;  i  <  observed.length;  i++)  {  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	add	for(int  i  =  1;  i  <  observed.length;  i++)  {	for  (int  i  =  0;  i  <  observed.length;  i++)  {  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	9	6
135	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  observed.length;  i++)  {  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  [BUGGY]  for(int  i  =  1;  i  <  observed.length;  i++)  {  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int  i  =  1;  i  <  observed.length;  i++)  {	for  (int  i  =  0;  i  <  observed.length;  i++)  {  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	9	6	replace
141	[BUG]  [BUGGY]    if(dev  >  0.0)  {  if(!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  [BUGGY]    if(dev  >  0.0)  {  if(!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	    if(dev  >  0.0)  {  if(!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
142	[BUG]  [BUGGY]    if(dev  >  0)  {  if(!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  [BUGGY]    if(dev  >  0)  {  if(!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	    if(dev  >  0)  {  if(!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
145	[BUG]  [BUGGY]    sumSq  +=  dev  /  observed[i];  [CE]  cannot  find  symbol  i  [CONTEXT]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  [BUGGY]    sumSq  +=  dev  /  observed[i];  [BUGGY]  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	    sumSq  +=  dev  /  observed[i];		non-compiled	[CE]  cannot  find  symbol  i	16	None	add
152	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  [BUGGY]  distribution.setDegreesOfFreedom(expected.length  /  1.0);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	97	97	6	add	distribution.setDegreesOfFreedom(expected.length  /  1.0);	distribution.setDegreesOfFreedom(expected.length  -  1.0);  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	17	6
153	[BUG]  [BUGGY]  distribution.setDegreesOfFreedom(expected.length  /  1.0);  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  [BUGGY]  distribution.setDegreesOfFreedom(expected.length  /  1.0);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	97	97	6	replace	distribution.setDegreesOfFreedom(expected.length  /  1.0);	distribution.setDegreesOfFreedom(expected.length  -  1.0);  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	17	6	replace
153	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  [BUGGY]  distribution.setDegreesOfFreedom(expected.length  *  1.0);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	97	97	6	add	distribution.setDegreesOfFreedom(expected.length  *  1.0);	distribution.setDegreesOfFreedom(expected.length  -  1.0);  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	17	6
154	[BUG]  [BUGGY]  distribution.setDegreesOfFreedom(expected.length  *  1.0);  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  [BUGGY]  distribution.setDegreesOfFreedom(expected.length  *  1.0);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	97	97	6	replace	distribution.setDegreesOfFreedom(expected.length  *  1.0);	distribution.setDegreesOfFreedom(expected.length  -  1.0);  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	17	6	replace
161	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]  double  dev  =  0.0;  [BUGGY]  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	add	double  dev  =  0.0;	double  dev  =  0.0d;  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	7	6
162	[BUG]  [BUGGY]  double  dev  =  0.0;  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]  double  dev  =  0.0;  [BUGGY]  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double  dev  =  0.0;	double  dev  =  0.0d;  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	7	6	replace
163	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]  double  dev  =  1.0;  [BUGGY]  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	add	double  dev  =  1.0;	double  dev  =  0.0d;  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	7	6
164	[BUG]  [BUGGY]  double  dev  =  1.0;  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]  double  dev  =  1.0;  [BUGGY]  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double  dev  =  1.0;	double  dev  =  0.0d;  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	7	6	replace
164	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]  double  dev  =  1.0d;  [BUGGY]  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	add	double  dev  =  1.0d;	double  dev  =  0.0d;  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	7	6
165	[BUG]  [BUGGY]  double  dev  =  1.0d;  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]  double  dev  =  1.0d;  [BUGGY]  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double  dev  =  1.0d;	double  dev  =  0.0d;  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	7	6	replace
171	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]  if((  observed.length  <  expected.length)||(expected.length!=  observed.length))  {  [BUGGY]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	add	if((  observed.length  <  expected.length)||(expected.length!=  observed.length))  {	if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	1	6
172	[BUG]  [BUGGY]  if((  observed.length  <  expected.length)||(expected.length!=  observed.length))  {  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]  if((  observed.length  <  expected.length)||(expected.length!=  observed.length))  {  [BUGGY]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	if((  observed.length  <  expected.length)||(expected.length!=  observed.length))  {	if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	1	6	replace
172	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]  if((  observed.length  <  2)||(expected.length!=  observed.length))  {  [BUGGY]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	add	if((  observed.length  <  2)||(expected.length!=  observed.length))  {	if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	1	6
173	[BUG]  [BUGGY]  if((  observed.length  <  2)||(expected.length!=  observed.length))  {  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]  if((  observed.length  <  2)||(expected.length!=  observed.length))  {  [BUGGY]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	if((  observed.length  <  2)||(expected.length!=  observed.length))  {	if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	1	6	replace
173	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]  if((  expected.length  <  1)||(expected.length!=  observed.length))  {  [BUGGY]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	add	if((  expected.length  <  1)||(expected.length!=  observed.length))  {	if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	1	6
174	[BUG]  [BUGGY]  if((  expected.length  <  1)||(expected.length!=  observed.length))  {  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]  if((  expected.length  <  1)||(expected.length!=  observed.length))  {  [BUGGY]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	if((  expected.length  <  1)||(expected.length!=  observed.length))  {	if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	1	6	replace
174	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]  if((  observed.length  <  1)||(expected.length!=  observed.length))  {  [BUGGY]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	add	if((  observed.length  <  1)||(expected.length!=  observed.length))  {	if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	1	6
175	[BUG]  [BUGGY]  if((  observed.length  <  1)||(expected.length!=  observed.length))  {  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]  if((  observed.length  <  1)||(expected.length!=  observed.length))  {  [BUGGY]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	if((  observed.length  <  1)||(expected.length!=  observed.length))  {	if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	1	6	replace
175	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]    [BUGGY]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	  	if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  	non-compiled	[CE]  illegal  start  of  type	1	None	replace
181	[BUG]  [BUGGY]    double  expected  =  Math.min(expected.length,  observed.length);  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]    double  expected  =  Math.min(expected.length,  observed.length);  [BUGGY]  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	    double  expected  =  Math.min(expected.length,  observed.length);		non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	6	None	add
182	[BUG]  [BUGGY]    double  0.0d  =  Math.min(expected.length,  observed.length);  [CE]  not  a  statement  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]    double  0.0d  =  Math.min(expected.length,  observed.length);  [BUGGY]  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	    double  0.0d  =  Math.min(expected.length,  observed.length);		non-compiled	[CE]  not  a  statement	6	None	add
183	[BUG]  [BUGGY]    double  0.0d  =  Math.min(expected.length,  observed.length)-  expected.length;  [CE]  not  a  statement  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]    double  0.0d  =  Math.min(expected.length,  observed.length)-  expected.length;  [BUGGY]  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	    double  0.0d  =  Math.min(expected.length,  observed.length)-  expected.length;		non-compiled	[CE]  not  a  statement	6	None	add
184	[BUG]  [BUGGY]    double  0.0d  =  Math.min(double,  observed.length);  [CE]  not  a  statement  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]    double  0.0d  =  Math.min(double,  observed.length);  [BUGGY]  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	    double  0.0d  =  Math.min(double,  observed.length);		non-compiled	[CE]  not  a  statement	6	None	add
185	[BUG]  [BUGGY]    double  expected  =  Math.min(expected.length  -  observed.length);  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]    double  expected  =  Math.min(expected.length  -  observed.length);  [BUGGY]  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	    double  expected  =  Math.min(expected.length  -  observed.length);		non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	6	None	add
191	[BUG]  [BUGGY]    int  expected.length  =  Math.min(expected.length,  observed.length);  [CE]  ';'  expected  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]    int  expected.length  =  Math.min(expected.length,  observed.length);  [BUGGY]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	    int  expected.length  =  Math.min(expected.length,  observed.length);		non-compiled	[CE]  ';'  expected	2	None	add
192	[BUG]  [BUGGY]    int  expected.length  =  observed.length;  [CE]  ';'  expected  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]    int  expected.length  =  observed.length;  [BUGGY]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	    int  expected.length  =  observed.length;		non-compiled	[CE]  ';'  expected	2	None	add
193	[BUG]  [BUGGY]    int  expected.length  =  chiSquaredDistribution.getInstanceCount();  [CE]  ';'  expected  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]    int  expected.length  =  chiSquaredDistribution.getInstanceCount();  [BUGGY]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	    int  expected.length  =  chiSquaredDistribution.getInstanceCount();		non-compiled	[CE]  ';'  expected	2	None	add
194	[BUG]  [BUGGY]    int  expected.length  =  chiSquaredDistribution.getLength();  [CE]  ';'  expected  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]    int  expected.length  =  chiSquaredDistribution.getLength();  [BUGGY]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	    int  expected.length  =  chiSquaredDistribution.getLength();		non-compiled	[CE]  ';'  expected	2	None	add
195	[BUG]  [BUGGY]    int  expected.length  =  chiSquareLength();  [CE]  ';'  expected  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]    int  expected.length  =  chiSquareLength();  [BUGGY]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	    int  expected.length  =  chiSquareLength();		non-compiled	[CE]  ';'  expected	2	None	add
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]  sumSq  -=  dev  *  sumSq  /  expected[i];  [BUGGY]  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  -=  dev  *  sumSq  /  expected[i];	sumSq  +=  dev  *  dev  /  expected[i];  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	13	6
4	[BUG]  [BUGGY]  sumSq  -=  dev  *  sumSq  /  expected[i];  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]  sumSq  -=  dev  *  sumSq  /  expected[i];  [BUGGY]  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  -=  dev  *  sumSq  /  expected[i];	sumSq  +=  dev  *  dev  /  expected[i];  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	13	6	replace
4	[BUG]  [BUGGY]  sumSq  +=  chiSquareTestImpl  *  dev  /  expected[i];  [CE]  cannot  find  symbol  chiSquareTestImpl  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]  sumSq  +=  chiSquareTestImpl  *  dev  /  expected[i];  [BUGGY]  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  chiSquareTestImpl  *  dev  /  expected[i];	sumSq  +=  dev  *  dev  /  expected[i];  	non-compiled	[CE]  cannot  find  symbol  chiSquareTestImpl	13	None	replace
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]  if(expected.length!=  observed.length)  {  [BUGGY]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	add	if(expected.length!=  observed.length)  {	if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	1	6
22	[BUG]  [BUGGY]  if(expected.length!=  observed.length)  {  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]  if(expected.length!=  observed.length)  {  [BUGGY]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	if(expected.length!=  observed.length)  {	if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	1	6	replace
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]  if(expected.length!=  expected.length)  {  [BUGGY]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	add	if(expected.length!=  expected.length)  {	if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	1	6
23	[BUG]  [BUGGY]  if(expected.length!=  expected.length)  {  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]  if(expected.length!=  expected.length)  {  [BUGGY]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	if(expected.length!=  expected.length)  {	if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	1	6	replace
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]  if(expected.length!=  observed.length  ||  expected.length!=  observed.length)  {  [BUGGY]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	add	if(expected.length!=  observed.length  ||  expected.length!=  observed.length)  {	if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	1	6
24	[BUG]  [BUGGY]  if(expected.length!=  observed.length  ||  expected.length!=  observed.length)  {  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]  if(expected.length!=  observed.length  ||  expected.length!=  observed.length)  {  [BUGGY]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	if(expected.length!=  observed.length  ||  expected.length!=  observed.length)  {	if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	1	6	replace
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]  if(observed.length  <  expected.length)  {  [BUGGY]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	add	if(observed.length  <  expected.length)  {	if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	1	6
25	[BUG]  [BUGGY]  if(observed.length  <  expected.length)  {  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]  if(observed.length  <  expected.length)  {  [BUGGY]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	if(observed.length  <  expected.length)  {	if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	1	6	replace
41	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected.length!=  observed.length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]    for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected.length!=  observed.length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	    for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected.length!=  observed.length)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
42	[BUG]  [BUGGY]    int  expected  =  Math.min(expected.length,  observed.length);  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]    int  expected  =  Math.min(expected.length,  observed.length);  [BUGGY]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	    int  expected  =  Math.min(expected.length,  observed.length);		non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	2	None	add
43	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected.length!=  0  ||  expected.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]    for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected.length!=  0  ||  expected.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	    for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected.length!=  0  ||  expected.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
44	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected.length!=  1)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]    for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected.length!=  1)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	    for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected.length!=  1)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
45	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected.length!=  observed.length)  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]    for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected.length!=  observed.length)  {  return  false;  }  [BUGGY]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	    for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected.length!=  observed.length)  {  return  false;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
61	[BUG]  [BUGGY]    expected[i]  =  chiSquare.doubleToLongBits(expected[i]);  [CE]  cannot  find  symbol  chiSquare  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]    expected[i]  =  chiSquare.doubleToLongBits(expected[i]);  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	    expected[i]  =  chiSquare.doubleToLongBits(expected[i]);		non-compiled	[CE]  cannot  find  symbol  chiSquare	12	None	add
62	[BUG]  [BUGGY]    expected[i]  =  chiSquare.doubleValue();  [CE]  cannot  find  symbol  chiSquare  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]    expected[i]  =  chiSquare.doubleValue();  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	    expected[i]  =  chiSquare.doubleValue();		non-compiled	[CE]  cannot  find  symbol  chiSquare	12	None	add
63	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]    expected[i]  =  Math.max(expected[i],  dev);  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	    expected[i]  =  Math.max(expected[i],  dev);		compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	12	6
64	[BUG]  [BUGGY]    expected[i]  =  Math.max(expected[i],  dev);  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]    expected[i]  =  Math.max(expected[i],  dev);  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	    expected[i]  =  Math.max(expected[i],  dev);		compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	12	6	add
64	[BUG]  [BUGGY]    expected[i]  =  chiSquare.doubleToLongBits(dev);  [CE]  cannot  find  symbol  chiSquare  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]    expected[i]  =  chiSquare.doubleToLongBits(dev);  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	    expected[i]  =  chiSquare.doubleToLongBits(dev);		non-compiled	[CE]  cannot  find  symbol  chiSquare	12	None	add
65	[BUG]  [BUGGY]    expected[i]  =  chiSquare.doubleToLongBits(observed[i]);  [CE]  cannot  find  symbol  chiSquare  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]    expected[i]  =  chiSquare.doubleToLongBits(observed[i]);  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	    expected[i]  =  chiSquare.doubleToLongBits(observed[i]);		non-compiled	[CE]  cannot  find  symbol  chiSquare	12	None	add
84	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  anticipated.length;  i++)  {  [CE]  cannot  find  symbol  anticipated  [CONTEXT]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  [BUGGY]  for(int  i  =  0;  i  <  anticipated.length;  i++)  {  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int  i  =  0;  i  <  anticipated.length;  i++)  {	for  (int  i  =  0;  i  <  observed.length;  i++)  {  	non-compiled	[CE]  cannot  find  symbol  anticipated	9	None	replace
103	[BUG]  [BUGGY]  if(!isNonNegative(expected)||!isPositive(observed))  {  [CE]  no  suitable  method  found  for  isNonNegative(double[])  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  [BUGGY]  if(!isNonNegative(expected)||!isPositive(observed))  {  [BUGGY]  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	if(!isNonNegative(expected)||!isPositive(observed))  {	if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  	non-compiled	[CE]  no  suitable  method  found  for  isNonNegative(double[])	3	None	replace
104	[BUG]  [BUGGY]  if(!isVisible(expected)||!isNonNegative(observed))  {  [CE]  cannot  find  symbol  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  [BUGGY]  if(!isVisible(expected)||!isNonNegative(observed))  {  [BUGGY]  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	if(!isVisible(expected)||!isNonNegative(observed))  {	if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
121	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(expected[i]  >  expected[i])  {  sumSq  +=  expected  *  sumSq  /((  double)expected[i]);  }  [CE]  illegal  start  of  expression  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(expected[i]  >  expected[i])  {  sumSq  +=  expected  *  sumSq  /((  double)expected[i]);  }  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(expected[i]  >  expected[i])  {  sumSq  +=  expected  *  sumSq  /((  double)expected[i]);  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
122	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(expected[i]  >  sumSq)  {  sumSq  +=  expected  *  sumSq  /((  double)expected[i]);  }  [CE]  illegal  start  of  expression  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(expected[i]  >  sumSq)  {  sumSq  +=  expected  *  sumSq  /((  double)expected[i]);  }  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(expected[i]  >  sumSq)  {  sumSq  +=  expected  *  sumSq  /((  double)expected[i]);  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
123	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(expected[i]  >  expected[i])  {  sumSq  +=  expected  *  expected  /((  double)expected[i]);  }  [CE]  illegal  start  of  expression  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(expected[i]  >  expected[i])  {  sumSq  +=  expected  *  expected  /((  double)expected[i]);  }  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(expected[i]  >  expected[i])  {  sumSq  +=  expected  *  expected  /((  double)expected[i]);  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
124	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(expected[i]  >  expected[i])  {  sumSq  +=  expected  *  sumSq;  }  [CE]  illegal  start  of  expression  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(expected[i]  >  expected[i])  {  sumSq  +=  expected  *  sumSq;  }  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(expected[i]  >  expected[i])  {  sumSq  +=  expected  *  sumSq;  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
125	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(expected[i]  >  sumSq)  {  sumSq  +=  expected  *  sumSq;  }  [CE]  illegal  start  of  expression  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(expected[i]  >  sumSq)  {  sumSq  +=  expected  *  sumSq;  }  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(expected[i]  >  sumSq)  {  sumSq  +=  expected  *  sumSq;  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
141	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected.length!=  observed.length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]    for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected.length!=  observed.length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	    for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected.length!=  observed.length)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
142	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(expected.length!=  observed.length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(expected.length!=  observed.length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(expected.length!=  observed.length)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
143	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected.length  ==  observed.length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]    for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected.length  ==  observed.length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	    for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected.length  ==  observed.length)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
144	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(expected.length!=  expected.length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(expected.length!=  expected.length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(expected.length!=  expected.length)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
145	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected.length!=  observed.length)  {  return  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]    for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected.length!=  observed.length)  {  return  false;  }  [BUGGY]  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	    for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected.length!=  observed.length)  {  return  false;  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
163	[BUG]  [BUGGY]  return  sumSq  /(chiSquareTestImpl)*  dev;  [CE]  cannot  find  symbol  chiSquareTestImpl  [CONTEXT]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  [BUGGY]  return  sumSq  /(chiSquareTestImpl)*  dev;  [BUGGY]  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  /(chiSquareTestImpl)*  dev;	return  sumSq;  	non-compiled	[CE]  cannot  find  symbol  chiSquareTestImpl	15	None	replace
164	[BUG]  [BUGGY]  return  sumSq  *  dev  /(chiSquareTestImpl)*  dev;  [CE]  cannot  find  symbol  chiSquareTestImpl  [CONTEXT]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  [BUGGY]  return  sumSq  *  dev  /(chiSquareTestImpl)*  dev;  [BUGGY]  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  *  dev  /(chiSquareTestImpl)*  dev;	return  sumSq;  	non-compiled	[CE]  cannot  find  symbol  chiSquareTestImpl	15	None	replace
182	[BUG]  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(chiSquare(expected,  long));  [CE]  '.class'  expected  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(chiSquare(expected,  long));  [BUGGY]  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	return  1.0  -  distribution.cumulativeProbability(chiSquare(expected,  long));	return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  	non-compiled	[CE]  '.class'  expected	19	None	replace
183	[BUG]  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(chiSquare(expected,  observed),  observed);  [CE]  no  suitable  method  found  for  cumulativeProbability(double,long[])  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(chiSquare(expected,  observed),  observed);  [BUGGY]  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	return  1.0  -  distribution.cumulativeProbability(chiSquare(expected,  observed),  observed);	return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  	non-compiled	[CE]  no  suitable  method  found  for  cumulativeProbability(double,long[])	19	None	replace
184	[BUG]  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(chiSquare(expected,  long[]  observed));  [CE]  '.class'  expected  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(chiSquare(expected,  long[]  observed));  [BUGGY]  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	return  1.0  -  distribution.cumulativeProbability(chiSquare(expected,  long[]  observed));	return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  	non-compiled	[CE]  '.class'  expected	19	None	replace
203	[BUG]  [BUGGY]  distribution.setDegreesOfFreedom(expected.length  -  1.0,  observed.length  -  1.0);  [CE]  method  setDegreesOfFreedom  in  interface  ChiSquaredDistribution  cannot  be  applied  to  given  types;  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  [BUGGY]  distribution.setDegreesOfFreedom(expected.length  -  1.0,  observed.length  -  1.0);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	97	97	6	replace	distribution.setDegreesOfFreedom(expected.length  -  1.0,  observed.length  -  1.0);	distribution.setDegreesOfFreedom(expected.length  -  1.0);  	non-compiled	[CE]  method  setDegreesOfFreedom  in  interface  ChiSquaredDistribution  cannot  be  applied  to  given  types;	17	None	replace
204	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  [BUGGY]  distribution.setDegreesOfFreedom(expected.length  /  2.0);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	97	97	6	add	distribution.setDegreesOfFreedom(expected.length  /  2.0);	distribution.setDegreesOfFreedom(expected.length  -  1.0);  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	17	6
205	[BUG]  [BUGGY]  distribution.setDegreesOfFreedom(expected.length  /  2.0);  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  [BUGGY]  distribution.setDegreesOfFreedom(expected.length  /  2.0);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	97	97	6	replace	distribution.setDegreesOfFreedom(expected.length  /  2.0);	distribution.setDegreesOfFreedom(expected.length  -  1.0);  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	17	6	replace
221	[BUG]  [BUGGY]    ChiSquaredDistribution  x  =(ChiSquaredDistribution)this.x.getInstance();  [CE]  cannot  find  symbol  x  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  [BUGGY]    ChiSquaredDistribution  x  =(ChiSquaredDistribution)this.x.getInstance();  [BUGGY]  distribution.setDegreesOfFreedom(expected.length  -  1.0);  return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	97	97	6	replace	    ChiSquaredDistribution  x  =(ChiSquaredDistribution)this.x.getInstance();		non-compiled	[CE]  cannot  find  symbol  x	18	None	add
222	[BUG]  [BUGGY]    ChiSquaredDistribution  x  =(ChiSquaredDistribution)x.getDistribution();  [CE]  cannot  find  symbol  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  [BUGGY]    ChiSquaredDistribution  x  =(ChiSquaredDistribution)x.getDistribution();  [BUGGY]  distribution.setDegreesOfFreedom(expected.length  -  1.0);  return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	97	97	6	replace	    ChiSquaredDistribution  x  =(ChiSquaredDistribution)x.getDistribution();		non-compiled	[CE]  cannot  find  symbol	18	None	add
223	[BUG]  [BUGGY]    ChiSquaredDistribution  x  =(ChiSquaredDistribution)getDistribution();  [CE]  cannot  find  symbol  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  [BUGGY]    ChiSquaredDistribution  x  =(ChiSquaredDistribution)getDistribution();  [BUGGY]  distribution.setDegreesOfFreedom(expected.length  -  1.0);  return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	97	97	6	replace	    ChiSquaredDistribution  x  =(ChiSquaredDistribution)getDistribution();		non-compiled	[CE]  cannot  find  symbol	18	None	add
224	[BUG]  [BUGGY]    ChiSquaredDistribution  x  =(ChiSquaredDistribution)x.getMean();  [CE]  cannot  find  symbol  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  [BUGGY]    ChiSquaredDistribution  x  =(ChiSquaredDistribution)x.getMean();  [BUGGY]  distribution.setDegreesOfFreedom(expected.length  -  1.0);  return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	97	97	6	replace	    ChiSquaredDistribution  x  =(ChiSquaredDistribution)x.getMean();		non-compiled	[CE]  cannot  find  symbol	18	None	add
225	[BUG]  [BUGGY]    ChiSquaredDistribution  x  =(ChiSquaredDistribution)x.getInstance();  [CE]  cannot  find  symbol  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  [BUGGY]    ChiSquaredDistribution  x  =(ChiSquaredDistribution)x.getInstance();  [BUGGY]  distribution.setDegreesOfFreedom(expected.length  -  1.0);  return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	97	97	6	replace	    ChiSquaredDistribution  x  =(ChiSquaredDistribution)x.getInstance();		non-compiled	[CE]  cannot  find  symbol	18	None	add
241	[BUG]  [BUGGY]  [FE]  ArrayStoreException  testChiSquareLargeTestStatistic  [CONTEXT]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  [BUGGY]    System.arraycopy(expected,  0,  dev,  1,  observed.length);  [BUGGY]  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	add	    System.arraycopy(expected,  0,  dev,  1,  observed.length);		compilable	  [FE]  ArrayStoreException  testChiSquareLargeTestStatistic	10	6
242	[BUG]  [BUGGY]    System.arraycopy(expected,  0,  dev,  1,  observed.length);  [FE]  ArrayStoreException  testChiSquareLargeTestStatistic  [CONTEXT]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  [BUGGY]    System.arraycopy(expected,  0,  dev,  1,  observed.length);  [BUGGY]  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	    System.arraycopy(expected,  0,  dev,  1,  observed.length);		compilable	  [FE]  ArrayStoreException  testChiSquareLargeTestStatistic	10	6	add
242	[BUG]  [BUGGY]    System.arraycopy(expected,  0,  dev,  1,  observed.length);  sumSq  +=  dev  *  expected  /  dev;  [CE]  bad  operand  types  for  binary  operator  '*'  [CONTEXT]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  [BUGGY]    System.arraycopy(expected,  0,  dev,  1,  observed.length);  sumSq  +=  dev  *  expected  /  dev;  [BUGGY]  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	    System.arraycopy(expected,  0,  dev,  1,  observed.length);  sumSq  +=  dev  *  expected  /  dev;		non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	10	None	add
243	[BUG]  [BUGGY]    System.arraycopy(chiSquare,  0,  dev,  1,  observed.length);  [CE]  cannot  find  symbol  chiSquare  [CONTEXT]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  [BUGGY]    System.arraycopy(chiSquare,  0,  dev,  1,  observed.length);  [BUGGY]  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	    System.arraycopy(chiSquare,  0,  dev,  1,  observed.length);		non-compiled	[CE]  cannot  find  symbol  chiSquare	10	None	add
244	[BUG]  [BUGGY]    System.arraycopy(expected,  0,  dev,  1,  observed.length);  sumSq  +=  dev  *  expected  -  dev;  [CE]  bad  operand  types  for  binary  operator  '*'  [CONTEXT]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  [BUGGY]    System.arraycopy(expected,  0,  dev,  1,  observed.length);  sumSq  +=  dev  *  expected  -  dev;  [BUGGY]  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	    System.arraycopy(expected,  0,  dev,  1,  observed.length);  sumSq  +=  dev  *  expected  -  dev;		non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	10	None	add
245	[BUG]  [BUGGY]  [FE]  ArrayStoreException  testChiSquareLargeTestStatistic  [CONTEXT]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  [BUGGY]    System.arraycopy(expected,  0,  dev,  1,  observed.length);  sumSq  +=  dev  /  expected[0];  [BUGGY]  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	add	    System.arraycopy(expected,  0,  dev,  1,  observed.length);  sumSq  +=  dev  /  expected[0];		compilable	  [FE]  ArrayStoreException  testChiSquareLargeTestStatistic	10	6
246	[BUG]  [BUGGY]    System.arraycopy(expected,  0,  dev,  1,  observed.length);  sumSq  +=  dev  /  expected[0];  [FE]  ArrayStoreException  testChiSquareLargeTestStatistic  [CONTEXT]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  [BUGGY]    System.arraycopy(expected,  0,  dev,  1,  observed.length);  sumSq  +=  dev  /  expected[0];  [BUGGY]  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	    System.arraycopy(expected,  0,  dev,  1,  observed.length);  sumSq  +=  dev  /  expected[0];		compilable	  [FE]  ArrayStoreException  testChiSquareLargeTestStatistic	10	6	add
261	[BUG]  [BUGGY]    System.arraycopy(chiSquareTestImpl,  observed,  0,  dev,  observed.length);  sumSq  +=  dev  *  sumSq;  [CE]  cannot  find  symbol  chiSquareTestImpl  [CONTEXT]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  [BUGGY]    System.arraycopy(chiSquareTestImpl,  observed,  0,  dev,  observed.length);  sumSq  +=  dev  *  sumSq;  [BUGGY]  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	    System.arraycopy(chiSquareTestImpl,  observed,  0,  dev,  observed.length);  sumSq  +=  dev  *  sumSq;		non-compiled	[CE]  cannot  find  symbol  chiSquareTestImpl	16	None	add
262	[BUG]  [BUGGY]    System.arraycopy(chiSquaredDistribution,  observed,  0,  sumSq,  dev);  [CE]  cannot  find  symbol  chiSquaredDistribution  [CONTEXT]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  [BUGGY]    System.arraycopy(chiSquaredDistribution,  observed,  0,  sumSq,  dev);  [BUGGY]  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	    System.arraycopy(chiSquaredDistribution,  observed,  0,  sumSq,  dev);		non-compiled	[CE]  cannot  find  symbol  chiSquaredDistribution	16	None	add
263	[BUG]  [BUGGY]    System.arraycopy(chiSquareTestImpl,  observed,  0,  sumSq,  dev);  [CE]  cannot  find  symbol  chiSquareTestImpl  [CONTEXT]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  [BUGGY]    System.arraycopy(chiSquareTestImpl,  observed,  0,  sumSq,  dev);  [BUGGY]  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	    System.arraycopy(chiSquareTestImpl,  observed,  0,  sumSq,  dev);		non-compiled	[CE]  cannot  find  symbol  chiSquareTestImpl	16	None	add
264	[BUG]  [BUGGY]    if(!isNonNegative(dev))  {  if(sumSq  >  0)  {  sumSq  +=  dev  *  sumSq;  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  [BUGGY]    if(!isNonNegative(dev))  {  if(sumSq  >  0)  {  sumSq  +=  dev  *  sumSq;  }  [BUGGY]  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	    if(!isNonNegative(dev))  {  if(sumSq  >  0)  {  sumSq  +=  dev  *  sumSq;  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
265	[BUG]  [BUGGY]    if(!isNonNegative(dev))  {  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  sumSq;  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  [BUGGY]    if(!isNonNegative(dev))  {  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  sumSq;  }  [BUGGY]  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	    if(!isNonNegative(dev))  {  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  sumSq;  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
281	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]  dev  =((  double)expected[i]  -  observed[i]);  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =((  double)expected[i]  -  observed[i]);	dev  =  ((double)  observed[i]  -  expected[i]);  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	11	6
282	[BUG]  [BUGGY]  dev  =((  double)expected[i]  -  observed[i]);  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]  dev  =((  double)expected[i]  -  observed[i]);  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =((  double)expected[i]  -  observed[i]);	dev  =  ((double)  observed[i]  -  expected[i]);  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	11	6	replace
282	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]  dev  =((  double)expected[i]  /  expected[i]);  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =((  double)expected[i]  /  expected[i]);	dev  =  ((double)  observed[i]  -  expected[i]);  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	11	6
283	[BUG]  [BUGGY]  dev  =((  double)expected[i]  /  expected[i]);  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]  dev  =((  double)expected[i]  /  expected[i]);  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =((  double)expected[i]  /  expected[i]);	dev  =  ((double)  observed[i]  -  expected[i]);  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	11	6	replace
284	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]  dev  =((  double)expected[i]  -  expected[i]);  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =((  double)expected[i]  -  expected[i]);	dev  =  ((double)  observed[i]  -  expected[i]);  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	11	6
285	[BUG]  [BUGGY]  dev  =((  double)expected[i]  -  expected[i]);  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]  dev  =((  double)expected[i]  -  expected[i]);  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =((  double)expected[i]  -  expected[i]);	dev  =  ((double)  observed[i]  -  expected[i]);  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	11	6	replace
303	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]  double  sumSq  =  1.0;  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	double  sumSq  =  1.0;	double  sumSq  =  0.0d;  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	5	6
304	[BUG]  [BUGGY]  double  sumSq  =  1.0;  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]  double  sumSq  =  1.0;  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  sumSq  =  1.0;	double  sumSq  =  0.0d;  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	5	6	replace
304	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]  double  sumSq  =  0.5;  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	double  sumSq  =  0.5;	double  sumSq  =  0.0d;  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	5	6
305	[BUG]  [BUGGY]  double  sumSq  =  0.5;  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]  double  sumSq  =  0.5;  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  sumSq  =  0.5;	double  sumSq  =  0.0d;  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	5	6	replace
321	[BUG]  [BUGGY]    sumSq  +=  dev  *  chiSquare.doubleValue();  [CE]  cannot  find  symbol  chiSquare  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]    sumSq  +=  dev  *  chiSquare.doubleValue();  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	    sumSq  +=  dev  *  chiSquare.doubleValue();		non-compiled	[CE]  cannot  find  symbol  chiSquare	14	None	add
322	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]    sumSq  +=  dev  *((  double)expected[i]  -  expected[i]);  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	    sumSq  +=  dev  *((  double)expected[i]  -  expected[i]);		compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	14	6
323	[BUG]  [BUGGY]    sumSq  +=  dev  *((  double)expected[i]  -  expected[i]);  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]    sumSq  +=  dev  *((  double)expected[i]  -  expected[i]);  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	    sumSq  +=  dev  *((  double)expected[i]  -  expected[i]);		compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	14	6	add
323	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]    sumSq  +=  dev  *(expected[i]  -  expected[i]);  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	    sumSq  +=  dev  *(expected[i]  -  expected[i]);		compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	14	6
324	[BUG]  [BUGGY]    sumSq  +=  dev  *(expected[i]  -  expected[i]);  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]    sumSq  +=  dev  *(expected[i]  -  expected[i]);  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	    sumSq  +=  dev  *(expected[i]  -  expected[i]);		compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	14	6	add
324	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]    sumSq  +=  dev  *((  double)expected[i]);  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	    sumSq  +=  dev  *((  double)expected[i]);		compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	14	6
325	[BUG]  [BUGGY]    sumSq  +=  dev  *((  double)expected[i]);  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]    sumSq  +=  dev  *((  double)expected[i]);  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	    sumSq  +=  dev  *((  double)expected[i]);		compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	14	6	add
325	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]    sumSq  +=  Math.sqrt(dev);  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	    sumSq  +=  Math.sqrt(dev);		compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	14	6
326	[BUG]  [BUGGY]    sumSq  +=  Math.sqrt(dev);  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]    sumSq  +=  Math.sqrt(dev);  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	    sumSq  +=  Math.sqrt(dev);		compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	14	6	add
341	[BUG]  [BUGGY]  [FE]  ArrayStoreException  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  [BUGGY]    System.arraycopy(expected,  0,  observed,  0,  observed.length);  [BUGGY]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	add	    System.arraycopy(expected,  0,  observed,  0,  observed.length);		compilable	  [FE]  ArrayStoreException  testChiSquareLargeTestStatistic	4	6
342	[BUG]  [BUGGY]    System.arraycopy(expected,  0,  observed,  0,  observed.length);  [FE]  ArrayStoreException  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  [BUGGY]    System.arraycopy(expected,  0,  observed,  0,  observed.length);  [BUGGY]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	    System.arraycopy(expected,  0,  observed,  0,  observed.length);		compilable	  [FE]  ArrayStoreException  testChiSquareLargeTestStatistic	4	6	add
342	[BUG]  [BUGGY]  [FE]  ArrayStoreException  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  [BUGGY]    System.arraycopy(expected,  0,  observed,  0,  expected.length);  [BUGGY]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	add	    System.arraycopy(expected,  0,  observed,  0,  expected.length);		compilable	  [FE]  ArrayStoreException  testChiSquareLargeTestStatistic	4	6
343	[BUG]  [BUGGY]    System.arraycopy(expected,  0,  observed,  0,  expected.length);  [FE]  ArrayStoreException  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  [BUGGY]    System.arraycopy(expected,  0,  observed,  0,  expected.length);  [BUGGY]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	    System.arraycopy(expected,  0,  observed,  0,  expected.length);		compilable	  [FE]  ArrayStoreException  testChiSquareLargeTestStatistic	4	6	add
343	[BUG]  [BUGGY]    System.arraycopy(chiSquared,  0,  observed,  0,  expected.length);  [CE]  cannot  find  symbol  chiSquared  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  [BUGGY]    System.arraycopy(chiSquared,  0,  observed,  0,  expected.length);  [BUGGY]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	    System.arraycopy(chiSquared,  0,  observed,  0,  expected.length);		non-compiled	[CE]  cannot  find  symbol  chiSquared	4	None	add
344	[BUG]  [BUGGY]    System.arraycopy(chiSquare,  0,  observed,  0,  expected.length);  [CE]  cannot  find  symbol  chiSquare  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  [BUGGY]    System.arraycopy(chiSquare,  0,  observed,  0,  expected.length);  [BUGGY]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	    System.arraycopy(chiSquare,  0,  observed,  0,  expected.length);		non-compiled	[CE]  cannot  find  symbol  chiSquare	4	None	add
345	[BUG]  [BUGGY]    if(expected.length!=  observed.length)  {  if(!expected.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  [BUGGY]    if(expected.length!=  observed.length)  {  if(!expected.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	    if(expected.length!=  observed.length)  {  if(!expected.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
364	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]  double  dev  =  0.0d  +(expected.length  *  2);  [BUGGY]  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	add	double  dev  =  0.0d  +(expected.length  *  2);	double  dev  =  0.0d;  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	7	6
365	[BUG]  [BUGGY]  double  dev  =  0.0d  +(expected.length  *  2);  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]  double  dev  =  0.0d  +(expected.length  *  2);  [BUGGY]  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double  dev  =  0.0d  +(expected.length  *  2);	double  dev  =  0.0d;  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	7	6	replace
383	[BUG]  [BUGGY]    distributed.setDegreesOfFreedom(expected.length);  [CE]  cannot  find  symbol  distributed  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]    distributed.setDegreesOfFreedom(expected.length);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(    chiSquare(expected,  observed));  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	    distributed.setDegreesOfFreedom(expected.length);		non-compiled	[CE]  cannot  find  symbol  distributed	20	None	add
31	[BUG]  [BUGGY]    ChiSquaredDistribution  distribution  =(ChiSquaredDistribution)getDistribution(x,  observed);  [CE]  cannot  find  symbol  x  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  [BUGGY]    ChiSquaredDistribution  distribution  =(ChiSquaredDistribution)getDistribution(x,  observed);  [BUGGY]  distribution.setDegreesOfFreedom(expected.length  -  1.0);  return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	97	97	6	replace	    ChiSquaredDistribution  distribution  =(ChiSquaredDistribution)getDistribution(x,  observed);		non-compiled	[CE]  cannot  find  symbol  x	18	None	add
32	[BUG]  [BUGGY]    ChiSquaredDistribution  distribution  =(ChiSquaredDistribution)getDistribution(x  +(long[])observed);  [CE]  cannot  find  symbol  x  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  [BUGGY]    ChiSquaredDistribution  distribution  =(ChiSquaredDistribution)getDistribution(x  +(long[])observed);  [BUGGY]  distribution.setDegreesOfFreedom(expected.length  -  1.0);  return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	97	97	6	replace	    ChiSquaredDistribution  distribution  =(ChiSquaredDistribution)getDistribution(x  +(long[])observed);		non-compiled	[CE]  cannot  find  symbol  x	18	None	add
33	[BUG]  [BUGGY]    ChiSquaredDistribution  x  =(ChiSquaredDistribution)x.getMillis();  [CE]  cannot  find  symbol  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  [BUGGY]    ChiSquaredDistribution  x  =(ChiSquaredDistribution)x.getMillis();  [BUGGY]  distribution.setDegreesOfFreedom(expected.length  -  1.0);  return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	97	97	6	replace	    ChiSquaredDistribution  x  =(ChiSquaredDistribution)x.getMillis();		non-compiled	[CE]  cannot  find  symbol	18	None	add
34	[BUG]  [BUGGY]    ChiSquaredDistribution  x  =(ChiSquaredDistribution)X.getMillis();  [CE]  cannot  find  symbol  X  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  [BUGGY]    ChiSquaredDistribution  x  =(ChiSquaredDistribution)X.getMillis();  [BUGGY]  distribution.setDegreesOfFreedom(expected.length  -  1.0);  return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	97	97	6	replace	    ChiSquaredDistribution  x  =(ChiSquaredDistribution)X.getMillis();		non-compiled	[CE]  cannot  find  symbol  X	18	None	add
35	[BUG]  [BUGGY]    ChiSquaredDistribution  distribution  =(ChiSquaredDistribution)getDistribution(x  +(long[])observed  /  2.0);  [CE]  cannot  find  symbol  x  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  [BUGGY]    ChiSquaredDistribution  distribution  =(ChiSquaredDistribution)getDistribution(x  +(long[])observed  /  2.0);  [BUGGY]  distribution.setDegreesOfFreedom(expected.length  -  1.0);  return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	97	97	6	replace	    ChiSquaredDistribution  distribution  =(ChiSquaredDistribution)getDistribution(x  +(long[])observed  /  2.0);		non-compiled	[CE]  cannot  find  symbol  x	18	None	add
63	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]  if((  observed.length  <  0)||(expected.length!=  observed.length))  {  [BUGGY]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	add	if((  observed.length  <  0)||(expected.length!=  observed.length))  {	if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	1	6
64	[BUG]  [BUGGY]  if((  observed.length  <  0)||(expected.length!=  observed.length))  {  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]  if((  observed.length  <  0)||(expected.length!=  observed.length))  {  [BUGGY]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	if((  observed.length  <  0)||(expected.length!=  observed.length))  {	if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	1	6	replace
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]  if((  expected.length  <  0)||(expected.length!=  observed.length))  {  [BUGGY]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	add	if((  expected.length  <  0)||(expected.length!=  observed.length))  {	if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	1	6
65	[BUG]  [BUGGY]  if((  expected.length  <  0)||(expected.length!=  observed.length))  {  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]  if((  expected.length  <  0)||(expected.length!=  observed.length))  {  [BUGGY]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	if((  expected.length  <  0)||(expected.length!=  observed.length))  {	if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	1	6	replace
91	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  expected.length;  i++)  {  expected[i]  +=((  double)expected[i]  -  expected[i]);  if(!isNonNegative(expected[i]))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]    for(int  i  =  0;  i  <  expected.length;  i++)  {  expected[i]  +=((  double)expected[i]  -  expected[i]);  if(!isNonNegative(expected[i]))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	    for(int  i  =  0;  i  <  expected.length;  i++)  {  expected[i]  +=((  double)expected[i]  -  expected[i]);  if(!isNonNegative(expected[i]))  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
92	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  expected.length;  i++)  {  expected[i]  +=((  double)expected[i]  -  observed[i]);  if(!isNonNegative(expected[i]))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]    for(int  i  =  0;  i  <  expected.length;  i++)  {  expected[i]  +=((  double)expected[i]  -  observed[i]);  if(!isNonNegative(expected[i]))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	    for(int  i  =  0;  i  <  expected.length;  i++)  {  expected[i]  +=((  double)expected[i]  -  observed[i]);  if(!isNonNegative(expected[i]))  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
93	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  expected.length;  i++)  {  expected[i]  +=((  double)expected[i]  -  expected[i]);  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]    for(int  i  =  0;  i  <  expected.length;  i++)  {  expected[i]  +=((  double)expected[i]  -  expected[i]);  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	    for(int  i  =  0;  i  <  expected.length;  i++)  {  expected[i]  +=((  double)expected[i]  -  expected[i]);  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
94	[BUG]  [BUGGY]    if(isNonNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  no  suitable  method  found  for  isNonNegative(double[])  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]    if(isNonNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	    if(isNonNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  no  suitable  method  found  for  isNonNegative(double[])	8	None	add
95	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  expected.length;  i++)  {  expected[i]  +=((  double)expected[i]  -  expected[i]);  if(!isPositive(expected[i]))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]    for(int  i  =  0;  i  <  expected.length;  i++)  {  expected[i]  +=((  double)expected[i]  -  expected[i]);  if(!isPositive(expected[i]))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	    for(int  i  =  0;  i  <  expected.length;  i++)  {  expected[i]  +=((  double)expected[i]  -  expected[i]);  if(!isPositive(expected[i]))  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
124	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  [BUGGY]  return  sumSq  *  dev  /  dev;  [BUGGY]  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	return  sumSq  *  dev  /  dev;	return  sumSq;  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	15	6
125	[BUG]  [BUGGY]  return  sumSq  *  dev  /  dev;  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  [BUGGY]  return  sumSq  *  dev  /  dev;  [BUGGY]  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	return  sumSq  *  dev  /  dev;	return  sumSq;  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	15	6	replace
151	[BUG]  [BUGGY]    if(dev  >  0.0)  {  expected[i]  =  dev;  if(i  >  0)  {  sumSq  +=  expected[i]  *  dev;  }  [CE]  illegal  start  of  expression  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]    if(dev  >  0.0)  {  expected[i]  =  dev;  if(i  >  0)  {  sumSq  +=  expected[i]  *  dev;  }  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	    if(dev  >  0.0)  {  expected[i]  =  dev;  if(i  >  0)  {  sumSq  +=  expected[i]  *  dev;  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
152	[BUG]  [BUGGY]    if(dev  >  0.0)  {  expected[i]  =  dev;  if(i  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]    if(dev  >  0.0)  {  expected[i]  =  dev;  if(i  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	    if(dev  >  0.0)  {  expected[i]  =  dev;  if(i  >  0)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
153	[BUG]  [BUGGY]    if(dev  >  0.0)  {  expected[i]  =  false;  if(dev  <  dev)  {  sumSq  +=  observed[i]  *  dev;  }  [CE]  illegal  start  of  expression  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]    if(dev  >  0.0)  {  expected[i]  =  false;  if(dev  <  dev)  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	    if(dev  >  0.0)  {  expected[i]  =  false;  if(dev  <  dev)  {  sumSq  +=  observed[i]  *  dev;  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
154	[BUG]  [BUGGY]    sumSq  +=  Math.sqrt(expected.length,  dev));  [CE]  ';'  expected  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]    sumSq  +=  Math.sqrt(expected.length,  dev));  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	    sumSq  +=  Math.sqrt(expected.length,  dev));		non-compiled	[CE]  ';'  expected	14	None	add
155	[BUG]  [BUGGY]    sumSq  +=  dev  *  observed[i]  /  distribution.length;  [CE]  cannot  find  symbol  length  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]    sumSq  +=  dev  *  observed[i]  /  distribution.length;  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	    sumSq  +=  dev  *  observed[i]  /  distribution.length;		non-compiled	[CE]  cannot  find  symbol  length	14	None	add
182	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]  dev  =((  double)expected[i]  /  observed[i]);  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =((  double)expected[i]  /  observed[i]);	dev  =  ((double)  observed[i]  -  expected[i]);  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	11	6
183	[BUG]  [BUGGY]  dev  =((  double)expected[i]  /  observed[i]);  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]  dev  =((  double)expected[i]  /  observed[i]);  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =((  double)expected[i]  /  observed[i]);	dev  =  ((double)  observed[i]  -  expected[i]);  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	11	6	replace
184	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]  dev  =((  double)expected[i]  -  observed[i]  *  dev);  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	dev  =((  double)expected[i]  -  observed[i]  *  dev);	dev  =  ((double)  observed[i]  -  expected[i]);  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	11	6
185	[BUG]  [BUGGY]  dev  =((  double)expected[i]  -  observed[i]  *  dev);  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]  dev  =((  double)expected[i]  -  observed[i]  *  dev);  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	dev  =((  double)expected[i]  -  observed[i]  *  dev);	dev  =  ((double)  observed[i]  -  expected[i]);  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	11	6	replace
212	[BUG]  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(chiSquare(long,  observed));  [CE]  '.class'  expected  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(chiSquare(long,  observed));  [BUGGY]  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	return  1.0  -  distribution.cumulativeProbability(chiSquare(long,  observed));	return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  	non-compiled	[CE]  '.class'  expected	19	None	replace
213	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(chiSquare(expected,  observed)+  1.0);  [BUGGY]  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	add	return  1.0  -  distribution.cumulativeProbability(chiSquare(expected,  observed)+  1.0);	return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	19	6
214	[BUG]  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(chiSquare(expected,  observed)+  1.0);  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(chiSquare(expected,  observed)+  1.0);  [BUGGY]  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	return  1.0  -  distribution.cumulativeProbability(chiSquare(expected,  observed)+  1.0);	return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	19	6	replace
214	[BUG]  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(chiSquare(token,  observed));  [CE]  cannot  find  symbol  token  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(chiSquare(token,  observed));  [BUGGY]  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	return  1.0  -  distribution.cumulativeProbability(chiSquare(token,  observed));	return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  	non-compiled	[CE]  cannot  find  symbol  token	19	None	replace
242	[BUG]  [BUGGY]    expected.length  =  Math.max(expected.length,  observed.length);  [CE]  cannot  assign  a  value  to  final  variable  length  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]    expected.length  =  Math.max(expected.length,  observed.length);  [BUGGY]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	    expected.length  =  Math.max(expected.length,  observed.length);		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  length	2	None	add
243	[BUG]  [BUGGY]    int  expected.length  =  Math.max(expected.length,  observed.length);  [CE]  ';'  expected  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]    int  expected.length  =  Math.max(expected.length,  observed.length);  [BUGGY]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	    int  expected.length  =  Math.max(expected.length,  observed.length);		non-compiled	[CE]  ';'  expected	2	None	add
244	[BUG]  [BUGGY]    int  expected.length  =  Math.abs(expected.length);  [CE]  ';'  expected  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]    int  expected.length  =  Math.abs(expected.length);  [BUGGY]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	    int  expected.length  =  Math.abs(expected.length);		non-compiled	[CE]  ';'  expected	2	None	add
245	[BUG]  [BUGGY]    int  expected.length  =  Math.min(expected.length  -  observed.length);  [CE]  ';'  expected  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  [BUGGY]    int  expected.length  =  Math.min(expected.length  -  observed.length);  [BUGGY]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	    int  expected.length  =  Math.min(expected.length  -  observed.length);		non-compiled	[CE]  ';'  expected	2	None	add
271	[BUG]  [BUGGY]    if(isNegative())  {  if(expected.length!=  observed.length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  [BUGGY]    if(isNegative())  {  if(expected.length!=  observed.length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	    if(isNegative())  {  if(expected.length!=  observed.length)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
272	[BUG]  [BUGGY]    if(isNegative())  {  if(!(expected.length  <  0)||  expected.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  [BUGGY]    if(isNegative())  {  if(!(expected.length  <  0)||  expected.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	    if(isNegative())  {  if(!(expected.length  <  0)||  expected.length  >  0)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
273	[BUG]  [BUGGY]    if(isNegative())  {  if(expected.length  ==  observed.length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  [BUGGY]    if(isNegative())  {  if(expected.length  ==  observed.length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	    if(isNegative())  {  if(expected.length  ==  observed.length)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
274	[BUG]  [BUGGY]    if(isNegative())  {  if(expected.length  <  observed.length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  [BUGGY]    if(isNegative())  {  if(expected.length  <  observed.length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	    if(isNegative())  {  if(expected.length  <  observed.length)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
275	[BUG]  [BUGGY]    if(!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  [BUGGY]    if(!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	    if(!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  cannot  find  symbol	4	None	add
303	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  [BUGGY]  for(int  i  =  0;  i  <  observed.length  -  1;  i++)  {  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	add	for(int  i  =  0;  i  <  observed.length  -  1;  i++)  {	for  (int  i  =  0;  i  <  observed.length;  i++)  {  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	9	6
304	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length  -  1;  i++)  {  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  [BUGGY]  for(int  i  =  0;  i  <  observed.length  -  1;  i++)  {  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int  i  =  0;  i  <  observed.length  -  1;  i++)  {	for  (int  i  =  0;  i  <  observed.length;  i++)  {  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	9	6	replace
304	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length,  i++)  {  [CE]  ';'  expected  [CONTEXT]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  [BUGGY]  for(int  i  =  0;  i  <  observed.length,  i++)  {  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int  i  =  0;  i  <  observed.length,  i++)  {	for  (int  i  =  0;  i  <  observed.length;  i++)  {  	non-compiled	[CE]  ';'  expected	9	None	replace
331	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]    distribution.setDegreesOfFreedom(observed.length  -  1.0);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(    chiSquare(expected,  observed));  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	add	    distribution.setDegreesOfFreedom(observed.length  -  1.0);		compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	20	6
332	[BUG]  [BUGGY]    distribution.setDegreesOfFreedom(observed.length  -  1.0);  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]    distribution.setDegreesOfFreedom(observed.length  -  1.0);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(    chiSquare(expected,  observed));  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	    distribution.setDegreesOfFreedom(observed.length  -  1.0);		compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	20	6	add
332	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]    distribution.setDegreesOfFreedom(observed.length);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(    chiSquare(expected,  observed));  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	add	    distribution.setDegreesOfFreedom(observed.length);		compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	20	6
333	[BUG]  [BUGGY]    distribution.setDegreesOfFreedom(observed.length);  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]    distribution.setDegreesOfFreedom(observed.length);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(    chiSquare(expected,  observed));  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	    distribution.setDegreesOfFreedom(observed.length);		compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	20	6	add
333	[BUG]  [BUGGY]    Distribution.setDegreesOfFreedom(observed.length  -  1.0);  [CE]  cannot  find  symbol  Distribution  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]    Distribution.setDegreesOfFreedom(observed.length  -  1.0);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(    chiSquare(expected,  observed));  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	    Distribution.setDegreesOfFreedom(observed.length  -  1.0);		non-compiled	[CE]  cannot  find  symbol  Distribution	20	None	add
334	[BUG]  [BUGGY]    Distribution.setDegreesOfFreedom(observed.length);  [CE]  cannot  find  symbol  Distribution  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]    Distribution.setDegreesOfFreedom(observed.length);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(    chiSquare(expected,  observed));  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	    Distribution.setDegreesOfFreedom(observed.length);		non-compiled	[CE]  cannot  find  symbol  Distribution	20	None	add
361	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  [BUGGY]    sumSq  +=  Math.sqrt(dev);  [BUGGY]  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	add	    sumSq  +=  Math.sqrt(dev);		compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	10	6
362	[BUG]  [BUGGY]    sumSq  +=  Math.sqrt(dev);  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  [BUGGY]    sumSq  +=  Math.sqrt(dev);  [BUGGY]  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	    sumSq  +=  Math.sqrt(dev);		compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	10	6	add
362	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  [BUGGY]    sumSq  +=  Math.sqrt(expected.length);  [BUGGY]  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	add	    sumSq  +=  Math.sqrt(expected.length);		compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	10	6
363	[BUG]  [BUGGY]    sumSq  +=  Math.sqrt(expected.length);  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  [BUGGY]    sumSq  +=  Math.sqrt(expected.length);  [BUGGY]  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	    sumSq  +=  Math.sqrt(expected.length);		compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	10	6	add
363	[BUG]  [BUGGY]    sumSq  +=  Math.sqrt(Dev.doubleValue());  [CE]  cannot  find  symbol  Dev  [CONTEXT]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  [BUGGY]    sumSq  +=  Math.sqrt(Dev.doubleValue());  [BUGGY]  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	    sumSq  +=  Math.sqrt(Dev.doubleValue());		non-compiled	[CE]  cannot  find  symbol  Dev	10	None	add
364	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  [BUGGY]    sumSq  +=  Math.sqrt(expected.length  /  dev);  [BUGGY]  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	add	    sumSq  +=  Math.sqrt(expected.length  /  dev);		compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	10	6
365	[BUG]  [BUGGY]    sumSq  +=  Math.sqrt(expected.length  /  dev);  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  [BUGGY]    sumSq  +=  Math.sqrt(expected.length  /  dev);  [BUGGY]  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	    sumSq  +=  Math.sqrt(expected.length  /  dev);		compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	10	6	add
365	[BUG]  [BUGGY]    sumSq  +=  Math.sqrt(Dev.doubleToLongBits(dev));  [CE]  cannot  find  symbol  Dev  [CONTEXT]  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  [BUGGY]    sumSq  +=  Math.sqrt(Dev.doubleToLongBits(dev));  [BUGGY]  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	    sumSq  +=  Math.sqrt(Dev.doubleToLongBits(dev));		non-compiled	[CE]  cannot  find  symbol  Dev	10	None	add
391	[BUG]  [BUGGY]    if(isNonNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  no  suitable  method  found  for  isNonNegative(double[])  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]    if(isNonNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	    if(isNonNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  no  suitable  method  found  for  isNonNegative(double[])	6	None	add
392	[BUG]  [BUGGY]    if(!isNonNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  no  suitable  method  found  for  isNonNegative(double[])  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]    if(!isNonNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	    if(!isNonNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  no  suitable  method  found  for  isNonNegative(double[])	6	None	add
393	[BUG]  [BUGGY]    if(!isVoid(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]    if(!isVoid(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	    if(!isVoid(expected))  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  cannot  find  symbol	6	None	add
394	[BUG]  [BUGGY]  [FE]  ArrayStoreException  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]    System.arraycopy(expected,  0,  observed,  0,  observed.length);  [BUGGY]  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	    System.arraycopy(expected,  0,  observed,  0,  observed.length);		compilable	  [FE]  ArrayStoreException  testChiSquareLargeTestStatistic	6	6
395	[BUG]  [BUGGY]    System.arraycopy(expected,  0,  observed,  0,  observed.length);  [FE]  ArrayStoreException  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]    System.arraycopy(expected,  0,  observed,  0,  observed.length);  [BUGGY]  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	    System.arraycopy(expected,  0,  observed,  0,  observed.length);		compilable	  [FE]  ArrayStoreException  testChiSquareLargeTestStatistic	6	6	add
395	[BUG]  [BUGGY]    System.arraycopy(chiSquared,  0,  observed,  0,  observed.length);  [CE]  cannot  find  symbol  chiSquared  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]    System.arraycopy(chiSquared,  0,  observed,  0,  observed.length);  [BUGGY]  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	    System.arraycopy(chiSquared,  0,  observed,  0,  observed.length);		non-compiled	[CE]  cannot  find  symbol  chiSquared	6	None	add
422	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected.length  /  dev[i];  [CE]  array  required,  but  double  found  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]  sumSq  +=  dev  *  expected.length  /  dev[i];  [BUGGY]  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  expected.length  /  dev[i];	sumSq  +=  dev  *  dev  /  expected[i];  	non-compiled	[CE]  array  required,  but  double  found	13	None	replace
423	[BUG]  [BUGGY]  sumSq  +=  dev  *  variance  /  expected[i];  [CE]  cannot  find  symbol  variance  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]  sumSq  +=  dev  *  variance  /  expected[i];  [BUGGY]  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  variance  /  expected[i];	sumSq  +=  dev  *  dev  /  expected[i];  	non-compiled	[CE]  cannot  find  symbol  variance	13	None	replace
424	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]  sumSq  +=  dev  *  expected[i]  /  dev;  [BUGGY]  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  *  expected[i]  /  dev;	sumSq  +=  dev  *  dev  /  expected[i];  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	13	6
425	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i]  /  dev;  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]  sumSq  +=  dev  *  expected[i]  /  dev;  [BUGGY]  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  expected[i]  /  dev;	sumSq  +=  dev  *  dev  /  expected[i];  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	13	6	replace
481	[BUG]  [BUGGY]    expected[i]  =  distribution.intValue();  sumSq  +=  distribution.intValue();  [CE]  cannot  find  symbol  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]    expected[i]  =  distribution.intValue();  sumSq  +=  distribution.intValue();  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	    expected[i]  =  distribution.intValue();  sumSq  +=  distribution.intValue();		non-compiled	[CE]  cannot  find  symbol	12	None	add
482	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]    sumSq  +=((  double)expected[i]  -  observed[i]);  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	    sumSq  +=((  double)expected[i]  -  observed[i]);		compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	12	6
483	[BUG]  [BUGGY]    sumSq  +=((  double)expected[i]  -  observed[i]);  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]    sumSq  +=((  double)expected[i]  -  observed[i]);  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	    sumSq  +=((  double)expected[i]  -  observed[i]);		compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	12	6	add
483	[BUG]  [BUGGY]    expected[i]  =  distribution.intValue();  sumSq  +=  distribution.intValue(expected[i]  -  observed[i]);  [CE]  cannot  find  symbol  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]    expected[i]  =  distribution.intValue();  sumSq  +=  distribution.intValue(expected[i]  -  observed[i]);  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	    expected[i]  =  distribution.intValue();  sumSq  +=  distribution.intValue(expected[i]  -  observed[i]);		non-compiled	[CE]  cannot  find  symbol	12	None	add
484	[BUG]  [BUGGY]    expected[i]  =  distribution.intValue();  sumSq  +=  distribution.intValue()  *  observed[i];  [CE]  cannot  find  symbol  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]    expected[i]  =  distribution.intValue();  sumSq  +=  distribution.intValue()  *  observed[i];  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	    expected[i]  =  distribution.intValue();  sumSq  +=  distribution.intValue()  *  observed[i];		non-compiled	[CE]  cannot  find  symbol	12	None	add
485	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]    sumSq  +=  Math.sqrt(expected[i]  /  dev);  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	    sumSq  +=  Math.sqrt(expected[i]  /  dev);		compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	12	6
486	[BUG]  [BUGGY]    sumSq  +=  Math.sqrt(expected[i]  /  dev);  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]    sumSq  +=  Math.sqrt(expected[i]  /  dev);  [BUGGY]  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	    sumSq  +=  Math.sqrt(expected[i]  /  dev);		compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	12	6	add
512	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  [BUGGY]  distribution.setDegreesOfFreedom(observed.length  -  1.0);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	97	97	6	add	distribution.setDegreesOfFreedom(observed.length  -  1.0);	distribution.setDegreesOfFreedom(expected.length  -  1.0);  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	17	6
513	[BUG]  [BUGGY]  distribution.setDegreesOfFreedom(observed.length  -  1.0);  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  [BUGGY]  distribution.setDegreesOfFreedom(observed.length  -  1.0);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	97	97	6	replace	distribution.setDegreesOfFreedom(observed.length  -  1.0);	distribution.setDegreesOfFreedom(expected.length  -  1.0);  	compilable	  [FE]  AssertionFailedError  testChiSquareLargeTestStatistic	17	6	replace
543	[BUG]  [BUGGY]  double  dev  =(double)dev  *  cumulative  *(expected[0]  -  observed[1]);  [CE]  cannot  find  symbol  cumulative  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]  double  dev  =(double)dev  *  cumulative  *(expected[0]  -  observed[1]);  [BUGGY]  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double  dev  =(double)dev  *  cumulative  *(expected[0]  -  observed[1]);	double  dev  =  0.0d;  	non-compiled	[CE]  cannot  find  symbol  cumulative	7	None	replace
544	[BUG]  [BUGGY]  double  dev  =(double)dev  /(double)expected[0];  [CE]  variable  dev  might  not  have  been  initialized  [CONTEXT]  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  [BUGGY]  double  dev  =(double)dev  /(double)expected[0];  [BUGGY]  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	double  dev  =(double)dev  /(double)expected[0];	double  dev  =  0.0d;  	non-compiled	[CE]  variable  dev  might  not  have  been  initialized	7	None	replace
571	[BUG]  [BUGGY]    System.arraycopy(  observed,  0,  sumSq,  dev,  observed.length);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [CONTEXT]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  [BUGGY]    System.arraycopy(  observed,  0,  sumSq,  dev,  observed.length);  [BUGGY]  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	    System.arraycopy(  observed,  0,  sumSq,  dev,  observed.length);		non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	16	None	add
572	[BUG]  [BUGGY]    System.arraycopy(chiSquaredDistribution,  observed[i],  dev  -  observed[i]);  sumSq  +=  dev  *  dev;  [CE]  cannot  find  symbol  chiSquaredDistribution  [CONTEXT]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  [BUGGY]    System.arraycopy(chiSquaredDistribution,  observed[i],  dev  -  observed[i]);  sumSq  +=  dev  *  dev;  [BUGGY]  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	    System.arraycopy(chiSquaredDistribution,  observed[i],  dev  -  observed[i]);  sumSq  +=  dev  *  dev;		non-compiled	[CE]  cannot  find  symbol  chiSquaredDistribution	16	None	add
573	[BUG]  [BUGGY]    sumSq  +=  dev  *  distribution  /  observed[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [CONTEXT]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  [BUGGY]    sumSq  +=  dev  *  distribution  /  observed[i];  [BUGGY]  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	    sumSq  +=  dev  *  distribution  /  observed[i];		non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	16	None	add
574	[BUG]  [BUGGY]    sumSq  +=  dev  *  variance  /  distribution.length;  [CE]  cannot  find  symbol  variance  [CONTEXT]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  [BUGGY]    sumSq  +=  dev  *  variance  /  distribution.length;  [BUGGY]  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	    sumSq  +=  dev  *  variance  /  distribution.length;		non-compiled	[CE]  cannot  find  symbol  variance	16	None	add
575	[BUG]  [BUGGY]    System.arraycopy(chiSquared,  0,  dev,  observed[i],  observed[i]);  sumSq  +=  dev  *  dev;  [CE]  cannot  find  symbol  chiSquared  [CONTEXT]  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  [BUGGY]    System.arraycopy(chiSquared,  0,  dev,  observed[i],  observed[i]);  sumSq  +=  dev  *  dev;  [BUGGY]  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	    System.arraycopy(chiSquared,  0,  dev,  observed[i],  observed[i]);  sumSq  +=  dev  *  dev;		non-compiled	[CE]  cannot  find  symbol  chiSquared	16	None	add
