bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] if ((expected.length < 2) || (expected.length != observed.length)) { [FE] AssertionFailedError testChiSquareLargeTestStatistic [CONTEXT] public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException { [BUGGY] if ((expected.length < 2) || (expected.length != observed.length)) { [BUGGY] throw new IllegalArgumentException( "observed, expected array lengths incorrect"); } if (!isPositive(expected) || !isNonNegative(observed)) { throw new IllegalArgumentException( "observed counts must be non-negative and expected counts must be postive"); } double sumSq = 0.0d; double dev = 0.0d; for (int i = 0; i < observed.length; i++) { [CLASS] ChiSquareTestImpl [METHOD] chiSquare [RETURN_TYPE] double  double[] expected long[] observed [VARIABLES] ChiSquaredDistribution distribution x boolean double[] expected long[] observed double dev sumSq int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError testChiSquareLargeTestStatistic [CONTEXT] public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException { [BUGGY] [BUGGY] if ((expected.length < 2) || (expected.length != observed.length)) { throw new IllegalArgumentException( "observed, expected array lengths incorrect"); } if (!isPositive(expected) || !isNonNegative(observed)) { throw new IllegalArgumentException( "observed counts must be non-negative and expected counts must be postive"); } double sumSq = 0.0d; double dev = 0.0d; for (int i = 0; i < observed.length; i++) { [CLASS] ChiSquareTestImpl [METHOD] chiSquare [RETURN_TYPE] double  double[] expected long[] observed [VARIABLES] ChiSquaredDistribution distribution x boolean double[] expected long[] observed double dev sumSq int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	add	
3	[BUG] [BUGGY] if (!isPositive(expected) || !isNonNegative(observed)) { [FE] AssertionFailedError testChiSquareLargeTestStatistic [CONTEXT] public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException { if ((expected.length < 2) || (expected.length != observed.length)) { throw new IllegalArgumentException( "observed, expected array lengths incorrect"); } [BUGGY] if (!isPositive(expected) || !isNonNegative(observed)) { [BUGGY] throw new IllegalArgumentException( "observed counts must be non-negative and expected counts must be postive"); } double sumSq = 0.0d; double dev = 0.0d; for (int i = 0; i < observed.length; i++) { dev = ((double) observed[i] - expected[i]); sumSq += dev * dev / expected[i]; } return sumSq; [CLASS] ChiSquareTestImpl [METHOD] chiSquare [RETURN_TYPE] double  double[] expected long[] observed [VARIABLES] ChiSquaredDistribution distribution x boolean double[] expected long[] observed double dev sumSq int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError testChiSquareLargeTestStatistic [CONTEXT] public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException { if ((expected.length < 2) || (expected.length != observed.length)) { throw new IllegalArgumentException( "observed, expected array lengths incorrect"); } [BUGGY] [BUGGY] if (!isPositive(expected) || !isNonNegative(observed)) { throw new IllegalArgumentException( "observed counts must be non-negative and expected counts must be postive"); } double sumSq = 0.0d; double dev = 0.0d; for (int i = 0; i < observed.length; i++) { dev = ((double) observed[i] - expected[i]); sumSq += dev * dev / expected[i]; } return sumSq; [CLASS] ChiSquareTestImpl [METHOD] chiSquare [RETURN_TYPE] double  double[] expected long[] observed [VARIABLES] ChiSquaredDistribution distribution x boolean double[] expected long[] observed double dev sumSq int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	add	
5	[BUG] [BUGGY] double sumSq = 0.0d; [FE] AssertionFailedError testChiSquareLargeTestStatistic [CONTEXT] public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException { if ((expected.length < 2) || (expected.length != observed.length)) { throw new IllegalArgumentException( "observed, expected array lengths incorrect"); } if (!isPositive(expected) || !isNonNegative(observed)) { throw new IllegalArgumentException( "observed counts must be non-negative and expected counts must be postive"); } [BUGGY] double sumSq = 0.0d; [BUGGY] double dev = 0.0d; for (int i = 0; i < observed.length; i++) { dev = ((double) observed[i] - expected[i]); sumSq += dev * dev / expected[i]; } return sumSq; } [CLASS] ChiSquareTestImpl [METHOD] chiSquare [RETURN_TYPE] double  double[] expected long[] observed [VARIABLES] ChiSquaredDistribution distribution x boolean double[] expected long[] observed double dev sumSq int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError testChiSquareLargeTestStatistic [CONTEXT] public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException { if ((expected.length < 2) || (expected.length != observed.length)) { throw new IllegalArgumentException( "observed, expected array lengths incorrect"); } if (!isPositive(expected) || !isNonNegative(observed)) { throw new IllegalArgumentException( "observed counts must be non-negative and expected counts must be postive"); } [BUGGY] [BUGGY] double sumSq = 0.0d; double dev = 0.0d; for (int i = 0; i < observed.length; i++) { dev = ((double) observed[i] - expected[i]); sumSq += dev * dev / expected[i]; } return sumSq; } [CLASS] ChiSquareTestImpl [METHOD] chiSquare [RETURN_TYPE] double  double[] expected long[] observed [VARIABLES] ChiSquaredDistribution distribution x boolean double[] expected long[] observed double dev sumSq int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	
7	[BUG] [BUGGY] double dev = 0.0d; [FE] AssertionFailedError testChiSquareLargeTestStatistic [CONTEXT] throws IllegalArgumentException { if ((expected.length < 2) || (expected.length != observed.length)) { throw new IllegalArgumentException( "observed, expected array lengths incorrect"); } if (!isPositive(expected) || !isNonNegative(observed)) { throw new IllegalArgumentException( "observed counts must be non-negative and expected counts must be postive"); } double sumSq = 0.0d; [BUGGY] double dev = 0.0d; [BUGGY] for (int i = 0; i < observed.length; i++) { dev = ((double) observed[i] - expected[i]); sumSq += dev * dev / expected[i]; } return sumSq; } [CLASS] ChiSquareTestImpl [METHOD] chiSquare [RETURN_TYPE] double  double[] expected long[] observed [VARIABLES] ChiSquaredDistribution distribution x boolean double[] expected long[] observed double dev sumSq int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError testChiSquareLargeTestStatistic [CONTEXT] throws IllegalArgumentException { if ((expected.length < 2) || (expected.length != observed.length)) { throw new IllegalArgumentException( "observed, expected array lengths incorrect"); } if (!isPositive(expected) || !isNonNegative(observed)) { throw new IllegalArgumentException( "observed counts must be non-negative and expected counts must be postive"); } double sumSq = 0.0d; [BUGGY] [BUGGY] double dev = 0.0d; for (int i = 0; i < observed.length; i++) { dev = ((double) observed[i] - expected[i]); sumSq += dev * dev / expected[i]; } return sumSq; } [CLASS] ChiSquareTestImpl [METHOD] chiSquare [RETURN_TYPE] double  double[] expected long[] observed [VARIABLES] ChiSquaredDistribution distribution x boolean double[] expected long[] observed double dev sumSq int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	add	
9	[BUG] [BUGGY] for (int i = 0; i < observed.length; i++) { [FE] AssertionFailedError testChiSquareLargeTestStatistic [CONTEXT] if ((expected.length < 2) || (expected.length != observed.length)) { throw new IllegalArgumentException( "observed, expected array lengths incorrect"); } if (!isPositive(expected) || !isNonNegative(observed)) { throw new IllegalArgumentException( "observed counts must be non-negative and expected counts must be postive"); } double sumSq = 0.0d; double dev = 0.0d; [BUGGY] for (int i = 0; i < observed.length; i++) { [BUGGY] dev = ((double) observed[i] - expected[i]); sumSq += dev * dev / expected[i]; } return sumSq; } [CLASS] ChiSquareTestImpl [METHOD] chiSquare [RETURN_TYPE] double  double[] expected long[] observed [VARIABLES] ChiSquaredDistribution distribution x boolean double[] expected long[] observed double dev sumSq int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError testChiSquareLargeTestStatistic [CONTEXT] if ((expected.length < 2) || (expected.length != observed.length)) { throw new IllegalArgumentException( "observed, expected array lengths incorrect"); } if (!isPositive(expected) || !isNonNegative(observed)) { throw new IllegalArgumentException( "observed counts must be non-negative and expected counts must be postive"); } double sumSq = 0.0d; double dev = 0.0d; [BUGGY] [BUGGY] for (int i = 0; i < observed.length; i++) { dev = ((double) observed[i] - expected[i]); sumSq += dev * dev / expected[i]; } return sumSq; } [CLASS] ChiSquareTestImpl [METHOD] chiSquare [RETURN_TYPE] double  double[] expected long[] observed [VARIABLES] ChiSquaredDistribution distribution x boolean double[] expected long[] observed double dev sumSq int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	add	
11	[BUG] [BUGGY] dev = ((double) observed[i] - expected[i]); [FE] AssertionFailedError testChiSquareLargeTestStatistic [CONTEXT] throw new IllegalArgumentException( "observed, expected array lengths incorrect"); } if (!isPositive(expected) || !isNonNegative(observed)) { throw new IllegalArgumentException( "observed counts must be non-negative and expected counts must be postive"); } double sumSq = 0.0d; double dev = 0.0d; for (int i = 0; i < observed.length; i++) { [BUGGY] dev = ((double) observed[i] - expected[i]); [BUGGY] sumSq += dev * dev / expected[i]; } return sumSq; } [CLASS] ChiSquareTestImpl [METHOD] chiSquare [RETURN_TYPE] double  double[] expected long[] observed [VARIABLES] ChiSquaredDistribution distribution x boolean double[] expected long[] observed double dev sumSq int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError testChiSquareLargeTestStatistic [CONTEXT] throw new IllegalArgumentException( "observed, expected array lengths incorrect"); } if (!isPositive(expected) || !isNonNegative(observed)) { throw new IllegalArgumentException( "observed counts must be non-negative and expected counts must be postive"); } double sumSq = 0.0d; double dev = 0.0d; for (int i = 0; i < observed.length; i++) { [BUGGY] [BUGGY] dev = ((double) observed[i] - expected[i]); sumSq += dev * dev / expected[i]; } return sumSq; } [CLASS] ChiSquareTestImpl [METHOD] chiSquare [RETURN_TYPE] double  double[] expected long[] observed [VARIABLES] ChiSquaredDistribution distribution x boolean double[] expected long[] observed double dev sumSq int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	
13	[BUG] [BUGGY] sumSq += dev * dev / expected[i]; [FE] AssertionFailedError testChiSquareLargeTestStatistic [CONTEXT] "observed, expected array lengths incorrect"); } if (!isPositive(expected) || !isNonNegative(observed)) { throw new IllegalArgumentException( "observed counts must be non-negative and expected counts must be postive"); } double sumSq = 0.0d; double dev = 0.0d; for (int i = 0; i < observed.length; i++) { dev = ((double) observed[i] - expected[i]); [BUGGY] sumSq += dev * dev / expected[i]; [BUGGY] } return sumSq; } [CLASS] ChiSquareTestImpl [METHOD] chiSquare [RETURN_TYPE] double  double[] expected long[] observed [VARIABLES] ChiSquaredDistribution distribution x boolean double[] expected long[] observed double dev sumSq int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError testChiSquareLargeTestStatistic [CONTEXT] "observed, expected array lengths incorrect"); } if (!isPositive(expected) || !isNonNegative(observed)) { throw new IllegalArgumentException( "observed counts must be non-negative and expected counts must be postive"); } double sumSq = 0.0d; double dev = 0.0d; for (int i = 0; i < observed.length; i++) { dev = ((double) observed[i] - expected[i]); [BUGGY] [BUGGY] sumSq += dev * dev / expected[i]; } return sumSq; } [CLASS] ChiSquareTestImpl [METHOD] chiSquare [RETURN_TYPE] double  double[] expected long[] observed [VARIABLES] ChiSquaredDistribution distribution x boolean double[] expected long[] observed double dev sumSq int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	
15	[BUG] [BUGGY] return sumSq; [FE] AssertionFailedError testChiSquareLargeTestStatistic [CONTEXT] if (!isPositive(expected) || !isNonNegative(observed)) { throw new IllegalArgumentException( "observed counts must be non-negative and expected counts must be postive"); } double sumSq = 0.0d; double dev = 0.0d; for (int i = 0; i < observed.length; i++) { dev = ((double) observed[i] - expected[i]); sumSq += dev * dev / expected[i]; } [BUGGY] return sumSq; [BUGGY] } [CLASS] ChiSquareTestImpl [METHOD] chiSquare [RETURN_TYPE] double  double[] expected long[] observed [VARIABLES] ChiSquaredDistribution distribution x boolean double[] expected long[] observed double dev sumSq int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError testChiSquareLargeTestStatistic [CONTEXT] if (!isPositive(expected) || !isNonNegative(observed)) { throw new IllegalArgumentException( "observed counts must be non-negative and expected counts must be postive"); } double sumSq = 0.0d; double dev = 0.0d; for (int i = 0; i < observed.length; i++) { dev = ((double) observed[i] - expected[i]); sumSq += dev * dev / expected[i]; } [BUGGY] [BUGGY] return sumSq; } [CLASS] ChiSquareTestImpl [METHOD] chiSquare [RETURN_TYPE] double  double[] expected long[] observed [VARIABLES] ChiSquaredDistribution distribution x boolean double[] expected long[] observed double dev sumSq int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	
17	[BUG] [BUGGY] distribution.setDegreesOfFreedom(expected.length - 1.0); [FE] AssertionFailedError testChiSquareLargeTestStatistic [CONTEXT] public double chiSquareTest(double[] expected, long[] observed) throws IllegalArgumentException, MathException { [BUGGY] distribution.setDegreesOfFreedom(expected.length - 1.0); [BUGGY] return 1.0 - distribution.cumulativeProbability( chiSquare(expected, observed)); } [CLASS] ChiSquareTestImpl [METHOD] chiSquareTest [RETURN_TYPE] double  double[] expected long[] observed [VARIABLES] ChiSquaredDistribution distribution x boolean double[] expected long[] observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	97	97	6	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError testChiSquareLargeTestStatistic [CONTEXT] public double chiSquareTest(double[] expected, long[] observed) throws IllegalArgumentException, MathException { [BUGGY] [BUGGY] distribution.setDegreesOfFreedom(expected.length - 1.0); return 1.0 - distribution.cumulativeProbability( chiSquare(expected, observed)); } [CLASS] ChiSquareTestImpl [METHOD] chiSquareTest [RETURN_TYPE] double  double[] expected long[] observed [VARIABLES] ChiSquaredDistribution distribution x boolean double[] expected long[] observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	97	97	6	add	
19	[BUG] [BUGGY] return 1.0 - distribution.cumulativeProbability( chiSquare(expected, observed)); [FE] AssertionFailedError testChiSquareLargeTestStatistic [CONTEXT] public double chiSquareTest(double[] expected, long[] observed) throws IllegalArgumentException, MathException { distribution.setDegreesOfFreedom(expected.length - 1.0); [BUGGY] return 1.0 - distribution.cumulativeProbability(   chiSquare(expected, observed)); [BUGGY] chiSquare(expected, observed)); } [CLASS] ChiSquareTestImpl [METHOD] chiSquareTest [RETURN_TYPE] double  double[] expected long[] observed [VARIABLES] ChiSquaredDistribution distribution x boolean double[] expected long[] observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError testChiSquareLargeTestStatistic [CONTEXT] public double chiSquareTest(double[] expected, long[] observed) throws IllegalArgumentException, MathException { distribution.setDegreesOfFreedom(expected.length - 1.0); [BUGGY] [BUGGY] return 1.0 - distribution.cumulativeProbability(   chiSquare(expected, observed)); chiSquare(expected, observed)); } [CLASS] ChiSquareTestImpl [METHOD] chiSquareTest [RETURN_TYPE] double  double[] expected long[] observed [VARIABLES] ChiSquaredDistribution distribution x boolean double[] expected long[] observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	add	
