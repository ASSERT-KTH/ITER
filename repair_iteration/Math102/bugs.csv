bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] if ((expected.length < 2) || (expected.length != observed.length)) { [FE] AssertionFailedError [CONTEXT] public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException { [BUGGY] if ((expected.length < 2) || (expected.length != observed.length)) { [BUGGY] throw new IllegalArgumentException( "observed, expected array lengths incorrect"); } if (!isPositive(expected) || !isNonNegative(observed)) { throw new IllegalArgumentException( "observed counts must be non-negative and expected counts must be postive"); } double sumSq = 0.0d; double dev = 0.0d; for (int i = 0; i < observed.length; i++) { [CLASS] ChiSquareTestImpl [METHOD] chiSquare [RETURN_TYPE] double  double[] expected long[] observed [VARIABLES] ChiSquaredDistribution distribution x boolean double[] expected long[] observed double dev sumSq int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException { [BUGGY] [BUGGY] if ((expected.length < 2) || (expected.length != observed.length)) { throw new IllegalArgumentException( "observed, expected array lengths incorrect"); } if (!isPositive(expected) || !isNonNegative(observed)) { throw new IllegalArgumentException( "observed counts must be non-negative and expected counts must be postive"); } double sumSq = 0.0d; double dev = 0.0d; for (int i = 0; i < observed.length; i++) { [CLASS] ChiSquareTestImpl [METHOD] chiSquare [RETURN_TYPE] double  double[] expected long[] observed [VARIABLES] ChiSquaredDistribution distribution x boolean double[] expected long[] observed double dev sumSq int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	66	66	6	add	
3	[BUG] [BUGGY] if (!isPositive(expected) || !isNonNegative(observed)) { [FE] AssertionFailedError [CONTEXT] public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException { if ((expected.length < 2) || (expected.length != observed.length)) { throw new IllegalArgumentException( "observed, expected array lengths incorrect"); } [BUGGY] if (!isPositive(expected) || !isNonNegative(observed)) { [BUGGY] throw new IllegalArgumentException( "observed counts must be non-negative and expected counts must be postive"); } double sumSq = 0.0d; double dev = 0.0d; for (int i = 0; i < observed.length; i++) { dev = ((double) observed[i] - expected[i]); sumSq += dev * dev / expected[i]; } return sumSq; [CLASS] ChiSquareTestImpl [METHOD] chiSquare [RETURN_TYPE] double  double[] expected long[] observed [VARIABLES] ChiSquaredDistribution distribution x boolean double[] expected long[] observed double dev sumSq int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException { if ((expected.length < 2) || (expected.length != observed.length)) { throw new IllegalArgumentException( "observed, expected array lengths incorrect"); } [BUGGY] [BUGGY] if (!isPositive(expected) || !isNonNegative(observed)) { throw new IllegalArgumentException( "observed counts must be non-negative and expected counts must be postive"); } double sumSq = 0.0d; double dev = 0.0d; for (int i = 0; i < observed.length; i++) { dev = ((double) observed[i] - expected[i]); sumSq += dev * dev / expected[i]; } return sumSq; [CLASS] ChiSquareTestImpl [METHOD] chiSquare [RETURN_TYPE] double  double[] expected long[] observed [VARIABLES] ChiSquaredDistribution distribution x boolean double[] expected long[] observed double dev sumSq int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	add	
5	[BUG] [BUGGY] double sumSq = 0.0d; [FE] AssertionFailedError [CONTEXT] public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException { if ((expected.length < 2) || (expected.length != observed.length)) { throw new IllegalArgumentException( "observed, expected array lengths incorrect"); } if (!isPositive(expected) || !isNonNegative(observed)) { throw new IllegalArgumentException( "observed counts must be non-negative and expected counts must be postive"); } [BUGGY] double sumSq = 0.0d; [BUGGY] double dev = 0.0d; for (int i = 0; i < observed.length; i++) { dev = ((double) observed[i] - expected[i]); sumSq += dev * dev / expected[i]; } return sumSq; } [CLASS] ChiSquareTestImpl [METHOD] chiSquare [RETURN_TYPE] double  double[] expected long[] observed [VARIABLES] ChiSquaredDistribution distribution x boolean double[] expected long[] observed double dev sumSq int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException { if ((expected.length < 2) || (expected.length != observed.length)) { throw new IllegalArgumentException( "observed, expected array lengths incorrect"); } if (!isPositive(expected) || !isNonNegative(observed)) { throw new IllegalArgumentException( "observed counts must be non-negative and expected counts must be postive"); } [BUGGY] [BUGGY] double sumSq = 0.0d; double dev = 0.0d; for (int i = 0; i < observed.length; i++) { dev = ((double) observed[i] - expected[i]); sumSq += dev * dev / expected[i]; } return sumSq; } [CLASS] ChiSquareTestImpl [METHOD] chiSquare [RETURN_TYPE] double  double[] expected long[] observed [VARIABLES] ChiSquaredDistribution distribution x boolean double[] expected long[] observed double dev sumSq int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	
7	[BUG] [BUGGY] double dev = 0.0d; [FE] AssertionFailedError [CONTEXT] throws IllegalArgumentException { if ((expected.length < 2) || (expected.length != observed.length)) { throw new IllegalArgumentException( "observed, expected array lengths incorrect"); } if (!isPositive(expected) || !isNonNegative(observed)) { throw new IllegalArgumentException( "observed counts must be non-negative and expected counts must be postive"); } double sumSq = 0.0d; [BUGGY] double dev = 0.0d; [BUGGY] for (int i = 0; i < observed.length; i++) { dev = ((double) observed[i] - expected[i]); sumSq += dev * dev / expected[i]; } return sumSq; } [CLASS] ChiSquareTestImpl [METHOD] chiSquare [RETURN_TYPE] double  double[] expected long[] observed [VARIABLES] ChiSquaredDistribution distribution x boolean double[] expected long[] observed double dev sumSq int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throws IllegalArgumentException { if ((expected.length < 2) || (expected.length != observed.length)) { throw new IllegalArgumentException( "observed, expected array lengths incorrect"); } if (!isPositive(expected) || !isNonNegative(observed)) { throw new IllegalArgumentException( "observed counts must be non-negative and expected counts must be postive"); } double sumSq = 0.0d; [BUGGY] [BUGGY] double dev = 0.0d; for (int i = 0; i < observed.length; i++) { dev = ((double) observed[i] - expected[i]); sumSq += dev * dev / expected[i]; } return sumSq; } [CLASS] ChiSquareTestImpl [METHOD] chiSquare [RETURN_TYPE] double  double[] expected long[] observed [VARIABLES] ChiSquaredDistribution distribution x boolean double[] expected long[] observed double dev sumSq int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	75	75	6	add	
9	[BUG] [BUGGY] for (int i = 0; i < observed.length; i++) { [FE] AssertionFailedError [CONTEXT] if ((expected.length < 2) || (expected.length != observed.length)) { throw new IllegalArgumentException( "observed, expected array lengths incorrect"); } if (!isPositive(expected) || !isNonNegative(observed)) { throw new IllegalArgumentException( "observed counts must be non-negative and expected counts must be postive"); } double sumSq = 0.0d; double dev = 0.0d; [BUGGY] for (int i = 0; i < observed.length; i++) { [BUGGY] dev = ((double) observed[i] - expected[i]); sumSq += dev * dev / expected[i]; } return sumSq; } [CLASS] ChiSquareTestImpl [METHOD] chiSquare [RETURN_TYPE] double  double[] expected long[] observed [VARIABLES] ChiSquaredDistribution distribution x boolean double[] expected long[] observed double dev sumSq int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if ((expected.length < 2) || (expected.length != observed.length)) { throw new IllegalArgumentException( "observed, expected array lengths incorrect"); } if (!isPositive(expected) || !isNonNegative(observed)) { throw new IllegalArgumentException( "observed counts must be non-negative and expected counts must be postive"); } double sumSq = 0.0d; double dev = 0.0d; [BUGGY] [BUGGY] for (int i = 0; i < observed.length; i++) { dev = ((double) observed[i] - expected[i]); sumSq += dev * dev / expected[i]; } return sumSq; } [CLASS] ChiSquareTestImpl [METHOD] chiSquare [RETURN_TYPE] double  double[] expected long[] observed [VARIABLES] ChiSquaredDistribution distribution x boolean double[] expected long[] observed double dev sumSq int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	add	
11	[BUG] [BUGGY] dev = ((double) observed[i] - expected[i]); [FE] AssertionFailedError [CONTEXT] throw new IllegalArgumentException( "observed, expected array lengths incorrect"); } if (!isPositive(expected) || !isNonNegative(observed)) { throw new IllegalArgumentException( "observed counts must be non-negative and expected counts must be postive"); } double sumSq = 0.0d; double dev = 0.0d; for (int i = 0; i < observed.length; i++) { [BUGGY] dev = ((double) observed[i] - expected[i]); [BUGGY] sumSq += dev * dev / expected[i]; } return sumSq; } [CLASS] ChiSquareTestImpl [METHOD] chiSquare [RETURN_TYPE] double  double[] expected long[] observed [VARIABLES] ChiSquaredDistribution distribution x boolean double[] expected long[] observed double dev sumSq int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throw new IllegalArgumentException( "observed, expected array lengths incorrect"); } if (!isPositive(expected) || !isNonNegative(observed)) { throw new IllegalArgumentException( "observed counts must be non-negative and expected counts must be postive"); } double sumSq = 0.0d; double dev = 0.0d; for (int i = 0; i < observed.length; i++) { [BUGGY] [BUGGY] dev = ((double) observed[i] - expected[i]); sumSq += dev * dev / expected[i]; } return sumSq; } [CLASS] ChiSquareTestImpl [METHOD] chiSquare [RETURN_TYPE] double  double[] expected long[] observed [VARIABLES] ChiSquaredDistribution distribution x boolean double[] expected long[] observed double dev sumSq int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	77	77	6	add	
13	[BUG] [BUGGY] sumSq += dev * dev / expected[i]; [FE] AssertionFailedError [CONTEXT] "observed, expected array lengths incorrect"); } if (!isPositive(expected) || !isNonNegative(observed)) { throw new IllegalArgumentException( "observed counts must be non-negative and expected counts must be postive"); } double sumSq = 0.0d; double dev = 0.0d; for (int i = 0; i < observed.length; i++) { dev = ((double) observed[i] - expected[i]); [BUGGY] sumSq += dev * dev / expected[i]; [BUGGY] } return sumSq; } [CLASS] ChiSquareTestImpl [METHOD] chiSquare [RETURN_TYPE] double  double[] expected long[] observed [VARIABLES] ChiSquaredDistribution distribution x boolean double[] expected long[] observed double dev sumSq int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] "observed, expected array lengths incorrect"); } if (!isPositive(expected) || !isNonNegative(observed)) { throw new IllegalArgumentException( "observed counts must be non-negative and expected counts must be postive"); } double sumSq = 0.0d; double dev = 0.0d; for (int i = 0; i < observed.length; i++) { dev = ((double) observed[i] - expected[i]); [BUGGY] [BUGGY] sumSq += dev * dev / expected[i]; } return sumSq; } [CLASS] ChiSquareTestImpl [METHOD] chiSquare [RETURN_TYPE] double  double[] expected long[] observed [VARIABLES] ChiSquaredDistribution distribution x boolean double[] expected long[] observed double dev sumSq int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	
15	[BUG] [BUGGY] return sumSq; [FE] AssertionFailedError [CONTEXT] if (!isPositive(expected) || !isNonNegative(observed)) { throw new IllegalArgumentException( "observed counts must be non-negative and expected counts must be postive"); } double sumSq = 0.0d; double dev = 0.0d; for (int i = 0; i < observed.length; i++) { dev = ((double) observed[i] - expected[i]); sumSq += dev * dev / expected[i]; } [BUGGY] return sumSq; [BUGGY] } [CLASS] ChiSquareTestImpl [METHOD] chiSquare [RETURN_TYPE] double  double[] expected long[] observed [VARIABLES] ChiSquaredDistribution distribution x boolean double[] expected long[] observed double dev sumSq int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (!isPositive(expected) || !isNonNegative(observed)) { throw new IllegalArgumentException( "observed counts must be non-negative and expected counts must be postive"); } double sumSq = 0.0d; double dev = 0.0d; for (int i = 0; i < observed.length; i++) { dev = ((double) observed[i] - expected[i]); sumSq += dev * dev / expected[i]; } [BUGGY] [BUGGY] return sumSq; } [CLASS] ChiSquareTestImpl [METHOD] chiSquare [RETURN_TYPE] double  double[] expected long[] observed [VARIABLES] ChiSquaredDistribution distribution x boolean double[] expected long[] observed double dev sumSq int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	80	80	6	add	
17	[BUG] [BUGGY] distribution.setDegreesOfFreedom(expected.length - 1.0); [FE] AssertionFailedError [CONTEXT] public double chiSquareTest(double[] expected, long[] observed) throws IllegalArgumentException, MathException { [BUGGY] distribution.setDegreesOfFreedom(expected.length - 1.0); [BUGGY] return 1.0 - distribution.cumulativeProbability( chiSquare(expected, observed)); } [CLASS] ChiSquareTestImpl [METHOD] chiSquareTest [RETURN_TYPE] double  double[] expected long[] observed [VARIABLES] ChiSquaredDistribution distribution x boolean double[] expected long[] observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	97	97	6	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double chiSquareTest(double[] expected, long[] observed) throws IllegalArgumentException, MathException { [BUGGY] [BUGGY] distribution.setDegreesOfFreedom(expected.length - 1.0); return 1.0 - distribution.cumulativeProbability( chiSquare(expected, observed)); } [CLASS] ChiSquareTestImpl [METHOD] chiSquareTest [RETURN_TYPE] double  double[] expected long[] observed [VARIABLES] ChiSquaredDistribution distribution x boolean double[] expected long[] observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	97	97	6	add	
19	[BUG] [BUGGY] return 1.0 - distribution.cumulativeProbability( chiSquare(expected, observed)); [FE] AssertionFailedError [CONTEXT] public double chiSquareTest(double[] expected, long[] observed) throws IllegalArgumentException, MathException { distribution.setDegreesOfFreedom(expected.length - 1.0); [BUGGY] return 1.0 - distribution.cumulativeProbability(   chiSquare(expected, observed)); [BUGGY] chiSquare(expected, observed)); } [CLASS] ChiSquareTestImpl [METHOD] chiSquareTest [RETURN_TYPE] double  double[] expected long[] observed [VARIABLES] ChiSquaredDistribution distribution x boolean double[] expected long[] observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double chiSquareTest(double[] expected, long[] observed) throws IllegalArgumentException, MathException { distribution.setDegreesOfFreedom(expected.length - 1.0); [BUGGY] [BUGGY] return 1.0 - distribution.cumulativeProbability(   chiSquare(expected, observed)); chiSquare(expected, observed)); } [CLASS] ChiSquareTestImpl [METHOD] chiSquareTest [RETURN_TYPE] double  double[] expected long[] observed [VARIABLES] ChiSquaredDistribution distribution x boolean double[] expected long[] observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	add	
21	[BUG] [BUGGY] for (int i = 0; i < in.length; i ++) { [FE] AssertionFailedError [CONTEXT] private boolean isPositive(double[] in) { [BUGGY] for (int i = 0; i < in.length; i ++) { [BUGGY] if (in[i] <= 0) { return false; } } return true; } [CLASS] ChiSquareTestImpl [METHOD] isPositive [RETURN_TYPE] boolean  double[] in [VARIABLES] ChiSquaredDistribution distribution x boolean double[] in int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	350	350	6	replace	
22	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private boolean isPositive(double[] in) { [BUGGY] [BUGGY] for (int i = 0; i < in.length; i ++) { if (in[i] <= 0) { return false; } } return true; } [CLASS] ChiSquareTestImpl [METHOD] isPositive [RETURN_TYPE] boolean  double[] in [VARIABLES] ChiSquaredDistribution distribution x boolean double[] in int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	350	350	6	add	
23	[BUG] [BUGGY] if (in[i] <= 0) { [FE] AssertionFailedError [CONTEXT] private boolean isPositive(double[] in) { for (int i = 0; i < in.length; i ++) { [BUGGY] if (in[i] <= 0) { [BUGGY] return false; } } return true; } [CLASS] ChiSquareTestImpl [METHOD] isPositive [RETURN_TYPE] boolean  double[] in [VARIABLES] ChiSquaredDistribution distribution x boolean double[] in int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	351	351	6	replace	
24	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private boolean isPositive(double[] in) { for (int i = 0; i < in.length; i ++) { [BUGGY] [BUGGY] if (in[i] <= 0) { return false; } } return true; } [CLASS] ChiSquareTestImpl [METHOD] isPositive [RETURN_TYPE] boolean  double[] in [VARIABLES] ChiSquaredDistribution distribution x boolean double[] in int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	351	351	6	add	
25	[BUG] [BUGGY] return true; [FE] AssertionFailedError [CONTEXT] private boolean isPositive(double[] in) { for (int i = 0; i < in.length; i ++) { if (in[i] <= 0) { return false; } } [BUGGY] return true; [BUGGY] } [CLASS] ChiSquareTestImpl [METHOD] isPositive [RETURN_TYPE] boolean  double[] in [VARIABLES] ChiSquaredDistribution distribution x boolean double[] in int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	355	355	6	replace	
26	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private boolean isPositive(double[] in) { for (int i = 0; i < in.length; i ++) { if (in[i] <= 0) { return false; } } [BUGGY] [BUGGY] return true; } [CLASS] ChiSquareTestImpl [METHOD] isPositive [RETURN_TYPE] boolean  double[] in [VARIABLES] ChiSquaredDistribution distribution x boolean double[] in int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	355	355	6	add	
27	[BUG] [BUGGY] for (int i = 0; i < in.length; i ++) { [FE] AssertionFailedError [CONTEXT] private boolean isNonNegative(long[] in) { [BUGGY] for (int i = 0; i < in.length; i ++) { [BUGGY] if (in[i] < 0) { return false; } } return true; } [CLASS] ChiSquareTestImpl [METHOD] isNonNegative [RETURN_TYPE] boolean  long[] in [VARIABLES] ChiSquaredDistribution distribution x boolean long[] in int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	0.7071067811865476	367	367	6	replace	
28	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private boolean isNonNegative(long[] in) { [BUGGY] [BUGGY] for (int i = 0; i < in.length; i ++) { if (in[i] < 0) { return false; } } return true; } [CLASS] ChiSquareTestImpl [METHOD] isNonNegative [RETURN_TYPE] boolean  long[] in [VARIABLES] ChiSquaredDistribution distribution x boolean long[] in int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	0.7071067811865476	367	367	6	add	
29	[BUG] [BUGGY] if (in[i] < 0) { [FE] AssertionFailedError [CONTEXT] private boolean isNonNegative(long[] in) { for (int i = 0; i < in.length; i ++) { [BUGGY] if (in[i] < 0) { [BUGGY] return false; } } return true; } [CLASS] ChiSquareTestImpl [METHOD] isNonNegative [RETURN_TYPE] boolean  long[] in [VARIABLES] ChiSquaredDistribution distribution x boolean long[] in int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	0.7071067811865476	368	368	6	replace	
30	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private boolean isNonNegative(long[] in) { for (int i = 0; i < in.length; i ++) { [BUGGY] [BUGGY] if (in[i] < 0) { return false; } } return true; } [CLASS] ChiSquareTestImpl [METHOD] isNonNegative [RETURN_TYPE] boolean  long[] in [VARIABLES] ChiSquaredDistribution distribution x boolean long[] in int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	0.7071067811865476	368	368	6	add	
31	[BUG] [BUGGY] return true; [FE] AssertionFailedError [CONTEXT] private boolean isNonNegative(long[] in) { for (int i = 0; i < in.length; i ++) { if (in[i] < 0) { return false; } } [BUGGY] return true; [BUGGY] } [CLASS] ChiSquareTestImpl [METHOD] isNonNegative [RETURN_TYPE] boolean  long[] in [VARIABLES] ChiSquaredDistribution distribution x boolean long[] in int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	0.7071067811865476	372	372	6	replace	
32	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private boolean isNonNegative(long[] in) { for (int i = 0; i < in.length; i ++) { if (in[i] < 0) { return false; } } [BUGGY] [BUGGY] return true; } [CLASS] ChiSquareTestImpl [METHOD] isNonNegative [RETURN_TYPE] boolean  long[] in [VARIABLES] ChiSquaredDistribution distribution x boolean long[] in int i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	0.7071067811865476	372	372	6	add	
33	[BUG] [BUGGY] this(new ChiSquaredDistributionImpl(1.0)); [FE] AssertionFailedError [CONTEXT] public ChiSquareTestImpl() { [BUGGY] this(new ChiSquaredDistributionImpl(1.0)); [BUGGY] } [CLASS] ChiSquareTestImpl [METHOD] <init> [RETURN_TYPE] ChiSquareTestImpl()  [VARIABLES] ChiSquaredDistribution distribution boolean  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	0.5	39	39	6	replace	
34	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public ChiSquareTestImpl() { [BUGGY] [BUGGY] this(new ChiSquaredDistributionImpl(1.0)); } [CLASS] ChiSquareTestImpl [METHOD] <init> [RETURN_TYPE] ChiSquareTestImpl()  [VARIABLES] ChiSquaredDistribution distribution boolean  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	0.5	39	39	6	add	
35	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] public ChiSquareTestImpl() { this(new ChiSquaredDistributionImpl(1.0)); [BUGGY] } [BUGGY]  [CLASS] ChiSquareTestImpl [METHOD] <init> [RETURN_TYPE] ChiSquareTestImpl()  [VARIABLES] ChiSquaredDistribution distribution boolean  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	0.5	40	40	6	replace	
36	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public ChiSquareTestImpl() { this(new ChiSquaredDistributionImpl(1.0)); [BUGGY] [BUGGY] } [CLASS] ChiSquareTestImpl [METHOD] <init> [RETURN_TYPE] ChiSquareTestImpl()  [VARIABLES] ChiSquaredDistribution distribution boolean  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	0.5	40	40	6	add	
37	[BUG] [BUGGY] super(); [FE] AssertionFailedError [CONTEXT] public ChiSquareTestImpl(ChiSquaredDistribution x) { [BUGGY] super(); [BUGGY] setDistribution(x); } [CLASS] ChiSquareTestImpl [METHOD] <init> [RETURN_TYPE] ChiSquaredDistribution)  ChiSquaredDistribution x [VARIABLES] ChiSquaredDistribution distribution x boolean  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	0.5	49	49	6	replace	
38	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public ChiSquareTestImpl(ChiSquaredDistribution x) { [BUGGY] [BUGGY] super(); setDistribution(x); } [CLASS] ChiSquareTestImpl [METHOD] <init> [RETURN_TYPE] ChiSquaredDistribution)  ChiSquaredDistribution x [VARIABLES] ChiSquaredDistribution distribution x boolean  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	0.5	49	49	6	add	
39	[BUG] [BUGGY] setDistribution(x); [FE] AssertionFailedError [CONTEXT] public ChiSquareTestImpl(ChiSquaredDistribution x) { super(); [BUGGY] setDistribution(x); [BUGGY] } [CLASS] ChiSquareTestImpl [METHOD] <init> [RETURN_TYPE] ChiSquaredDistribution)  ChiSquaredDistribution x [VARIABLES] ChiSquaredDistribution distribution x boolean  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	0.5	50	50	6	replace	
40	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public ChiSquareTestImpl(ChiSquaredDistribution x) { super(); [BUGGY] [BUGGY] setDistribution(x); } [CLASS] ChiSquareTestImpl [METHOD] <init> [RETURN_TYPE] ChiSquaredDistribution)  ChiSquaredDistribution x [VARIABLES] ChiSquaredDistribution distribution x boolean  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	0.5	50	50	6	add	
41	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] public ChiSquareTestImpl(ChiSquaredDistribution x) { super(); setDistribution(x); [BUGGY] } [BUGGY]  [CLASS] ChiSquareTestImpl [METHOD] <init> [RETURN_TYPE] ChiSquaredDistribution)  ChiSquaredDistribution x [VARIABLES] ChiSquaredDistribution distribution x boolean  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	0.5	51	51	6	replace	
42	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public ChiSquareTestImpl(ChiSquaredDistribution x) { super(); setDistribution(x); [BUGGY] [BUGGY] } [CLASS] ChiSquareTestImpl [METHOD] <init> [RETURN_TYPE] ChiSquaredDistribution)  ChiSquaredDistribution x [VARIABLES] ChiSquaredDistribution distribution x boolean  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	0.5	51	51	6	add	
43	[BUG] [BUGGY] distribution = value; [FE] AssertionFailedError [CONTEXT] public void setDistribution(ChiSquaredDistribution value) { [BUGGY] distribution = value; [BUGGY] } [CLASS] ChiSquareTestImpl [METHOD] setDistribution [RETURN_TYPE] void  ChiSquaredDistribution value [VARIABLES] ChiSquaredDistribution distribution value x boolean  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	0.5	402	402	6	replace	
44	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void setDistribution(ChiSquaredDistribution value) { [BUGGY] [BUGGY] distribution = value; } [CLASS] ChiSquareTestImpl [METHOD] setDistribution [RETURN_TYPE] void  ChiSquaredDistribution value [VARIABLES] ChiSquaredDistribution distribution value x boolean  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	0.5	402	402	6	add	
45	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] public void setDistribution(ChiSquaredDistribution value) { distribution = value; [BUGGY] } [BUGGY]  [CLASS] ChiSquareTestImpl [METHOD] setDistribution [RETURN_TYPE] void  ChiSquaredDistribution value [VARIABLES] ChiSquaredDistribution distribution value x boolean  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	0.5	403	403	6	replace	
46	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void setDistribution(ChiSquaredDistribution value) { distribution = value; [BUGGY] [BUGGY] } [CLASS] ChiSquareTestImpl [METHOD] setDistribution [RETURN_TYPE] void  ChiSquaredDistribution value [VARIABLES] ChiSquaredDistribution distribution value x boolean  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	0.5	403	403	6	add	
