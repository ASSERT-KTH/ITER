bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  1.0  -  observed.cumulativeProbability(chiSquare(expected,  distribution));  [CE]  no  suitable  method  found  for  chiSquare(double[],ChiSquaredDistribution)  [FE]    AssertionFailedError  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]  return  1.0  -  observed.cumulativeProbability(chiSquare(expected,  distribution));  [BUGGY]  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	return  1.0  -  observed.cumulativeProbability(chiSquare(expected,  distribution));	return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  	non-compiled	[CE]  no  suitable  method  found  for  chiSquare(double[],ChiSquaredDistribution)	19	None	replace
2	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]  return  1.0  /  distribution.cumulativeProbability(chiSquare(expected,  observed));  [BUGGY]  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	add	return  1.0  /  distribution.cumulativeProbability(chiSquare(expected,  observed));	return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  	compilable	  [FE]  AssertionFailedError  	19	6	replace
3	[BUG]  [BUGGY]  return  1.0  /  distribution.cumulativeProbability(chiSquare(expected,  observed));  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]  return  1.0  /  distribution.cumulativeProbability(chiSquare(expected,  observed));  [BUGGY]  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	return  1.0  /  distribution.cumulativeProbability(chiSquare(expected,  observed));	return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  	compilable	  [FE]  AssertionFailedError  	19	6	replace
4	[BUG]  [BUGGY]  return  1.0  -  observed.cumulativeProbability(chiSquare(expected,  expected));  [CE]  no  suitable  method  found  for  chiSquare(double[],double[])  [FE]        AssertionFailedError  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]  return  1.0  -  observed.cumulativeProbability(chiSquare(expected,  expected));  [BUGGY]  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	return  1.0  -  observed.cumulativeProbability(chiSquare(expected,  expected));	return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  	non-compiled	[CE]  no  suitable  method  found  for  chiSquare(double[],double[])	19	None	replace
5	[BUG]  [BUGGY]    [CE]  missing  return  statement  [FE]          AssertionFailedError  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]    [BUGGY]  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	  	return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  	non-compiled	[CE]  missing  return  statement	19	None	replace
6	[BUG]  [BUGGY]    ((  ChiSquaredDistributionImpl)distribution).doubleValue();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]    ((  ChiSquaredDistributionImpl)distribution).doubleValue();  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(    chiSquare(expected,  observed));  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	    ((  ChiSquaredDistributionImpl)distribution).doubleValue();		non-compiled	[CE]  cannot  find  symbol	20	None	add
7	[BUG]  [BUGGY]    ((  ChiSquaredDistributionImpl)distribution).setDegreesOfFreedom(true);  [CE]  method  setDegreesOfFreedom  in  class  ChiSquaredDistributionImpl  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]    ((  ChiSquaredDistributionImpl)distribution).setDegreesOfFreedom(true);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(    chiSquare(expected,  observed));  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	    ((  ChiSquaredDistributionImpl)distribution).setDegreesOfFreedom(true);		non-compiled	[CE]  method  setDegreesOfFreedom  in  class  ChiSquaredDistributionImpl  cannot  be  applied  to  given  types;	20	None	add
8	[BUG]  [BUGGY]    ((  ChiSquaredDistributionImpl)distribution).setDegreesOfFreedom(observed);  [CE]  method  setDegreesOfFreedom  in  class  ChiSquaredDistributionImpl  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]    ((  ChiSquaredDistributionImpl)distribution).setDegreesOfFreedom(observed);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(    chiSquare(expected,  observed));  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	    ((  ChiSquaredDistributionImpl)distribution).setDegreesOfFreedom(observed);		non-compiled	[CE]  method  setDegreesOfFreedom  in  class  ChiSquaredDistributionImpl  cannot  be  applied  to  given  types;	20	None	add
9	[BUG]  [BUGGY]    ((  ChiSquaredDistributionImpl)distribution).setDegreesOfFreedom(null);  [CE]  method  setDegreesOfFreedom  in  class  ChiSquaredDistributionImpl  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]    ((  ChiSquaredDistributionImpl)distribution).setDegreesOfFreedom(null);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(    chiSquare(expected,  observed));  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	    ((  ChiSquaredDistributionImpl)distribution).setDegreesOfFreedom(null);		non-compiled	[CE]  method  setDegreesOfFreedom  in  class  ChiSquaredDistributionImpl  cannot  be  applied  to  given  types;	20	None	add
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]    ((  ChiSquaredDistributionImpl)distribution).setDegreesOfFreedom(observed.length);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(    chiSquare(expected,  observed));  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	add	    ((  ChiSquaredDistributionImpl)distribution).setDegreesOfFreedom(observed.length);		compilable	  [FE]  AssertionFailedError  	20	6	add
11	[BUG]  [BUGGY]    ((  ChiSquaredDistributionImpl)distribution).setDegreesOfFreedom(observed.length);  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]    ((  ChiSquaredDistributionImpl)distribution).setDegreesOfFreedom(observed.length);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(    chiSquare(expected,  observed));  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	    ((  ChiSquaredDistributionImpl)distribution).setDegreesOfFreedom(observed.length);		compilable	  [FE]  AssertionFailedError  	20	6	add
12	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    AssertionFailedError  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(chiSquareTest(expected,  observed));  [BUGGY]  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	add	return  1.0  -  distribution.cumulativeProbability(chiSquareTest(expected,  observed));	return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  	compilable	  [FE]  StackOverflowError  	19	6	replace
13	[BUG]  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(chiSquareTest(expected,  observed));  [FE]  StackOverflowError  [FE]    AssertionFailedError  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(chiSquareTest(expected,  observed));  [BUGGY]  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	return  1.0  -  distribution.cumulativeProbability(chiSquareTest(expected,  observed));	return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  	compilable	  [FE]  StackOverflowError  	19	6	replace
14	[BUG]  [BUGGY]  [FE]  MaxIterationsExceededException  [FE]    AssertionFailedError  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]    ((  ChiSquaredDistributionImpl)distribution).setDegreesOfFreedom(1.0);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(    chiSquare(expected,  observed));  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	add	    ((  ChiSquaredDistributionImpl)distribution).setDegreesOfFreedom(1.0);		compilable	  [FE]  MaxIterationsExceededException  	20	6	add
15	[BUG]  [BUGGY]    ((  ChiSquaredDistributionImpl)distribution).setDegreesOfFreedom(1.0);  [FE]  MaxIterationsExceededException  [FE]    AssertionFailedError  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]    ((  ChiSquaredDistributionImpl)distribution).setDegreesOfFreedom(1.0);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(    chiSquare(expected,  observed));  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	    ((  ChiSquaredDistributionImpl)distribution).setDegreesOfFreedom(1.0);		compilable	  [FE]  MaxIterationsExceededException  	20	6	add
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]    ((  ChiSquaredDistributionImpl)distribution).setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(    chiSquare(expected,  observed));  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	add	    ((  ChiSquaredDistributionImpl)distribution).setDegreesOfFreedom(expected.length  -  1.0);		compilable	  [FE]  AssertionFailedError  	20	6	add
17	[BUG]  [BUGGY]    ((  ChiSquaredDistributionImpl)distribution).setDegreesOfFreedom(expected.length  -  1.0);  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]    ((  ChiSquaredDistributionImpl)distribution).setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(    chiSquare(expected,  observed));  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	    ((  ChiSquaredDistributionImpl)distribution).setDegreesOfFreedom(expected.length  -  1.0);		compilable	  [FE]  AssertionFailedError  	20	6	add
18	[BUG]  [BUGGY]    ((  ChiSquaredDistributionImpl)distribution).setDegreesOfFreedom(new  double[expected.length  -  1.0);  [CE]  ']'  expected  [FE]        AssertionFailedError  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]    ((  ChiSquaredDistributionImpl)distribution).setDegreesOfFreedom(new  double[expected.length  -  1.0);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(    chiSquare(expected,  observed));  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	    ((  ChiSquaredDistributionImpl)distribution).setDegreesOfFreedom(new  double[expected.length  -  1.0);		non-compiled	[CE]  ']'  expected	20	None	add
19	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          AssertionFailedError  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]    ((  ChiSquaredDistributionImpl)distribution).setDegreesOfFreedom(0.0);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(    chiSquare(expected,  observed));  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	add	    ((  ChiSquaredDistributionImpl)distribution).setDegreesOfFreedom(0.0);		compilable	  [FE]  IllegalArgumentException  	20	6	add
20	[BUG]  [BUGGY]    ((  ChiSquaredDistributionImpl)distribution).setDegreesOfFreedom(0.0);  [FE]  IllegalArgumentException  [FE]          AssertionFailedError  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]    ((  ChiSquaredDistributionImpl)distribution).setDegreesOfFreedom(0.0);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(    chiSquare(expected,  observed));  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	    ((  ChiSquaredDistributionImpl)distribution).setDegreesOfFreedom(0.0);		compilable	  [FE]  IllegalArgumentException  	20	6	add
21	[BUG]  [BUGGY]  return  1.0  -  observed.cumulativeProbability(chiSquare(expected,  observed));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]  return  1.0  -  observed.cumulativeProbability(chiSquare(expected,  observed));  [BUGGY]  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	return  1.0  -  observed.cumulativeProbability(chiSquare(expected,  observed));	return  1.0  -  distribution.cumulativeProbability(  chiSquare(expected,  observed));  	non-compiled	[CE]  cannot  find  symbol	19	None	replace
22	[BUG]  [BUGGY]    if(distribution!=  null)  {  if(expected[0]  ==  observed)  {  return  1.0;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]    if(distribution!=  null)  {  if(expected[0]  ==  observed)  {  return  1.0;  }  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(    chiSquare(expected,  observed));  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	    if(distribution!=  null)  {  if(expected[0]  ==  observed)  {  return  1.0;  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]    this.distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(    chiSquare(expected,  observed));  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	add	    this.distribution.setDegreesOfFreedom(expected.length  -  1.0);		compilable	  [FE]  AssertionFailedError  	20	6	add
24	[BUG]  [BUGGY]    this.distribution.setDegreesOfFreedom(expected.length  -  1.0);  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]    this.distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(    chiSquare(expected,  observed));  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	    this.distribution.setDegreesOfFreedom(expected.length  -  1.0);		compilable	  [FE]  AssertionFailedError  	20	6	add
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]    this.distribution.setDegreesOfFreedom(expected.length);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(    chiSquare(expected,  observed));  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	add	    this.distribution.setDegreesOfFreedom(expected.length);		compilable	  [FE]  AssertionFailedError  	20	6	add
26	[BUG]  [BUGGY]    this.distribution.setDegreesOfFreedom(expected.length);  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]    this.distribution.setDegreesOfFreedom(expected.length);  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(    chiSquare(expected,  observed));  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	    this.distribution.setDegreesOfFreedom(expected.length);		compilable	  [FE]  AssertionFailedError  	20	6	add
27	[BUG]  [BUGGY]    if(distribution!=  null)  {  if(expected[0]  ==  observed)  {  return  0.0;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]    if(distribution!=  null)  {  if(expected[0]  ==  observed)  {  return  0.0;  }  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(    chiSquare(expected,  observed));  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	    if(distribution!=  null)  {  if(expected[0]  ==  observed)  {  return  0.0;  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
28	[BUG]  [BUGGY]    double[]  observed  =  new  double[distribution.getDegreesOfFreedom()  ];  [CE]  variable  observed  is  already  defined  in  method  chiSquareTest(double[],long[])  [FE]            AssertionFailedError  [CONTEXT]  public  double  chiSquareTest(double[]  expected,  long[]  observed)  throws  IllegalArgumentException,  MathException  {  distribution.setDegreesOfFreedom(expected.length  -  1.0);  [BUGGY]    double[]  observed  =  new  double[distribution.getDegreesOfFreedom()  ];  [BUGGY]  return  1.0  -  distribution.cumulativeProbability(    chiSquare(expected,  observed));  chiSquare(expected,  observed));  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquareTest  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	98	99	6	replace	    double[]  observed  =  new  double[distribution.getDegreesOfFreedom()  ];		non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquareTest(double[],long[])	20	None	add
