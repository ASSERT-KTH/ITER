bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  observed[i]);  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  observed[i]);  }  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	        for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  observed[i]);  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	7	None	add
2	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq[i]  =  ((  double)dev  -  observed[i]);  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq[i]  =  ((  double)dev  -  observed[i]);  }  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	        for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq[i]  =  ((  double)dev  -  observed[i]);  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	7	None	add
3	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  dev);  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  dev);  }  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	        for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  dev);  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	7	None	add
4	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  expected[i]);  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  expected[i]);  }  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	        for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  expected[i]);  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	7	None	add
5	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]);  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]);  }  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	        for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]);  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	7	None	add
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    dev    *    observed[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	1	6	add
7	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	1	6	add
8	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i]  /  dev;  SumSq  +=  dev  *  observed[i]  /  dev;  [CE]  cannot  find  symbol  SumSq  [FE]      AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  observed[i]  /  dev;  SumSq  +=  dev  *  observed[i]  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i]    /    dev;    SumSq  +=  dev  *  observed[i]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  SumSq	1	None	add
9	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i]  /  dev;  int  i  =  observed.length;  sumSq  +=  dev  *  observed[i]  /  dev;  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  observed[i]  /  dev;  int  i  =  observed.length;  sumSq  +=  dev  *  observed[i]  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i]    /    dev;    int  i  =  observed.length;  sumSq  +=  dev  *  observed[i]  /  dev;	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	1	None	add
10	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i]  /  dev;  int  i  =  observed.length;  sumSq  +=  i  *  observed[i]  /  dev;  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  observed[i]  /  dev;  int  i  =  observed.length;  sumSq  +=  i  *  observed[i]  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i]    /    dev;    int  i  =  observed.length;  sumSq  +=  i  *  observed[i]  /  dev;	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	1	None	add
11	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i]  /  dev;  int  i  =  observed.length;  sumSq  +=  ((  double)observed[i]  /  dev);  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  observed[i]  /  dev;  int  i  =  observed.length;  sumSq  +=  ((  double)observed[i]  /  dev);  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i]    /    dev;    int  i  =  observed.length;  sumSq  +=  ((  double)observed[i]  /  dev);	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	1	None	add
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	3	6	add
13	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	3	6	add
14	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i]  /  dev;  SumSq  +=  dev  *  expected[i]  /  dev;  [CE]  cannot  find  symbol  SumSq  [FE]      AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  expected[i]  /  dev;  SumSq  +=  dev  *  expected[i]  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    expected[i]    /    dev;    SumSq  +=  dev  *  expected[i]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  SumSq	3	None	add
15	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i]  /  dev;  int  i  =  observed.length;  sumSq  +=  dev  *  expected[i]  /  dev;  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  expected[i]  /  dev;  int  i  =  observed.length;  sumSq  +=  dev  *  expected[i]  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    expected[i]    /    dev;    int  i  =  observed.length;  sumSq  +=  dev  *  expected[i]  /  dev;	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	3	None	add
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expected[i]  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	3	6	add
17	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expected[i]  /  dev;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expected[i]  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	3	6	add
18	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i]  /  dev;  int  i  =  observed[i];  sumSq  +=  dev  *  expected[i]  /  dev;  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  expected[i]  /  dev;  int  i  =  observed[i];  sumSq  +=  dev  *  expected[i]  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    expected[i]    /    dev;    int  i  =  observed[i];  sumSq  +=  dev  *  expected[i]  /  dev;	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	3	None	add
19	[BUG]  [BUGGY]  sumSq  +=  observed  *  dev  *  observed[i  -  1]  /  dev;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  observed  *  dev  *  observed[i  -  1]  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed  *  dev  *  observed[i  -  1]  /  dev;	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	18	None	replace
20	[BUG]  [BUGGY]  sumSq  +=  expected  *  observed[i  -  1]  /  dev;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  expected  *  observed[i  -  1]  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  expected  *  observed[i  -  1]  /  dev;	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	18	None	replace
21	[BUG]  [BUGGY]  sumSq  +=  observed[i  *  dev  /  dev;  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  observed[i  *  dev  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed[i  *  dev  /  dev;	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    	non-compiled	[CE]  ']'  expected	18	None	replace
22	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(dev))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
23	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]            AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(dev))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	27	None	replace
24	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  dev  *  observed[i  -  1]  /  dev;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	6	add
25	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  dev  *  observed[i  -  1]  /  dev;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	6	add
26	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  SumSq  +=  dev  *  observed[i  -  1]  /  dev;  [CE]  cannot  find  symbol  SumSq  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  SumSq  +=  dev  *  observed[i  -  1]  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i    -    1]    /    dev;    SumSq  +=  dev  *  observed[i  -  1]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  SumSq	17	None	add
27	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  int  i  =  observed.length;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  int  i  =  observed.length;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i    -    1]    /    dev;    int  i  =  observed.length;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	17	None	add
28	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  totalSq  +=  dev  *  observed[i  -  1]  /  dev;  [CE]  cannot  find  symbol  totalSq  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  totalSq  +=  dev  *  observed[i  -  1]  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i    -    1]    /    dev;    totalSq  +=  dev  *  observed[i  -  1]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  totalSq	17	None	add
29	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	6	add
30	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	6	add
31	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	        if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	20	6	add
32	[BUG]  [BUGGY]      if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	        if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	20	6	add
33	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	        if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	20	6	add
34	[BUG]  [BUGGY]      if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	        if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	20	6	add
35	[BUG]  [BUGGY]      if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >>  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]        AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >>  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	        if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >>  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	20	None	add
36	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	        if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	20	6	add
37	[BUG]  [BUGGY]      if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	        if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	20	6	add
38	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  /  dev  /  observed[i];	  	compilable	  [FE]  AssertionFailedError  	24	6	add
39	[BUG]  [BUGGY]  sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  /  dev  /  observed[i];	  	compilable	  [FE]  AssertionFailedError  	24	6	add
40	[BUG]  [BUGGY]  sumSq  +=  dev  /  dev  /  observed[i];  SumSq  +=  dev  /  dev  /  observed[i];  [CE]  cannot  find  symbol  SumSq  [FE]      AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  /  dev  /  observed[i];  SumSq  +=  dev  /  dev  /  observed[i];  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    dev    /    observed[i];    SumSq  +=  dev  /  dev  /  observed[i];	  	non-compiled	[CE]  cannot  find  symbol  SumSq	24	None	add
41	[BUG]  [BUGGY]  sumSq  +=  dev  /  dev  /  observed[i];  int  i  =  observed.length;  sumSq  +=  dev  /  dev  /  observed[i];  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  /  dev  /  observed[i];  int  i  =  observed.length;  sumSq  +=  dev  /  dev  /  observed[i];  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    dev    /    observed[i];    int  i  =  observed.length;  sumSq  +=  dev  /  dev  /  observed[i];	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	24	None	add
42	[BUG]  [BUGGY]  sumSq  +=  dev  /  dev  /  observed[i];  totalSq  +=  dev  /  dev  /  observed[i];  [CE]  cannot  find  symbol  totalSq  [FE]          AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  /  dev  /  observed[i];  totalSq  +=  dev  /  dev  /  observed[i];  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    dev    /    observed[i];    totalSq  +=  dev  /  dev  /  observed[i];	  	non-compiled	[CE]  cannot  find  symbol  totalSq	24	None	add
43	[BUG]  [BUGGY]  sumSq  +=  dev  /  dev  /  observed[i];  int  i  =  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  /  dev  /  observed[i];  int  i  =  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    dev    /    observed[i];    int  i  =  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	24	None	add
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	        if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }	  	compilable	  [FE]  AssertionFailedError  	15	6	add
45	[BUG]  [BUGGY]      if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	        if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }	  	compilable	  [FE]  AssertionFailedError  	15	6	add
46	[BUG]  [BUGGY]      if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  If(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  If(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	        if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    If(dev  <  expected[i])  {  sumSq  +=  observed[i];  }	  	non-compiled	[CE]  ';'  expected	15	None	add
47	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	        if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }	  	compilable	  [FE]  AssertionFailedError  	15	6	add
48	[BUG]  [BUGGY]      if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	        if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }	  	compilable	  [FE]  AssertionFailedError  	15	6	add
49	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	        if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }	  	compilable	  [FE]  AssertionFailedError  	15	6	add
50	[BUG]  [BUGGY]      if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	        if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }	  	compilable	  [FE]  AssertionFailedError  	15	6	add
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	        if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	11	6	add
52	[BUG]  [BUGGY]      if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	        if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	11	6	add
53	[BUG]  [BUGGY]      if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  If(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  If(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	        if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    If(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }	  	non-compiled	[CE]  ';'  expected	11	None	add
54	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	        if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	11	6	add
55	[BUG]  [BUGGY]      if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	        if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	11	6	add
56	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	        if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	11	6	add
57	[BUG]  [BUGGY]      if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	        if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	11	6	add
58	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  dev  /  observed[i];  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  *  dev  /  observed[i];	  sumSq    +=    dev    /    dev    /    observed[i];    	compilable	  [FE]  AssertionFailedError  	25	6	replace
59	[BUG]  [BUGGY]  sumSq  +=  dev  *  dev  /  observed[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  dev  /  observed[i];  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  dev  /  observed[i];	  sumSq    +=    dev    /    dev    /    observed[i];    	compilable	  [FE]  AssertionFailedError  	25	6	replace
60	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  /  observed[i];  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  /  observed[i];	  sumSq    +=    dev    /    dev    /    observed[i];    	compilable	  [FE]  AssertionFailedError  	25	6	replace
61	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i];  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  /  observed[i];  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  /  observed[i];	  sumSq    +=    dev    /    dev    /    observed[i];    	compilable	  [FE]  AssertionFailedError  	25	6	replace
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  observed[i]  /  dev  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  observed[i]  /  dev  /  dev;	  sumSq    +=    dev    /    dev    /    observed[i];    	compilable	  [FE]  AssertionFailedError  	25	6	replace
63	[BUG]  [BUGGY]  sumSq  +=  observed[i]  /  dev  /  dev;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  observed[i]  /  dev  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed[i]  /  dev  /  dev;	  sumSq    +=    dev    /    dev    /    observed[i];    	compilable	  [FE]  AssertionFailedError  	25	6	replace
64	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
65	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]          AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	26	None	replace
66	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNonNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNonNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNonNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
67	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  observed[i]  *  dev;  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  observed[i]  *  dev;	      if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    	compilable	  [FE]  AssertionFailedError  	21	6	replace
68	[BUG]  [BUGGY]  sumSq  +=  observed[i]  *  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  observed[i]  *  dev;  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed[i]  *  dev;	      if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    	compilable	  [FE]  AssertionFailedError  	21	6	replace
69	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  expected[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  *  expected[i];	      if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    	compilable	  [FE]  AssertionFailedError  	21	6	replace
70	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i];  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  expected[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  expected[i];	      if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    	compilable	  [FE]  AssertionFailedError  	21	6	replace
71	[BUG]  [BUGGY]  SumSq  +=  observed[i]  *  dev;  [CE]  cannot  find  symbol  SumSq  [FE]        AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  SumSq  +=  observed[i]  *  dev;  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSq  +=  observed[i]  *  dev;	      if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    	non-compiled	[CE]  cannot  find  symbol  SumSq	21	None	replace
72	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  expected[i]  *  dev;  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  expected[i]  *  dev;	      if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    	compilable	  [FE]  AssertionFailedError  	21	6	replace
73	[BUG]  [BUGGY]  sumSq  +=  expected[i]  *  dev;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  expected[i]  *  dev;  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  expected[i]  *  dev;	      if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    	compilable	  [FE]  AssertionFailedError  	21	6	replace
74	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  observed[i]  *  dev  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  observed[i]  *  dev  /  dev;	  sumSq    +=    dev    *    expected[i]    /    dev;    	compilable	  [FE]  AssertionFailedError  	4	6	replace
75	[BUG]  [BUGGY]  sumSq  +=  observed[i]  *  dev  /  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  observed[i]  *  dev  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed[i]  *  dev  /  dev;	  sumSq    +=    dev    *    expected[i]    /    dev;    	compilable	  [FE]  AssertionFailedError  	4	6	replace
76	[BUG]  [BUGGY]  sumSq  +=  expected  *  dev  *  dev;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]      AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  expected  *  dev  *  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  expected  *  dev  *  dev;	  sumSq    +=    dev    *    expected[i]    /    dev;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	4	None	replace
77	[BUG]  [BUGGY]  sumSq  +=  expected  *  dev  /  observed[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  expected  *  dev  /  observed[i];  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  expected  *  dev  /  observed[i];	  sumSq    +=    expected    *    dev    /    dev[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	5	None	replace
78	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected  /  dev[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  expected  /  dev[i];  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  expected  /  dev[i];	  sumSq    +=    expected    *    dev    /    dev[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	5	None	replace
79	[BUG]  [BUGGY]  sumSq  +=  expected  *  dev  *  observed[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  expected  *  dev  *  observed[i];  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  expected  *  dev  *  observed[i];	  sumSq    +=    expected    *    dev    /    dev[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	5	None	replace
80	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  observed[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  observed[i];	      if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    	compilable	  [FE]  AssertionFailedError  	23	6	replace
81	[BUG]  [BUGGY]  sumSq  +=  observed[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  observed[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed[i];	      if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    	compilable	  [FE]  AssertionFailedError  	23	6	replace
82	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  expected[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  expected[i];	      if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    	compilable	  [FE]  AssertionFailedError  	23	6	replace
83	[BUG]  [BUGGY]  sumSq  +=  expected[i];  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  expected[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  expected[i];	      if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    	compilable	  [FE]  AssertionFailedError  	23	6	replace
84	[BUG]  [BUGGY]  SumSquare  sumSq  =  sumSq  *  observed[i];  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  SumSquare  sumSq  =  sumSq  *  observed[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSquare  sumSq  =  sumSq  *  observed[i];	      if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
85	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( "Dev  is  less  than  1: ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( "Dev  is  less  than  1: ");  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( "Dev  is  less  than  1: ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(dev))    {    throw    new    IllegalArgumentException(   "Dev    is    less    than    1:   ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
86	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( "Dev  is  less  than  1: ");  }  [CE]  >  expected  [FE]                AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( "Dev  is  less  than  1: ");  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( "Dev  is  less  than  1: ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(dev))    {    throw    new    IllegalArgumentException(   "Dev    is    less    than    1:   ");    }    	non-compiled	[CE]  >  expected	29	None	replace
87	[BUG]  [BUGGY]  ((  ChiSquareDistribution)dev).set();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  ((  ChiSquareDistribution)dev).set();  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	((  ChiSquareDistribution)dev).set();	      ((    ChiSquareDistribution)dev).reset();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
88	[BUG]  [BUGGY]  ((  ChiSquareDistribution)dev).doubleValue();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  ((  ChiSquareDistribution)dev).doubleValue();  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	((  ChiSquareDistribution)dev).doubleValue();	      ((    ChiSquareDistribution)dev).reset();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
89	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	        if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	22	6	add
90	[BUG]  [BUGGY]      if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	        if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	22	6	add
91	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	        if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	22	6	add
92	[BUG]  [BUGGY]      if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	        if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	22	6	add
93	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	        if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	22	6	add
94	[BUG]  [BUGGY]      if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	        if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	22	6	add
95	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	        if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	22	6	add
96	[BUG]  [BUGGY]      if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	        if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	22	6	add
97	[BUG]  [BUGGY]  ((  double)dev).doubleValue()  +  1;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  ((  double)dev).doubleValue()  +  1;  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	((  double)dev).doubleValue()  +  1;	      ((    double)dev).doubleValue();    	non-compiled	[CE]  not  a  statement	9	None	replace
98	[BUG]  [BUGGY]  ((  double)dev).doubleValue()  /  dev;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  ((  double)dev).doubleValue()  /  dev;  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	((  double)dev).doubleValue()  /  dev;	      ((    double)dev).doubleValue();    	non-compiled	[CE]  not  a  statement	9	None	replace
99	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  observed[i]  /  2;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  *  observed[i]  /  2;	  sumSq    +=    dev    *    observed[i]    /    dev;    	compilable	  [FE]  AssertionFailedError  	2	6	replace
100	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i]  /  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  observed[i]  /  2;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  observed[i]  /  2;	  sumSq    +=    dev    *    observed[i]    /    dev;    	compilable	  [FE]  AssertionFailedError  	2	6	replace
101	[BUG]  [BUGGY]  sumSq  +=  expected  *  observed[i]  /  dev;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]      AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  expected  *  observed[i]  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  expected  *  observed[i]  /  dev;	  sumSq    +=    dev    *    observed[i]    /    dev;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	2	None	replace
102	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	        if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }	  	compilable	  [FE]  AssertionFailedError  	13	6	add
103	[BUG]  [BUGGY]      if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	        if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }	  	compilable	  [FE]  AssertionFailedError  	13	6	add
104	[BUG]  [BUGGY]      if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  If(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  If(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	        if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    If(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }	  	non-compiled	[CE]  ';'  expected	13	None	add
105	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	        if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }	  	compilable	  [FE]  AssertionFailedError  	13	6	add
106	[BUG]  [BUGGY]      if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	        if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }	  	compilable	  [FE]  AssertionFailedError  	13	6	add
107	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isNegative(dev))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
108	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]              AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isNegative(dev))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	28	None	replace
109	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  For(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	For(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isNegative(dev))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	28	None	replace
110	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  /  expected[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  /  expected[i];	      if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    	compilable	  [FE]  AssertionFailedError  	16	6	replace
111	[BUG]  [BUGGY]  sumSq  +=  dev  /  expected[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  /  expected[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  /  expected[i];	      if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    	compilable	  [FE]  AssertionFailedError  	16	6	replace
112	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed  /  dev[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  observed  /  dev[i];  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  observed  /  dev[i];	  sumSq    +=    observed    *    dev    /    dev[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	6	None	replace
113	[BUG]  [BUGGY]  sumSq  +=  observed  *  total  /  dev[i];  [CE]  cannot  find  symbol  total  [FE]                AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  observed  *  total  /  dev[i];  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed  *  total  /  dev[i];	  sumSq    +=    observed    *    dev    /    dev[i];    	non-compiled	[CE]  cannot  find  symbol  total	6	None	replace
114	[BUG]  [BUGGY]  long[]  expected  =  observed[i].doubleValue();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  long[]  expected  =  observed[i].doubleValue();  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	long[]  expected  =  observed[i].doubleValue();	      long[]    expected    =    observed[i].longValue();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	10	None	replace
115	[BUG]  [BUGGY]  int[]  expected  =  observed[i].longValue();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  int[]  expected  =  observed[i].longValue();  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	int[]  expected  =  observed[i].longValue();	      long[]    expected    =    observed[i].longValue();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	10	None	replace
116	[BUG]  [BUGGY]  long[]  expected  =  observed[i].longValue()  +  1;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  long[]  expected  =  observed[i].longValue()  +  1;  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	long[]  expected  =  observed[i].longValue()  +  1;	      long[]    expected    =    observed[i].longValue();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	10	None	replace
117	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  observed[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  *  observed[i];	      if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    	compilable	  [FE]  AssertionFailedError  	14	6	replace
118	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  observed[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  observed[i];	      if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    	compilable	  [FE]  AssertionFailedError  	14	6	replace
119	[BUG]  [BUGGY]  SumSq  +=  dev  *  observed[i];  [CE]  cannot  find  symbol  SumSq  [FE]      AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  SumSq  +=  dev  *  observed[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSq  +=  dev  *  observed[i];	      if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    	non-compiled	[CE]  cannot  find  symbol  SumSq	14	None	replace
120	[BUG]  [BUGGY]  SumSq  +=  dev  *  expected[i];  [CE]  cannot  find  symbol  SumSq  [FE]        AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  SumSq  +=  dev  *  expected[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSq  +=  dev  *  expected[i];	      if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    	non-compiled	[CE]  cannot  find  symbol  SumSq	14	None	replace
121	[BUG]  [BUGGY]  long[]  expected  =  observed[i].longValue()  +  sumSq;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  long[]  expected  =  observed[i].longValue()  +  sumSq;  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	long[]  expected  =  observed[i].longValue()  +  sumSq;	      long[]    expected    =    observed[i].longValue();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	10	None	replace
122	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	        if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	20	6	add
123	[BUG]  [BUGGY]      if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	        if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	20	6	add
124	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isNonNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isNonNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isNonNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
125	[BUG]  [BUGGY]      if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  AssertionFailedError  <  AssertionFailedError  >>   "Unexpected  array  lengths  incorrect ");  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  AssertionFailedError  <  AssertionFailedError  >>   "Unexpected  array  lengths  incorrect ");  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	        if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    AssertionFailedError  <  AssertionFailedError  >>   "Unexpected  array  lengths  incorrect ");	  	non-compiled	[CE]  not  a  statement	13	None	add
126	[BUG]  [BUGGY]      if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  DEv;  }  [CE]  cannot  find  symbol  DEv  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  DEv;  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	        if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  DEv;  }	  	non-compiled	[CE]  cannot  find  symbol  DEv	11	None	add
127	[BUG]  [BUGGY]      if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  AssertionFailedError  <  AssertionFailedError  >>   "Unexpected  array  lengths  incorrect ");  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  AssertionFailedError  <  AssertionFailedError  >>   "Unexpected  array  lengths  incorrect ");  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	        if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    AssertionFailedError  <  AssertionFailedError  >>   "Unexpected  array  lengths  incorrect ");	  	non-compiled	[CE]  not  a  statement	15	None	add
128	[BUG]  [BUGGY]  sumSq  +=  expected  *  dev  *  observed[i]  /  dev;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  expected  *  dev  *  observed[i]  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  expected  *  dev  *  observed[i]  /  dev;	  sumSq    +=    dev    *    expected[i]    /    dev;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	4	None	replace
129	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  /  expected[i]  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  /  expected[i]  /  dev;	  sumSq    +=    dev    *    expected[i]    /    dev;    	compilable	  [FE]  AssertionFailedError  	4	6	replace
130	[BUG]  [BUGGY]  sumSq  +=  dev  /  expected[i]  /  dev;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  /  expected[i]  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  /  expected[i]  /  dev;	  sumSq    +=    dev    *    expected[i]    /    dev;    	compilable	  [FE]  AssertionFailedError  	4	6	replace
131	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	        if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	22	6	add
132	[BUG]  [BUGGY]      if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	        if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	22	6	add
133	[BUG]  [BUGGY]      if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  >>  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]      AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  >>  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	        if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >>  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	22	None	add
134	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	        if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	22	6	add
135	[BUG]  [BUGGY]      if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	        if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	22	6	add
136	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  *  expected[i  -  1]  /  dev;	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	6	replace
137	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  expected[i  -  1]  /  dev;	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	6	replace
138	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  /  observed[i  -  1]  /  dev;	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	6	replace
139	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  /  observed[i  -  1]  /  dev;	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	6	replace
140	[BUG]  [BUGGY]  SumSquare  sumSq  +=  observed[i]  *  dev;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  SumSquare  sumSq  +=  observed[i]  *  dev;  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSquare  sumSq  +=  observed[i]  *  dev;	      if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
141	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	        for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
142	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	        for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
143	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(dev))  {  sumSq  +=  dev;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(dev))  {  sumSq  +=  dev;  }  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	        for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(dev))  {  sumSq  +=  dev;  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
144	[BUG]  [BUGGY]  SumSquare  sumSq  +=  dev  *  observed[i];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  SumSquare  sumSq  +=  dev  *  observed[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSquare  sumSq  +=  dev  *  observed[i];	      if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    	non-compiled	[CE]  ';'  expected	14	None	replace
145	[BUG]  [BUGGY]  SumSquare  sumSq  +=  dev  *  expected[i];  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  SumSquare  sumSq  +=  dev  *  expected[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSquare  sumSq  +=  dev  *  expected[i];	      if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    	non-compiled	[CE]  ';'  expected	14	None	replace
146	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( "Dev  is  less  than  1: ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( "Dev  is  less  than  1: ");  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( "Dev  is  less  than  1: ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(dev))    {    throw    new    IllegalArgumentException(   "Dev    is    less    than    1:   ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
147	[BUG]  [BUGGY]  luate(x,  observed[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  luate(x,  observed[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	luate(x,  observed[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	      if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
148	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i]  /  dev;  double  sumSq  +=  dev  *  observed[i]  /  dev;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  observed[i]  /  dev;  double  sumSq  +=  dev  *  observed[i]  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i]    /    dev;    double  sumSq  +=  dev  *  observed[i]  /  dev;	  	non-compiled	[CE]  ';'  expected	1	None	add
149	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }	  	compilable	  [FE]  AssertionFailedError  	1	6	add
150	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }	  	compilable	  [FE]  AssertionFailedError  	1	6	add
151	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }	  	compilable	  [FE]  AssertionFailedError  	1	6	add
152	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }	  	compilable	  [FE]  AssertionFailedError  	1	6	add
153	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  /  dev  *  observed[i];  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  /  dev  *  observed[i];	  sumSq    +=    dev    /    dev    /    observed[i];    	compilable	  [FE]  AssertionFailedError  	25	6	replace
154	[BUG]  [BUGGY]  sumSq  +=  dev  /  dev  *  observed[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  /  dev  *  observed[i];  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  /  dev  *  observed[i];	  sumSq    +=    dev    /    dev    /    observed[i];    	compilable	  [FE]  AssertionFailedError  	25	6	replace
155	[BUG]  [BUGGY]  sumSq  +=  estimated  *  dev  /  dev[i];  [CE]  cannot  find  symbol  estimated  [FE]              AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  estimated  *  dev  /  dev[i];  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  estimated  *  dev  /  dev[i];	  sumSq    +=    observed    *    dev    /    dev[i];    	non-compiled	[CE]  cannot  find  symbol  estimated	6	None	replace
156	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  -  expected[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  -  expected[i];	      if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    	compilable	  [FE]  AssertionFailedError  	16	6	replace
157	[BUG]  [BUGGY]  sumSq  +=  dev  -  expected[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  -  expected[i];  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  -  expected[i];	      if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    	compilable	  [FE]  AssertionFailedError  	16	6	replace
158	[BUG]  [BUGGY]  ((  ChiSquareDistribution)dev).sumSq  +=  dev;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  ((  ChiSquareDistribution)dev).sumSq  +=  dev;  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	((  ChiSquareDistribution)dev).sumSq  +=  dev;	      ((    ChiSquareDistribution)dev).reset();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
159	[BUG]  [BUGGY]  sumSq  +=  dev  /  dev  /  observed[i];  amountSq  +=  dev  /  dev  /  observed[i];  [CE]  cannot  find  symbol  amountSq  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  /  dev  /  observed[i];  amountSq  +=  dev  /  dev  /  observed[i];  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    dev    /    observed[i];    amountSq  +=  dev  /  dev  /  observed[i];	  	non-compiled	[CE]  cannot  find  symbol  amountSq	24	None	add
160	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  *  dev  /  observed[i];	  	compilable	  [FE]  AssertionFailedError  	24	6	add
161	[BUG]  [BUGGY]  sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  *  dev  /  observed[i];	  	compilable	  [FE]  AssertionFailedError  	24	6	add
162	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i]  /  distribution;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  observed[i]  /  distribution;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  observed[i]  /  distribution;	  sumSq    +=    dev    *    observed[i]    /    dev;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	2	None	replace
163	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  /  observed[i]  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  /  observed[i]  /  dev;	  sumSq    +=    dev    *    observed[i]    /    dev;    	compilable	  [FE]  AssertionFailedError  	2	6	replace
164	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i]  /  dev;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  /  observed[i]  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  /  observed[i]  /  dev;	  sumSq    +=    dev    *    observed[i]    /    dev;    	compilable	  [FE]  AssertionFailedError  	2	6	replace
165	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i]  /  dev;  double  sumSq  +=  dev  *  expected[i]  /  dev;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  expected[i]  /  dev;  double  sumSq  +=  dev  *  expected[i]  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    expected[i]    /    dev;    double  sumSq  +=  dev  *  expected[i]  /  dev;	  	non-compiled	[CE]  ';'  expected	3	None	add
166	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expected[i]  *  dev  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  *  dev  /  dev;	  	compilable	  [FE]  AssertionFailedError  	3	6	add
167	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expected[i]  *  dev  /  dev;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expected[i]  *  dev  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  *  dev  /  dev;	  	compilable	  [FE]  AssertionFailedError  	3	6	add
168	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  DEV  *  observed[i  -  1]  /  dev;  [CE]  cannot  find  symbol  DEV  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  DEV  *  observed[i  -  1]  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  DEV  *  observed[i  -  1]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  DEV	17	None	add
169	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  x  *  observed[i  -  1]  /  dev;  [CE]  cannot  find  symbol  x  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  x  *  observed[i  -  1]  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  x  *  observed[i  -  1]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  x	17	None	add
170	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isNegative(dev))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
171	[BUG]  [BUGGY]  ((  ChiSquareDistribution)dev).sumSq  +=  dev  /  distribution.length;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  ((  ChiSquareDistribution)dev).sumSq  +=  dev  /  distribution.length;  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	((  ChiSquareDistribution)dev).sumSq  +=  dev  /  distribution.length;	      ((    ChiSquareDistribution)dev).reset();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
172	[BUG]  [BUGGY]  ((  double)dev).doubleValue()  +  dev;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  ((  double)dev).doubleValue()  +  dev;  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	((  double)dev).doubleValue()  +  dev;	      ((    double)dev).doubleValue();    	non-compiled	[CE]  not  a  statement	9	None	replace
173	[BUG]  [BUGGY]  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [CE]  'else'  without  'if'  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed[i];  }  else  {  return  dev;  }	      if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    	non-compiled	[CE]  'else'  without  'if'	23	None	replace
174	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }	      for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
175	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  desv  *  observed[i  -  1]  /  dev;  [CE]  cannot  find  symbol  desv  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  desv  *  observed[i  -  1]  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  desv  *  observed[i  -  1]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  desv	17	None	add
176	[BUG]  [BUGGY]      if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  recorded[i];  }  [CE]  cannot  find  symbol  recorded  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  recorded[i];  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	        if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  recorded[i];  }	  	non-compiled	[CE]  cannot  find  symbol  recorded	15	None	add
177	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	        if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	22	6	add
178	[BUG]  [BUGGY]      if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	        if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	22	6	add
179	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  DEV  *  expected[i]  /  dev;  [CE]  cannot  find  symbol  DEV  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  DEV  *  expected[i]  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  DEV  *  expected[i]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  DEV	3	None	add
180	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	3	6	add
181	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	3	6	add
182	[BUG]  [BUGGY]      if(sumSq  >  dev)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  dev;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(sumSq  >  dev)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  dev;  }  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	        if(sumSq  >  dev)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  dev;  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
183	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  observed[i]  /  dev;  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  observed[i]  /  dev;	      if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    	compilable	  [FE]  AssertionFailedError  	21	6	replace
184	[BUG]  [BUGGY]  sumSq  +=  observed[i]  /  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  observed[i]  /  dev;  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed[i]  /  dev;	      if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    	compilable	  [FE]  AssertionFailedError  	21	6	replace
185	[BUG]  [BUGGY]      if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  DEv  *  observed[i];  }  [CE]  cannot  find  symbol  DEv  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]      if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  DEv  *  observed[i];  }  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	        if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  DEv  *  observed[i];  }	  	non-compiled	[CE]  cannot  find  symbol  DEv	13	None	add
186	[BUG]  [BUGGY]  double[]  expected  =  observed[i].longValue();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  double[]  expected  =  observed[i].longValue();  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	double[]  expected  =  observed[i].longValue();	      long[]    expected    =    observed[i].longValue();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	10	None	replace
187	[BUG]  [BUGGY]  long[]  expected  =  observed[i].longValue()  /  dev;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  long[]  expected  =  observed[i].longValue()  /  dev;  [BUGGY]    sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	long[]  expected  =  observed[i].longValue()  /  dev;	      long[]    expected    =    observed[i].longValue();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	10	None	replace
188	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  2;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  *  observed[i  -  1]  /  2;	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	6	replace
189	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  2;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  observed[i  -  1]  /  2;	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	6	replace
190	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  DEV  *  observed[i]  /  dev;  [CE]  cannot  find  symbol  DEV  [FE]    AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  DEV  *  observed[i]  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i]    /    dev;    sumSq  +=  DEV  *  observed[i]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  DEV	1	None	add
191	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  x  *  observed[i]  /  dev;  [CE]  cannot  find  symbol  x  [FE]      AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  x  *  observed[i]  /  dev;  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i]    /    dev;    sumSq  +=  x  *  observed[i]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  x	1	None	add
192	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected  *  dev[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  expected  *  dev[i];  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  expected  *  dev[i];	  sumSq    +=    expected    *    dev    /    dev[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	5	None	replace
193	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected  /  observed[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionFailedError    [CONTEXT]     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);    [BUGGY]  sumSq  +=  dev  *  expected  /  observed[i];  [BUGGY]    }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  expected  /  observed[i];	  sumSq    +=    expected    *    dev    /    dev[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	5	None	replace
