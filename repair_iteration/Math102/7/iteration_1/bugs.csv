bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]  sumSq  +=  dev  *  observed[i]  /  dev;  [BUGGY]  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  *  observed[i]  /  dev;	sumSq  +=  dev  *  dev  /  expected[i];  	compilable	  [FE]  AssertionFailedError  	13	6	replace
2	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i]  /  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]  sumSq  +=  dev  *  observed[i]  /  dev;  [BUGGY]  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  observed[i]  /  dev;	sumSq  +=  dev  *  dev  /  expected[i];  	compilable	  [FE]  AssertionFailedError  	13	6	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]  sumSq  +=  dev  *  expected[i]  /  dev;  [BUGGY]  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  *  expected[i]  /  dev;	sumSq  +=  dev  *  dev  /  expected[i];  	compilable	  [FE]  AssertionFailedError  	13	6	replace
4	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i]  /  dev;  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]  sumSq  +=  dev  *  expected[i]  /  dev;  [BUGGY]  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  expected[i]  /  dev;	sumSq  +=  dev  *  dev  /  expected[i];  	compilable	  [FE]  AssertionFailedError  	13	6	replace
5	[BUG]  [BUGGY]  sumSq  +=  expected  *  dev  /  dev[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        AssertionFailedError  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]  sumSq  +=  expected  *  dev  /  dev[i];  [BUGGY]  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  expected  *  dev  /  dev[i];	sumSq  +=  dev  *  dev  /  expected[i];  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	13	None	replace
6	[BUG]  [BUGGY]  sumSq  +=  observed  *  dev  /  dev[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionFailedError  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]  sumSq  +=  observed  *  dev  /  dev[i];  [BUGGY]  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed  *  dev  /  dev[i];	sumSq  +=  dev  *  dev  /  expected[i];  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	13	None	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]    [BUGGY]  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	  	sumSq  +=  dev  *  dev  /  expected[i];  	compilable	  [FE]  AssertionFailedError  	13	6	replace
8	[BUG]  [BUGGY]    [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]    [BUGGY]  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	  	sumSq  +=  dev  *  dev  /  expected[i];  	compilable	  [FE]  AssertionFailedError  	13	6	replace
9	[BUG]  [BUGGY]    ((  double)dev).doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]    AssertionFailedError  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]    ((  double)dev).doubleValue();  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	    ((  double)dev).doubleValue();		non-compiled	[CE]  double  cannot  be  dereferenced	14	None	add
10	[BUG]  [BUGGY]    long[]  expected  =  observed[i].longValue();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]    long[]  expected  =  observed[i].longValue();  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	    long[]  expected  =  observed[i].longValue();		non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	14	None	add
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }		compilable	  [FE]  AssertionFailedError  	14	6	add
12	[BUG]  [BUGGY]    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }		compilable	  [FE]  AssertionFailedError  	14	6	add
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]    if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	    if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }		compilable	  [FE]  AssertionFailedError  	14	6	add
14	[BUG]  [BUGGY]    if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]    if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	    if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }		compilable	  [FE]  AssertionFailedError  	14	6	add
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }		compilable	  [FE]  AssertionFailedError  	14	6	add
16	[BUG]  [BUGGY]    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }		compilable	  [FE]  AssertionFailedError  	14	6	add
17	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  [BUGGY]  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  *  observed[i  -  1]  /  dev;	sumSq  +=  dev  *  dev  /  expected[i];  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	6	replace
18	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  [BUGGY]  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  observed[i  -  1]  /  dev;	sumSq  +=  dev  *  dev  /  expected[i];  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	6	replace
19	[BUG]  [BUGGY]    ((  ChiSquareDistribution)dev).reset();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]    ((  ChiSquareDistribution)dev).reset();  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	    ((  ChiSquareDistribution)dev).reset();		non-compiled	[CE]  cannot  find  symbol	14	None	add
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }		compilable	  [FE]  AssertionFailedError  	14	6	add
21	[BUG]  [BUGGY]    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }		compilable	  [FE]  AssertionFailedError  	14	6	add
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }		compilable	  [FE]  AssertionFailedError  	14	6	add
23	[BUG]  [BUGGY]    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }		compilable	  [FE]  AssertionFailedError  	14	6	add
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]  sumSq  +=  dev  /  dev  /  observed[i];  [BUGGY]  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  /  dev  /  observed[i];	sumSq  +=  dev  *  dev  /  expected[i];  	compilable	  [FE]  AssertionFailedError  	13	6	replace
25	[BUG]  [BUGGY]  sumSq  +=  dev  /  dev  /  observed[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]  sumSq  +=  dev  /  dev  /  observed[i];  [BUGGY]  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  /  dev  /  observed[i];	sumSq  +=  dev  *  dev  /  expected[i];  	compilable	  [FE]  AssertionFailedError  	13	6	replace
26	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
27	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
28	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
29	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( "Dev  is  less  than  1: ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  [BUGGY]    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( "Dev  is  less  than  1: ");  }  [BUGGY]  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( "Dev  is  less  than  1: ");  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
