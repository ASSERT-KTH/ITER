bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[  [CE]  ']'  expected  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[	  	non-compiled	[CE]  ']'  expected	51	None	add
2	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <	  	non-compiled	[CE]  ')'  expected	51	None	add
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        <        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	51	6	add
4	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	51	6	add
5	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
6	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
7	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=	  	non-compiled	[CE]  ')'  expected	31	None	add
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	31	6	add
9	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	31	6	add
10	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[	  	non-compiled	[CE]  ']'  expected	31	None	add
11	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
12	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=	  	non-compiled	[CE]  ')'  expected	31	None	add
13	[BUG]  [BUGGY]  int  i  =  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  int  i  =  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	int  i  =  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];	  sumSq    +=    dev    /    dev    /    observed[i];    int    i    =    observed[i];    sumSq    +=    dev    /    dev    /    observed[i];    	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	43	None	replace
14	[BUG]  [BUGGY]  double  i  =  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  double  i  =  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	double  i  =  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];	  sumSq    +=    dev    /    dev    /    observed[i];    int    i    =    observed[i];    sumSq    +=    dev    /    dev    /    observed[i];    	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	43	None	replace
15	[BUG]  [BUGGY]  long  i  =  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  long  i  =  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	long  i  =  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];	  sumSq    +=    dev    /    dev    /    observed[i];    int    i    =    observed[i];    sumSq    +=    dev    /    dev    /    observed[i];    	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	43	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected[i]  *  dev  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  expected[i]  *  dev  /  dev;	  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq    +=    expected[i]    *    dev    /    dev;    	compilable	  [FE]  AssertionFailedError  	167	6	replace
17	[BUG]  [BUGGY]  sumSq  +=  expected[i]  *  dev  /  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected[i]  *  dev  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  expected[i]  *  dev  /  dev;	  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq    +=    expected[i]    *    dev    /    dev;    	compilable	  [FE]  AssertionFailedError  	167	6	replace
18	[BUG]  [BUGGY]  sumSq  +=  observed[i  -  1]  /  dev;  sumSq  +=  desv  *  observed[i  -  1]  /  dev;  [CE]  cannot  find  symbol  desv  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i  -  1]  /  dev;  sumSq  +=  desv  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed[i  -  1]  /  dev;  sumSq  +=  desv  *  observed[i  -  1]  /  dev;	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq    +=    desv    *    observed[i    -    1]    /    dev;    	non-compiled	[CE]  cannot  find  symbol  desv	175	None	replace
19	[BUG]  [BUGGY]  sumSq  +=  observed[i  *  i  -  1]  /  dev;  sumSq  +=  desv  *  observed[i  -  1]  /  dev;  [CE]  cannot  find  symbol  desv  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i  *  i  -  1]  /  dev;  sumSq  +=  desv  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed[i  *  i  -  1]  /  dev;  sumSq  +=  desv  *  observed[i  -  1]  /  dev;	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq    +=    desv    *    observed[i    -    1]    /    dev;    	non-compiled	[CE]  cannot  find  symbol  desv	175	None	replace
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	177	6	add
21	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	177	6	add
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	177	6	add
23	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	177	6	add
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    else    {    return    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	177	6	add
25	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    else    {    return    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	177	6	add
26	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }  if(dev  >>  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }  if(dev  >>  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    else    {    return    dev;    }    if(dev  >>  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	177	None	add
27	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq        +=        dev        *        observed[i        -        1]        /        dev;        sumSq    +=    ((    double)dev    *    observed[i    -    1]    /    dev);    sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	29	6	add
28	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i        -        1]        /        dev;        sumSq    +=    ((    double)dev    *    observed[i    -    1]    /    dev);    sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	29	6	add
29	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);  SumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);  [CE]  cannot  find  symbol  SumSq  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);  SumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i        -        1]        /        dev;        sumSq    +=    ((    double)dev    *    observed[i    -    1]    /    dev);    SumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);	  	non-compiled	[CE]  cannot  find  symbol  SumSq	29	None	add
30	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq        +=        dev        *        observed[i        -        1]        /        dev;        sumSq    +=    ((    double)dev    *    observed[i    -    1]    /    dev);    sumSq  +=  dev  *  observed[i  -  1]  /  dev;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	29	6	add
31	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i        -        1]        /        dev;        sumSq    +=    ((    double)dev    *    observed[i    -    1]    /    dev);    sumSq  +=  dev  *  observed[i  -  1]  /  dev;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	29	6	add
32	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);  sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq        +=        dev        *        observed[i        -        1]        /        dev;        sumSq    +=    ((    double)dev    *    observed[i    -    1]    /    dev);    sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	29	6	add
33	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);  sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);  sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i        -        1]        /        dev;        sumSq    +=    ((    double)dev    *    observed[i    -    1]    /    dev);    sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	29	6	add
34	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)expected[i]  -  dev);  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)expected[i]  -  dev);  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)expected[i]  -  dev);  }	          for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    ((    double)observed[i]    -    dev);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	3	None	replace
35	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)sumSq[i]  -  dev);  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)sumSq[i]  -  dev);  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)sumSq[i]  -  dev);  }	          for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    ((    double)observed[i]    -    dev);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	3	None	replace
36	[BUG]  [BUGGY]  sumSq  +=  DEV  *  expected[i]  /  dev;  [CE]  cannot  find  symbol  DEV  [FE]        AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  DEV  *  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  DEV  *  expected[i]  /  dev;	  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq    +=    DEV    *    expected[i]    /    dev;    	non-compiled	[CE]  cannot  find  symbol  DEV	179	None	replace
37	[BUG]  [BUGGY]  sumSq  +=  expected[i]  *  dev;  sumSq  +=  DEV  *  expected[i]  /  dev;  [CE]  cannot  find  symbol  DEV  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected[i]  *  dev;  sumSq  +=  DEV  *  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  expected[i]  *  dev;  sumSq  +=  DEV  *  expected[i]  /  dev;	  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq    +=    DEV    *    expected[i]    /    dev;    	non-compiled	[CE]  cannot  find  symbol  DEV	179	None	replace
38	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  DEV  *  expected[i]  /  dev;  [CE]  cannot  find  symbol  DEV  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  DEV  *  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  DEV  *  expected[i]  /  dev;	  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq    +=    DEV    *    expected[i]    /    dev;    	non-compiled	[CE]  cannot  find  symbol  DEV	179	None	replace
39	[BUG]  [BUGGY]  sumSq  +=  estimated  *  dev  /  observed[i];  [CE]  cannot  find  symbol  estimated  [FE]                  AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  estimated  *  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  estimated  *  dev  /  observed[i];	  sumSq    +=    estimated    *    dev    /    dev[i];    	non-compiled	[CE]  cannot  find  symbol  estimated	155	None	replace
40	[BUG]  [BUGGY]  sumSq  +=  predicted  *  dev  /  dev[i];  [CE]  cannot  find  symbol  predicted  [FE]                    AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  predicted  *  dev  /  dev[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  predicted  *  dev  /  dev[i];	  sumSq    +=    estimated    *    dev    /    dev[i];    	non-compiled	[CE]  cannot  find  symbol  predicted	155	None	replace
41	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }	          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev    <    expected[i])    {    sumSq    +=    dev    *    expected[i];    }    	compilable	  [FE]  AssertionFailedError  	50	6	replace
42	[BUG]  [BUGGY]  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }	          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev    <    expected[i])    {    sumSq    +=    dev    *    expected[i];    }    	compilable	  [FE]  AssertionFailedError  	50	6	replace
43	[BUG]  [BUGGY]  SumSquare  sumSq  =  sumSq  +  observed[i];  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSquare  sumSq  =  sumSq  +  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSquare  sumSq  =  sumSq  +  observed[i];	          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev    <    expected[i])    {    sumSq    +=    dev    *    expected[i];    }    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
44	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i  -  1];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  *  observed[i  -  1];	  sumSq    +=    dev    *    observed[i    -    1]    /    2;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	189	6	replace
45	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i  -  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i  -  1];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  observed[i  -  1];	  sumSq    +=    dev    *    observed[i    -    1]    /    2;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	189	6	replace
46	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  4;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  *  observed[i  -  1]  /  4;	  sumSq    +=    dev    *    observed[i    -    1]    /    2;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	189	6	replace
47	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  4;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  4;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  observed[i  -  1]  /  4;	  sumSq    +=    dev    *    observed[i    -    1]    /    2;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	189	6	replace
48	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  3;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  *  observed[i  -  1]  /  3;	  sumSq    +=    dev    *    observed[i    -    1]    /    2;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	189	6	replace
49	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  3;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  3;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  observed[i  -  1]  /  3;	  sumSq    +=    dev    *    observed[i    -    1]    /    2;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	189	6	replace
50	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( "Dev  is  less  than  1: ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( "Dev  is  less  than  1: ");  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( "Dev  is  less  than  1: ");  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected))    {    throw    new    IllegalArgumentException(   "Dev    is    less    than    1:   ");    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
51	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( "Dev  is  less  than  1: ");  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( "Dev  is  less  than  1: ");  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( "Dev  is  less  than  1: ");  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected))    {    throw    new    IllegalArgumentException(   "Dev    is    less    than    1:   ");    }    	non-compiled	[CE]  >  expected	146	None	replace
52	[BUG]  [BUGGY]  double[]  expected  =  observed[i].doubleValue();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  double[]  expected  =  observed[i].doubleValue();  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	double[]  expected  =  observed[i].doubleValue();	  double[]    expected    =    observed[i].longValue();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	186	None	replace
53	[BUG]  [BUGGY]  double[]  expected  =  observed[i].longValue()  +  sumSq;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  double[]  expected  =  observed[i].longValue()  +  sumSq;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	double[]  expected  =  observed[i].longValue()  +  sumSq;	  double[]    expected    =    observed[i].longValue();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	186	None	replace
54	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i]        /        dev;        if(sumSq    >    0.0)    {    sumSq    +=    dev    *    observed[i]    /    dev;    }    if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }	  	non-compiled	[CE]  illegal  start  of  expression	151	None	add
55	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i]        /        dev;        if(sumSq    >    0.0)    {    sumSq    +=    dev    *    observed[i]    /    dev;    }    for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }	  	non-compiled	[CE]  illegal  start  of  expression	151	None	add
56	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i]        /        dev;        if(sumSq    >    0.0)    {    sumSq    +=    dev    *    observed[i]    /    dev;    }    for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /	  	non-compiled	[CE]  illegal  start  of  expression	151	None	add
57	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  if(sumSq  >  0.0)  {  sumSq  +=  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  if(sumSq  >  0.0)  {  sumSq  +=  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i]        /        dev;        if(sumSq    >    0.0)    {    sumSq    +=    dev    *    observed[i]    /    dev;    }    if(sumSq  >  0.0)  {  sumSq  +=  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }	  	non-compiled	[CE]  illegal  start  of  expression	151	None	add
58	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i]        /        dev;        if(sumSq    >    0.0)    {    sumSq    +=    dev    *    observed[i]    /    dev;    }    for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=	  	non-compiled	[CE]  illegal  start  of  expression	151	None	add
59	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  ((  double)observed[i]  /  dev);  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  ((  double)observed[i]  /  dev);	  sumSq    +=    dev    *    observed[i]    /    dev;    int    i    =    observed.length;    sumSq    +=    ((    double)observed[i]    /    dev);    	compilable	  [FE]  AssertionFailedError  	11	6	replace
60	[BUG]  [BUGGY]  sumSq  +=  ((  double)observed[i]  /  dev);  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  ((  double)observed[i]  /  dev);  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  ((  double)observed[i]  /  dev);	  sumSq    +=    dev    *    observed[i]    /    dev;    int    i    =    observed.length;    sumSq    +=    ((    double)observed[i]    /    dev);    	compilable	  [FE]  AssertionFailedError  	11	6	replace
61	[BUG]  [BUGGY]  int  i  =  observed.length;  sumSq  +=  ((  double)observed[i]  /  dev);  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  int  i  =  observed.length;  sumSq  +=  ((  double)observed[i]  /  dev);  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	int  i  =  observed.length;  sumSq  +=  ((  double)observed[i]  /  dev);	  sumSq    +=    dev    *    observed[i]    /    dev;    int    i    =    observed.length;    sumSq    +=    ((    double)observed[i]    /    dev);    	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	11	None	replace
62	[BUG]  [BUGGY]  SumSquare  sumSq  +=  dev  *  dev  /  observed[i];  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSquare  sumSq  +=  dev  *  dev  /  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSquare  sumSq  +=  dev  *  dev  /  observed[i];	  SumSquare    sumSq    +=    dev    *    observed[i];    	non-compiled	[CE]  ';'  expected	144	None	replace
63	[BUG]  [BUGGY]  SumSquare  sumSq  +=  dev  *  /  observed[i];  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSquare  sumSq  +=  dev  *  /  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSquare  sumSq  +=  dev  *  /  observed[i];	  SumSquare    sumSq    +=    dev    *    observed[i];    	non-compiled	[CE]  ';'  expected	144	None	replace
64	[BUG]  [BUGGY]  SumSquare  sumSq  +=  dev  /  observed[i];  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSquare  sumSq  +=  dev  /  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSquare  sumSq  +=  dev  /  observed[i];	  SumSquare    sumSq    +=    dev    *    observed[i];    	non-compiled	[CE]  ';'  expected	144	None	replace
65	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i]  /  dev[i];  [CE]  array  required,  but  double  found  [FE]                  AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i]  /  dev[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  observed[i]  /  dev[i];	  sumSq    +=    dev    *    expected    /    dev[i];    	non-compiled	[CE]  array  required,  but  double  found	78	None	replace
66	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    ==    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	36	6	add
67	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    ==    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	36	6	add
68	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    ==    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[	  	non-compiled	[CE]  ']'  expected	36	None	add
69	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    ==    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==	  	non-compiled	[CE]  ')'  expected	36	None	add
70	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    ==    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[	  	non-compiled	[CE]  ']'  expected	36	None	add
71	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    ==    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
72	[BUG]  [BUGGY]  sumSq  +=  observed[i  *  2  /  2;  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i  *  2  /  2;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed[i  *  2  /  2;	  sumSq    +=    observed[i    *    dev    /    dev;    	non-compiled	[CE]  ']'  expected	21	None	replace
73	[BUG]  [BUGGY]  sumSq  +=  observed[i  *  dev  *  2  /  2;  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i  *  dev  *  2  /  2;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed[i  *  dev  *  2  /  2;	  sumSq    +=    observed[i    *    dev    /    dev;    	non-compiled	[CE]  ']'  expected	21	None	replace
74	[BUG]  [BUGGY]  sumSq  +=  observed[i  *  2  /  dev;  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i  *  2  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed[i  *  2  /  dev;	  sumSq    +=    observed[i    *    dev    /    dev;    	non-compiled	[CE]  ']'  expected	21	None	replace
75	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    <    expected[i])    {    sumSq    +=    dev    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
76	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        <        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    <    expected[i])    {    sumSq    +=    dev    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	54	6	add
77	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    <    expected[i])    {    sumSq    +=    dev    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	54	6	add
78	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        <        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    <    expected[i])    {    sumSq    +=    dev    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	54	6	add
79	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    <    expected[i])    {    sumSq    +=    dev    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	54	6	add
80	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    <    expected[i])    {    sumSq    +=    dev    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
81	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    <    expected[i])    {    sumSq    +=    dev    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
82	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  dev  /  dev;  sumSq  +=  observed[i]  *  dev  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    observed[i]    *    dev    /    dev;    sumSq  +=  observed[i]  *  dev  /  dev;	  	compilable	  [FE]  AssertionFailedError  	74	6	add
83	[BUG]  [BUGGY]  sumSq  +=  observed[i]  *  dev  /  dev;  sumSq  +=  observed[i]  *  dev  /  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  dev  /  dev;  sumSq  +=  observed[i]  *  dev  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i]    *    dev    /    dev;    sumSq  +=  observed[i]  *  dev  /  dev;	  	compilable	  [FE]  AssertionFailedError  	74	6	add
84	[BUG]  [BUGGY]  sumSq  +=  observed[i]  *  dev  /  dev;  SumSq  +=  observed[i]  *  dev  /  dev;  [CE]  cannot  find  symbol  SumSq  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  dev  /  dev;  SumSq  +=  observed[i]  *  dev  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i]    *    dev    /    dev;    SumSq  +=  observed[i]  *  dev  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  SumSq	74	None	add
85	[BUG]  [BUGGY]  sumSq  +=  observed[i]  *  dev  /  dev;  int  i  =  observed.length;  sumSq  +=  observed[i]  *  dev  /  dev;  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  dev  /  dev;  int  i  =  observed.length;  sumSq  +=  observed[i]  *  dev  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i]    *    dev    /    dev;    int  i  =  observed.length;  sumSq  +=  observed[i]  *  dev  /  dev;	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	74	None	add
86	[BUG]  [BUGGY]  sumSq  +=  observed[i]  *  dev  /  dev;  int  i  =  observed.length;  sumSq  +=  i  *  dev  /  dev;  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  dev  /  dev;  int  i  =  observed.length;  sumSq  +=  i  *  dev  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i]    *    dev    /    dev;    int  i  =  observed.length;  sumSq  +=  i  *  dev  /  dev;	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	74	None	add
87	[BUG]  [BUGGY]  sumSq  +=  observed[i]  *  dev  /  dev;  sumSq  +=  observed[i]  *  dev  /  dev);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  dev  /  dev;  sumSq  +=  observed[i]  *  dev  /  dev);  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i]    *    dev    /    dev;    sumSq  +=  observed[i]  *  dev  /  dev);	  	non-compiled	[CE]  ';'  expected	74	None	add
88	[BUG]  [BUGGY]  AssertionFailedError  <  AssertionFailedError  >>   "Unexpected  array  lengths  incorrect ");  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  AssertionFailedError  <  AssertionFailedError  >>   "Unexpected  array  lengths  incorrect ");  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	AssertionFailedError  <  AssertionFailedError  >>   "Unexpected  array  lengths  incorrect ");	          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    AssertionFailedError    <    AssertionFailedError    >>       "Unexpected    array    lengths    incorrect   ");    	non-compiled	[CE]  not  a  statement	127	None	replace
89	[BUG]  [BUGGY]  AssertionFailedError  <  AssertionFailedError  >=   "Unexpected  array  lengths  incorrect ");  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  AssertionFailedError  <  AssertionFailedError  >=   "Unexpected  array  lengths  incorrect ");  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	AssertionFailedError  <  AssertionFailedError  >=   "Unexpected  array  lengths  incorrect ");	          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    AssertionFailedError    <    AssertionFailedError    >>       "Unexpected    array    lengths    incorrect   ");    	non-compiled	[CE]  not  a  statement	127	None	replace
90	[BUG]  [BUGGY]  AssertionFailedError  <  AssertionFailedError  ==   "Unexpected  array  lengths  incorrect ");  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  AssertionFailedError  <  AssertionFailedError  ==   "Unexpected  array  lengths  incorrect ");  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	AssertionFailedError  <  AssertionFailedError  ==   "Unexpected  array  lengths  incorrect ");	          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    AssertionFailedError    <    AssertionFailedError    >>       "Unexpected    array    lengths    incorrect   ");    	non-compiled	[CE]  >  expected	127	None	replace
91	[BUG]  [BUGGY]  AssertionFailedError  <  AssertionFailedError  [Delete]   "Unexpected  array  lengths  incorrect ");  [CE]  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  AssertionFailedError  <  AssertionFailedError  [Delete]   "Unexpected  array  lengths  incorrect ");  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	AssertionFailedError  <  AssertionFailedError  [Delete]   "Unexpected  array  lengths  incorrect ");	          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    AssertionFailedError    <    AssertionFailedError    >>       "Unexpected    array    lengths    incorrect   ");    	non-compiled	[CE]  	127	None	replace
92	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  dev;  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  dev;  }	          if(sumSq    >    dev)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    dev    *    dev;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	182	None	replace
93	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  *  dev;	          if(sumSq    >    dev)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    dev    *    dev;    }    	compilable	  [FE]  AssertionFailedError  	182	6	replace
94	[BUG]  [BUGGY]  sumSq  +=  dev  *  dev;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  dev;	          if(sumSq    >    dev)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    dev    *    dev;    }    	compilable	  [FE]  AssertionFailedError  	182	6	replace
95	[BUG]  [BUGGY]  SumSquare  sumSq  =  sumSq  >  dev)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  dev;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSquare  sumSq  =  sumSq  >  dev)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSquare  sumSq  =  sumSq  >  dev)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  dev;  }	          if(sumSq    >    dev)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    dev    *    dev;    }    	non-compiled	[CE]  ';'  expected	182	None	replace
96	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  DEV;  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  DEV;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  DEV;  }	          if(sumSq    >    dev)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    dev    *    dev;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	182	None	replace
97	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  expected[i]  /  dev;	  sumSq    +=    dev    /    expected[i]    /    dev;    	compilable	  [FE]  AssertionFailedError  	130	6	replace
98	[BUG]  [BUGGY]  sumSq  +=  expected[i]  /  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  expected[i]  /  dev;	  sumSq    +=    dev    /    expected[i]    /    dev;    	compilable	  [FE]  AssertionFailedError  	130	6	replace
99	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        <        expected[i])        {        sumSq        +=        observed[i];        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }	  	compilable	  [FE]  AssertionFailedError  	47	6	add
100	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i];        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }	  	compilable	  [FE]  AssertionFailedError  	47	6	add
101	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i];        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(	  	non-compiled	[CE]  ')'  expected	47	None	add
102	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i];        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
103	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i];        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[	  	non-compiled	[CE]  ']'  expected	47	None	add
104	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i];        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=	  	non-compiled	[CE]  ')'  expected	47	None	add
105	[BUG]  [BUGGY]  long  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  long  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	long  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( " ");  }	  int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(dev))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	23	None	replace
106	[BUG]  [BUGGY]  Integer  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  Integer  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	Integer  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( " ");  }	  int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(dev))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	23	None	replace
107	[BUG]  [BUGGY]  double  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  double  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	double  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( " ");  }	  int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(dev))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	23	None	replace
108	[BUG]  [BUGGY]  ((  double)observed[i]  -  expected[i]).doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  ((  double)observed[i]  -  expected[i]).doubleValue();  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	((  double)observed[i]  -  expected[i]).doubleValue();	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev!=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    	non-compiled	[CE]  double  cannot  be  dereferenced	92	None	replace
109	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  /=  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  /=  observed[i];	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev!=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    	compilable	  [FE]  AssertionFailedError  	92	6	replace
110	[BUG]  [BUGGY]  sumSq  /=  observed[i];  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  /=  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  /=  observed[i];	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev!=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    	compilable	  [FE]  AssertionFailedError  	92	6	replace
111	[BUG]  [BUGGY]  ((  double)observed[i]).doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  ((  double)observed[i]).doubleValue();  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	((  double)observed[i]).doubleValue();	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev!=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    	non-compiled	[CE]  double  cannot  be  dereferenced	92	None	replace
112	[BUG]  [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!isPositive(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	64	None	replace
113	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  if(isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!isPositive(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
114	[BUG]  [BUGGY]  luate(x,  observed[i])  {  sumSq  +=  expected[i];  }  else  {  return  dev;  }  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  luate(x,  observed[i])  {  sumSq  +=  expected[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	luate(x,  observed[i])  {  sumSq  +=  expected[i];  }  else  {  return  dev;  }	  luate(x,    observed[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    	non-compiled	[CE]  ';'  expected	147	None	replace
115	[BUG]  [BUGGY]  luate(x,  observed[i])>  sumSq  +=  observed[i];  [CE]  cannot  find  symbol  x  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  luate(x,  observed[i])>  sumSq  +=  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	luate(x,  observed[i])>  sumSq  +=  observed[i];	  luate(x,    observed[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    	non-compiled	[CE]  cannot  find  symbol  x	147	None	replace
116	[BUG]  [BUGGY]  luate(x,  observed[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  luate(x,  observed[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	luate(x,  observed[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }	  luate(x,    observed[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    	non-compiled	[CE]  ';'  expected	147	None	replace
117	[BUG]  [BUGGY]  luate(x,  observed[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  luate(x,  observed[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	luate(x,  observed[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }	  luate(x,    observed[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    	non-compiled	[CE]  ';'  expected	147	None	replace
118	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNonNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNonNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNonNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isNonNegative(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	66	None	replace
119	[BUG]  [BUGGY]  sumSq  +=  expected  *  dev[i];  [CE]  array  required,  but  double  found  [FE]                AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected  *  dev[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  expected  *  dev[i];	  sumSq    +=    dev    *    expected    *    dev[i];    	non-compiled	[CE]  array  required,  but  double  found	192	None	replace
120	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected  *  observed[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected  *  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  expected  *  observed[i];	  sumSq    +=    dev    *    expected    *    dev[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	192	None	replace
121	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i];        }        if(dev    <    expected[i])    {    sumSq    +=    dev    *    expected[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
122	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        <        expected[i])        {        sumSq        +=        observed[i];        }        if(dev    <    expected[i])    {    sumSq    +=    dev    *    expected[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }	  	compilable	  [FE]  AssertionFailedError  	49	6	add
123	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i];        }        if(dev    <    expected[i])    {    sumSq    +=    dev    *    expected[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }	  	compilable	  [FE]  AssertionFailedError  	49	6	add
124	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i];        }        if(dev    <    expected[i])    {    sumSq    +=    dev    *    expected[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
125	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        <        expected[i])        {        sumSq        +=        observed[i];        }        if(dev    <    expected[i])    {    sumSq    +=    dev    *    expected[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])	  	compilable	  [FE]  AssertionFailedError  	49	6	add
126	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i];        }        if(dev    <    expected[i])    {    sumSq    +=    dev    *    expected[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])	  	compilable	  [FE]  AssertionFailedError  	49	6	add
127	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i];        }        if(dev    <    expected[i])    {    sumSq    +=    dev    *    expected[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <	  	non-compiled	[CE]  ')'  expected	49	None	add
128	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(dev))  {  sumSq  +=  dev;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(dev))  {  sumSq  +=  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(dev))  {  sumSq  +=  dev;  }	          for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNegative(dev))    {    sumSq    +=    dev;    }    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
129	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(dev))  {  sumSq  +=  dev;  }  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(dev))  {  sumSq  +=  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)||!isNegative(dev))  {  sumSq  +=  dev;  }	          for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNegative(dev))    {    sumSq    +=    dev;    }    	non-compiled	[CE]  >  expected	143	None	replace
130	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i]  /  2;  sumSq  +=  dev  *  observed[i]  /  2;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    dev    *    observed[i]    /    2;    sumSq  +=  dev  *  observed[i]  /  2;	  	compilable	  [FE]  AssertionFailedError  	99	6	add
131	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i]  /  2;  sumSq  +=  dev  *  observed[i]  /  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i]  /  2;  sumSq  +=  dev  *  observed[i]  /  2;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i]    /    2;    sumSq  +=  dev  *  observed[i]  /  2;	  	compilable	  [FE]  AssertionFailedError  	99	6	add
132	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i]  /  2;  SumSq  +=  dev  *  observed[i]  /  2;  [CE]  cannot  find  symbol  SumSq  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i]  /  2;  SumSq  +=  dev  *  observed[i]  /  2;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i]    /    2;    SumSq  +=  dev  *  observed[i]  /  2;	  	non-compiled	[CE]  cannot  find  symbol  SumSq	99	None	add
133	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i]  /  2;  int  i  =  observed.length;  sumSq  +=  dev  *  observed[i]  /  2;  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i]  /  2;  int  i  =  observed.length;  sumSq  +=  dev  *  observed[i]  /  2;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i]    /    2;    int  i  =  observed.length;  sumSq  +=  dev  *  observed[i]  /  2;	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	99	None	add
134	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i]  /  2;  int  i  =  observed[i]  -  1;  sumSq  +=  dev  *  observed[i]  /  2;  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i]  /  2;  int  i  =  observed[i]  -  1;  sumSq  +=  dev  *  observed[i]  /  2;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i]    /    2;    int  i  =  observed[i]  -  1;  sumSq  +=  dev  *  observed[i]  /  2;	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	99	None	add
135	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i]  /  2;  int  i  =  observed[i]  -  1;  sumSq  +=  i  *  observed[i]  /  2;  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i]  /  2;  int  i  =  observed[i]  -  1;  sumSq  +=  i  *  observed[i]  /  2;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i]    /    2;    int  i  =  observed[i]  -  1;  sumSq  +=  i  *  observed[i]  /  2;	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	99	None	add
136	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected[i]  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  *  expected[i]  /  observed[i];	  sumSq    +=    dev    *    dev    /    observed[i];    	compilable	  [FE]  AssertionFailedError  	59	6	replace
137	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i]  /  observed[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected[i]  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  expected[i]  /  observed[i];	  sumSq    +=    dev    *    dev    /    observed[i];    	compilable	  [FE]  AssertionFailedError  	59	6	replace
138	[BUG]  [BUGGY]  sumSq  +=  dev  *  total  /  observed[i];  [CE]  cannot  find  symbol  total  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  total  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  total  /  observed[i];	  sumSq    +=    dev    *    dev    /    observed[i];    	non-compiled	[CE]  cannot  find  symbol  total	59	None	replace
139	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i  -  1]  *  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  /  observed[i  -  1]  *  dev;	  sumSq    +=    dev    /    observed[i    -    1]    /    dev;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	139	6	replace
140	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i  -  1]  *  dev;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i  -  1]  *  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  /  observed[i  -  1]  *  dev;	  sumSq    +=    dev    /    observed[i    -    1]    /    dev;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	139	6	replace
141	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  observed[i  -  1]  /  dev;	  sumSq    +=    dev    /    observed[i    -    1]    /    dev;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	139	6	replace
142	[BUG]  [BUGGY]  sumSq  +=  observed[i  -  1]  /  dev;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed[i  -  1]  /  dev;	  sumSq    +=    dev    /    observed[i    -    1]    /    dev;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	139	6	replace
143	[BUG]  [BUGGY]  SumSq  +=  dev  *  observed[i]  /  dev;  [CE]  cannot  find  symbol  SumSq  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSq  +=  dev  *  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSq  +=  dev  *  observed[i]  /  dev;	  sumSq    +=    dev    *    observed[i]    /    dev;    SumSq    +=    dev    *    observed[i]    /    dev;    	non-compiled	[CE]  cannot  find  symbol  SumSq	8	None	replace
144	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i]  /  dev;  SumSq  +=  dev  *  observed[i]  /  dev;  [CE]  cannot  find  symbol  SumSq  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected[i]  /  dev;  SumSq  +=  dev  *  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  expected[i]  /  dev;  SumSq  +=  dev  *  observed[i]  /  dev;	  sumSq    +=    dev    *    observed[i]    /    dev;    SumSq    +=    dev    *    observed[i]    /    dev;    	non-compiled	[CE]  cannot  find  symbol  SumSq	8	None	replace
145	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(dev!=  observed[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	if(dev!=  observed[i])  {  sumSq  +=  observed[i]  *  dev;  }	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev    >>    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    	compilable	  [FE]  AssertionFailedError  	35	6	replace
146	[BUG]  [BUGGY]  if(dev!=  observed[i])  {  sumSq  +=  observed[i]  *  dev;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(dev!=  observed[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	if(dev!=  observed[i])  {  sumSq  +=  observed[i]  *  dev;  }	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev    >>    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    	compilable	  [FE]  AssertionFailedError  	35	6	replace
147	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  dev;  sumSq  +=  observed[i]  *  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    observed[i]    *    dev;    sumSq  +=  observed[i]  *  dev;	  	compilable	  [FE]  AssertionFailedError  	67	6	add
148	[BUG]  [BUGGY]  sumSq  +=  observed[i]  *  dev;  sumSq  +=  observed[i]  *  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  dev;  sumSq  +=  observed[i]  *  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i]    *    dev;    sumSq  +=  observed[i]  *  dev;	  	compilable	  [FE]  AssertionFailedError  	67	6	add
149	[BUG]  [BUGGY]  sumSq  +=  observed[i]  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  dev;  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i]    *    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  dev;  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	67	None	add
150	[BUG]  [BUGGY]  sumSq  +=  observed[i]  *  dev;  SumSq  +=  observed[i]  *  dev;  [CE]  cannot  find  symbol  SumSq  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  dev;  SumSq  +=  observed[i]  *  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i]    *    dev;    SumSq  +=  observed[i]  *  dev;	  	non-compiled	[CE]  cannot  find  symbol  SumSq	67	None	add
151	[BUG]  [BUGGY]  sumSq  +=  observed[i]  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  *  dev);  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  *  dev);  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i]    *    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  *  dev);  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	67	None	add
152	[BUG]  [BUGGY]  sumSq  +=  observed[i]  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  *  dev;  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i]    *    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  *  dev;  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	67	None	add
153	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  i  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  i  *  observed[i  -  1]  /  dev;	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq    +=    x    *    observed[i    -    1]    /    dev;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	169	6	replace
154	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  i  *  observed[i  -  1]  /  dev;  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  i  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  i  *  observed[i  -  1]  /  dev;	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq    +=    x    *    observed[i    -    1]    /    dev;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	169	6	replace
155	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  i  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  i  *  observed[i  -  1]  /  dev;	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq    +=    x    *    observed[i    -    1]    /    dev;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	169	6	replace
156	[BUG]  [BUGGY]  sumSq  +=  i  *  observed[i  -  1]  /  dev;  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  i  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  i  *  observed[i  -  1]  /  dev;	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq    +=    x    *    observed[i    -    1]    /    dev;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	169	6	replace
157	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i];  sumSq  +=  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    dev    /    observed[i];    sumSq  +=  dev  /  observed[i];	  	compilable	  [FE]  AssertionFailedError  	60	6	add
158	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i];  sumSq  +=  dev  /  observed[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i];  sumSq  +=  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    observed[i];    sumSq  +=  dev  /  observed[i];	  	compilable	  [FE]  AssertionFailedError  	60	6	add
159	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i];  SumSq  +=  dev  /  observed[i];  [CE]  cannot  find  symbol  SumSq  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i];  SumSq  +=  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    observed[i];    SumSq  +=  dev  /  observed[i];	  	non-compiled	[CE]  cannot  find  symbol  SumSq	60	None	add
160	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i];  int  i  =  observed.length;  sumSq  +=  dev  /  observed[i];  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i];  int  i  =  observed.length;  sumSq  +=  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    observed[i];    int  i  =  observed.length;  sumSq  +=  dev  /  observed[i];	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	60	None	add
161	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i];  double  sumSq  +=  dev  /  observed[i];  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i];  double  sumSq  +=  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    observed[i];    double  sumSq  +=  dev  /  observed[i];	  	non-compiled	[CE]  ';'  expected	60	None	add
162	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i];  int  i  =  observed[i];  sumSq  +=  dev  /  observed[i];  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i];  int  i  =  observed[i];  sumSq  +=  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    observed[i];    int  i  =  observed[i];  sumSq  +=  dev  /  observed[i];	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	60	None	add
163	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected  *  observed[i]  /  dev;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected  *  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  expected  *  observed[i]  /  dev;	  sumSq    +=    expected    *    dev    *    observed[i]    /    dev;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	128	None	replace
164	[BUG]  [BUGGY]  sumSq  +=  observed  *  dev  *  observed[i]  /  dev;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed  *  dev  *  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed  *  dev  *  observed[i]  /  dev;	  sumSq    +=    expected    *    dev    *    observed[i]    /    dev;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	128	None	replace
165	[BUG]  [BUGGY]  sumSq  +=  estimated  *  dev  *  observed[i]  /  dev;  [CE]  cannot  find  symbol  estimated  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  estimated  *  dev  *  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  estimated  *  dev  *  observed[i]  /  dev;	  sumSq    +=    expected    *    dev    *    observed[i]    /    dev;    	non-compiled	[CE]  cannot  find  symbol  estimated	128	None	replace
166	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	122	6	add
167	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	122	6	add
168	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=	  	non-compiled	[CE]  illegal  start  of  expression	122	None	add
169	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	122	6	add
170	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	122	6	add
171	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=	  	non-compiled	[CE]  ')'  expected	122	None	add
172	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {	  	non-compiled	[CE]  illegal  start  of  expression	122	None	add
173	[BUG]  [BUGGY]  int  i  =  observed.length;  sumSq  +=  dev  /  dev  /  observed[i];  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  int  i  =  observed.length;  sumSq  +=  dev  /  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	int  i  =  observed.length;  sumSq  +=  dev  /  dev  /  observed[i];	  sumSq    +=    dev    /    dev    /    observed[i];    int    i    =    observed.length;    sumSq    +=    dev    /    dev    /    observed[i];    	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	41	None	replace
174	[BUG]  [BUGGY]  SumSq  +=  dev  *  dev  /  observed[i];  [CE]  cannot  find  symbol  SumSq  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSq  +=  dev  *  dev  /  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSq  +=  dev  *  dev  /  observed[i];	  SumSq    +=    dev    *    observed[i];    	non-compiled	[CE]  cannot  find  symbol  SumSq	119	None	replace
175	[BUG]  [BUGGY]  int[]  expected  =  observed[i].doubleValue();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  int[]  expected  =  observed[i].doubleValue();  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	int[]  expected  =  observed[i].doubleValue();	  int[]    expected    =    observed[i].longValue();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	115	None	replace
176	[BUG]  [BUGGY]  int[]  expected  =  observed[i].intValue();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  int[]  expected  =  observed[i].intValue();  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	int[]  expected  =  observed[i].intValue();	  int[]    expected    =    observed[i].longValue();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	115	None	replace
177	[BUG]  [BUGGY]  if(expected[i]  <  =  0)  {  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(expected[i]  <  =  0)  {  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	if(expected[i]  <  =  0)  {  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev    >=    expected[i])    {    sumSq    +=    dev;    }    else    {    return    dev;    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
178	[BUG]  [BUGGY]  if(expected[i]  <  =  0)  {  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(expected[i]  <  =  0)  {  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	if(expected[i]  <  =  0)  {  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev    >=    expected[i])    {    sumSq    +=    dev;    }    else    {    return    dev;    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
179	[BUG]  [BUGGY]  if(expected[i]  <  =  0)  {  if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(expected[i]  <  =  0)  {  if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	if(expected[i]  <  =  0)  {  if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev    >=    expected[i])    {    sumSq    +=    dev;    }    else    {    return    dev;    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
180	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	12	6	add
181	[BUG]  [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	12	6	add
182	[BUG]  [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;  SumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  [CE]  cannot  find  symbol  SumSq  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;  SumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    dev    *    expected[i]    /    dev;    SumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  SumSq	12	None	add
183	[BUG]  [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    dev    *    expected[i]    /    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	12	None	add
184	[BUG]  [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;  totalSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  [CE]  cannot  find  symbol  totalSq  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;  totalSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    dev    *    expected[i]    /    dev;    totalSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  totalSq	12	None	add
185	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	12	6	add
186	[BUG]  [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	12	6	add
187	[BUG]  [BUGGY]  ((  double)dev).doubleValue()  /  1;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  ((  double)dev).doubleValue()  /  1;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	((  double)dev).doubleValue()  /  1;	  ((    double)dev).doubleValue()    +    1;    	non-compiled	[CE]  not  a  statement	97	None	replace
188	[BUG]  [BUGGY]  ((  double)dev).doubleValue()  *  1;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  ((  double)dev).doubleValue()  *  1;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	((  double)dev).doubleValue()  *  1;	  ((    double)dev).doubleValue()    +    1;    	non-compiled	[CE]  not  a  statement	97	None	replace
189	[BUG]  [BUGGY]  sumSq  +=  observed  *  sumSq  /  dev[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed  *  sumSq  /  dev[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed  *  sumSq  /  dev[i];	  sumSq    +=    dev    *    observed    /    dev[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	112	None	replace
190	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  2;  sumSq  +=  dev  *  observed[i  -  1]  /  2;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    dev    *    observed[i    -    1]    /    2;    sumSq  +=  dev  *  observed[i  -  1]  /  2;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	188	6	add
191	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  2;  sumSq  +=  dev  *  observed[i  -  1]  /  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  2;  sumSq  +=  dev  *  observed[i  -  1]  /  2;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i    -    1]    /    2;    sumSq  +=  dev  *  observed[i  -  1]  /  2;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	188	6	add
192	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  2;  double  sumSq  +=  dev  *  observed[i  -  1]  /  2;  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  2;  double  sumSq  +=  dev  *  observed[i  -  1]  /  2;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i    -    1]    /    2;    double  sumSq  +=  dev  *  observed[i  -  1]  /  2;	  	non-compiled	[CE]  ';'  expected	188	None	add
193	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  2;  ArrayIndexOutOfBoundsException.printStackTrace(sumSq);  [CE]  no  suitable  method  found  for  printStackTrace(double)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  2;  ArrayIndexOutOfBoundsException.printStackTrace(sumSq);  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i    -    1]    /    2;    ArrayIndexOutOfBoundsException.printStackTrace(sumSq);	  	non-compiled	[CE]  no  suitable  method  found  for  printStackTrace(double)	188	None	add
194	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  2;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Unexpected  array  lengths  incorrect ");  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    dev    *    observed[i    -    1]    /    2;    ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Unexpected  array  lengths  incorrect ");	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	188	6	add
195	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  2;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Unexpected  array  lengths  incorrect ");  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  2;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Unexpected  array  lengths  incorrect ");  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i    -    1]    /    2;    ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Unexpected  array  lengths  incorrect ");	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	188	6	add
196	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  2;  ArrayIndexOutOfBoundsException.printStackTrace(new  double[]  {  dev  }  );  [CE]  no  suitable  method  found  for  printStackTrace(double[])  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  2;  ArrayIndexOutOfBoundsException.printStackTrace(new  double[]  {  dev  }  );  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i    -    1]    /    2;    ArrayIndexOutOfBoundsException.printStackTrace(new  double[]  {  dev  }  );	  	non-compiled	[CE]  no  suitable  method  found  for  printStackTrace(double[])	188	None	add
197	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  dev  *  observed[i];  sumSq  +=  dev  /  dev  *  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    dev    /    dev    *    observed[i];    sumSq  +=  dev  /  dev  *  observed[i];	  	compilable	  [FE]  AssertionFailedError  	153	6	add
198	[BUG]  [BUGGY]  sumSq  +=  dev  /  dev  *  observed[i];  sumSq  +=  dev  /  dev  *  observed[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  dev  *  observed[i];  sumSq  +=  dev  /  dev  *  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    dev    *    observed[i];    sumSq  +=  dev  /  dev  *  observed[i];	  	compilable	  [FE]  AssertionFailedError  	153	6	add
199	[BUG]  [BUGGY]  sumSq  +=  dev  /  dev  *  observed[i];  SumSq  +=  dev  /  dev  *  observed[i];  [CE]  cannot  find  symbol  SumSq  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  dev  *  observed[i];  SumSq  +=  dev  /  dev  *  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    dev    *    observed[i];    SumSq  +=  dev  /  dev  *  observed[i];	  	non-compiled	[CE]  cannot  find  symbol  SumSq	153	None	add
200	[BUG]  [BUGGY]  sumSq  +=  dev  /  dev  *  observed[i];  int  i  =  observed.length;  sumSq  +=  dev  /  dev  *  observed[i];  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  dev  *  observed[i];  int  i  =  observed.length;  sumSq  +=  dev  /  dev  *  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    dev    *    observed[i];    int  i  =  observed.length;  sumSq  +=  dev  /  dev  *  observed[i];	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	153	None	add
201	[BUG]  [BUGGY]  sumSq  +=  dev  /  dev  *  observed[i];  int  i  =  observed[i];  sumSq  +=  dev  /  dev  *  observed[i];  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  dev  *  observed[i];  int  i  =  observed[i];  sumSq  +=  dev  /  dev  *  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    dev    *    observed[i];    int  i  =  observed[i];  sumSq  +=  dev  /  dev  *  observed[i];	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	153	None	add
202	[BUG]  [BUGGY]  sumSq  +=  dev  /  dev  *  observed[i];  sumSq  +=  dev  /  desv  *  observed[i];  [CE]  cannot  find  symbol  desv  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  dev  *  observed[i];  sumSq  +=  dev  /  desv  *  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    dev    *    observed[i];    sumSq  +=  dev  /  desv  *  observed[i];	  	non-compiled	[CE]  cannot  find  symbol  desv	153	None	add
203	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)sumSq[i]  -  observed[i]);  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)sumSq[i]  -  observed[i]);  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)sumSq[i]  -  observed[i]);  }	          for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    ((    double)observed[i]    -    observed[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	1	None	replace
204	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  observed[i]);  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  observed[i]);  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  observed[i]);  }	          for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    ((    double)observed[i]    -    observed[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	1	None	replace
205	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  -  expected[i];  sumSq  +=  dev  -  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    dev    -    expected[i];    sumSq  +=  dev  -  expected[i];	  	compilable	  [FE]  AssertionFailedError  	156	6	add
206	[BUG]  [BUGGY]  sumSq  +=  dev  -  expected[i];  sumSq  +=  dev  -  expected[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  -  expected[i];  sumSq  +=  dev  -  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    -    expected[i];    sumSq  +=  dev  -  expected[i];	  	compilable	  [FE]  AssertionFailedError  	156	6	add
207	[BUG]  [BUGGY]  sumSq  +=  dev  -  expected[i];  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  -  expected[i];  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  -  expected[i];  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  -  expected[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    -    expected[i];    for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  -  expected[i];  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	156	None	add
208	[BUG]  [BUGGY]  sumSq  +=  dev  -  expected[i];  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  dev  -  expected[i];  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  -  expected[i];  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  dev  -  expected[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    -    expected[i];    for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  dev  -  expected[i];  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	156	None	add
209	[BUG]  [BUGGY]  sumSq  +=  dev  -  expected[i];  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  -  expected[i];  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  -  expected[i];  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  -  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    -    expected[i];    for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  -  expected[i];	  	non-compiled	[CE]  illegal  start  of  expression	156	None	add
210	[BUG]  [BUGGY]  sumSq  +=  dev  -  expected[i];  SumSq  +=  dev  -  expected[i];  [CE]  cannot  find  symbol  SumSq  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  -  expected[i];  SumSq  +=  dev  -  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    -    expected[i];    SumSq  +=  dev  -  expected[i];	  	non-compiled	[CE]  cannot  find  symbol  SumSq	156	None	add
211	[BUG]  [BUGGY]  int  i  =  observed.length;  sumSq  +=  dev  *  expected[i]  /  dev;  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  int  i  =  observed.length;  sumSq  +=  dev  *  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	int  i  =  observed.length;  sumSq  +=  dev  *  expected[i]  /  dev;	  sumSq    +=    dev    *    expected[i]    /    dev;    int    i    =    observed.length;    sumSq    +=    dev    *    expected[i]    /    dev;    	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	15	None	replace
212	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  *  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq        +=        dev        /        dev        /        observed[i];        sumSq    +=    dev    *    dev    /    observed[i];    sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];	  	compilable	  [FE]  AssertionFailedError  	160	6	add
213	[BUG]  [BUGGY]  sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  *  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  *  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        /        dev        /        observed[i];        sumSq    +=    dev    *    dev    /    observed[i];    sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];	  	compilable	  [FE]  AssertionFailedError  	160	6	add
214	[BUG]  [BUGGY]  sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  *  dev  /  observed[i];  SumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];  [CE]  cannot  find  symbol  SumSq  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  *  dev  /  observed[i];  SumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        /        dev        /        observed[i];        sumSq    +=    dev    *    dev    /    observed[i];    SumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];	  	non-compiled	[CE]  cannot  find  symbol  SumSq	160	None	add
215	[BUG]  [BUGGY]  sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  *  dev  /  observed[i];  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  *  dev  /  observed[i];  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        /        dev        /        observed[i];        sumSq    +=    dev    *    dev    /    observed[i];    for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	160	None	add
216	[BUG]  [BUGGY]  sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  *  dev  /  observed[i];  totalSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];  [CE]  cannot  find  symbol  totalSq  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  *  dev  /  observed[i];  totalSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        /        dev        /        observed[i];        sumSq    +=    dev    *    dev    /    observed[i];    totalSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];	  	non-compiled	[CE]  cannot  find  symbol  totalSq	160	None	add
217	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  *  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq        +=        dev        /        dev        /        observed[i];        sumSq    +=    dev    *    dev    /    observed[i];    sumSq  +=  dev  /  dev  /  observed[i];	  	compilable	  [FE]  AssertionFailedError  	160	6	add
218	[BUG]  [BUGGY]  sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  *  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  *  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        /        dev        /        observed[i];        sumSq    +=    dev    *    dev    /    observed[i];    sumSq  +=  dev  /  dev  /  observed[i];	  	compilable	  [FE]  AssertionFailedError  	160	6	add
219	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i];  sumSq  +=  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    observed[i];    sumSq  +=  observed[i];	  	compilable	  [FE]  AssertionFailedError  	80	6	add
220	[BUG]  [BUGGY]  sumSq  +=  observed[i];  sumSq  +=  observed[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i];  sumSq  +=  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i];    sumSq  +=  observed[i];	  	compilable	  [FE]  AssertionFailedError  	80	6	add
221	[BUG]  [BUGGY]  sumSq  +=  observed[i];  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i];  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i];  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i];    for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i];  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	80	None	add
222	[BUG]  [BUGGY]  sumSq  +=  observed[i];  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i];  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i];  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i];    for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i];	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
223	[BUG]  [BUGGY]  sumSq  +=  observed[i];  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  observed[i]);  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i];  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  observed[i]);  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i];    for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  observed[i]);  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	80	None	add
224	[BUG]  [BUGGY]  sumSq  +=  observed[i];  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i].doubleValue();  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i];  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i].doubleValue();  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i];    for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i].doubleValue();  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	80	None	add
225	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev;    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	95	6	add
226	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev;    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	95	6	add
227	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev;    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	95	6	add
228	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev;    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	95	6	add
229	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev;    }    else    {    return    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	95	6	add
230	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev;    }    else    {    return    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	95	6	add
231	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev;    }    else    {    return    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	95	6	add
232	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev;    }    else    {    return    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	95	6	add
233	[BUG]  [BUGGY]  ((  ChiSquareDistribution)dev).sumSq  +=  dev  *  dev;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  ((  ChiSquareDistribution)dev).sumSq  +=  dev  *  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	((  ChiSquareDistribution)dev).sumSq  +=  dev  *  dev;	  ((    ChiSquareDistribution)dev).sumSq    +=    dev;    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
234	[BUG]  [BUGGY]  ((  ChiSquareDistribution)dev).sumSq  +=  observed[i];  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  ((  ChiSquareDistribution)dev).sumSq  +=  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	((  ChiSquareDistribution)dev).sumSq  +=  observed[i];	  ((    ChiSquareDistribution)dev).sumSq    +=    dev;    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
235	[BUG]  [BUGGY]  ((  ChiSquareDistribution)dev).sumSq  +=  sumSq;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  ((  ChiSquareDistribution)dev).sumSq  +=  sumSq;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	((  ChiSquareDistribution)dev).sumSq  +=  sumSq;	  ((    ChiSquareDistribution)dev).sumSq    +=    dev;    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
236	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq[i]  =  ((  double)dev  -  expected[i]);  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq[i]  =  ((  double)dev  -  expected[i]);  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq[i]  =  ((  double)dev  -  expected[i]);  }	          for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq[i]    =    ((    double)dev    -    observed[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	2	None	replace
237	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq[i]  =  ((  double)dev  /  observed[i]);  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq[i]  =  ((  double)dev  /  observed[i]);  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq[i]  =  ((  double)dev  /  observed[i]);  }	          for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq[i]    =    ((    double)dev    -    observed[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	2	None	replace
238	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  expected[i]);  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  expected[i]);  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  observed[i].length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  expected[i]);  }	          for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    ((    double)observed[i]    -    expected[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	4	None	replace
239	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected[i]  *  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  expected[i]  *  dev;  sumSq  +=  dev  *  expected[i]  /  dev;	  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq    +=    dev    *    expected[i]    /    dev;    	compilable	  [FE]  AssertionFailedError  	13	6	replace
240	[BUG]  [BUGGY]  sumSq  +=  expected[i]  *  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected[i]  *  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  expected[i]  *  dev;  sumSq  +=  dev  *  expected[i]  /  dev;	  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq    +=    dev    *    expected[i]    /    dev;    	compilable	  [FE]  AssertionFailedError  	13	6	replace
241	[BUG]  [BUGGY]  long  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  long  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	long  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }	  int    i    =    0;    i    <    observed.length;    i++)    {    if(!isNegative(dev))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	108	None	replace
242	[BUG]  [BUGGY]  double  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  double  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	double  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }	  int    i    =    0;    i    <    observed.length;    i++)    {    if(!isNegative(dev))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	108	None	replace
243	[BUG]  [BUGGY]  Integer  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  Integer  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	Integer  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }	  int    i    =    0;    i    <    observed.length;    i++)    {    if(!isNegative(dev))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	108	None	replace
244	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev!=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=	  	non-compiled	[CE]  ')'  expected	33	None	add
245	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev!=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[	  	non-compiled	[CE]  ']'  expected	33	None	add
246	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev!=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	33	6	add
247	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev!=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	33	6	add
248	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  expected[i])  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  expected[i])  {  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev!=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  expected[i])  {	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
249	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[  [CE]  ']'  expected  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev!=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[	  	non-compiled	[CE]  ']'  expected	33	None	add
250	[BUG]  [BUGGY]  sumSq  +=  observed[i]  *  dev  /  dev.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  dev  /  dev.doubleValue();  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed[i]  *  dev  /  dev.doubleValue();	  sumSq    +=    observed[i]    *    dev    /    dev;    	non-compiled	[CE]  double  cannot  be  dereferenced	75	None	replace
251	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  dev  /  2;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  observed[i]  *  dev  /  2;	  sumSq    +=    observed[i]    *    dev    /    dev;    	compilable	  [FE]  AssertionFailedError  	75	6	replace
252	[BUG]  [BUGGY]  sumSq  +=  observed[i]  *  dev  /  2;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  dev  /  2;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed[i]  *  dev  /  2;	  sumSq    +=    observed[i]    *    dev    /    dev;    	compilable	  [FE]  AssertionFailedError  	75	6	replace
253	[BUG]  [BUGGY]  sumSq  +=  DEV  *  observed[i  -  1]  /  dev;  [CE]  cannot  find  symbol  DEV  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  DEV  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  DEV  *  observed[i  -  1]  /  dev;	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq    +=    DEV    *    observed[i    -    1]    /    dev;    	non-compiled	[CE]  cannot  find  symbol  DEV	168	None	replace
254	[BUG]  [BUGGY]  sumSq  +=  expected  *  observed[i  -  1]  /  dev;  sumSq  +=  DEV  *  observed[i  -  1]  /  dev;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected  *  observed[i  -  1]  /  dev;  sumSq  +=  DEV  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  expected  *  observed[i  -  1]  /  dev;  sumSq  +=  DEV  *  observed[i  -  1]  /  dev;	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq    +=    DEV    *    observed[i    -    1]    /    dev;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	168	None	replace
255	[BUG]  [BUGGY]  sumSq  +=  observed[i  -  1]  *  dev;  sumSq  +=  DEV  *  observed[i  -  1]  /  dev;  [CE]  cannot  find  symbol  DEV  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i  -  1]  *  dev;  sumSq  +=  DEV  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed[i  -  1]  *  dev;  sumSq  +=  DEV  *  observed[i  -  1]  /  dev;	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq    +=    DEV    *    observed[i    -    1]    /    dev;    	non-compiled	[CE]  cannot  find  symbol  DEV	168	None	replace
256	[BUG]  [BUGGY]  SumSquare  sumSq  =  sumSq  *  dev  *  observed[i];  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSquare  sumSq  =  sumSq  *  dev  *  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSquare  sumSq  =  sumSq  *  dev  *  observed[i];	          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    If(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
257	[BUG]  [BUGGY]  bucket[i]  -=  dev  *  observed[i];  [CE]  cannot  find  symbol  bucket  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  bucket[i]  -=  dev  *  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	bucket[i]  -=  dev  *  observed[i];	          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    If(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    	non-compiled	[CE]  cannot  find  symbol  bucket	104	None	replace
258	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i]        /        dev;        if(sumSq    >    0)    {    sumSq    +=    dev    *    observed[i]    /    dev;    }    if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }	  	non-compiled	[CE]  illegal  start  of  expression	149	None	add
259	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i]        /        dev;        if(sumSq    >    0)    {    sumSq    +=    dev    *    observed[i]    /    dev;    }    for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }	  	non-compiled	[CE]  illegal  start  of  expression	149	None	add
260	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  if(sumSq  >  0)  {  sumSq  +=  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  if(sumSq  >  0)  {  sumSq  +=  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i]        /        dev;        if(sumSq    >    0)    {    sumSq    +=    dev    *    observed[i]    /    dev;    }    if(sumSq  >  0)  {  sumSq  +=  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }	  	non-compiled	[CE]  illegal  start  of  expression	149	None	add
261	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i]        /        dev;        if(sumSq    >    0)    {    sumSq    +=    dev    *    observed[i]    /    dev;    }    for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /	  	non-compiled	[CE]  illegal  start  of  expression	149	None	add
262	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i]        /        dev;        if(sumSq    >    0)    {    sumSq    +=    dev    *    observed[i]    /    dev;    }    for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=	  	non-compiled	[CE]  illegal  start  of  expression	149	None	add
263	[BUG]  [BUGGY]  if(observed[i]  <  0)  {  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(observed[i]  <  0)  {  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	if(observed[i]  <  0)  {  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev    >=    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    else    {    return    dev;    }    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
264	[BUG]  [BUGGY]  if(observed[i]  <  0)  {  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(observed[i]  <  0)  {  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	if(observed[i]  <  0)  {  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev    >=    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    else    {    return    dev;    }    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
265	[BUG]  [BUGGY]  if(observed[i]  <  0)  {  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(observed[i]  <  0)  {  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	if(observed[i]  <  0)  {  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev    >=    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    else    {    return    dev;    }    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
266	[BUG]  [BUGGY]  double  sumSq  +=  dev  *  observed[i]  /  dev;  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  double  sumSq  +=  dev  *  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	double  sumSq  +=  dev  *  observed[i]  /  dev;	  sumSq    +=    dev    *    expected[i]    /    dev;    double    sumSq    +=    dev    *    expected[i]    /    dev;    	non-compiled	[CE]  ';'  expected	165	None	replace
267	[BUG]  [BUGGY]  double  sumSq  +=  dev  *  expected[i]  /  dev;  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  double  sumSq  +=  dev  *  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	double  sumSq  +=  dev  *  expected[i]  /  dev;	  sumSq    +=    dev    *    expected[i]    /    dev;    double    sumSq    +=    dev    *    expected[i]    /    dev;    	non-compiled	[CE]  ';'  expected	165	None	replace
268	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!isNegative(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	174	None	replace
269	[BUG]  [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  if(!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  if(!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	int  i  =  0;  i  <  expected.length;  i++)  {  if(!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!isNegative(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	174	None	replace
270	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  if(isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!isNegative(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
271	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isNegative(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
272	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  observed[i]  *  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }	  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq    >    0.0)    {    sumSq    +=    dev    *    observed[i]    /    dev;    }    	compilable	  [FE]  AssertionFailedError  	152	6	replace
273	[BUG]  [BUGGY]  sumSq  +=  observed[i]  *  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed[i]  *  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }	  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq    >    0.0)    {    sumSq    +=    dev    *    observed[i]    /    dev;    }    	compilable	  [FE]  AssertionFailedError  	152	6	replace
274	[BUG]  [BUGGY]  SumSquare  sumSq  =  sumSq  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  sumSq  *  observed[i]  /  dev;  }  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSquare  sumSq  =  sumSq  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  sumSq  *  observed[i]  /  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSquare  sumSq  =  sumSq  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  sumSq  *  observed[i]  /  dev;  }	  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq    >    0.0)    {    sumSq    +=    dev    *    observed[i]    /    dev;    }    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
275	[BUG]  [BUGGY]  SumSquare  sumSq  =  sumSq  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSquare  sumSq  =  sumSq  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSquare  sumSq  =  sumSq  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }	  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq    >    0.0)    {    sumSq    +=    dev    *    observed[i]    /    dev;    }    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
276	[BUG]  [BUGGY]  sumSq  +=  dev  *  /  expected[i];  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  /  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  /  expected[i];	  sumSq    +=    dev    *    expected[i];    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
277	[BUG]  [BUGGY]  sumSq  +=  expected  *  dev  *  observed[i  -  1]  /  dev;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected  *  dev  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  expected  *  dev  *  observed[i  -  1]  /  dev;	  sumSq    +=    dev    *    expected[i    -    1]    /    dev;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	137	None	replace
278	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  dev  /  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    dev    *    dev    /    observed[i];    sumSq  +=  dev  *  dev  /  observed[i];	  	compilable	  [FE]  AssertionFailedError  	58	6	add
279	[BUG]  [BUGGY]  sumSq  +=  dev  *  dev  /  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  dev  /  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    dev    /    observed[i];    sumSq  +=  dev  *  dev  /  observed[i];	  	compilable	  [FE]  AssertionFailedError  	58	6	add
280	[BUG]  [BUGGY]  sumSq  +=  dev  *  dev  /  observed[i];  SumSq  +=  dev  *  dev  /  observed[i];  [CE]  cannot  find  symbol  SumSq  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  dev  /  observed[i];  SumSq  +=  dev  *  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    dev    /    observed[i];    SumSq  +=  dev  *  dev  /  observed[i];	  	non-compiled	[CE]  cannot  find  symbol  SumSq	58	None	add
281	[BUG]  [BUGGY]  sumSq  +=  dev  *  dev  /  observed[i];  int  i  =  observed.length;  sumSq  +=  dev  *  dev  /  observed[i];  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  dev  /  observed[i];  int  i  =  observed.length;  sumSq  +=  dev  *  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    dev    /    observed[i];    int  i  =  observed.length;  sumSq  +=  dev  *  dev  /  observed[i];	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	58	None	add
282	[BUG]  [BUGGY]  sumSq  +=  dev  *  dev  /  observed[i];  double  sumSq  +=  dev  *  dev  /  observed[i];  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  dev  /  observed[i];  double  sumSq  +=  dev  *  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    dev    /    observed[i];    double  sumSq  +=  dev  *  dev  /  observed[i];	  	non-compiled	[CE]  ';'  expected	58	None	add
283	[BUG]  [BUGGY]  sumSq  +=  dev  *  dev  /  observed[i];  int  i  =  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  dev  /  observed[i];  int  i  =  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    dev    /    observed[i];    int  i  =  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	58	None	add
284	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)expected[i]);  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)expected[i]);  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)expected[i]);  }	          for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    ((    double)observed[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	5	None	replace
285	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)sumSq[i]);  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)sumSq[i]);  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)sumSq[i]);  }	          for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    ((    double)observed[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	5	None	replace
286	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)dev[i]);  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)dev[i]);  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)dev[i]);  }	          for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    ((    double)observed[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	5	None	replace
287	[BUG]  [BUGGY]  bucket[i]  +=  dev  *  observed[i];  [CE]  cannot  find  symbol  bucket  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  bucket[i]  +=  dev  *  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	bucket[i]  +=  dev  *  observed[i];	          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev    >=    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    	non-compiled	[CE]  cannot  find  symbol  bucket	106	None	replace
288	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected[i];  sumSq  +=  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    expected[i];    sumSq  +=  expected[i];	  	compilable	  [FE]  AssertionFailedError  	82	6	add
289	[BUG]  [BUGGY]  sumSq  +=  expected[i];  sumSq  +=  expected[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected[i];  sumSq  +=  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    expected[i];    sumSq  +=  expected[i];	  	compilable	  [FE]  AssertionFailedError  	82	6	add
290	[BUG]  [BUGGY]  sumSq  +=  expected[i];  int  i  =  observed.length;  sumSq  +=  expected[i];  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected[i];  int  i  =  observed.length;  sumSq  +=  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    expected[i];    int  i  =  observed.length;  sumSq  +=  expected[i];	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	82	None	add
291	[BUG]  [BUGGY]  sumSq  +=  expected[i];  SumSq  +=  expected[i];  [CE]  cannot  find  symbol  SumSq  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected[i];  SumSq  +=  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    expected[i];    SumSq  +=  expected[i];	  	non-compiled	[CE]  cannot  find  symbol  SumSq	82	None	add
292	[BUG]  [BUGGY]  sumSq  +=  expected[i];  int  i  =  observed[i];  sumSq  +=  expected[i];  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected[i];  int  i  =  observed[i];  sumSq  +=  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    expected[i];    int  i  =  observed[i];  sumSq  +=  expected[i];	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	82	None	add
293	[BUG]  [BUGGY]  sumSq  +=  expected[i];  totalSq  +=  expected[i];  [CE]  cannot  find  symbol  totalSq  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected[i];  totalSq  +=  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    expected[i];    totalSq  +=  expected[i];	  	non-compiled	[CE]  cannot  find  symbol  totalSq	82	None	add
294	[BUG]  [BUGGY]  SumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  [CE]  cannot  find  symbol  SumSq  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq    +=    dev    *    observed[i    -    1]    /    dev;    	non-compiled	[CE]  cannot  find  symbol  SumSq	25	None	replace
295	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i  -  1];  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  *  observed[i  -  1];  sumSq  +=  dev  *  observed[i  -  1]  /  dev;	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq    +=    dev    *    observed[i    -    1]    /    dev;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	25	6	replace
296	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i  -  1];  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i  -  1];  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  observed[i  -  1];  sumSq  +=  dev  *  observed[i  -  1]  /  dev;	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq    +=    dev    *    observed[i    -    1]    /    dev;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	25	6	replace
297	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i]  /  dev;  sumSq  +=  dev  /  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    dev    /    observed[i]    /    dev;    sumSq  +=  dev  /  observed[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	163	6	add
298	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i]  /  dev;  sumSq  +=  dev  /  observed[i]  /  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i]  /  dev;  sumSq  +=  dev  /  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    observed[i]    /    dev;    sumSq  +=  dev  /  observed[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	163	6	add
299	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i]  /  dev;  SumSq  +=  dev  /  observed[i]  /  dev;  [CE]  cannot  find  symbol  SumSq  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i]  /  dev;  SumSq  +=  dev  /  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    observed[i]    /    dev;    SumSq  +=  dev  /  observed[i]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  SumSq	163	None	add
300	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i]  /  dev;  int  i  =  observed.length;  sumSq  +=  dev  /  observed[i]  /  dev;  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i]  /  dev;  int  i  =  observed.length;  sumSq  +=  dev  /  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    observed[i]    /    dev;    int  i  =  observed.length;  sumSq  +=  dev  /  observed[i]  /  dev;	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	163	None	add
301	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i]  /  dev;  double  sumSq  +=  dev  /  observed[i]  /  dev;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i]  /  dev;  double  sumSq  +=  dev  /  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    observed[i]    /    dev;    double  sumSq  +=  dev  /  observed[i]  /  dev;	  	non-compiled	[CE]  ';'  expected	163	None	add
302	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i]  /  dev;  sumSq  +=  dev  /  observed[i]  /  dev);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i]  /  dev;  sumSq  +=  dev  /  observed[i]  /  dev);  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    observed[i]    /    dev;    sumSq  +=  dev  /  observed[i]  /  dev);	  	non-compiled	[CE]  ';'  expected	163	None	add
303	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    expected[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expected[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	16	6	add
304	[BUG]  [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expected[i]  /  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    expected[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expected[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	16	6	add
305	[BUG]  [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  /  dev;  SumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expected[i]  /  dev;  [CE]  cannot  find  symbol  SumSq  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  /  dev;  SumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    expected[i]    /    dev;    SumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expected[i]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  SumSq	16	None	add
306	[BUG]  [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expected[i]  /  dev;  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expected[i]  /  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    expected[i]    /    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expected[i]  /  dev;  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	16	None	add
307	[BUG]  [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  /  dev;  totalSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expected[i]  /  dev;  [CE]  cannot  find  symbol  totalSq  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  /  dev;  totalSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    expected[i]    /    dev;    totalSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expected[i]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  totalSq	16	None	add
308	[BUG]  [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  expected[i]  /  dev;  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  expected[i]  /  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    expected[i]    /    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  expected[i]  /  dev;  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	16	None	add
309	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    dev    *    observed[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	180	6	add
310	[BUG]  [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    dev    *    observed[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	180	6	add
311	[BUG]  [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  SumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  [CE]  cannot  find  symbol  SumSq  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  SumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    dev    *    observed[i]    /    dev;    SumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  SumSq	180	None	add
312	[BUG]  [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    dev    *    observed[i]    /    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	180	None	add
313	[BUG]  [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  totalSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  [CE]  cannot  find  symbol  totalSq  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  totalSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    dev    *    observed[i]    /    dev;    totalSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  totalSq	180	None	add
314	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  expected[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    dev    *    observed[i]    /    dev;    sumSq  +=  expected[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	180	6	add
315	[BUG]  [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  expected[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  expected[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    dev    *    observed[i]    /    dev;    sumSq  +=  expected[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	180	6	add
316	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i].length;  [CE]  long  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i].length;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  /  observed[i].length;	  sumSq    +=    dev    /    observed[i];    	non-compiled	[CE]  long  cannot  be  dereferenced	61	None	replace
317	[BUG]  [BUGGY]  SumSq  +=  dev  /  dev  /  observed[i];  [CE]  cannot  find  symbol  SumSq  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSq  +=  dev  /  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSq  +=  dev  /  dev  /  observed[i];	  sumSq    +=    dev    /    dev    /    observed[i];    SumSq    +=    dev    /    dev    /    observed[i];    	non-compiled	[CE]  cannot  find  symbol  SumSq	40	None	replace
318	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    expected[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	131	6	add
319	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    expected[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	131	6	add
320	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    expected[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	131	6	add
321	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    expected[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	131	6	add
322	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    expected[i];    }    else    {    return    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	131	6	add
323	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    expected[i];    }    else    {    return    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	131	6	add
324	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  expected[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    expected[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  expected[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	131	6	add
325	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  expected[i];  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  expected[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    expected[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  expected[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	131	6	add
326	[BUG]  [BUGGY]  SumSquare  sumSq  =  sumSq  *  observed[i]  /  dev;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSquare  sumSq  =  sumSq  *  observed[i]  /  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSquare  sumSq  =  sumSq  *  observed[i]  /  dev;	  SumSquare    sumSq    =    sumSq    *    observed[i];    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
327	[BUG]  [BUGGY]  SumSquare  sumSq  =  sumSq  /  observed[i];  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSquare  sumSq  =  sumSq  /  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSquare  sumSq  =  sumSq  /  observed[i];	  SumSquare    sumSq    =    sumSq    *    observed[i];    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
328	[BUG]  [BUGGY]  SumSquare  sumSq  =  sumSq  *  observed[i],  dev;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSquare  sumSq  =  sumSq  *  observed[i],  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSquare  sumSq  =  sumSq  *  observed[i],  dev;	  SumSquare    sumSq    =    sumSq    *    observed[i];    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
329	[BUG]  [BUGGY]  SumSq  +=  dev  *  expected[i]  /  dev;  [CE]  cannot  find  symbol  SumSq  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSq  +=  dev  *  expected[i]  /  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSq  +=  dev  *  expected[i]  /  dev;	  SumSq    +=    dev    *    expected[i];    	non-compiled	[CE]  cannot  find  symbol  SumSq	120	None	replace
330	[BUG]  [BUGGY]  SumSq  +=  dev  *  dev  /  expected[i];  [CE]  cannot  find  symbol  SumSq  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSq  +=  dev  *  dev  /  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSq  +=  dev  *  dev  /  expected[i];	  SumSq    +=    dev    *    expected[i];    	non-compiled	[CE]  cannot  find  symbol  SumSq	120	None	replace
331	[BUG]  [BUGGY]  SumSq  +=  dev  *  expected[i]  /  observed[i];  [CE]  cannot  find  symbol  SumSq  [FE]                AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSq  +=  dev  *  expected[i]  /  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSq  +=  dev  *  expected[i]  /  observed[i];	  SumSq    +=    dev    *    expected[i];    	non-compiled	[CE]  cannot  find  symbol  SumSq	120	None	replace
332	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev    /    expected[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	93	6	add
333	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev    /    expected[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	93	6	add
334	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev    /    expected[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	93	6	add
335	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev    /    expected[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	93	6	add
336	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev    /    expected[i];    }    else    {    return    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	93	6	add
337	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev    /    expected[i];    }    else    {    return    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	93	6	add
338	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }  if(dev  >>  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }  if(dev  >>  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev    /    expected[i];    }    else    {    return    dev;    }    if(dev  >>  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	93	None	add
339	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  expected[i];  sumSq  +=  dev  /  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    dev    /    expected[i];    sumSq  +=  dev  /  expected[i];	  	compilable	  [FE]  AssertionFailedError  	110	6	add
340	[BUG]  [BUGGY]  sumSq  +=  dev  /  expected[i];  sumSq  +=  dev  /  expected[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  expected[i];  sumSq  +=  dev  /  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    expected[i];    sumSq  +=  dev  /  expected[i];	  	compilable	  [FE]  AssertionFailedError  	110	6	add
341	[BUG]  [BUGGY]  sumSq  +=  dev  /  expected[i];  SumSq  +=  dev  /  expected[i];  [CE]  cannot  find  symbol  SumSq  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  expected[i];  SumSq  +=  dev  /  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    expected[i];    SumSq  +=  dev  /  expected[i];	  	non-compiled	[CE]  cannot  find  symbol  SumSq	110	None	add
342	[BUG]  [BUGGY]  sumSq  +=  dev  /  expected[i];  totalSq  +=  dev  /  expected[i];  [CE]  cannot  find  symbol  totalSq  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  expected[i];  totalSq  +=  dev  /  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    expected[i];    totalSq  +=  dev  /  expected[i];	  	non-compiled	[CE]  cannot  find  symbol  totalSq	110	None	add
343	[BUG]  [BUGGY]  sumSq  +=  dev  /  expected[i];  amountSq  +=  dev  /  expected[i];  [CE]  cannot  find  symbol  amountSq  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  expected[i];  amountSq  +=  dev  /  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    expected[i];    amountSq  +=  dev  /  expected[i];	  	non-compiled	[CE]  cannot  find  symbol  amountSq	110	None	add
344	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  expected[i];  sumSq  +=  dev  *  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    dev    /    expected[i];    sumSq  +=  dev  *  expected[i];	  	compilable	  [FE]  AssertionFailedError  	110	6	add
345	[BUG]  [BUGGY]  sumSq  +=  dev  /  expected[i];  sumSq  +=  dev  *  expected[i];  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  expected[i];  sumSq  +=  dev  *  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    expected[i];    sumSq  +=  dev  *  expected[i];	  	compilable	  [FE]  AssertionFailedError  	110	6	add
346	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  *  dev  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expected[i]  *  dev  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    expected[i]    *    dev    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expected[i]  *  dev  /  dev;	  	compilable	  [FE]  AssertionFailedError  	166	6	add
347	[BUG]  [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  *  dev  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expected[i]  *  dev  /  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  *  dev  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expected[i]  *  dev  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    expected[i]    *    dev    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expected[i]  *  dev  /  dev;	  	compilable	  [FE]  AssertionFailedError  	166	6	add
348	[BUG]  [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  *  dev  /  dev;  SumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expected[i]  *  dev  /  dev;  [CE]  cannot  find  symbol  SumSq  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  *  dev  /  dev;  SumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expected[i]  *  dev  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    expected[i]    *    dev    /    dev;    SumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expected[i]  *  dev  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  SumSq	166	None	add
349	[BUG]  [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  *  dev  /  dev;  totalSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expected[i]  *  dev  /  dev;  [CE]  cannot  find  symbol  totalSq  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  *  dev  /  dev;  totalSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expected[i]  *  dev  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    expected[i]    *    dev    /    dev;    totalSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expected[i]  *  dev  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  totalSq	166	None	add
350	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  *  dev  /  dev;  sumSq  +=  expected[i]  /  dev;  sumSq  +=  expected[i]  *  dev  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    expected[i]    *    dev    /    dev;    sumSq  +=  expected[i]  /  dev;  sumSq  +=  expected[i]  *  dev  /  dev;	  	compilable	  [FE]  AssertionFailedError  	166	6	add
351	[BUG]  [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  *  dev  /  dev;  sumSq  +=  expected[i]  /  dev;  sumSq  +=  expected[i]  *  dev  /  dev;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  *  dev  /  dev;  sumSq  +=  expected[i]  /  dev;  sumSq  +=  expected[i]  *  dev  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    expected[i]    *    dev    /    dev;    sumSq  +=  expected[i]  /  dev;  sumSq  +=  expected[i]  *  dev  /  dev;	  	compilable	  [FE]  AssertionFailedError  	166	6	add
352	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  *  dev  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    expected[i]    *    dev    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	166	6	add
353	[BUG]  [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  *  dev  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  *  dev  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    expected[i]    *    dev    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	166	6	add
354	[BUG]  [BUGGY]  sumSq  +=  observed  *  dev  /  dev;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed  *  dev  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed  *  dev  /  dev;	  sumSq    +=    expected    *    dev    /    observed[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	77	None	replace
355	[BUG]  [BUGGY]  SumSquare  sumSq  +=  dev  *  dev  /  expected[i];  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSquare  sumSq  +=  dev  *  dev  /  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSquare  sumSq  +=  dev  *  dev  /  expected[i];	  SumSquare    sumSq    +=    dev    *    expected[i];    	non-compiled	[CE]  ';'  expected	145	None	replace
356	[BUG]  [BUGGY]  SumSquare  sumSq  +=  dev  *  expected[i]  /  dev;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSquare  sumSq  +=  dev  *  expected[i]  /  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSquare  sumSq  +=  dev  *  expected[i]  /  dev;	  SumSquare    sumSq    +=    dev    *    expected[i];    	non-compiled	[CE]  ';'  expected	145	None	replace
357	[BUG]  [BUGGY]  SumSquare  sumSq  +=  dev  *  /  expected[i];  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSquare  sumSq  +=  dev  *  /  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSquare  sumSq  +=  dev  *  /  expected[i];	  SumSquare    sumSq    +=    dev    *    expected[i];    	non-compiled	[CE]  ';'  expected	145	None	replace
358	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq        +=        dev        *        observed[i]        /        dev;        sumSq    +=    dev    *    observed[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	6	6	add
359	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i]        /        dev;        sumSq    +=    dev    *    observed[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	6	6	add
360	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  SumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  [CE]  cannot  find  symbol  SumSq  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  SumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i]        /        dev;        sumSq    +=    dev    *    observed[i]    /    dev;    SumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  SumSq	6	None	add
361	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i]        /        dev;        sumSq    +=    dev    *    observed[i]    /    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	6	None	add
362	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  totalSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  [CE]  cannot  find  symbol  totalSq  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  totalSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i]        /        dev;        sumSq    +=    dev    *    observed[i]    /    dev;    totalSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  totalSq	6	None	add
363	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i]        /        dev;        sumSq    +=    dev    *    observed[i]    /    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	6	None	add
364	[BUG]  [BUGGY]  sumSq  +=  expected  *  observed[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected  *  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  expected  *  observed[i];	  sumSq    +=    expected    *    dev    *    observed[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	79	None	replace
365	[BUG]  [BUGGY]  ((  double)observed[i]  -  expected[i]);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  ((  double)observed[i]  -  expected[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	((  double)observed[i]  -  expected[i]);	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev    >=    expected[i])    {    sumSq    +=    dev    *    expected[i];    }    else    {    return    dev;    }    	non-compiled	[CE]  not  a  statement	132	None	replace
366	[BUG]  [BUGGY]  long  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  long  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	long  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }	  int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	65	None	replace
367	[BUG]  [BUGGY]  double  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  double  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	double  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }	  int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	65	None	replace
368	[BUG]  [BUGGY]  SumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  [CE]  cannot  find  symbol  SumSq  [FE]        AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];	  sumSq    +=    dev    /    dev    /    observed[i];    amountSq    +=    dev    /    dev    /    observed[i];    	non-compiled	[CE]  cannot  find  symbol  SumSq	159	None	replace
369	[BUG]  [BUGGY]  ((  ChiSquareDistribution)dev).doubleValue()  +  1;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  ((  ChiSquareDistribution)dev).doubleValue()  +  1;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	((  ChiSquareDistribution)dev).doubleValue()  +  1;	  ((    ChiSquareDistribution)dev).doubleValue();    	non-compiled	[CE]  not  a  statement	88	None	replace
370	[BUG]  [BUGGY]  ((  ChiSquareDistribution)dis).doubleValue();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  ((  ChiSquareDistribution)dis).doubleValue();  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	((  ChiSquareDistribution)dis).doubleValue();	  ((    ChiSquareDistribution)dev).doubleValue();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
371	[BUG]  [BUGGY]  sumSq  +=  observed  *  dev  *  dev[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed  *  dev  *  dev[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed  *  dev  *  dev[i];	  sumSq    +=    observed    *    total    /    dev[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	113	None	replace
372	[BUG]  [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  if(!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  if(!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	int  i  =  0;  i  <  expected.length;  i++)  {  if(!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!isNegative(dev))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	107	None	replace
373	[BUG]  [BUGGY]  int  i  =  observed[i];  sumSq  +=  dev  *  expected[i]  /  dev;  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  int  i  =  observed[i];  sumSq  +=  dev  *  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	int  i  =  observed[i];  sumSq  +=  dev  *  expected[i]  /  dev;	  sumSq    +=    dev    *    expected[i]    /    dev;    int    i    =    observed[i];    sumSq    +=    dev    *    expected[i]    /    dev;    	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	18	None	replace
374	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  dev  -  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  *  dev  -  expected[i];	  sumSq    +=    dev    -    expected[i];    	compilable	  [FE]  AssertionFailedError  	157	6	replace
375	[BUG]  [BUGGY]  sumSq  +=  dev  *  dev  -  expected[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  dev  -  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  dev  -  expected[i];	  sumSq    +=    dev    -    expected[i];    	compilable	  [FE]  AssertionFailedError  	157	6	replace
376	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected[i]  -  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  expected[i]  -  dev;	  sumSq    +=    dev    -    expected[i];    	compilable	  [FE]  AssertionFailedError  	157	6	replace
377	[BUG]  [BUGGY]  sumSq  +=  expected[i]  -  dev;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected[i]  -  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  expected[i]  -  dev;	  sumSq    +=    dev    -    expected[i];    	compilable	  [FE]  AssertionFailedError  	157	6	replace
378	[BUG]  [BUGGY]  ((  double)dev).doubleValue()  *  dev;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  ((  double)dev).doubleValue()  *  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	((  double)dev).doubleValue()  *  dev;	  ((    double)dev).doubleValue()    +    dev;    	non-compiled	[CE]  not  a  statement	172	None	replace
379	[BUG]  [BUGGY]  ((  double)dev).doubleValue()  +  sumSq;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  ((  double)dev).doubleValue()  +  sumSq;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	((  double)dev).doubleValue()  +  sumSq;	  ((    double)dev).doubleValue()    +    dev;    	non-compiled	[CE]  not  a  statement	172	None	replace
380	[BUG]  [BUGGY]  ((  ChiSquareDistribution)dev).set(sumSq);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  ((  ChiSquareDistribution)dev).set(sumSq);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	((  ChiSquareDistribution)dev).set(sumSq);	  ((    ChiSquareDistribution)dev).set();    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
381	[BUG]  [BUGGY]  ((  ChiSquareDistribution)dev).set(sumSq,  dev);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  ((  ChiSquareDistribution)dev).set(sumSq,  dev);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	((  ChiSquareDistribution)dev).set(sumSq,  dev);	  ((    ChiSquareDistribution)dev).set();    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
382	[BUG]  [BUGGY]  ((  double)dev).doubleValue()  /  sumSq;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  ((  double)dev).doubleValue()  /  sumSq;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	((  double)dev).doubleValue()  /  sumSq;	  ((    double)dev).doubleValue()    /    dev;    	non-compiled	[CE]  not  a  statement	98	None	replace
383	[BUG]  [BUGGY]  int  i  =  observed.length;  sumSq  +=  i  *  observed[i]  /  dev;  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  int  i  =  observed.length;  sumSq  +=  i  *  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	int  i  =  observed.length;  sumSq  +=  i  *  observed[i]  /  dev;	  sumSq    +=    dev    *    observed[i]    /    dev;    int    i    =    observed.length;    sumSq    +=    i    *    observed[i]    /    dev;    	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	10	None	replace
384	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  i  *  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  i  *  observed[i]  /  dev;	  sumSq    +=    dev    *    observed[i]    /    dev;    int    i    =    observed.length;    sumSq    +=    i    *    observed[i]    /    dev;    	compilable	  [FE]  AssertionFailedError  	10	6	replace
385	[BUG]  [BUGGY]  sumSq  +=  i  *  observed[i]  /  dev;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  i  *  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  i  *  observed[i]  /  dev;	  sumSq    +=    dev    *    observed[i]    /    dev;    int    i    =    observed.length;    sumSq    +=    i    *    observed[i]    /    dev;    	compilable	  [FE]  AssertionFailedError  	10	6	replace
386	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i]  /  2;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  /  observed[i]  /  2;	  sumSq    +=    dev    *    observed[i]    /    2;    	compilable	  [FE]  AssertionFailedError  	100	6	replace
387	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i]  /  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i]  /  2;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  /  observed[i]  /  2;	  sumSq    +=    dev    *    observed[i]    /    2;    	compilable	  [FE]  AssertionFailedError  	100	6	replace
388	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i]  /  4;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  *  observed[i]  /  4;	  sumSq    +=    dev    *    observed[i]    /    2;    	compilable	  [FE]  AssertionFailedError  	100	6	replace
389	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i]  /  4;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i]  /  4;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  observed[i]  /  4;	  sumSq    +=    dev    *    observed[i]    /    2;    	compilable	  [FE]  AssertionFailedError  	100	6	replace
390	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i]  /  3;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  *  observed[i]  /  3;	  sumSq    +=    dev    *    observed[i]    /    2;    	compilable	  [FE]  AssertionFailedError  	100	6	replace
391	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i]  /  3;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i]  /  3;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  observed[i]  /  3;	  sumSq    +=    dev    *    observed[i]    /    2;    	compilable	  [FE]  AssertionFailedError  	100	6	replace
392	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  expected[i]  /  dev;  sumSq  +=  dev  /  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    dev    /    expected[i]    /    dev;    sumSq  +=  dev  /  expected[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	129	6	add
393	[BUG]  [BUGGY]  sumSq  +=  dev  /  expected[i]  /  dev;  sumSq  +=  dev  /  expected[i]  /  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  expected[i]  /  dev;  sumSq  +=  dev  /  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    expected[i]    /    dev;    sumSq  +=  dev  /  expected[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	129	6	add
394	[BUG]  [BUGGY]  sumSq  +=  dev  /  expected[i]  /  dev;  SumSq  +=  dev  /  expected[i]  /  dev;  [CE]  cannot  find  symbol  SumSq  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  expected[i]  /  dev;  SumSq  +=  dev  /  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    expected[i]    /    dev;    SumSq  +=  dev  /  expected[i]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  SumSq	129	None	add
395	[BUG]  [BUGGY]  sumSq  +=  dev  /  expected[i]  /  dev;  int  i  =  observed.length;  sumSq  +=  dev  /  expected[i]  /  dev;  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  expected[i]  /  dev;  int  i  =  observed.length;  sumSq  +=  dev  /  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    expected[i]    /    dev;    int  i  =  observed.length;  sumSq  +=  dev  /  expected[i]  /  dev;	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	129	None	add
396	[BUG]  [BUGGY]  sumSq  +=  dev  /  expected[i]  /  dev;  double  sumSq  +=  dev  /  expected[i]  /  dev;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  expected[i]  /  dev;  double  sumSq  +=  dev  /  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    expected[i]    /    dev;    double  sumSq  +=  dev  /  expected[i]  /  dev;	  	non-compiled	[CE]  ';'  expected	129	None	add
397	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  expected[i]  /  dev;  sumSq  +=  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    dev    /    expected[i]    /    dev;    sumSq  +=  expected[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	129	6	add
398	[BUG]  [BUGGY]  sumSq  +=  dev  /  expected[i]  /  dev;  sumSq  +=  expected[i]  /  dev;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  expected[i]  /  dev;  sumSq  +=  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    expected[i]    /    dev;    sumSq  +=  expected[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	129	6	add
399	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i];        }        if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <	  	non-compiled	[CE]  ')'  expected	44	None	add
400	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        <        expected[i])        {        sumSq        +=        observed[i];        }        if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }	  	compilable	  [FE]  AssertionFailedError  	44	6	add
401	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i];        }        if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }	  	compilable	  [FE]  AssertionFailedError  	44	6	add
402	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i];        }        if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(	  	non-compiled	[CE]  ')'  expected	44	None	add
403	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i];        }        if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
404	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[  [CE]  ']'  expected  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i];        }        if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[	  	non-compiled	[CE]  ']'  expected	44	None	add
405	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i];  sumSq  +=  dev  *  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    dev    *    observed[i];    sumSq  +=  dev  *  observed[i];	  	compilable	  [FE]  AssertionFailedError  	117	6	add
406	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i];  sumSq  +=  dev  *  observed[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i];  sumSq  +=  dev  *  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i];    sumSq  +=  dev  *  observed[i];	  	compilable	  [FE]  AssertionFailedError  	117	6	add
407	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i];  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  observed[i];  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i];  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i];    for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  observed[i];  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	117	None	add
408	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i];  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  observed[i];  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i];  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i];    for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  observed[i];	  	non-compiled	[CE]  illegal  start  of  expression	117	None	add
409	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i];  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  desv  *  observed[i];  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i];  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  desv  *  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i];    for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  desv  *  observed[i];  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	117	None	add
410	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i];  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  expected[i];  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i];  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  expected[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i];    for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  expected[i];  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	117	None	add
411	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i]  /  dev;  SumSq  +=  dev  *  expected[i]  /  dev;  [CE]  cannot  find  symbol  SumSq  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i]  /  dev;  SumSq  +=  dev  *  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  observed[i]  /  dev;  SumSq  +=  dev  *  expected[i]  /  dev;	  sumSq    +=    dev    *    expected[i]    /    dev;    SumSq    +=    dev    *    expected[i]    /    dev;    	non-compiled	[CE]  cannot  find  symbol  SumSq	14	None	replace
412	[BUG]  [BUGGY]  sumSq  +=  expected[i]  *  dev;  SumSq  +=  dev  *  expected[i]  /  dev;  [CE]  cannot  find  symbol  SumSq  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected[i]  *  dev;  SumSq  +=  dev  *  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  expected[i]  *  dev;  SumSq  +=  dev  *  expected[i]  /  dev;	  sumSq    +=    dev    *    expected[i]    /    dev;    SumSq    +=    dev    *    expected[i]    /    dev;    	non-compiled	[CE]  cannot  find  symbol  SumSq	14	None	replace
413	[BUG]  [BUGGY]  sumSq  +=  distribution  *  observed[i]  /  dev;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  distribution  *  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  distribution  *  observed[i]  /  dev;	  sumSq    +=    dev    *    observed[i]    /    distribution;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	162	None	replace
414	[BUG]  [BUGGY]  sumSq  +=  observed[i]  *  dev  /  distribution;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  dev  /  distribution;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed[i]  *  dev  /  distribution;	  sumSq    +=    dev    *    observed[i]    /    distribution;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	162	None	replace
415	[BUG]  [BUGGY]  sumSq  +=  observed[i]  *  sumSq  /  distribution;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  sumSq  /  distribution;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed[i]  *  sumSq  /  distribution;	  sumSq    +=    dev    *    observed[i]    /    distribution;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	162	None	replace
416	[BUG]  [BUGGY]  SumSquare  sumSq  =  sumSq  +  observed[i]  *  dev;  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSquare  sumSq  =  sumSq  +  observed[i]  *  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSquare  sumSq  =  sumSq  +  observed[i]  *  dev;	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev;    }    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
417	[BUG]  [BUGGY]  int  i  =  observed.length;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  int  i  =  observed.length;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	int  i  =  observed.length;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    int    i    =    observed.length;    sumSq    +=    dev    *    observed[i    -    1]    /    dev;    	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	27	None	replace
418	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  expected;	  sumSq    +=    expected    *    dev    *    dev;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	76	None	replace
419	[BUG]  [BUGGY]  sumSq  +=  expected  *  dev  /  dev;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected  *  dev  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  expected  *  dev  /  dev;	  sumSq    +=    expected    *    dev    *    dev;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	76	None	replace
420	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected  *  dev;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected  *  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  expected  *  dev;	  sumSq    +=    expected    *    dev    *    dev;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	76	None	replace
421	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  dev;  sumSq  +=  i  *  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  observed[i]  *  dev;  sumSq  +=  i  *  observed[i]  /  dev;	  sumSq    +=    dev    *    observed[i]    /    dev;    sumSq    +=    x    *    observed[i]    /    dev;    	compilable	  [FE]  AssertionFailedError  	191	6	replace
422	[BUG]  [BUGGY]  sumSq  +=  observed[i]  *  dev;  sumSq  +=  i  *  observed[i]  /  dev;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  dev;  sumSq  +=  i  *  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed[i]  *  dev;  sumSq  +=  i  *  observed[i]  /  dev;	  sumSq    +=    dev    *    observed[i]    /    dev;    sumSq    +=    x    *    observed[i]    /    dev;    	compilable	  [FE]  AssertionFailedError  	191	6	replace
423	[BUG]  [BUGGY]  long  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( "Dev  is  less  than  1: ");  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  long  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( "Dev  is  less  than  1: ");  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	long  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( "Dev  is  less  than  1: ");  }	  int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(dev))    {    throw    new    IllegalArgumentException(   "Dev    is    less    than    1:   ");    }    	non-compiled	[CE]  >  expected	86	None	replace
424	[BUG]  [BUGGY]  double  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( "Dev  is  less  than  1: ");  }  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  double  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( "Dev  is  less  than  1: ");  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	double  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( "Dev  is  less  than  1: ");  }	  int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(dev))    {    throw    new    IllegalArgumentException(   "Dev    is    less    than    1:   ");    }    	non-compiled	[CE]  >  expected	86	None	replace
425	[BUG]  [BUGGY]  Integer  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( "Dev  is  less  than  1: ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  Integer  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( "Dev  is  less  than  1: ");  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	Integer  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( "Dev  is  less  than  1: ");  }	  int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(dev))    {    throw    new    IllegalArgumentException(   "Dev    is    less    than    1:   ");    }    	non-compiled	[CE]  >  expected	86	None	replace
426	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  /=  observed[i]  *  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  /=  observed[i]  *  dev;	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev    ==    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    	compilable	  [FE]  AssertionFailedError  	37	6	replace
427	[BUG]  [BUGGY]  sumSq  /=  observed[i]  *  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  /=  observed[i]  *  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  /=  observed[i]  *  dev;	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev    ==    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    	compilable	  [FE]  AssertionFailedError  	37	6	replace
428	[BUG]  [BUGGY]  sumSq  +=  DEV  *  observed[i]  /  dev;  [CE]  cannot  find  symbol  DEV  [FE]        AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  DEV  *  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  DEV  *  observed[i]  /  dev;	  sumSq    +=    dev    *    observed[i]    /    dev;    sumSq    +=    DEV    *    observed[i]    /    dev;    	non-compiled	[CE]  cannot  find  symbol  DEV	190	None	replace
429	[BUG]  [BUGGY]  sumSq  +=  expected  *  observed[i]  /  dev;  sumSq  +=  DEV  *  observed[i]  /  dev;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected  *  observed[i]  /  dev;  sumSq  +=  DEV  *  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  expected  *  observed[i]  /  dev;  sumSq  +=  DEV  *  observed[i]  /  dev;	  sumSq    +=    dev    *    observed[i]    /    dev;    sumSq    +=    DEV    *    observed[i]    /    dev;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	190	None	replace
430	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  dev  *  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  *  dev  *  observed[i];	  sumSq    +=    dev    /    dev    *    observed[i];    	compilable	  [FE]  AssertionFailedError  	154	6	replace
431	[BUG]  [BUGGY]  sumSq  +=  dev  *  dev  *  observed[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  dev  *  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  dev  *  observed[i];	  sumSq    +=    dev    /    dev    *    observed[i];    	compilable	  [FE]  AssertionFailedError  	154	6	replace
432	[BUG]  [BUGGY]  sumSq  +=  observed[i  /  dev  *  dev;  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i  /  dev  *  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed[i  /  dev  *  dev;	  sumSq    +=    dev    /    dev    *    observed[i];    	non-compiled	[CE]  ']'  expected	154	None	replace
433	[BUG]  [BUGGY]  totalSq  +=  dev  /  dev  /  observed[i];  [CE]  cannot  find  symbol  totalSq  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  totalSq  +=  dev  /  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	totalSq  +=  dev  /  dev  /  observed[i];	  sumSq    +=    dev    /    dev    /    observed[i];    totalSq    +=    dev    /    dev    /    observed[i];    	non-compiled	[CE]  cannot  find  symbol  totalSq	42	None	replace
434	[BUG]  [BUGGY]  if(dev  <  expected[i])  {  sumSq  +=  DEv  *  observed[i];  }  [CE]  cannot  find  symbol  DEv  [FE]        AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(dev  <  expected[i])  {  sumSq  +=  DEv  *  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	if(dev  <  expected[i])  {  sumSq  +=  DEv  *  observed[i];  }	          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev    <    expected[i])    {    sumSq    +=    DEv    *    observed[i];    }    	non-compiled	[CE]  cannot  find  symbol  DEv	185	None	replace
435	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)&&!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)&&!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)&&!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }	          for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)&&!isNegative(dev))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
436	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected)&&!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }	          for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)&&!isNegative(dev))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	142	None	replace
437	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  /  dev  /  dev;  sumSq  +=  observed[i]  /  dev  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    observed[i]    /    dev    /    dev;    sumSq  +=  observed[i]  /  dev  /  dev;	  	compilable	  [FE]  AssertionFailedError  	62	6	add
438	[BUG]  [BUGGY]  sumSq  +=  observed[i]  /  dev  /  dev;  sumSq  +=  observed[i]  /  dev  /  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  /  dev  /  dev;  sumSq  +=  observed[i]  /  dev  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i]    /    dev    /    dev;    sumSq  +=  observed[i]  /  dev  /  dev;	  	compilable	  [FE]  AssertionFailedError  	62	6	add
439	[BUG]  [BUGGY]  sumSq  +=  observed[i]  /  dev  /  dev;  SumSq  +=  observed[i]  /  dev  /  dev;  [CE]  cannot  find  symbol  SumSq  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  /  dev  /  dev;  SumSq  +=  observed[i]  /  dev  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i]    /    dev    /    dev;    SumSq  +=  observed[i]  /  dev  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  SumSq	62	None	add
440	[BUG]  [BUGGY]  sumSq  +=  observed[i]  /  dev  /  dev;  int  i  =  observed.length;  sumSq  +=  observed[i]  /  dev  /  dev;  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  /  dev  /  dev;  int  i  =  observed.length;  sumSq  +=  observed[i]  /  dev  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i]    /    dev    /    dev;    int  i  =  observed.length;  sumSq  +=  observed[i]  /  dev  /  dev;	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	62	None	add
441	[BUG]  [BUGGY]  sumSq  +=  observed[i]  /  dev  /  dev;  sumSq  +=  observed[i]  /  dev  /  dev);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  /  dev  /  dev;  sumSq  +=  observed[i]  /  dev  /  dev);  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i]    /    dev    /    dev;    sumSq  +=  observed[i]  /  dev  /  dev);	  	non-compiled	[CE]  ';'  expected	62	None	add
442	[BUG]  [BUGGY]  sumSq  +=  observed[i]  /  dev  /  dev;  sumSq  +=  observed[i]  /  dev  /  desv;  [CE]  cannot  find  symbol  desv  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  /  dev  /  dev;  sumSq  +=  observed[i]  /  dev  /  desv;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i]    /    dev    /    dev;    sumSq  +=  observed[i]  /  dev  /  desv;	  	non-compiled	[CE]  cannot  find  symbol  desv	62	None	add
443	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  else  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  else  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }	          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev    <    expected[i])    {    sumSq    +=    recorded[i];    }    	compilable	  [FE]  AssertionFailedError  	176	6	replace
444	[BUG]  [BUGGY]  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  else  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  else  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  else  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }	          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev    <    expected[i])    {    sumSq    +=    recorded[i];    }    	compilable	  [FE]  AssertionFailedError  	176	6	replace
445	[BUG]  [BUGGY]  long[]  expected  =  observed[i].doubleValue()  +  sumSq;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  long[]  expected  =  observed[i].doubleValue()  +  sumSq;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	long[]  expected  =  observed[i].doubleValue()  +  sumSq;	  long[]    expected    =    observed[i].doubleValue();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	114	None	replace
446	[BUG]  [BUGGY]  long[]  expected  =  observed[i].doubleValue()  /  dev;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  long[]  expected  =  observed[i].doubleValue()  /  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	long[]  expected  =  observed[i].doubleValue()  /  dev;	  long[]    expected    =    observed[i].doubleValue();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	114	None	replace
447	[BUG]  [BUGGY]  int  i  =  observed.length;  sumSq  +=  dev  *  observed[i]  /  dev;  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  int  i  =  observed.length;  sumSq  +=  dev  *  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	int  i  =  observed.length;  sumSq  +=  dev  *  observed[i]  /  dev;	  sumSq    +=    dev    *    observed[i]    /    dev;    int    i    =    observed.length;    sumSq    +=    dev    *    observed[i]    /    dev;    	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	9	None	replace
448	[BUG]  [BUGGY]  ((  ChiSquareDistribution)dev).sumSq  +=  dev  *  distribution.length;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  ((  ChiSquareDistribution)dev).sumSq  +=  dev  *  distribution.length;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	((  ChiSquareDistribution)dev).sumSq  +=  dev  *  distribution.length;	  ((    ChiSquareDistribution)dev).sumSq    +=    dev    /    distribution.length;    	non-compiled	[CE]  cannot  find  symbol	171	None	replace
449	[BUG]  [BUGGY]  ((  ChiSquareDistribution)dev).sumSq  +=  sumSq  /  distribution.length;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  ((  ChiSquareDistribution)dev).sumSq  +=  sumSq  /  distribution.length;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	((  ChiSquareDistribution)dev).sumSq  +=  sumSq  /  distribution.length;	  ((    ChiSquareDistribution)dev).sumSq    +=    dev    /    distribution.length;    	non-compiled	[CE]  cannot  find  symbol	171	None	replace
450	[BUG]  [BUGGY]  ((  ChiSquareDistribution)dev).sumSq  +=  dev  /  observed.length;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  ((  ChiSquareDistribution)dev).sumSq  +=  dev  /  observed.length;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	((  ChiSquareDistribution)dev).sumSq  +=  dev  /  observed.length;	  ((    ChiSquareDistribution)dev).sumSq    +=    dev    /    distribution.length;    	non-compiled	[CE]  cannot  find  symbol	171	None	replace
451	[BUG]  [BUGGY]  SumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  [CE]  cannot  find  symbol  SumSq  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;	  sumSq    +=    dev    *    observed[i]    /    dev;    sumSq    +=    dev    *    observed[i]    /    dev;    	non-compiled	[CE]  cannot  find  symbol  SumSq	7	None	replace
452	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  1  *  observed[i]  /  2;  sumSq  +=  1  *  observed[i]  /  2;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  1  *  observed[i]  /  2;  sumSq  +=  1  *  observed[i]  /  2;	  sumSq    +=    dev    *    observed[i]    /    dev;    sumSq    +=    dev    *    observed[i]    /    dev;    	compilable	  [FE]  AssertionFailedError  	7	6	replace
453	[BUG]  [BUGGY]  sumSq  +=  1  *  observed[i]  /  2;  sumSq  +=  1  *  observed[i]  /  2;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  1  *  observed[i]  /  2;  sumSq  +=  1  *  observed[i]  /  2;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  1  *  observed[i]  /  2;  sumSq  +=  1  *  observed[i]  /  2;	  sumSq    +=    dev    *    observed[i]    /    dev;    sumSq    +=    dev    *    observed[i]    /    dev;    	compilable	  [FE]  AssertionFailedError  	7	6	replace
454	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected[i]  *  dev;  sumSq  +=  expected[i]  *  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    expected[i]    *    dev;    sumSq  +=  expected[i]  *  dev;	  	compilable	  [FE]  AssertionFailedError  	72	6	add
455	[BUG]  [BUGGY]  sumSq  +=  expected[i]  *  dev;  sumSq  +=  expected[i]  *  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected[i]  *  dev;  sumSq  +=  expected[i]  *  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    expected[i]    *    dev;    sumSq  +=  expected[i]  *  dev;	  	compilable	  [FE]  AssertionFailedError  	72	6	add
456	[BUG]  [BUGGY]  sumSq  +=  expected[i]  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  *  dev;  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected[i]  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    expected[i]    *    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  *  dev;  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	72	None	add
457	[BUG]  [BUGGY]  sumSq  +=  expected[i]  *  dev;  int  i  =  observed.length;  sumSq  +=  expected[i]  *  dev;  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected[i]  *  dev;  int  i  =  observed.length;  sumSq  +=  expected[i]  *  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    expected[i]    *    dev;    int  i  =  observed.length;  sumSq  +=  expected[i]  *  dev;	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	72	None	add
458	[BUG]  [BUGGY]  sumSq  +=  expected[i]  *  dev;  SumSq  +=  expected[i]  *  dev;  [CE]  cannot  find  symbol  SumSq  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected[i]  *  dev;  SumSq  +=  expected[i]  *  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    expected[i]    *    dev;    SumSq  +=  expected[i]  *  dev;	  	non-compiled	[CE]  cannot  find  symbol  SumSq	72	None	add
459	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed  *  observed[i  -  1]  /  dev;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  observed  *  observed[i  -  1]  /  dev;	  sumSq    +=    observed    *    dev    *    observed[i    -    1]    /    dev;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	19	None	replace
460	[BUG]  [BUGGY]  sumSq  +=  observed  *  i  *  dev  *  observed[i  -  1]  /  dev;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed  *  i  *  dev  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed  *  i  *  dev  *  observed[i  -  1]  /  dev;	  sumSq    +=    observed    *    dev    *    observed[i    -    1]    /    dev;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	19	None	replace
461	[BUG]  [BUGGY]  sumSq  +=  observed  *  total  *  observed[i  -  1]  /  dev;  [CE]  cannot  find  symbol  total  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed  *  total  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed  *  total  *  observed[i  -  1]  /  dev;	  sumSq    +=    observed    *    dev    *    observed[i    -    1]    /    dev;    	non-compiled	[CE]  cannot  find  symbol  total	19	None	replace
462	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq        +=        dev        *        observed[i        -        1]        /        dev;        sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	6	add
463	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i        -        1]        /        dev;        sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	6	add
464	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  dev  *  observed[i  -  1]  /  dev;  SumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  [CE]  cannot  find  symbol  SumSq  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  dev  *  observed[i  -  1]  /  dev;  SumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i        -        1]        /        dev;        sumSq    +=    dev    *    observed[i    -    1]    /    dev;    SumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  SumSq	24	None	add
465	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq        +=        dev        *        observed[i        -        1]        /        dev;        sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  dev  *  observed[i  -  1]  /  dev;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	6	add
466	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i        -        1]        /        dev;        sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  dev  *  observed[i  -  1]  /  dev;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	6	add
467	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  desv  *  observed[i  -  1]  /  dev;  [CE]  cannot  find  symbol  desv  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  desv  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i        -        1]        /        dev;        sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  desv  *  observed[i  -  1]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  desv	24	None	add
468	[BUG]  [BUGGY]  sumSq  +=  observed  *  observed[i  -  1]  /  dev;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed  *  observed[i  -  1]  /  dev;	  sumSq    +=    expected    *    observed[i    -    1]    /    dev;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	20	None	replace
469	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  expected;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  expected;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  observed[i  -  1]  /  expected;	  sumSq    +=    expected    *    observed[i    -    1]    /    dev;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	20	None	replace
470	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev;    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	134	6	add
471	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev;    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	134	6	add
472	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev;    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	134	6	add
473	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev;    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	134	6	add
474	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev;    }    else    {    return    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	134	6	add
475	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev;    }    else    {    return    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	134	6	add
476	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev;    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	134	6	add
477	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev;    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	134	6	add
478	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev;    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	134	6	add
479	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev;    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	134	6	add
480	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i]  /  expected;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i]  /  expected;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  observed[i]  /  expected;	  sumSq    +=    expected    *    observed[i]    /    dev;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	101	None	replace
481	[BUG]  [BUGGY]  sumSq  +=  observed  *  dev  *  observed[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed  *  dev  *  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed  *  dev  *  observed[i];	  sumSq    +=    expected    *    observed[i]    /    dev;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	101	None	replace
482	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	89	6	add
483	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	89	6	add
484	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	89	6	add
485	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	89	6	add
486	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  >>  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  >>  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >>  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	89	None	add
487	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  ==  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	89	6	add
488	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  ==  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	89	6	add
489	[BUG]  [BUGGY]  if(observed[i]  <  =  0)  {  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(observed[i]  <  =  0)  {  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	if(observed[i]  <  =  0)  {  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
490	[BUG]  [BUGGY]  if(observed[i]  <  =  0)  {  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(observed[i]  <  =  0)  {  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	if(observed[i]  <  =  0)  {  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
491	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev!=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	91	6	add
492	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev!=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	91	6	add
493	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev!=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	91	6	add
494	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev!=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	91	6	add
495	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  >>  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  >>  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev!=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >>  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	91	None	add
496	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev!=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  ==  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	91	6	add
497	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev!=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  ==  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	91	6	add
498	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i]  *  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  /  observed[i]  *  dev;	  sumSq    +=    dev    /    observed[i]    /    dev;    	compilable	  [FE]  AssertionFailedError  	164	6	replace
499	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i]  *  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i]  *  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  /  observed[i]  *  dev;	  sumSq    +=    dev    /    observed[i]    /    dev;    	compilable	  [FE]  AssertionFailedError  	164	6	replace
500	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq    +=    ((    double)dev    *    observed[i    -    1]    /    dev);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	6	replace
501	[BUG]  [BUGGY]  sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq    +=    ((    double)dev    *    observed[i    -    1]    /    dev);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	6	replace
502	[BUG]  [BUGGY]  sumSq  +=((  double)dev  *  observed[i  -  1])/  dev);  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=((  double)dev  *  observed[i  -  1])/  dev);  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=((  double)dev  *  observed[i  -  1])/  dev);	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq    +=    ((    double)dev    *    observed[i    -    1]    /    dev);    	non-compiled	[CE]  ';'  expected	30	None	replace
503	[BUG]  [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!isPositive(dev))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	22	None	replace
504	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  For(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	For(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!isPositive(dev))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	22	None	replace
505	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  observed[i]  *  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }	  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq    >    0)    {    sumSq    +=    dev    *    observed[i]    /    dev;    }    	compilable	  [FE]  AssertionFailedError  	150	6	replace
506	[BUG]  [BUGGY]  sumSq  +=  observed[i]  *  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed[i]  *  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }	  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq    >    0)    {    sumSq    +=    dev    *    observed[i]    /    dev;    }    	compilable	  [FE]  AssertionFailedError  	150	6	replace
507	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  dev;  if(sumSq  <  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  observed[i]  *  dev;  if(sumSq  <  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }	  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq    >    0)    {    sumSq    +=    dev    *    observed[i]    /    dev;    }    	compilable	  [FE]  AssertionFailedError  	150	6	replace
508	[BUG]  [BUGGY]  sumSq  +=  observed[i]  *  dev;  if(sumSq  <  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  dev;  if(sumSq  <  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed[i]  *  dev;  if(sumSq  <  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }	  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq    >    0)    {    sumSq    +=    dev    *    observed[i]    /    dev;    }    	compilable	  [FE]  AssertionFailedError  	150	6	replace
509	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  For(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	For(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }	  For(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isNegative(dev))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	109	None	replace
510	[BUG]  [BUGGY]  SumSq  +=  dev  *  observed[i  -  1]  /  dev;  [CE]  cannot  find  symbol  SumSq  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSq  +=  dev  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSq  +=  dev  *  observed[i  -  1]  /  dev;	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    SumSq    +=    dev    *    observed[i    -    1]    /    dev;    	non-compiled	[CE]  cannot  find  symbol  SumSq	26	None	replace
511	[BUG]  [BUGGY]  sumSq  +=  expected  *  observed[i  -  1]  /  dev;  SumSq  +=  dev  *  observed[i  -  1]  /  dev;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected  *  observed[i  -  1]  /  dev;  SumSq  +=  dev  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  expected  *  observed[i  -  1]  /  dev;  SumSq  +=  dev  *  observed[i  -  1]  /  dev;	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    SumSq    +=    dev    *    observed[i    -    1]    /    dev;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	26	None	replace
512	[BUG]  [BUGGY]  long[]  expected  =  observed[i].longValue()  *  sumSq;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  long[]  expected  =  observed[i].longValue()  *  sumSq;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	long[]  expected  =  observed[i].longValue()  *  sumSq;	  long[]    expected    =    observed[i].longValue()    +    sumSq;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	121	None	replace
513	[BUG]  [BUGGY]  long[]  expected  =  observed[i].longValue()  /  sumSq;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  long[]  expected  =  observed[i].longValue()  /  sumSq;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	long[]  expected  =  observed[i].longValue()  /  sumSq;	  long[]    expected    =    observed[i].longValue()    +    sumSq;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	121	None	replace
514	[BUG]  [BUGGY]  long[]  expected  =  observed[i].longValue()  +  dev;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  long[]  expected  =  observed[i].longValue()  +  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	long[]  expected  =  observed[i].longValue()  +  dev;	  long[]    expected    =    observed[i].longValue()    +    sumSq;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	121	None	replace
515	[BUG]  [BUGGY]  SumSquare  sumSq  +=  observed[i]  *  dev  /  dev;  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSquare  sumSq  +=  observed[i]  *  dev  /  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSquare  sumSq  +=  observed[i]  *  dev  /  dev;	  SumSquare    sumSq    +=    observed[i]    *    dev;    	non-compiled	[CE]  ';'  expected	140	None	replace
516	[BUG]  [BUGGY]  SumSquare  sumSq  +=  observed[i]  /  dev;  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSquare  sumSq  +=  observed[i]  /  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSquare  sumSq  +=  observed[i]  /  dev;	  SumSquare    sumSq    +=    observed[i]    *    dev;    	non-compiled	[CE]  ';'  expected	140	None	replace
517	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        dev        *        observed[i];        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=	  	non-compiled	[CE]  ')'  expected	105	None	add
518	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        <        expected[i])        {        sumSq        +=        dev        *        observed[i];        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }	  	compilable	  [FE]  AssertionFailedError  	105	6	add
519	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        dev        *        observed[i];        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }	  	compilable	  [FE]  AssertionFailedError  	105	6	add
520	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        dev        *        observed[i];        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=	  	non-compiled	[CE]  illegal  start  of  expression	105	None	add
521	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        dev        *        observed[i];        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *	  	non-compiled	[CE]  illegal  start  of  expression	105	None	add
522	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >>  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >>  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        dev        *        observed[i];        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >>	  	non-compiled	[CE]  ')'  expected	105	None	add
523	[BUG]  [BUGGY]  if(observed[i]  <  =  0)  {  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(observed[i]  <  =  0)  {  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	if(observed[i]  <  =  0)  {  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev;    }    else    {    return    dev;    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
524	[BUG]  [BUGGY]  SumSquare  observed[i]  =  sumSq  +  observed[i].doubleValue();  [CE]  ']'  expected  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSquare  observed[i]  =  sumSq  +  observed[i].doubleValue();  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSquare  observed[i]  =  sumSq  +  observed[i].doubleValue();	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev    >>    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    	non-compiled	[CE]  ']'  expected	133	None	replace
525	[BUG]  [BUGGY]  SumSquare  observed[i]  =  sumSq  /  observed[i].doubleValue();  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSquare  observed[i]  =  sumSq  /  observed[i].doubleValue();  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSquare  observed[i]  =  sumSq  /  observed[i].doubleValue();	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev    >>    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    	non-compiled	[CE]  ']'  expected	133	None	replace
526	[BUG]  [BUGGY]  SumSquare  observed[i]  =  sumSq  +  observed[i];  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSquare  observed[i]  =  sumSq  +  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSquare  observed[i]  =  sumSq  +  observed[i];	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev    >>    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    	non-compiled	[CE]  ']'  expected	133	None	replace
527	[BUG]  [BUGGY]  if(dev  <  =  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(dev  <  =  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	if(dev  <  =  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  sumSq    +=    dev    *    observed[i]    /    dev;    double    sumSq    +=    dev    *    observed[i]    /    dev;    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
528	[BUG]  [BUGGY]  if(dev  <  =  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(dev  <  =  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	if(dev  <  =  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  }	  sumSq    +=    dev    *    observed[i]    /    dev;    double    sumSq    +=    dev    *    observed[i]    /    dev;    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
529	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  /  dev;  sumSq  +=  observed[i]  /  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    observed[i]    /    dev;    sumSq  +=  observed[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	183	6	add
530	[BUG]  [BUGGY]  sumSq  +=  observed[i]  /  dev;  sumSq  +=  observed[i]  /  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  /  dev;  sumSq  +=  observed[i]  /  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i]    /    dev;    sumSq  +=  observed[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	183	6	add
531	[BUG]  [BUGGY]  sumSq  +=  observed[i]  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  dev;  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i]    /    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  dev;  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	183	None	add
532	[BUG]  [BUGGY]  sumSq  +=  observed[i]  /  dev;  SumSq  +=  observed[i]  /  dev;  [CE]  cannot  find  symbol  SumSq  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  /  dev;  SumSq  +=  observed[i]  /  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i]    /    dev;    SumSq  +=  observed[i]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  SumSq	183	None	add
533	[BUG]  [BUGGY]  sumSq  +=  observed[i]  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  /  dev);  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  /  dev);  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i]    /    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  /  dev);  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	183	None	add
534	[BUG]  [BUGGY]  sumSq  +=  observed[i]  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  dev  /  dev;  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  dev  /  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i]    /    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  dev  /  dev;  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	183	None	add
535	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected[i]  *  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  expected[i]  *  dev;  sumSq  +=  dev  *  observed[i]  /  dev;	  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq    +=    dev    *    observed[i]    /    dev;    	compilable	  [FE]  AssertionFailedError  	181	6	replace
536	[BUG]  [BUGGY]  sumSq  +=  expected[i]  *  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected[i]  *  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  expected[i]  *  dev;  sumSq  +=  dev  *  observed[i]  /  dev;	  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq    +=    dev    *    observed[i]    /    dev;    	compilable	  [FE]  AssertionFailedError  	181	6	replace
537	[BUG]  [BUGGY]  sumSq  +=  expected  *  sumSq  /  observed[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected  *  sumSq  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  expected  *  sumSq  /  observed[i];	  sumSq    +=    dev    *    expected    /    observed[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	193	None	replace
538	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    dev    *    expected[i    -    1]    /    dev;    sumSq  +=  dev  *  expected[i  -  1]  /  dev;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	136	6	add
539	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    expected[i    -    1]    /    dev;    sumSq  +=  dev  *  expected[i  -  1]  /  dev;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	136	6	add
540	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  double  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  double  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    expected[i    -    1]    /    dev;    double  sumSq  +=  dev  *  expected[i  -  1]  /  dev;	  	non-compiled	[CE]  ';'  expected	136	None	add
541	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  ArrayIndexOutOfBoundsException.printStackTrace(sumSq);  [CE]  no  suitable  method  found  for  printStackTrace(double)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  ArrayIndexOutOfBoundsException.printStackTrace(sumSq);  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    expected[i    -    1]    /    dev;    ArrayIndexOutOfBoundsException.printStackTrace(sumSq);	  	non-compiled	[CE]  no  suitable  method  found  for  printStackTrace(double)	136	None	add
542	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Unexpected  array  lengths  incorrect ");  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    dev    *    expected[i    -    1]    /    dev;    ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Unexpected  array  lengths  incorrect ");	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	136	6	add
543	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Unexpected  array  lengths  incorrect ");  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Unexpected  array  lengths  incorrect ");  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    expected[i    -    1]    /    dev;    ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Unexpected  array  lengths  incorrect ");	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	136	6	add
544	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "expected  array  lengths  incorrect ");  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    dev    *    expected[i    -    1]    /    dev;    ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "expected  array  lengths  incorrect ");	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	136	6	add
545	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "expected  array  lengths  incorrect ");  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "expected  array  lengths  incorrect ");  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    expected[i    -    1]    /    dev;    ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "expected  array  lengths  incorrect ");	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	136	6	add
546	[BUG]  [BUGGY]  long[]  expected  =  observed[i].longValue()  *  dev;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  long[]  expected  =  observed[i].longValue()  *  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	long[]  expected  =  observed[i].longValue()  *  dev;	  long[]    expected    =    observed[i].longValue()    /    dev;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	187	None	replace
547	[BUG]  [BUGGY]  long[]  expected  =  observed[i].doubleValue()  *  dev;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  long[]  expected  =  observed[i].doubleValue()  *  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	long[]  expected  =  observed[i].doubleValue()  *  dev;	  long[]    expected    =    observed[i].longValue()    /    dev;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	187	None	replace
548	[BUG]  [BUGGY]  long[]  expected  =  observed[i].doubleValue()  /  sumSq;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  long[]  expected  =  observed[i].doubleValue()  /  sumSq;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	long[]  expected  =  observed[i].doubleValue()  /  sumSq;	  long[]    expected    =    observed[i].longValue()    /    dev;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	187	None	replace
549	[BUG]  [BUGGY]  SumSq  +=  observed[i]  *  dev  /  dev;  [CE]  cannot  find  symbol  SumSq  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSq  +=  observed[i]  *  dev  /  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSq  +=  observed[i]  *  dev  /  dev;	  SumSq    +=    observed[i]    *    dev;    	non-compiled	[CE]  cannot  find  symbol  SumSq	71	None	replace
550	[BUG]  [BUGGY]  SumSq  +=  observed[i]  *  sumSq;  [CE]  cannot  find  symbol  SumSq  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSq  +=  observed[i]  *  sumSq;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSq  +=  observed[i]  *  sumSq;	  SumSq    +=    observed[i]    *    dev;    	non-compiled	[CE]  cannot  find  symbol  SumSq	71	None	replace
551	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq        +=        dev        /        dev        /        observed[i];        sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];	  	compilable	  [FE]  AssertionFailedError  	38	6	add
552	[BUG]  [BUGGY]  sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        /        dev        /        observed[i];        sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];	  	compilable	  [FE]  AssertionFailedError  	38	6	add
553	[BUG]  [BUGGY]  sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  /  dev  /  observed[i];  SumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  [CE]  cannot  find  symbol  SumSq  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  /  dev  /  observed[i];  SumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        /        dev        /        observed[i];        sumSq    +=    dev    /    dev    /    observed[i];    SumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];	  	non-compiled	[CE]  cannot  find  symbol  SumSq	38	None	add
554	[BUG]  [BUGGY]  sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  /  dev  /  observed[i];  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  /  dev  /  observed[i];  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        /        dev        /        observed[i];        sumSq    +=    dev    /    dev    /    observed[i];    for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	38	None	add
555	[BUG]  [BUGGY]  sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  /  dev  /  observed[i];  totalSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  [CE]  cannot  find  symbol  totalSq  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  /  dev  /  observed[i];  totalSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        /        dev        /        observed[i];        sumSq    +=    dev    /    dev    /    observed[i];    totalSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];	  	non-compiled	[CE]  cannot  find  symbol  totalSq	38	None	add
556	[BUG]  [BUGGY]  sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  /  dev  /  observed[i];  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  /  dev  /  observed[i];  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  /  dev  /  observed[i];  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  /  dev  /  observed[i];  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        /        dev        /        observed[i];        sumSq    +=    dev    /    dev    /    observed[i];    for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  /  dev  /  observed[i];  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	38	None	add
557	[BUG]  [BUGGY]  long[]  expected  =  observed[i].longValue()  /  1;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  long[]  expected  =  observed[i].longValue()  /  1;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	long[]  expected  =  observed[i].longValue()  /  1;	  long[]    expected    =    observed[i].longValue()    +    1;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	116	None	replace
558	[BUG]  [BUGGY]  sumSq  +=  observed[i]  *  DEv;  [CE]  cannot  find  symbol  DEv  [FE]        AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  DEv;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed[i]  *  DEv;	          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    DEv;    }    	non-compiled	[CE]  cannot  find  symbol  DEv	126	None	replace
559	[BUG]  [BUGGY]  sumSq  +=  observed[i]  *  DEV;  [CE]  cannot  find  symbol  DEV  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  DEV;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed[i]  *  DEV;	          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    DEv;    }    	non-compiled	[CE]  cannot  find  symbol  DEV	126	None	replace
560	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        dev        *        observed[i];        }        if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <	  	non-compiled	[CE]  ')'  expected	102	None	add
561	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        <        expected[i])        {        sumSq        +=        dev        *        observed[i];        }        if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }	  	compilable	  [FE]  AssertionFailedError  	102	6	add
562	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        dev        *        observed[i];        }        if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }	  	compilable	  [FE]  AssertionFailedError  	102	6	add
563	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        dev        *        observed[i];        }        if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *	  	non-compiled	[CE]  illegal  start  of  expression	102	None	add
564	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        dev        *        observed[i];        }        if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=	  	non-compiled	[CE]  illegal  start  of  expression	102	None	add
565	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        dev        *        observed[i];        }        if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {	  	non-compiled	[CE]  illegal  start  of  expression	102	None	add
566	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    dev    /    observed[i    -    1]    /    dev;    sumSq  +=  dev  /  observed[i  -  1]  /  dev;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	138	6	add
567	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    observed[i    -    1]    /    dev;    sumSq  +=  dev  /  observed[i  -  1]  /  dev;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	138	6	add
568	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  double  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  double  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    observed[i    -    1]    /    dev;    double  sumSq  +=  dev  /  observed[i  -  1]  /  dev;	  	non-compiled	[CE]  ';'  expected	138	None	add
569	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  int  i  =  observed.length;  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  int  i  =  observed.length;  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    observed[i    -    1]    /    dev;    int  i  =  observed.length;  sumSq  +=  dev  /  observed[i  -  1]  /  dev;	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	138	None	add
570	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  ArrayIndexOutOfBoundsException.printStackTrace(sumSq);  [CE]  no  suitable  method  found  for  printStackTrace(double)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  ArrayIndexOutOfBoundsException.printStackTrace(sumSq);  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    observed[i    -    1]    /    dev;    ArrayIndexOutOfBoundsException.printStackTrace(sumSq);	  	non-compiled	[CE]  no  suitable  method  found  for  printStackTrace(double)	138	None	add
571	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  ArrayIndexOutOfBoundsException.printStackTrace(new  double[]  {  dev  }  );  [CE]  no  suitable  method  found  for  printStackTrace(double[])  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  ArrayIndexOutOfBoundsException.printStackTrace(new  double[]  {  dev  }  );  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    observed[i    -    1]    /    dev;    ArrayIndexOutOfBoundsException.printStackTrace(new  double[]  {  dev  }  );	  	non-compiled	[CE]  no  suitable  method  found  for  printStackTrace(double[])	138	None	add
572	[BUG]  [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  if(!isNonNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  if(!isNonNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	int  i  =  0;  i  <  expected.length;  i++)  {  if(!isNonNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!isNonNegative(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	124	None	replace
573	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  /  dev  *  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  observed[i]  /  dev  *  dev;	  sumSq    +=    observed[i]    /    dev    /    dev;    	compilable	  [FE]  AssertionFailedError  	63	6	replace
574	[BUG]  [BUGGY]  sumSq  +=  observed[i]  /  dev  *  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  /  dev  *  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed[i]  /  dev  *  dev;	  sumSq    +=    observed[i]    /    dev    /    dev;    	compilable	  [FE]  AssertionFailedError  	63	6	replace
575	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        <        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	56	6	add
576	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	56	6	add
577	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[	  	non-compiled	[CE]  ']'  expected	56	None	add
578	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=	  	non-compiled	[CE]  ')'  expected	56	None	add
579	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
580	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
581	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected[i];  sumSq  +=  dev  *  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    dev    *    expected[i];    sumSq  +=  dev  *  expected[i];	  	compilable	  [FE]  AssertionFailedError  	69	6	add
582	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i];  sumSq  +=  dev  *  expected[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected[i];  sumSq  +=  dev  *  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    expected[i];    sumSq  +=  dev  *  expected[i];	  	compilable	  [FE]  AssertionFailedError  	69	6	add
583	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i];  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  expected[i];  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected[i];  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  expected[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    expected[i];    for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  expected[i];  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	69	None	add
584	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i];  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  expected[i];  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected[i];  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    expected[i];    for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  expected[i];	  	non-compiled	[CE]  illegal  start  of  expression	69	None	add
585	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i];  int  i  =  observed.length;  sumSq  +=  dev  *  expected[i];  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected[i];  int  i  =  observed.length;  sumSq  +=  dev  *  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    expected[i];    int  i  =  observed.length;  sumSq  +=  dev  *  expected[i];	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	69	None	add
586	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i];  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  DEV  *  expected[i];  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected[i];  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  DEV  *  expected[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    expected[i];    for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  DEV  *  expected[i];  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	69	None	add
587	[BUG]  [BUGGY]  sumSq  +=  dev  /  dev  *  observed[i];  double  sumSq  +=  dev  /  dev  *  observed[i];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  dev  *  observed[i];  double  sumSq  +=  dev  /  dev  *  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    dev    *    observed[i];    double  sumSq  +=  dev  /  dev  *  observed[i];	  	non-compiled	[CE]  ';'  expected	153	None	add
588	[BUG]  [BUGGY]  sumSq  +=  dev  /  dev  *  observed[i];  totalSq  +=  dev  /  dev  *  observed[i];  [CE]  cannot  find  symbol  totalSq  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  dev  *  observed[i];  totalSq  +=  dev  /  dev  *  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    dev    *    observed[i];    totalSq  +=  dev  /  dev  *  observed[i];	  	non-compiled	[CE]  cannot  find  symbol  totalSq	153	None	add
589	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i]  /  distribution.length;  [CE]  cannot  find  symbol  length  [FE]        AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i]  /  distribution.length;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  observed[i]  /  distribution.length;	  sumSq    +=    dev    *    observed[i]    /    distribution;    	non-compiled	[CE]  cannot  find  symbol  length	162	None	replace
590	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i]  /  distribution;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected[i]  /  distribution;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  expected[i]  /  distribution;	  sumSq    +=    dev    *    observed[i]    /    distribution;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	162	None	replace
591	[BUG]  [BUGGY]  luate(x,  observed[i])  {  sumSq  +=  dev  *  observed[i];  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  luate(x,  observed[i])  {  sumSq  +=  dev  *  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	luate(x,  observed[i])  {  sumSq  +=  dev  *  observed[i];  }	          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev    >=    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    	non-compiled	[CE]  ';'  expected	106	None	replace
592	[BUG]  [BUGGY]  luate(x,  observed[i]))  {  sumSq  +=  dev  *  observed[i];  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  luate(x,  observed[i]))  {  sumSq  +=  dev  *  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	luate(x,  observed[i]))  {  sumSq  +=  dev  *  observed[i];  }	          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev    >=    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    	non-compiled	[CE]  ';'  expected	106	None	replace
593	[BUG]  [BUGGY]  bucket[i]  =  sumSq  +  dev  *  observed[i];  [CE]  cannot  find  symbol  bucket  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  bucket[i]  =  sumSq  +  dev  *  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	bucket[i]  =  sumSq  +  dev  *  observed[i];	          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev    >=    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    	non-compiled	[CE]  cannot  find  symbol  bucket	106	None	replace
594	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)expected[i]  -  observed[i]);  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)expected[i]  -  observed[i]);  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)expected[i]  -  observed[i]);  }	          for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    ((    double)observed[i]    -    observed[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	1	None	replace
595	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  observed[i]);  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  observed[i]);  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  observed[i]);  }	          for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    ((    double)observed[i]    -    observed[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	1	None	replace
596	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev!=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    	compilable	  [FE]  AssertionFailedError  	92	6	replace
597	[BUG]  [BUGGY]  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev!=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    	compilable	  [FE]  AssertionFailedError  	92	6	replace
598	[BUG]  [BUGGY]  if(dev  >=  expected[i])  {  sumSq  +=  observed[i].length;  }  else  {  return  dev;  }  [CE]  long  cannot  be  dereferenced  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(dev  >=  expected[i])  {  sumSq  +=  observed[i].length;  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	if(dev  >=  expected[i])  {  sumSq  +=  observed[i].length;  }  else  {  return  dev;  }	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev!=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    	non-compiled	[CE]  long  cannot  be  dereferenced	92	None	replace
599	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  ((  double)observed[i]);  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  ((  double)observed[i]);  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  ((  double)observed[i]);  }	          for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    ((    double)observed[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	5	None	replace
600	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)dev);  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)dev);  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)dev);  }	          for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    ((    double)observed[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	5	None	replace
601	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(dev  <  expected[i])  {  sumSq  +=  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	if(dev  <  expected[i])  {  sumSq  +=  dev;  }	          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev    <    expected[i])    {    sumSq    +=    recorded[i];    }    	compilable	  [FE]  AssertionFailedError  	176	6	replace
602	[BUG]  [BUGGY]  if(dev  <  expected[i])  {  sumSq  +=  dev;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(dev  <  expected[i])  {  sumSq  +=  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	if(dev  <  expected[i])  {  sumSq  +=  dev;  }	          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev    <    expected[i])    {    sumSq    +=    recorded[i];    }    	compilable	  [FE]  AssertionFailedError  	176	6	replace
603	[BUG]  [BUGGY]  luate(x,  observed[i])  {  sumSq  +=  observed[i]  *  dev;  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  luate(x,  observed[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	luate(x,  observed[i])  {  sumSq  +=  observed[i]  *  dev;  }	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev    ==    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    	non-compiled	[CE]  ';'  expected	37	None	replace
604	[BUG]  [BUGGY]  SumSquare  sumSq  +=  expected[i]  *  dev;  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSquare  sumSq  +=  expected[i]  *  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSquare  sumSq  +=  expected[i]  *  dev;	  SumSquare    sumSq    +=    observed[i]    *    dev;    	non-compiled	[CE]  ';'  expected	140	None	replace
605	[BUG]  [BUGGY]  Long[]  expected  =  observed[i].longValue();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  Long[]  expected  =  observed[i].longValue();  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	Long[]  expected  =  observed[i].longValue();	  long[]    expected    =    observed[i].longValue()    +    1;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	116	None	replace
606	[BUG]  [BUGGY]  sumSq  +=  expected  *  dev  *  dev[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected  *  dev  *  dev[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  expected  *  dev  *  dev[i];	  sumSq    +=    dev    *    expected    *    dev[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	192	None	replace
607	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed  *  dev[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed  *  dev[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  observed  *  dev[i];	  sumSq    +=    dev    *    expected    *    dev[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	192	None	replace
608	[BUG]  [BUGGY]  sumSq  +=  observed  *  length  /  dev[i];  [CE]  cannot  find  symbol  length  [FE]                    AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed  *  length  /  dev[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed  *  length  /  dev[i];	  sumSq    +=    observed    *    total    /    dev[i];    	non-compiled	[CE]  cannot  find  symbol  length	113	None	replace
609	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev    >=    expected[i])    {    sumSq    +=    dev;    }    else    {    return    dev;    }    	compilable	  [FE]  AssertionFailedError  	135	6	replace
610	[BUG]  [BUGGY]  if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev    >=    expected[i])    {    sumSq    +=    dev;    }    else    {    return    dev;    }    	compilable	  [FE]  AssertionFailedError  	135	6	replace
611	[BUG]  [BUGGY]  SumSquare  sumSq  =  sumSq  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  sumSq  *  observed[i]  /  dev;  }  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSquare  sumSq  =  sumSq  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  sumSq  *  observed[i]  /  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSquare  sumSq  =  sumSq  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  sumSq  *  observed[i]  /  dev;  }	  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq    >    0)    {    sumSq    +=    dev    *    observed[i]    /    dev;    }    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
612	[BUG]  [BUGGY]  SumSquare  sumSq  =  sumSq  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSquare  sumSq  =  sumSq  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSquare  sumSq  =  sumSq  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }	  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq    >    0)    {    sumSq    +=    dev    *    observed[i]    /    dev;    }    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
613	[BUG]  [BUGGY]  sumSq  +=  observed[i]  *  dev  /  dev;  double  sumSq  +=  observed[i]  *  dev  /  dev;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  dev  /  dev;  double  sumSq  +=  observed[i]  *  dev  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i]    *    dev    /    dev;    double  sumSq  +=  observed[i]  *  dev  /  dev;	  	non-compiled	[CE]  ';'  expected	74	None	add
614	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  dev  /  dev;  sumSq  +=  dev  *  dev  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    observed[i]    *    dev    /    dev;    sumSq  +=  dev  *  dev  /  dev;	  	compilable	  [FE]  AssertionFailedError  	74	6	add
615	[BUG]  [BUGGY]  sumSq  +=  observed[i]  *  dev  /  dev;  sumSq  +=  dev  *  dev  /  dev;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  dev  /  dev;  sumSq  +=  dev  *  dev  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i]    *    dev    /    dev;    sumSq  +=  dev  *  dev  /  dev;	  	compilable	  [FE]  AssertionFailedError  	74	6	add
616	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  dev  /  dev;  sumSq  +=  dev  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    observed[i]    *    dev    /    dev;    sumSq  +=  dev  /  dev;	  	compilable	  [FE]  AssertionFailedError  	74	6	add
617	[BUG]  [BUGGY]  sumSq  +=  observed[i]  *  dev  /  dev;  sumSq  +=  dev  /  dev;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  dev  /  dev;  sumSq  +=  dev  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i]    *    dev    /    dev;    sumSq  +=  dev  /  dev;	  	compilable	  [FE]  AssertionFailedError  	74	6	add
618	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  desv;  }  [CE]  cannot  find  symbol  desv  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  desv;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev!=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  desv;  }	  	non-compiled	[CE]  cannot  find  symbol  desv	91	None	add
619	[BUG]  [BUGGY]  ((  ChiSquareDistribution)dev).sumSq  +=  dev  *  2;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  ((  ChiSquareDistribution)dev).sumSq  +=  dev  *  2;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	((  ChiSquareDistribution)dev).sumSq  +=  dev  *  2;	  ((    ChiSquareDistribution)dev).sumSq    +=    dev;    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
620	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  ArrayIndexOutOfBoundsException  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  ArrayIndexOutOfBoundsException  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    observed[i    -    1]    /    dev;    ArrayIndexOutOfBoundsException  sumSq  +=  dev  /  observed[i  -  1]  /  dev;	  	non-compiled	[CE]  ';'  expected	138	None	add
621	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  SumSq  +=  dev  /  observed[i  -  1]  /  dev;  [CE]  cannot  find  symbol  SumSq  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  SumSq  +=  dev  /  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    observed[i    -    1]    /    dev;    SumSq  +=  dev  /  observed[i  -  1]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  SumSq	138	None	add
622	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Unexpected  array  lengths  incorrect ");  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    dev    /    observed[i    -    1]    /    dev;    ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Unexpected  array  lengths  incorrect ");	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	138	6	add
623	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Unexpected  array  lengths  incorrect ");  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Unexpected  array  lengths  incorrect ");  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    observed[i    -    1]    /    dev;    ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Unexpected  array  lengths  incorrect ");	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	138	6	add
624	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	122	6	add
625	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	122	6	add
626	[BUG]  [BUGGY]  luate(x,  observed[i]);  [CE]  cannot  find  symbol  x  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  luate(x,  observed[i]);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	luate(x,  observed[i]);	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    	non-compiled	[CE]  cannot  find  symbol  x	90	None	replace
627	[BUG]  [BUGGY]  luate(x,  observed[i]));  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  luate(x,  observed[i]));  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	luate(x,  observed[i]));	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    	non-compiled	[CE]  ';'  expected	90	None	replace
628	[BUG]  [BUGGY]  luate(x,  observed[i],  y));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  luate(x,  observed[i],  y));  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	luate(x,  observed[i],  y));	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    	non-compiled	[CE]  ';'  expected	90	None	replace
629	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev;    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	95	6	add
630	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev;    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	95	6	add
631	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  expected[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev;    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  expected[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	95	6	add
632	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  expected[i];  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  expected[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev;    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  expected[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	95	6	add
633	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev;    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	95	6	add
634	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev;    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	95	6	add
635	[BUG]  [BUGGY]  SumSquare  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSquare  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSquare  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq    +=    dev    *    observed[i    -    1]    /    dev;    	non-compiled	[CE]  ';'  expected	25	None	replace
636	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  *  expected[i  -  1]  /  dev;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq    +=    dev    *    observed[i    -    1]    /    dev;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	25	6	replace
637	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  expected[i  -  1]  /  dev;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq    +=    dev    *    observed[i    -    1]    /    dev;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	25	6	replace
638	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  (1  *  observed[i  -  1]  /  dev);  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  (1  *  observed[i  -  1]  /  dev);	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq    +=    ((    double)dev    *    observed[i    -    1]    /    dev);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	6	replace
639	[BUG]  [BUGGY]  sumSq  +=  (1  *  observed[i  -  1]  /  dev);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  (1  *  observed[i  -  1]  /  dev);  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  (1  *  observed[i  -  1]  /  dev);	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq    +=    ((    double)dev    *    observed[i    -    1]    /    dev);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	6	replace
640	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        <        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	56	6	add
641	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	56	6	add
642	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[	  	non-compiled	[CE]  ']'  expected	56	None	add
643	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
644	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=	  	non-compiled	[CE]  ')'  expected	56	None	add
645	[BUG]  [BUGGY]  sumSq  +=  x  *  observed[i  -  1]  /  dev;  [CE]  cannot  find  symbol  x  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  x  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  x  *  observed[i  -  1]  /  dev;	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq    +=    x    *    observed[i    -    1]    /    dev;    	non-compiled	[CE]  cannot  find  symbol  x	169	None	replace
646	[BUG]  [BUGGY]  sumSq  +=  i  *  observed[i  -  1]  /  dev;  sumSq  +=  x  *  observed[i  -  1]  /  dev;  [CE]  cannot  find  symbol  x  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  i  *  observed[i  -  1]  /  dev;  sumSq  +=  x  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  i  *  observed[i  -  1]  /  dev;  sumSq  +=  x  *  observed[i  -  1]  /  dev;	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq    +=    x    *    observed[i    -    1]    /    dev;    	non-compiled	[CE]  cannot  find  symbol  x	169	None	replace
647	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  y  *  observed[i  -  1]  /  dev;  [CE]  cannot  find  symbol  y  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  y  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  y  *  observed[i  -  1]  /  dev;	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq    +=    x    *    observed[i    -    1]    /    dev;    	non-compiled	[CE]  cannot  find  symbol  y	169	None	replace
648	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  desv;  }  [CE]  cannot  find  symbol  desv  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  desv;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    expected[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  desv;  }	  	non-compiled	[CE]  cannot  find  symbol  desv	131	None	add
649	[BUG]  [BUGGY]  sumSq  +=  expected  *  dev  *  observed[i]  /  distribution;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected  *  dev  *  observed[i]  /  distribution;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  expected  *  dev  *  observed[i]  /  distribution;	  sumSq    +=    expected    *    dev    *    observed[i]    /    dev;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	128	None	replace
650	[BUG]  [BUGGY]  sumSq  +=  expected  *  dev  *  dev.length;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected  *  dev  *  dev.length;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  expected  *  dev  *  dev.length;	  sumSq    +=    expected    *    dev    *    dev;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	76	None	replace
651	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  expected[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev    /    expected[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  expected[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	93	6	add
652	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  expected[i];  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  expected[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev    /    expected[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  expected[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	93	6	add
653	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev    /    expected[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	93	6	add
654	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev    /    expected[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	93	6	add
655	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)||!isNegative(dev))  {  sumSq  +=  dev;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)||!isNegative(dev))  {  sumSq  +=  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)||!isNegative(dev))  {  sumSq  +=  dev;  }	          for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNegative(dev))    {    sumSq    +=    dev;    }    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
656	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)&&!isNegative(dev))  {  sumSq  +=  dev;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)&&!isNegative(dev))  {  sumSq  +=  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)&&!isNegative(dev))  {  sumSq  +=  dev;  }	          for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNegative(dev))    {    sumSq    +=    dev;    }    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
657	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  dev;  sumSq  +=  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  observed[i]  *  dev;  sumSq  +=  expected[i]  /  dev;	  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq    +=    expected[i]    /    dev;    	compilable	  [FE]  AssertionFailedError  	17	6	replace
658	[BUG]  [BUGGY]  sumSq  +=  observed[i]  *  dev;  sumSq  +=  expected[i]  /  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  dev;  sumSq  +=  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed[i]  *  dev;  sumSq  +=  expected[i]  /  dev;	  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq    +=    expected[i]    /    dev;    	compilable	  [FE]  AssertionFailedError  	17	6	replace
659	[BUG]  [BUGGY]  sumSq  +=  dev  *  /  observed[i];  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  /  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  /  observed[i];	  sumSq    +=    dev    *    observed[i];    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
660	[BUG]  [BUGGY]  sumSq  +=  dev  /  expected[i];  SumSquare  sumSq  +=  dev  /  expected[i];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  expected[i];  SumSquare  sumSq  +=  dev  /  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    expected[i];    SumSquare  sumSq  +=  dev  /  expected[i];	  	non-compiled	[CE]  ';'  expected	110	None	add
661	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  expected[i];  sumSq  +=  dev  -  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    dev    /    expected[i];    sumSq  +=  dev  -  expected[i];	  	compilable	  [FE]  AssertionFailedError  	110	6	add
662	[BUG]  [BUGGY]  sumSq  +=  dev  /  expected[i];  sumSq  +=  dev  -  expected[i];  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  expected[i];  sumSq  +=  dev  -  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    expected[i];    sumSq  +=  dev  -  expected[i];	  	compilable	  [FE]  AssertionFailedError  	110	6	add
663	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev;    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	134	6	add
664	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev;    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	134	6	add
665	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  expected[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev;    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  expected[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	134	6	add
666	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  expected[i];  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  expected[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev;    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  expected[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	134	6	add
667	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        <        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    <    expected[i])    {    sumSq    +=    dev    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	54	6	add
668	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    <    expected[i])    {    sumSq    +=    dev    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	54	6	add
669	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  expected[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        <        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    <    expected[i])    {    sumSq    +=    dev    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  expected[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	54	6	add
670	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  expected[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  expected[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    <    expected[i])    {    sumSq    +=    dev    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  expected[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	54	6	add
671	[BUG]  [BUGGY]  sumSq  +=  observed[i]  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  /  dev;  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  /  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i]    /    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  /  dev;  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	183	None	add
672	[BUG]  [BUGGY]  sumSq  +=  observed[i]  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  dev;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i]    /    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  /  dev;	  	non-compiled	[CE]  illegal  start  of  expression	183	None	add
673	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i];  SumSquare  sumSq  +=  dev  *  observed[i];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i];  SumSquare  sumSq  +=  dev  *  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i];    SumSquare  sumSq  +=  dev  *  observed[i];	  	non-compiled	[CE]  ';'  expected	117	None	add
674	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i];  SumSq  +=  dev  *  observed[i];  [CE]  cannot  find  symbol  SumSq  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i];  SumSq  +=  dev  *  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i];    SumSq  +=  dev  *  observed[i];	  	non-compiled	[CE]  cannot  find  symbol  SumSq	117	None	add
675	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i];  SumSq  -=  dev  *  observed[i];  [CE]  cannot  find  symbol  SumSq  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i];  SumSq  -=  dev  *  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i];    SumSq  -=  dev  *  observed[i];	  	non-compiled	[CE]  cannot  find  symbol  SumSq	117	None	add
676	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i];  totalSq  +=  dev  *  observed[i];  [CE]  cannot  find  symbol  totalSq  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i];  totalSq  +=  dev  *  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i];    totalSq  +=  dev  *  observed[i];	  	non-compiled	[CE]  cannot  find  symbol  totalSq	117	None	add
677	[BUG]  [BUGGY]  Integer  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  Integer  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	Integer  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }	  int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	65	None	replace
678	[BUG]  [BUGGY]  SumSquareDev  d  =  distribution.doubleValue();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSquareDev  d  =  distribution.doubleValue();  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSquareDev  d  =  distribution.doubleValue();	          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
679	[BUG]  [BUGGY]  sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  SumSq  +=  dev  /  dev  /  observed[i];  [CE]  cannot  find  symbol  SumSq  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  SumSq  +=  dev  /  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        /        dev        /        observed[i];        sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  /  dev  /  observed[i];  SumSq  +=  dev  /  dev  /  observed[i];	  	non-compiled	[CE]  cannot  find  symbol  SumSq	38	None	add
680	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq        +=        dev        /        dev        /        observed[i];        sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  /  dev  /  observed[i];	  	compilable	  [FE]  AssertionFailedError  	38	6	add
681	[BUG]  [BUGGY]  sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        /        dev        /        observed[i];        sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  /  dev  /  observed[i];	  	compilable	  [FE]  AssertionFailedError  	38	6	add
682	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  dev  *  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq        +=        dev        /        dev        /        observed[i];        sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  dev  *  observed[i];	  	compilable	  [FE]  AssertionFailedError  	38	6	add
683	[BUG]  [BUGGY]  sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  dev  *  observed[i];  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  dev  *  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        /        dev        /        observed[i];        sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  dev  *  observed[i];	  	compilable	  [FE]  AssertionFailedError  	38	6	add
684	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed.length  /  dev[i];  [CE]  array  required,  but  double  found  [FE]                  AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed.length  /  dev[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  observed.length  /  dev[i];	  sumSq    +=    dev    *    observed    /    dev[i];    	non-compiled	[CE]  array  required,  but  double  found	112	None	replace
685	[BUG]  [BUGGY]  AssertionFailedError  <  AssertionFailedError  >>   "Unexpected  array  lengths  incorrect ",  dev);  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  AssertionFailedError  <  AssertionFailedError  >>   "Unexpected  array  lengths  incorrect ",  dev);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	AssertionFailedError  <  AssertionFailedError  >>   "Unexpected  array  lengths  incorrect ",  dev);	          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    AssertionFailedError    <    AssertionFailedError    >>       "Unexpected    array    lengths    incorrect   ");    	non-compiled	[CE]  not  a  statement	127	None	replace
686	[BUG]  [BUGGY]  sumSq  +=  dev  /  total  *  observed[i];  [CE]  cannot  find  symbol  total  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  total  *  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  /  total  *  observed[i];	  sumSq    +=    dev    /    dev    *    observed[i];    	non-compiled	[CE]  cannot  find  symbol  total	154	None	replace
687	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  For(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	For(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }	  For(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isNegative(dev))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	109	None	replace
688	[BUG]  [BUGGY]  luate(x,  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  luate(x,  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	luate(x,  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	  luate(x,    observed[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    	non-compiled	[CE]  ';'  expected	147	None	replace
689	[BUG]  [BUGGY]  luate(x,  observed[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  luate(x,  observed[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	luate(x,  observed[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }	  luate(x,    observed[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    	non-compiled	[CE]  ';'  expected	147	None	replace
690	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        <        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])	  	compilable	  [FE]  AssertionFailedError  	51	6	add
691	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])	  	compilable	  [FE]  AssertionFailedError  	51	6	add
692	[BUG]  [BUGGY]  sumSq  +=  observed[i]  *  dev;  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  *  dev;  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  dev;  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i]    *    dev;    for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  *  dev;  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	67	None	add
693	[BUG]  [BUGGY]  SumSquare  sumSquare  =  sumSquare  +  observed[i]  *  dev;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSquare  sumSquare  =  sumSquare  +  observed[i]  *  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSquare  sumSquare  =  sumSquare  +  observed[i]  *  dev;	          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    If(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
694	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)||!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)||!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(expected)||!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }	          for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)||!isNegative(dev))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
695	[BUG]  [BUGGY]  luate(x,  observed[i],  false);  [CE]  cannot  find  symbol  x  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  luate(x,  observed[i],  false);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	luate(x,  observed[i],  false);	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev    >=    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    else    {    return    dev;    }    	non-compiled	[CE]  cannot  find  symbol  x	178	None	replace
696	[BUG]  [BUGGY]  SumSq  +=  expected[i]  *  dev;  [CE]  cannot  find  symbol  SumSq  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSq  +=  expected[i]  *  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSq  +=  expected[i]  *  dev;	  SumSq    +=    observed[i]    *    dev;    	non-compiled	[CE]  cannot  find  symbol  SumSq	71	None	replace
697	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
698	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])	  	compilable	  [FE]  AssertionFailedError  	31	6	add
699	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])	  	compilable	  [FE]  AssertionFailedError  	31	6	add
700	[BUG]  [BUGGY]  SumSquare  distribution  =  distribution.doubleValue();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSquare  distribution  =  distribution.doubleValue();  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSquare  distribution  =  distribution.doubleValue();	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev    >>    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
701	[BUG]  [BUGGY]  luate(x,  observed[i],  false));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  luate(x,  observed[i],  false));  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	luate(x,  observed[i],  false));	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev    >>    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    	non-compiled	[CE]  ';'  expected	133	None	replace
702	[BUG]  [BUGGY]  long[]  expected  =  observed[i].doubleValue()  +  1;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  long[]  expected  =  observed[i].doubleValue()  +  1;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	long[]  expected  =  observed[i].doubleValue()  +  1;	  long[]    expected    =    observed[i].doubleValue();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	114	None	replace
703	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	89	6	add
704	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	89	6	add
705	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i];  SumSquare  sumSq  +=  dev  *  expected[i];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected[i];  SumSquare  sumSq  +=  dev  *  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    expected[i];    SumSquare  sumSq  +=  dev  *  expected[i];	  	non-compiled	[CE]  ';'  expected	69	None	add
706	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i];  SumSq  +=  dev  *  expected[i];  [CE]  cannot  find  symbol  SumSq  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected[i];  SumSq  +=  dev  *  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    expected[i];    SumSq  +=  dev  *  expected[i];	  	non-compiled	[CE]  cannot  find  symbol  SumSq	69	None	add
707	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i];  SumSq  -=  dev  *  expected[i];  [CE]  cannot  find  symbol  SumSq  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected[i];  SumSq  -=  dev  *  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    expected[i];    SumSq  -=  dev  *  expected[i];	  	non-compiled	[CE]  cannot  find  symbol  SumSq	69	None	add
708	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i];  totalSq  +=  dev  *  expected[i];  [CE]  cannot  find  symbol  totalSq  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected[i];  totalSq  +=  dev  *  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    expected[i];    totalSq  +=  dev  *  expected[i];	  	non-compiled	[CE]  cannot  find  symbol  totalSq	69	None	add
709	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  DEV  *  observed[i]  /  dev;  [CE]  cannot  find  symbol  DEV  [FE]        AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  DEV  *  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  DEV  *  observed[i]  /  dev;	  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq    +=    DEV    *    expected[i]    /    dev;    	non-compiled	[CE]  cannot  find  symbol  DEV	179	None	replace
710	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  ArrayIndexOutOfBoundsException  x  =  new  ArrayIndexOutOfBoundsException(dev);  sumSq  +=  x  *  expected[i  -  1]  /  dev;  [CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(double)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  ArrayIndexOutOfBoundsException  x  =  new  ArrayIndexOutOfBoundsException(dev);  sumSq  +=  x  *  expected[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    expected[i    -    1]    /    dev;    ArrayIndexOutOfBoundsException  x  =  new  ArrayIndexOutOfBoundsException(dev);  sumSq  +=  x  *  expected[i  -  1]  /  dev;	  	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(double)	136	None	add
711	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  ArrayIndexOutOfBoundsException  x  =  new  ArrayIndexOutOfBoundsException(dev);  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  [CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(double)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  ArrayIndexOutOfBoundsException  x  =  new  ArrayIndexOutOfBoundsException(dev);  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    expected[i    -    1]    /    dev;    ArrayIndexOutOfBoundsException  x  =  new  ArrayIndexOutOfBoundsException(dev);  sumSq  +=  dev  *  expected[i  -  1]  /  dev;	  	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(double)	136	None	add
712	[BUG]  [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  SumSq  +=  dev  *  observed[i]  /  dev;  [CE]  cannot  find  symbol  SumSq  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  SumSq  +=  dev  *  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    dev    *    observed[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;  SumSq  +=  dev  *  observed[i]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  SumSq	180	None	add
713	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    dev    *    observed[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	180	6	add
714	[BUG]  [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    dev    *    observed[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	180	6	add
715	[BUG]  [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  sumSQ  +=  dev  *  observed[i]  /  dev;  [CE]  cannot  find  symbol  sumSQ  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  sumSQ  +=  dev  *  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    dev    *    observed[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;  sumSQ  +=  dev  *  observed[i]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  sumSQ	180	None	add
716	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        <        expected[i])        {        sumSq        +=        observed[i];        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }	  	compilable	  [FE]  AssertionFailedError  	47	6	add
717	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i];        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }	  	compilable	  [FE]  AssertionFailedError  	47	6	add
718	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        <        expected[i])        {        sumSq        +=        observed[i];        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }	  	compilable	  [FE]  AssertionFailedError  	47	6	add
719	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i];        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }	  	compilable	  [FE]  AssertionFailedError  	47	6	add
720	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i];        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
721	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected[i  -  1]  /  2;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  *  expected[i  -  1]  /  2;	  sumSq    +=    dev    *    observed[i    -    1]    /    2;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	189	6	replace
722	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i  -  1]  /  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected[i  -  1]  /  2;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  expected[i  -  1]  /  2;	  sumSq    +=    dev    *    observed[i    -    1]    /    2;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	189	6	replace
723	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i  -  1]  /  2;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  /  observed[i  -  1]  /  2;	  sumSq    +=    dev    *    observed[i    -    1]    /    2;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	189	6	replace
724	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i  -  1]  /  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i  -  1]  /  2;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  /  observed[i  -  1]  /  2;	  sumSq    +=    dev    *    observed[i    -    1]    /    2;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	189	6	replace
725	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNonNegative(expected))  {  throw  new  IllegalArgumentException( "Dev  is  less  than  1: ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNonNegative(expected))  {  throw  new  IllegalArgumentException( "Dev  is  less  than  1: ");  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isNonNegative(expected))  {  throw  new  IllegalArgumentException( "Dev  is  less  than  1: ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!isPositive(dev))    {    throw    new    IllegalArgumentException(   "Dev    is    less    than    1:   ");    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
726	[BUG]  [BUGGY]  luate(x,  dev))  {  sumSq  +=  dev  *  observed[i];  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  luate(x,  dev))  {  sumSq  +=  dev  *  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	luate(x,  dev))  {  sumSq  +=  dev  *  observed[i];  }	          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    If(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    	non-compiled	[CE]  ';'  expected	104	None	replace
727	[BUG]  [BUGGY]  ((  ChiSquareDistribution)v).doubleValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  ((  ChiSquareDistribution)v).doubleValue();  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	((  ChiSquareDistribution)v).doubleValue();	  ((    ChiSquareDistribution)dev).doubleValue();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
728	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq        +=        dev        *        observed[i]        /        dev;        sumSq    +=    dev    *    observed[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	6	6	add
729	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i]        /        dev;        sumSq    +=    dev    *    observed[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	6	6	add
730	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  SumSq  +=  dev  *  observed[i]  /  dev;  [CE]  cannot  find  symbol  SumSq  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  SumSq  +=  dev  *  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i]        /        dev;        sumSq    +=    dev    *    observed[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  SumSq  +=  dev  *  observed[i]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  SumSq	6	None	add
731	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  sumSQ  +=  dev  *  observed[i]  /  dev;  [CE]  cannot  find  symbol  sumSQ  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  sumSQ  +=  dev  *  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i]        /        dev;        sumSq    +=    dev    *    observed[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  sumSQ  +=  dev  *  observed[i]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  sumSQ	6	None	add
732	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  dev  /  observed[i];  sumSq  +=  dev  *  dev  *  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  *  dev  /  observed[i];  sumSq  +=  dev  *  dev  *  observed[i];	  sumSq    +=    dev    /    dev    /    observed[i];    sumSq    +=    dev    /    dev    /    observed[i];    	compilable	  [FE]  AssertionFailedError  	39	6	replace
733	[BUG]  [BUGGY]  sumSq  +=  dev  *  dev  /  observed[i];  sumSq  +=  dev  *  dev  *  observed[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  dev  /  observed[i];  sumSq  +=  dev  *  dev  *  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  dev  /  observed[i];  sumSq  +=  dev  *  dev  *  observed[i];	  sumSq    +=    dev    /    dev    /    observed[i];    sumSq    +=    dev    /    dev    /    observed[i];    	compilable	  [FE]  AssertionFailedError  	39	6	replace
734	[BUG]  [BUGGY]  SumSquare  sumSq  +=  dev  *  dev  /  observed[i];  sumSq  +=  dev  *  dev  *  observed[i];  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSquare  sumSq  +=  dev  *  dev  /  observed[i];  sumSq  +=  dev  *  dev  *  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSquare  sumSq  +=  dev  *  dev  /  observed[i];  sumSq  +=  dev  *  dev  *  observed[i];	  sumSq    +=    dev    /    dev    /    observed[i];    sumSq    +=    dev    /    dev    /    observed[i];    	non-compiled	[CE]  ';'  expected	39	None	replace
735	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  expected[i]);  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  expected[i]);  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  expected[i]);  }	          for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    ((    double)observed[i]    -    expected[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	4	None	replace
736	[BUG]  [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  SumSq  +=  dev  *  expected[i]  /  dev;  [CE]  cannot  find  symbol  SumSq  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  SumSq  +=  dev  *  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;  SumSq  +=  dev  *  expected[i]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  SumSq	12	None	add
737	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	12	6	add
738	[BUG]  [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	12	6	add
739	[BUG]  [BUGGY]  SumSquare  +=  dev  *  expected[i];  [CE]  cannot  find  symbol  SumSquare  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSquare  +=  dev  *  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSquare  +=  dev  *  expected[i];	  SumSq    +=    dev    *    observed[i];    	non-compiled	[CE]  cannot  find  symbol  SumSquare	119	None	replace
740	[BUG]  [BUGGY]  SumSq  +=  dev  *  observed[i]  /  distribution;  [CE]  cannot  find  symbol  SumSq  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSq  +=  dev  *  observed[i]  /  distribution;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSq  +=  dev  *  observed[i]  /  distribution;	  SumSq    +=    dev    *    observed[i];    	non-compiled	[CE]  cannot  find  symbol  SumSq	119	None	replace
741	[BUG]  [BUGGY]  sumSq  +=  dev  *  dev  /  observed[i];  totalSq  +=  dev  *  dev  /  observed[i];  [CE]  cannot  find  symbol  totalSq  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  dev  /  observed[i];  totalSq  +=  dev  *  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    dev    /    observed[i];    totalSq  +=  dev  *  dev  /  observed[i];	  	non-compiled	[CE]  cannot  find  symbol  totalSq	58	None	add
742	[BUG]  [BUGGY]  sumSq  +=  dev  *  dev  /  observed[i];  sumSq  +=  dev  *  DEV  /  observed[i];  [CE]  cannot  find  symbol  DEV  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  dev  /  observed[i];  sumSq  +=  dev  *  DEV  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    dev    /    observed[i];    sumSq  +=  dev  *  DEV  /  observed[i];	  	non-compiled	[CE]  cannot  find  symbol  DEV	58	None	add
743	[BUG]  [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  *  dev  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expected[i]  *  DEV  /  dev;  [CE]  cannot  find  symbol  DEV  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  *  dev  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expected[i]  *  DEV  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    expected[i]    *    dev    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expected[i]  *  DEV  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  DEV	166	None	add
744	[BUG]  [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  *  dev  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  SumSq  +=  expected[i]  *  dev  /  dev;  [CE]  cannot  find  symbol  SumSq  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  *  dev  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  SumSq  +=  expected[i]  *  dev  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    expected[i]    *    dev    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;  SumSq  +=  expected[i]  *  dev  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  SumSq	166	None	add
745	[BUG]  [BUGGY]  SumSquare  sumSq  +=  dev  *  dev  /  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSquare  sumSq  +=  dev  *  dev  /  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSquare  sumSq  +=  dev  *  dev  /  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];	  sumSq    +=    dev    /    dev    /    observed[i];    sumSq    +=    dev    *    dev    /    observed[i];    	non-compiled	[CE]  ';'  expected	161	None	replace
746	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i]  /  2;  int  sumSq  +=  dev  *  observed[i]  /  2;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i]  /  2;  int  sumSq  +=  dev  *  observed[i]  /  2;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i]    /    2;    int  sumSq  +=  dev  *  observed[i]  /  2;	  	non-compiled	[CE]  ';'  expected	99	None	add
747	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i]  /  2;  double  sumSq  +=  dev  *  observed[i]  /  2;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i]  /  2;  double  sumSq  +=  dev  *  observed[i]  /  2;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i]    /    2;    double  sumSq  +=  dev  *  observed[i]  /  2;	  	non-compiled	[CE]  ';'  expected	99	None	add
748	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i]  /  2;  totalSq  +=  dev  *  observed[i]  /  2;  [CE]  cannot  find  symbol  totalSq  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i]  /  2;  totalSq  +=  dev  *  observed[i]  /  2;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i]    /    2;    totalSq  +=  dev  *  observed[i]  /  2;	  	non-compiled	[CE]  cannot  find  symbol  totalSq	99	None	add
749	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  *  dev  /  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq        +=        dev        /        dev        /        observed[i];        sumSq    +=    dev    *    dev    /    observed[i];    sumSq  +=  dev  *  dev  /  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];	  	compilable	  [FE]  AssertionFailedError  	160	6	add
750	[BUG]  [BUGGY]  sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  *  dev  /  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  *  dev  /  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        /        dev        /        observed[i];        sumSq    +=    dev    *    dev    /    observed[i];    sumSq  +=  dev  *  dev  /  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];	  	compilable	  [FE]  AssertionFailedError  	160	6	add
751	[BUG]  [BUGGY]  sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  *  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  SumSq  +=  dev  *  dev  /  observed[i];  [CE]  cannot  find  symbol  SumSq  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  *  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  SumSq  +=  dev  *  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        /        dev        /        observed[i];        sumSq    +=    dev    *    dev    /    observed[i];    sumSq  +=  dev  /  dev  /  observed[i];  SumSq  +=  dev  *  dev  /  observed[i];	  	non-compiled	[CE]  cannot  find  symbol  SumSq	160	None	add
752	[BUG]  [BUGGY]  SumSquare  sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSquare  sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSquare  sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];	  sumSq    +=    dev    /    dev    /    observed[i];    totalSq    +=    dev    /    dev    /    observed[i];    	non-compiled	[CE]  ';'  expected	42	None	replace
753	[BUG]  [BUGGY]  sumSq  +=  x  *  observed[i]  /  dev;  [CE]  cannot  find  symbol  x  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  x  *  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  x  *  observed[i]  /  dev;	  sumSq    +=    dev    *    observed[i]    /    dev;    sumSq    +=    x    *    observed[i]    /    dev;    	non-compiled	[CE]  cannot  find  symbol  x	191	None	replace
754	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        <        expected[i])        {        sumSq        +=        dev        *        observed[i];        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }	  	compilable	  [FE]  AssertionFailedError  	105	6	add
755	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        dev        *        observed[i];        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }	  	compilable	  [FE]  AssertionFailedError  	105	6	add
756	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        dev        *        observed[i];        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *	  	non-compiled	[CE]  illegal  start  of  expression	105	None	add
757	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        dev        *        observed[i];        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=	  	non-compiled	[CE]  ')'  expected	105	None	add
758	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  2;  ArrayIndexOutOfBoundsException  sumSq  +=  dev  *  observed[i  -  1]  /  2;  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  2;  ArrayIndexOutOfBoundsException  sumSq  +=  dev  *  observed[i  -  1]  /  2;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i    -    1]    /    2;    ArrayIndexOutOfBoundsException  sumSq  +=  dev  *  observed[i  -  1]  /  2;	  	non-compiled	[CE]  ';'  expected	188	None	add
759	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  2;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(dev);  [CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(double)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  2;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(dev);  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i    -    1]    /    2;    ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(dev);	  	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(double)	188	None	add
760	[BUG]  [BUGGY]  sumSq  +=  expected[i]  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected[i]  *  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    expected[i]    *    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
761	[BUG]  [BUGGY]  sumSq  +=  expected[i]  *  dev;  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  expected[i]  *  dev;  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected[i]  *  dev;  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  expected[i]  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    expected[i]    *    dev;    for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  expected[i]  *  dev;  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	72	None	add
762	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        <        expected[i])        {        sumSq        +=        observed[i];        }        if(dev    <    expected[i])    {    sumSq    +=    dev    *    expected[i];    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }	  	compilable	  [FE]  AssertionFailedError  	49	6	add
763	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i];        }        if(dev    <    expected[i])    {    sumSq    +=    dev    *    expected[i];    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }	  	compilable	  [FE]  AssertionFailedError  	49	6	add
764	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        <        expected[i])        {        sumSq        +=        observed[i];        }        if(dev    <    expected[i])    {    sumSq    +=    dev    *    expected[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }	  	compilable	  [FE]  AssertionFailedError  	49	6	add
765	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i];        }        if(dev    <    expected[i])    {    sumSq    +=    dev    *    expected[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }	  	compilable	  [FE]  AssertionFailedError  	49	6	add
766	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  If(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  If(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i];        }        if(dev    <    expected[i])    {    sumSq    +=    dev    *    expected[i];    }    If(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }	  	non-compiled	[CE]  ';'  expected	49	None	add
767	[BUG]  [BUGGY]  if(dev  <  observed[i])  {  sumSq  +=  observed[i]  *  DEV;  }  [CE]  cannot  find  symbol  DEV  [FE]        AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(dev  <  observed[i])  {  sumSq  +=  observed[i]  *  DEV;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	if(dev  <  observed[i])  {  sumSq  +=  observed[i]  *  DEV;  }	          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    DEv;    }    	non-compiled	[CE]  cannot  find  symbol  DEV	126	None	replace
768	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i];  totalSq  +=  dev  /  observed[i];  [CE]  cannot  find  symbol  totalSq  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i];  totalSq  +=  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    observed[i];    totalSq  +=  dev  /  observed[i];	  	non-compiled	[CE]  cannot  find  symbol  totalSq	60	None	add
769	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i];  sumSq  +=  dev  -  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    dev    /    observed[i];    sumSq  +=  dev  -  observed[i];	  	compilable	  [FE]  AssertionFailedError  	60	6	add
770	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i];  sumSq  +=  dev  -  observed[i];  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i];  sumSq  +=  dev  -  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    observed[i];    sumSq  +=  dev  -  observed[i];	  	compilable	  [FE]  AssertionFailedError  	60	6	add
771	[BUG]  [BUGGY]  sumSq  +=  dev  *  dev  /  observed[i];  SumSq  +=  dev  *  dev  *  observed[i];  [CE]  cannot  find  symbol  SumSq  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  dev  /  observed[i];  SumSq  +=  dev  *  dev  *  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  dev  /  observed[i];  SumSq  +=  dev  *  dev  *  observed[i];	  sumSq    +=    dev    /    dev    /    observed[i];    SumSq    +=    dev    /    dev    /    observed[i];    	non-compiled	[CE]  cannot  find  symbol  SumSq	40	None	replace
772	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i]  /  2  +  1;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  *  observed[i]  /  2  +  1;	  sumSq    +=    dev    *    observed[i]    /    2;    	compilable	  [FE]  AssertionFailedError  	100	6	replace
773	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i]  /  2  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i]  /  2  +  1;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  observed[i]  /  2  +  1;	  sumSq    +=    dev    *    observed[i]    /    2;    	compilable	  [FE]  AssertionFailedError  	100	6	replace
774	[BUG]  [BUGGY]  sumSq  +=  observed  *  dev  *  observed[i  -  1];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed  *  dev  *  observed[i  -  1];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed  *  dev  *  observed[i  -  1];	  sumSq    +=    expected    *    observed[i    -    1]    /    dev;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	20	None	replace
775	[BUG]  [BUGGY]  sumSq  +=  1  *  observed[i  -  1]  /  dev;  sumSq  +=  DEV  *  observed[i  -  1]  /  dev;  [CE]  cannot  find  symbol  DEV  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  1  *  observed[i  -  1]  /  dev;  sumSq  +=  DEV  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  1  *  observed[i  -  1]  /  dev;  sumSq  +=  DEV  *  observed[i  -  1]  /  dev;	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq    +=    DEV    *    observed[i    -    1]    /    dev;    	non-compiled	[CE]  cannot  find  symbol  DEV	168	None	replace
776	[BUG]  [BUGGY]  int[]  expected  =  observed[i].length();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  int[]  expected  =  observed[i].length();  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	int[]  expected  =  observed[i].length();	  int[]    expected    =    observed[i].longValue();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	115	None	replace
777	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  /=  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  /=  expected[i];	  sumSq    +=    expected[i];    	compilable	  [FE]  AssertionFailedError  	83	6	replace
778	[BUG]  [BUGGY]  sumSq  /=  expected[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  /=  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  /=  expected[i];	  sumSq    +=    expected[i];    	compilable	  [FE]  AssertionFailedError  	83	6	replace
779	[BUG]  [BUGGY]  sumSq  +=  dev  -  expected[i];  SumSquare  sumSq  +=  dev  -  expected[i];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  -  expected[i];  SumSquare  sumSq  +=  dev  -  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    -    expected[i];    SumSquare  sumSq  +=  dev  -  expected[i];	  	non-compiled	[CE]  ';'  expected	156	None	add
780	[BUG]  [BUGGY]  sumSq  +=  dev  -  expected[i];  totalSq  +=  dev  -  expected[i];  [CE]  cannot  find  symbol  totalSq  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  -  expected[i];  totalSq  +=  dev  -  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    -    expected[i];    totalSq  +=  dev  -  expected[i];	  	non-compiled	[CE]  cannot  find  symbol  totalSq	156	None	add
781	[BUG]  [BUGGY]  sumSq  +=  dev  -  expected[i];  amountSq  +=  dev  -  expected[i];  [CE]  cannot  find  symbol  amountSq  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  -  expected[i];  amountSq  +=  dev  -  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    -    expected[i];    amountSq  +=  dev  -  expected[i];	  	non-compiled	[CE]  cannot  find  symbol  amountSq	156	None	add
782	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i]  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  /  observed[i]  /  dev;  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i]  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  /  observed[i]  /  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    observed[i]    /    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  /  observed[i]  /  dev;  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	163	None	add
783	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i]  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i]  /  dev;  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    observed[i]    /    dev;    for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	163	None	add
784	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i]  /  dev;  int  sumSq  +=  dev  /  observed[i]  /  dev;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i]  /  dev;  int  sumSq  +=  dev  /  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    observed[i]    /    dev;    int  sumSq  +=  dev  /  observed[i]  /  dev;	  	non-compiled	[CE]  ';'  expected	163	None	add
785	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq        +=        dev        *        observed[i]        /        dev;        if(sumSq    >    0.0)    {    sumSq    +=    dev    *    observed[i]    /    dev;    }    sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }	  	compilable	  [FE]  AssertionFailedError  	151	6	add
786	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i]        /        dev;        if(sumSq    >    0.0)    {    sumSq    +=    dev    *    observed[i]    /    dev;    }    sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }	  	compilable	  [FE]  AssertionFailedError  	151	6	add
787	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i]        /        dev;        if(sumSq    >    0.0)    {    sumSq    +=    dev    *    observed[i]    /    dev;    }    sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=	  	non-compiled	[CE]  illegal  start  of  expression	151	None	add
788	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumS  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumS  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i]        /        dev;        if(sumSq    >    0.0)    {    sumSq    +=    dev    *    observed[i]    /    dev;    }    sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumS	  	non-compiled	[CE]  ';'  expected	151	None	add
789	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i]        /        dev;        if(sumSq    >    0.0)    {    sumSq    +=    dev    *    observed[i]    /    dev;    }    sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[	  	non-compiled	[CE]  ']'  expected	151	None	add
790	[BUG]  [BUGGY]  sumSq  +=  observed[i];  SumSq  +=  observed[i];  [CE]  cannot  find  symbol  SumSq  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i];  SumSq  +=  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i];    SumSq  +=  observed[i];	  	non-compiled	[CE]  cannot  find  symbol  SumSq	80	None	add
791	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i];  sumSq  +=  dev  *  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    observed[i];    sumSq  +=  dev  *  observed[i];	  	compilable	  [FE]  AssertionFailedError  	80	6	add
792	[BUG]  [BUGGY]  sumSq  +=  observed[i];  sumSq  +=  dev  *  observed[i];  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i];  sumSq  +=  dev  *  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i];    sumSq  +=  dev  *  observed[i];	  	compilable	  [FE]  AssertionFailedError  	80	6	add
793	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i];  sumSq  +=  dev  *  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    observed[i];    sumSq  +=  dev  *  expected[i];	  	compilable	  [FE]  AssertionFailedError  	80	6	add
794	[BUG]  [BUGGY]  sumSq  +=  observed[i];  sumSq  +=  dev  *  expected[i];  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i];  sumSq  +=  dev  *  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i];    sumSq  +=  dev  *  expected[i];	  	compilable	  [FE]  AssertionFailedError  	80	6	add
795	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i];  sumSq  +=  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    observed[i];    sumSq  +=  expected[i];	  	compilable	  [FE]  AssertionFailedError  	80	6	add
796	[BUG]  [BUGGY]  sumSq  +=  observed[i];  sumSq  +=  expected[i];  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i];  sumSq  +=  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i];    sumSq  +=  expected[i];	  	compilable	  [FE]  AssertionFailedError  	80	6	add
797	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(dev  <  observed[i])  {  sumSq  +=  dev  *  expected[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	if(dev  <  observed[i])  {  sumSq  +=  dev  *  expected[i];  }	          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev    <    expected[i])    {    sumSq    +=    DEv    *    observed[i];    }    	compilable	  [FE]  AssertionFailedError  	185	6	replace
798	[BUG]  [BUGGY]  if(dev  <  observed[i])  {  sumSq  +=  dev  *  expected[i];  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(dev  <  observed[i])  {  sumSq  +=  dev  *  expected[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	if(dev  <  observed[i])  {  sumSq  +=  dev  *  expected[i];  }	          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev    <    expected[i])    {    sumSq    +=    DEv    *    observed[i];    }    	compilable	  [FE]  AssertionFailedError  	185	6	replace
799	[BUG]  [BUGGY]  sumSq  +=  expected  *  expected[i]  /  dev;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected  *  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  expected  *  expected[i]  /  dev;	  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq    +=    dev    *    expected[i]    /    dev;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	13	None	replace
800	[BUG]  [BUGGY]  if(observed[i]  >=  0)  {  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(observed[i]  >=  0)  {  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	if(observed[i]  >=  0)  {  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev;    }    else    {    return    dev;    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
801	[BUG]  [BUGGY]  if(observed[i]  >=  0.0)  {  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(observed[i]  >=  0.0)  {  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	if(observed[i]  >=  0.0)  {  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev;    }    else    {    return    dev;    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
802	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected,  observed[i];  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected,  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  expected,  observed[i];	  sumSq    +=    expected    *    dev    *    observed[i];    	non-compiled	[CE]  ';'  expected	79	None	replace
803	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  dev  *  observed[i  -  1]  /  dev;  totalSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  [CE]  cannot  find  symbol  totalSq  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  dev  *  observed[i  -  1]  /  dev;  totalSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i        -        1]        /        dev;        sumSq    +=    dev    *    observed[i    -    1]    /    dev;    totalSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  totalSq	24	None	add
804	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  SumSq  +=  dev  *  observed[i  -  1]  /  dev;  [CE]  cannot  find  symbol  SumSq  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  dev  *  observed[i  -  1]  /  dev;  SumSq  +=  dev  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i        -        1]        /        dev;        sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  dev  *  observed[i  -  1]  /  dev;  SumSq  +=  dev  *  observed[i  -  1]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  SumSq	24	None	add
805	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  -  observed[i];	  sumSq    +=    dev    -    expected[i];    	compilable	  [FE]  AssertionFailedError  	157	6	replace
806	[BUG]  [BUGGY]  sumSq  +=  dev  -  observed[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  -  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  -  observed[i];	  sumSq    +=    dev    -    expected[i];    	compilable	  [FE]  AssertionFailedError  	157	6	replace
807	[BUG]  [BUGGY]  sumSq  +=  expected  -  dev[i];  [CE]  array  required,  but  double  found  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected  -  dev[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  expected  -  dev[i];	  sumSq    +=    dev    -    expected[i];    	non-compiled	[CE]  array  required,  but  double  found	157	None	replace
808	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    expected[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	16	6	add
809	[BUG]  [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    expected[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	16	6	add
810	[BUG]  [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  sumSQ  +=  expected[i]  /  dev;  [CE]  cannot  find  symbol  sumSQ  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  sumSQ  +=  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    expected[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;  sumSQ  +=  expected[i]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  sumSQ	16	None	add
811	[BUG]  [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  SumSq  +=  expected[i]  /  dev;  [CE]  cannot  find  symbol  SumSq  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  SumSq  +=  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    expected[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;  SumSq  +=  expected[i]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  SumSq	16	None	add
812	[BUG]  [BUGGY]  sumSq  +=  expected[i];  SumSquare  sumSq  +=  expected[i];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected[i];  SumSquare  sumSq  +=  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    expected[i];    SumSquare  sumSq  +=  expected[i];	  	non-compiled	[CE]  ';'  expected	82	None	add
813	[BUG]  [BUGGY]  sumSq  +=  expected[i];  amountSq  +=  expected[i];  [CE]  cannot  find  symbol  amountSq  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected[i];  amountSq  +=  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    expected[i];    amountSq  +=  expected[i];	  	non-compiled	[CE]  cannot  find  symbol  amountSq	82	None	add
814	[BUG]  [BUGGY]  SumSq  +=  dev  *  /  expected[i];  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSq  +=  dev  *  /  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSq  +=  dev  *  /  expected[i];	  SumSq    +=    dev    *    expected[i];    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
815	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(dev  >  expected[i])  {  sumSq  +=  observed[i];  }  else  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	if(dev  >  expected[i])  {  sumSq  +=  observed[i];  }  else  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }	          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    	compilable	  [FE]  AssertionFailedError  	48	6	replace
816	[BUG]  [BUGGY]  if(dev  >  expected[i])  {  sumSq  +=  observed[i];  }  else  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(dev  >  expected[i])  {  sumSq  +=  observed[i];  }  else  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	if(dev  >  expected[i])  {  sumSq  +=  observed[i];  }  else  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }	          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    	compilable	  [FE]  AssertionFailedError  	48	6	replace
817	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(dev  >  expected[i])  {  sumSq  +=  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	if(dev  >  expected[i])  {  sumSq  +=  observed[i];  }	          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    	compilable	  [FE]  AssertionFailedError  	48	6	replace
818	[BUG]  [BUGGY]  if(dev  >  expected[i])  {  sumSq  +=  observed[i];  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(dev  >  expected[i])  {  sumSq  +=  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	if(dev  >  expected[i])  {  sumSq  +=  observed[i];  }	          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    	compilable	  [FE]  AssertionFailedError  	48	6	replace
819	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(dev  >  expected[i])  {  sumSq  +=  observed[i];  }  else  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	if(dev  >  expected[i])  {  sumSq  +=  observed[i];  }  else  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }	          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    	compilable	  [FE]  AssertionFailedError  	48	6	replace
820	[BUG]  [BUGGY]  if(dev  >  expected[i])  {  sumSq  +=  observed[i];  }  else  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(dev  >  expected[i])  {  sumSq  +=  observed[i];  }  else  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	if(dev  >  expected[i])  {  sumSq  +=  observed[i];  }  else  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }	          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    	compilable	  [FE]  AssertionFailedError  	48	6	replace
821	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i  *  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  /  observed[i  *  1]  /  dev;	  sumSq    +=    dev    /    observed[i    -    1]    /    dev;    	compilable	  [FE]  AssertionFailedError  	139	6	replace
822	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i  *  1]  /  dev;  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i  *  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  /  observed[i  *  1]  /  dev;	  sumSq    +=    dev    /    observed[i    -    1]    /    dev;    	compilable	  [FE]  AssertionFailedError  	139	6	replace
823	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  else  {  sumSq  +=  dev  *  dev  /  expected[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  else  {  sumSq  +=  dev  *  dev  /  expected[i];  }	          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    	compilable	  [FE]  AssertionFailedError  	45	6	replace
824	[BUG]  [BUGGY]  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  else  {  sumSq  +=  dev  *  dev  /  expected[i];  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  else  {  sumSq  +=  dev  *  dev  /  expected[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  else  {  sumSq  +=  dev  *  dev  /  expected[i];  }	          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    	compilable	  [FE]  AssertionFailedError  	45	6	replace
825	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  /  dev  /  dev;  sumSq  +=  expected[i]  /  dev  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    observed[i]    /    dev    /    dev;    sumSq  +=  expected[i]  /  dev  /  dev;	  	compilable	  [FE]  AssertionFailedError  	62	6	add
826	[BUG]  [BUGGY]  sumSq  +=  observed[i]  /  dev  /  dev;  sumSq  +=  expected[i]  /  dev  /  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  /  dev  /  dev;  sumSq  +=  expected[i]  /  dev  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i]    /    dev    /    dev;    sumSq  +=  expected[i]  /  dev  /  dev;	  	compilable	  [FE]  AssertionFailedError  	62	6	add
827	[BUG]  [BUGGY]  sumSq  +=  observed[i]  /  dev  /  dev;  totalSq  +=  observed[i]  /  dev  /  dev;  [CE]  cannot  find  symbol  totalSq  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  /  dev  /  dev;  totalSq  +=  observed[i]  /  dev  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i]    /    dev    /    dev;    totalSq  +=  observed[i]  /  dev  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  totalSq	62	None	add
828	[BUG]  [BUGGY]  luate(x,  observed[i],  sumSq)>  dev)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  dev;  }  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  luate(x,  observed[i],  sumSq)>  dev)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	luate(x,  observed[i],  sumSq)>  dev)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  dev;  }	          if(sumSq    >    dev)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    dev    *    dev;    }    	non-compiled	[CE]  not  a  statement	182	None	replace
829	[BUG]  [BUGGY]  luate(x,  observed[i],  sumSq)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  dev;  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  luate(x,  observed[i],  sumSq)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	luate(x,  observed[i],  sumSq)  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  dev;  }	          if(sumSq    >    dev)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    dev    *    dev;    }    	non-compiled	[CE]  ';'  expected	182	None	replace
830	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        <        expected[i])        {        sumSq        +=        observed[i];        }        if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }	  	compilable	  [FE]  AssertionFailedError  	44	6	add
831	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i];        }        if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }	  	compilable	  [FE]  AssertionFailedError  	44	6	add
832	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i];        }        if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
833	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i  /  dev;  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  observed[i  /  dev;	  sumSq    +=    observed[i    *    dev    /    dev;    	non-compiled	[CE]  ']'  expected	21	None	replace
834	[BUG]  [BUGGY]  sumSq  +=  observed[i  *  dev  *  2;  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i  *  dev  *  2;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed[i  *  dev  *  2;	  sumSq    +=    observed[i    *    dev    /    dev;    	non-compiled	[CE]  ']'  expected	21	None	replace
835	[BUG]  [BUGGY]  SumSquare  sumSq  =  sumSq  *  expected[i];  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSquare  sumSq  =  sumSq  *  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSquare  sumSq  =  sumSq  *  expected[i];	  SumSquare    sumSq    =    sumSq    *    observed[i];    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
836	[BUG]  [BUGGY]  SumSquare  sumSq  =  sumSq  *  observed[i]  +  dev;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSquare  sumSq  =  sumSq  *  observed[i]  +  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSquare  sumSq  =  sumSq  *  observed[i]  +  dev;	  SumSquare    sumSq    =    sumSq    *    observed[i];    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
837	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  else  {  sumSq  +=  dev  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  else  {  sumSq  +=  dev  *  dev;  }	          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    	compilable	  [FE]  AssertionFailedError  	52	6	replace
838	[BUG]  [BUGGY]  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  else  {  sumSq  +=  dev  *  dev;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  else  {  sumSq  +=  dev  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  else  {  sumSq  +=  dev  *  dev;  }	          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    	compilable	  [FE]  AssertionFailedError  	52	6	replace
839	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  dev);  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  dev);  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  dev);  }	          for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    ((    double)observed[i]    -    dev);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	3	None	replace
840	[BUG]  [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( "Dev  is  less  than  1: ");  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( "Dev  is  less  than  1: ");  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	int  i  =  0;  i  <  expected.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( "Dev  is  less  than  1: ");  }	  int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(dev))    {    throw    new    IllegalArgumentException(   "Dev    is    less    than    1:   ");    }    	non-compiled	[CE]  >  expected	86	None	replace
841	[BUG]  [BUGGY]  luate(x,  observed[i])  {  sumSq  +=  observed[i];  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  luate(x,  observed[i])  {  sumSq  +=  observed[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	luate(x,  observed[i])  {  sumSq  +=  observed[i];  }	          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev    <    expected[i])    {    sumSq    +=    dev    *    expected[i];    }    	non-compiled	[CE]  ';'  expected	50	None	replace
842	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i]  *  distribution;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i]  *  distribution;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  /  observed[i]  *  distribution;	  sumSq    +=    dev    /    observed[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	61	None	replace
843	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i]  *  distribution.length;  [CE]  cannot  find  symbol  length  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i]  *  distribution.length;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  /  observed[i]  *  distribution.length;	  sumSq    +=    dev    /    observed[i];    	non-compiled	[CE]  cannot  find  symbol  length	61	None	replace
844	[BUG]  [BUGGY]  sumSq  +=  dev  /  expected[i]  /  dev;  int  sumSq  +=  dev  /  expected[i]  /  dev;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  expected[i]  /  dev;  int  sumSq  +=  dev  /  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    expected[i]    /    dev;    int  sumSq  +=  dev  /  expected[i]  /  dev;	  	non-compiled	[CE]  ';'  expected	129	None	add
845	[BUG]  [BUGGY]  sumSq  +=  dev  /  expected[i]  /  dev;  totalSq  +=  dev  /  expected[i]  /  dev;  [CE]  cannot  find  symbol  totalSq  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  expected[i]  /  dev;  totalSq  +=  dev  /  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    expected[i]    /    dev;    totalSq  +=  dev  /  expected[i]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  totalSq	129	None	add
846	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    dev    /    expected[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	129	6	add
847	[BUG]  [BUGGY]  sumSq  +=  dev  /  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    expected[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	129	6	add
848	[BUG]  [BUGGY]  sumSq  +=  expected  *  expected[i]  /  dev;  SumSq  +=  dev  *  expected[i]  /  dev;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected  *  expected[i]  /  dev;  SumSq  +=  dev  *  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  expected  *  expected[i]  /  dev;  SumSq  +=  dev  *  expected[i]  /  dev;	  sumSq    +=    dev    *    expected[i]    /    dev;    SumSq    +=    dev    *    expected[i]    /    dev;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	14	None	replace
849	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);  totalSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);  [CE]  cannot  find  symbol  totalSq  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);  totalSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i        -        1]        /        dev;        sumSq    +=    ((    double)dev    *    observed[i    -    1]    /    dev);    totalSq  +=  dev  *  observed[i  -  1]  /  dev;  sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);	  	non-compiled	[CE]  cannot  find  symbol  totalSq	29	None	add
850	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    ==    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
851	[BUG]  [BUGGY]  sumSq  +=  observed  *  dev  *  expected[i  -  1]  /  dev;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed  *  dev  *  expected[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed  *  dev  *  expected[i  -  1]  /  dev;	  sumSq    +=    observed    *    dev    *    observed[i    -    1]    /    dev;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	19	None	replace
852	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq[i]  =  ((  double)dev  -  observed[i]);  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq[i]  =  ((  double)dev  -  observed[i]);  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq[i]  =  ((  double)dev  -  observed[i]);  }	          for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq[i]    =    ((    double)dev    -    observed[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	2	None	replace
853	[BUG]  [BUGGY]  sumSq  +=  expected  *  observed[i]  /  dev;  SumSq  +=  dev  *  observed[i]  /  dev;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected  *  observed[i]  /  dev;  SumSq  +=  dev  *  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  expected  *  observed[i]  /  dev;  SumSq  +=  dev  *  observed[i]  /  dev;	  sumSq    +=    dev    *    observed[i]    /    dev;    SumSq    +=    dev    *    observed[i]    /    dev;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	8	None	replace
854	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev!=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
855	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev!=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[	  	non-compiled	[CE]  ']'  expected	33	None	add
856	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev!=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  expected[i])  {  sumSq  +=	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
857	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq        +=        dev        *        observed[i]        /        dev;        if(sumSq    >    0)    {    sumSq    +=    dev    *    observed[i]    /    dev;    }    sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }	  	compilable	  [FE]  AssertionFailedError  	149	6	add
858	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i]        /        dev;        if(sumSq    >    0)    {    sumSq    +=    dev    *    observed[i]    /    dev;    }    sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }	  	compilable	  [FE]  AssertionFailedError  	149	6	add
859	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i]        /        dev;        if(sumSq    >    0)    {    sumSq    +=    dev    *    observed[i]    /    dev;    }    sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=	  	non-compiled	[CE]  illegal  start  of  expression	149	None	add
860	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumS  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumS  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i]        /        dev;        if(sumSq    >    0)    {    sumSq    +=    dev    *    observed[i]    /    dev;    }    sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumS	  	non-compiled	[CE]  ';'  expected	149	None	add
861	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i]        /        dev;        if(sumSq    >    0)    {    sumSq    +=    dev    *    observed[i]    /    dev;    }    sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[	  	non-compiled	[CE]  ']'  expected	149	None	add
862	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i]        /        dev;        if(sumSq    >    0)    {    sumSq    +=    dev    *    observed[i]    /    dev;    }    sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	149	None	add
863	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  1  *  observed[i]  /  1;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  1  *  observed[i]  /  1;	  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq    >    0.0)    {    sumSq    +=    dev    *    observed[i]    /    dev;    }    	compilable	  [FE]  AssertionFailedError  	152	6	replace
864	[BUG]  [BUGGY]  sumSq  +=  1  *  observed[i]  /  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  1  *  observed[i]  /  1;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  1  *  observed[i]  /  1;	  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq    >    0.0)    {    sumSq    +=    dev    *    observed[i]    /    dev;    }    	compilable	  [FE]  AssertionFailedError  	152	6	replace
865	[BUG]  [BUGGY]  sumSq  +=  expected  *  observed[i  -  1]  /  dev;  sumSq  +=  desv  *  observed[i  -  1]  /  dev;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected  *  observed[i  -  1]  /  dev;  sumSq  +=  desv  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  expected  *  observed[i  -  1]  /  dev;  sumSq  +=  desv  *  observed[i  -  1]  /  dev;	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq    +=    desv    *    observed[i    -    1]    /    dev;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	175	None	replace
866	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  sumSq  +=  desv  *  observed[i  -  1]  /  dev;  [CE]  cannot  find  symbol  desv  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  sumSq  +=  desv  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  expected[i  -  1]  /  dev;  sumSq  +=  desv  *  observed[i  -  1]  /  dev;	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq    +=    desv    *    observed[i    -    1]    /    dev;    	non-compiled	[CE]  cannot  find  symbol  desv	175	None	replace
867	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  SumSq  +=  dev  *  observed[i  -  1]  /  dev;  [CE]  cannot  find  symbol  SumSq  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  SumSq  +=  dev  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  expected[i  -  1]  /  dev;  SumSq  +=  dev  *  observed[i  -  1]  /  dev;	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    SumSq    +=    dev    *    observed[i    -    1]    /    dev;    	non-compiled	[CE]  cannot  find  symbol  SumSq	26	None	replace
868	[BUG]  [BUGGY]  sumSq  +=  observed[i  *  dev  /  dev  +  1;  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i  *  dev  /  dev  +  1;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed[i  *  dev  /  dev  +  1;	  sumSq    +=    observed[i    *    dev    /    dev;    	non-compiled	[CE]  ']'  expected	21	None	replace
869	[BUG]  [BUGGY]  sumSq  +=  observed[i]  *  dev  /  dev;  sumSq  +=  observed[i]  *  DEV  /  dev;  [CE]  cannot  find  symbol  DEV  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  dev  /  dev;  sumSq  +=  observed[i]  *  DEV  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i]    *    dev    /    dev;    sumSq  +=  observed[i]  *  DEV  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  DEV	74	None	add
870	[BUG]  [BUGGY]  sumSq  +=  observed[i]  *  dev  /  dev;  sumSq  +=  observed[i]  *  desv  /  dev;  [CE]  cannot  find  symbol  desv  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  dev  /  dev;  sumSq  +=  observed[i]  *  desv  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i]    *    dev    /    dev;    sumSq  +=  observed[i]  *  desv  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  desv	74	None	add
871	[BUG]  [BUGGY]  sumSq  +=  observed  *  dev.length  /  dev[i];  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed  *  dev.length  /  dev[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed  *  dev.length  /  dev[i];	  sumSq    +=    observed    *    total    /    dev[i];    	non-compiled	[CE]  double  cannot  be  dereferenced	113	None	replace
872	[BUG]  [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  *  dev  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expect[i]  *  dev  /  dev;  [CE]  cannot  find  symbol  expect  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  *  dev  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expect[i]  *  dev  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    expected[i]    *    dev    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expect[i]  *  dev  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  expect	166	None	add
873	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i];  amountSq  +=  dev  *  observed[i];  [CE]  cannot  find  symbol  amountSq  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i];  amountSq  +=  dev  *  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i];    amountSq  +=  dev  *  observed[i];	  	non-compiled	[CE]  cannot  find  symbol  amountSq	117	None	add
874	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i];  sumSq  +=  DEV  *  observed[i];  [CE]  cannot  find  symbol  DEV  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i];  sumSq  +=  DEV  *  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i];    sumSq  +=  DEV  *  observed[i];	  	non-compiled	[CE]  cannot  find  symbol  DEV	117	None	add
875	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i];  amountSq  +=  dev  *  expected[i];  [CE]  cannot  find  symbol  amountSq  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected[i];  amountSq  +=  dev  *  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    expected[i];    amountSq  +=  dev  *  expected[i];	  	non-compiled	[CE]  cannot  find  symbol  amountSq	69	None	add
876	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i];  sumSq  +=  DEV  *  expected[i];  [CE]  cannot  find  symbol  DEV  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected[i];  sumSq  +=  DEV  *  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    expected[i];    sumSq  +=  DEV  *  expected[i];	  	non-compiled	[CE]  cannot  find  symbol  DEV	69	None	add
877	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i]  /  dev;  amountSq  +=  dev  /  observed[i]  /  dev;  [CE]  cannot  find  symbol  amountSq  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i]  /  dev;  amountSq  +=  dev  /  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    observed[i]    /    dev;    amountSq  +=  dev  /  observed[i]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  amountSq	163	None	add
878	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i]  /  dev;  totalSq  +=  dev  /  observed[i]  /  dev;  [CE]  cannot  find  symbol  totalSq  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i]  /  dev;  totalSq  +=  dev  /  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    observed[i]    /    dev;    totalSq  +=  dev  /  observed[i]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  totalSq	163	None	add
879	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i]  /  dev;  sumSq  +=  DEV  /  observed[i]  /  dev;  [CE]  cannot  find  symbol  DEV  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i]  /  dev;  sumSq  +=  DEV  /  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    observed[i]    /    dev;    sumSq  +=  DEV  /  observed[i]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  DEV	163	None	add
880	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }  if(dev  >>  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }  if(dev  >>  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    else    {    return    dev;    }    if(dev  >>  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	177	None	add
881	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	177	6	add
882	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	177	6	add
883	[BUG]  [BUGGY]  int  i  =  0;  i  <  dev.length;  i++)  {  if(!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  int  i  =  0;  i  <  dev.length;  i++)  {  if(!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	int  i  =  0;  i  <  dev.length;  i++)  {  if(!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }	  int    i    =    0;    i    <    observed.length;    i++)    {    if(!isNegative(dev))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	108	None	replace
884	[BUG]  [BUGGY]  double[]  expected  =  observed[i].longValue()  /  dev;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  double[]  expected  =  observed[i].longValue()  /  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	double[]  expected  =  observed[i].longValue()  /  dev;	  double[]    expected    =    observed[i].longValue();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	186	None	replace
885	[BUG]  [BUGGY]  double[]  expected  =  observed[i].longValue()  +  dev;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  double[]  expected  =  observed[i].longValue()  +  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	double[]  expected  =  observed[i].longValue()  +  dev;	  double[]    expected    =    observed[i].longValue();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	186	None	replace
886	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  2  *  observed[i]  /  2;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  2  *  observed[i]  /  2;	  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq    +=    dev    *    expected[i]    /    dev;    	compilable	  [FE]  AssertionFailedError  	13	6	replace
887	[BUG]  [BUGGY]  sumSq  +=  2  *  observed[i]  /  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  2  *  observed[i]  /  2;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  2  *  observed[i]  /  2;	  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq    +=    dev    *    expected[i]    /    dev;    	compilable	  [FE]  AssertionFailedError  	13	6	replace
888	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  1  *  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  1  *  dev  /  observed[i];	  sumSq    +=    dev    /    dev    /    observed[i];    sumSq    +=    dev    *    dev    /    observed[i];    	compilable	  [FE]  AssertionFailedError  	161	6	replace
889	[BUG]  [BUGGY]  sumSq  +=  1  *  dev  /  observed[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  1  *  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  1  *  dev  /  observed[i];	  sumSq    +=    dev    /    dev    /    observed[i];    sumSq    +=    dev    *    dev    /    observed[i];    	compilable	  [FE]  AssertionFailedError  	161	6	replace
890	[BUG]  [BUGGY]  ((  ChiSquareDistribution)dev).doubleValue()  /  dev;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  ((  ChiSquareDistribution)dev).doubleValue()  /  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	((  ChiSquareDistribution)dev).doubleValue()  /  dev;	  ((    ChiSquareDistribution)dev).doubleValue();    	non-compiled	[CE]  not  a  statement	88	None	replace
891	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i]  /  2;  sumSq  +=  DEV  *  observed[i]  /  2;  [CE]  cannot  find  symbol  DEV  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i]  /  2;  sumSq  +=  DEV  *  observed[i]  /  2;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i]    /    2;    sumSq  +=  DEV  *  observed[i]  /  2;	  	non-compiled	[CE]  cannot  find  symbol  DEV	99	None	add
892	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i]  /  2;  ((  double)dev  *  observed[i]  /  2);  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i]  /  2;  ((  double)dev  *  observed[i]  /  2);  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i]    /    2;    ((  double)dev  *  observed[i]  /  2);	  	non-compiled	[CE]  not  a  statement	99	None	add
893	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i].doubleValue();  [CE]  long  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i].doubleValue();  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  /  observed[i].doubleValue();	  sumSq    +=    dev    /    observed[i];    	non-compiled	[CE]  long  cannot  be  dereferenced	61	None	replace
894	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  DEV  /  expected[i];  }  else  {  return  dev;  }  [CE]  cannot  find  symbol  DEV  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  DEV  /  expected[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev    /    expected[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  DEV  /  expected[i];  }  else  {  return  dev;  }	  	non-compiled	[CE]  cannot  find  symbol  DEV	93	None	add
895	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[  [CE]  ']'  expected  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        dev        *        observed[i];        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[	  	non-compiled	[CE]  ']'  expected	105	None	add
896	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        dev        *        observed[i];        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed	  	non-compiled	[CE]  ';'  expected	105	None	add
897	[BUG]  [BUGGY]  SumSquareDev  x  =  sumSq  +  observed[i];  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSquareDev  x  =  sumSq  +  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSquareDev  x  =  sumSq  +  observed[i];	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev    >>    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
898	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	122	6	add
899	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	122	6	add
900	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *	  	non-compiled	[CE]  illegal  start  of  expression	122	None	add
901	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i]  -  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  *  observed[i]  -  dev;	  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq    +=    dev    *    observed[i]    /    dev;    	compilable	  [FE]  AssertionFailedError  	181	6	replace
902	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i]  -  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i]  -  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  observed[i]  -  dev;	  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq    +=    dev    *    observed[i]    /    dev;    	compilable	  [FE]  AssertionFailedError  	181	6	replace
903	[BUG]  [BUGGY]  int  i  =  0;  i  <  dev.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  int  i  =  0;  i  <  dev.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	int  i  =  0;  i  <  dev.length;  i++)  {  if(!isPositive(expected))  {  throw  new  IllegalArgumentException( " ");  }	  int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	65	None	replace
904	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  if(dev  >>  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  if(dev  >>  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    expected[i];    }    else    {    return    dev;    }    if(dev  >>  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	131	None	add
905	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    expected[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	131	6	add
906	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    expected[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	131	6	add
907	[BUG]  [BUGGY]  SumSq  +=  observed[i]  /  dev;  [CE]  cannot  find  symbol  SumSq  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSq  +=  observed[i]  /  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSq  +=  observed[i]  /  dev;	  SumSq    +=    observed[i]    *    dev;    	non-compiled	[CE]  cannot  find  symbol  SumSq	71	None	replace
908	[BUG]  [BUGGY]  sumSq  +=  expected  *  dev  *  observed.length;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected  *  dev  *  observed.length;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  expected  *  dev  *  observed.length;	  sumSq    +=    expected    *    dev    *    dev;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	76	None	replace
909	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[  [CE]  ']'  expected  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        dev        *        observed[i];        }        if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  observed[	  	non-compiled	[CE]  ']'  expected	102	None	add
910	[BUG]  [BUGGY]  sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  *  dev  /  observed[i];  sumSq  +=  dev  /  desv  /  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];  [CE]  cannot  find  symbol  desv  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  *  dev  /  observed[i];  sumSq  +=  dev  /  desv  /  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        /        dev        /        observed[i];        sumSq    +=    dev    *    dev    /    observed[i];    sumSq  +=  dev  /  desv  /  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];	  	non-compiled	[CE]  cannot  find  symbol  desv	160	None	add
911	[BUG]  [BUGGY]  sumSq  +=  dev  /  dev  *  observed[i];  ((  double)dev  /  dev  *  observed[i]);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  dev  *  observed[i];  ((  double)dev  /  dev  *  observed[i]);  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    dev    *    observed[i];    ((  double)dev  /  dev  *  observed[i]);	  	non-compiled	[CE]  not  a  statement	153	None	add
912	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed.length  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  *  observed.length  /  observed[i];	  sumSq    +=    dev    *    expected    /    observed[i];    	compilable	  [FE]  AssertionFailedError  	193	6	replace
913	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed.length  /  observed[i];  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed.length  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  observed.length  /  observed[i];	  sumSq    +=    dev    *    expected    /    observed[i];    	compilable	  [FE]  AssertionFailedError  	193	6	replace
914	[BUG]  [BUGGY]  sumSq  +=  observed[i];  amountSq  +=  observed[i];  [CE]  cannot  find  symbol  amountSq  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i];  amountSq  +=  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i];    amountSq  +=  observed[i];	  	non-compiled	[CE]  cannot  find  symbol  amountSq	80	None	add
915	[BUG]  [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expect[i]  /  dev;  [CE]  cannot  find  symbol  expect  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  expected[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expect[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    expected[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  expect[i]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  expect	16	None	add
916	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed.length  *  dev[i];  [CE]  array  required,  but  double  found  [FE]                AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed.length  *  dev[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  observed.length  *  dev[i];	  sumSq    +=    dev    *    expected    *    dev[i];    	non-compiled	[CE]  array  required,  but  double  found	192	None	replace
917	[BUG]  [BUGGY]  int  i  =  0;  i  <  dev.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  int  i  =  0;  i  <  dev.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	int  i  =  0;  i  <  dev.length;  i++)  {  if(!isPositive(dev))  {  throw  new  IllegalArgumentException( " ");  }	  int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(dev))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	23	None	replace
918	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  dev  /  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  observed[i]  *  dev  /  expected[i];	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    	compilable	  [FE]  AssertionFailedError  	90	6	replace
919	[BUG]  [BUGGY]  sumSq  +=  observed[i]  *  dev  /  expected[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  dev  /  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed[i]  *  dev  /  expected[i];	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    	compilable	  [FE]  AssertionFailedError  	90	6	replace
920	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  expected[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  /  expected[i  -  1]  /  dev;	  sumSq    +=    dev    *    expected[i    -    1]    /    dev;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	137	6	replace
921	[BUG]  [BUGGY]  sumSq  +=  dev  /  expected[i  -  1]  /  dev;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  expected[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  /  expected[i  -  1]  /  dev;	  sumSq    +=    dev    *    expected[i    -    1]    /    dev;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	137	6	replace
922	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i  /  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  *  observed[i  /  1]  /  dev;	  sumSq    +=    dev    *    expected[i    -    1]    /    dev;    	compilable	  [FE]  AssertionFailedError  	137	6	replace
923	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i  /  1]  /  dev;  [FE]  AssertionFailedError  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i  /  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  observed[i  /  1]  /  dev;	  sumSq    +=    dev    *    expected[i    -    1]    /    dev;    	compilable	  [FE]  AssertionFailedError  	137	6	replace
924	[BUG]  [BUGGY]  long[]  expected  =  observed[i].doubleValue()  +  dev;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  long[]  expected  =  observed[i].doubleValue()  +  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	long[]  expected  =  observed[i].doubleValue()  +  dev;	  long[]    expected    =    observed[i].doubleValue();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	114	None	replace
925	[BUG]  [BUGGY]  SumSquare  sumSq  =  sumSq  +  dev  *  observed[i];  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSquare  sumSq  =  sumSq  +  dev  *  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSquare  sumSq  =  sumSq  +  dev  *  observed[i];	          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev    >=    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
926	[BUG]  [BUGGY]  bucket  =  sumSq  +  dev  *  observed[i];  [CE]  cannot  find  symbol  bucket  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  bucket  =  sumSq  +  dev  *  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	bucket  =  sumSq  +  dev  *  observed[i];	          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    if(dev    >=    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    	non-compiled	[CE]  cannot  find  symbol  bucket	106	None	replace
927	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev!=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	91	6	add
928	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev!=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	91	6	add
929	[BUG]  [BUGGY]  SumSq  +=  dev  *  dev  /  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];  [CE]  cannot  find  symbol  SumSq  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSq  +=  dev  *  dev  /  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSq  +=  dev  *  dev  /  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];	  sumSq    +=    dev    /    dev    /    observed[i];    sumSq    +=    dev    /    dev    /    observed[i];    	non-compiled	[CE]  cannot  find  symbol  SumSq	39	None	replace
930	[BUG]  [BUGGY]  if(observed[i]  <  =  0)  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(observed[i]  <  =  0)  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	if(observed[i]  <  =  0)  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev!=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
931	[BUG]  [BUGGY]  sumSq  +=  observed[i]  /  dev;  amountSq  +=  observed[i]  /  dev;  [CE]  cannot  find  symbol  amountSq  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  /  dev;  amountSq  +=  observed[i]  /  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i]    /    dev;    amountSq  +=  observed[i]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  amountSq	183	None	add
932	[BUG]  [BUGGY]  sumSq  +=  observed[i]  /  dev;  totalSq  +=  observed[i]  /  dev;  [CE]  cannot  find  symbol  totalSq  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  /  dev;  totalSq  +=  observed[i]  /  dev;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i]    /    dev;    totalSq  +=  observed[i]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  totalSq	183	None	add
933	[BUG]  [BUGGY]  sumSq  +=  observed[i]  /  dev;  sumSq  +=  observed[i]  /  DEV;  [CE]  cannot  find  symbol  DEV  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  /  dev;  sumSq  +=  observed[i]  /  DEV;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i]    /    dev;    sumSq  +=  observed[i]  /  DEV;	  	non-compiled	[CE]  cannot  find  symbol  DEV	183	None	add
934	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        <        expected[i])        {        sumSq        +=        observed[i];        }        if(dev    <    expected[i])    {    sumSq    +=    dev    *    expected[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }	  	compilable	  [FE]  AssertionFailedError  	49	6	add
935	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i];        }        if(dev    <    expected[i])    {    sumSq    +=    dev    *    expected[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }	  	compilable	  [FE]  AssertionFailedError  	49	6	add
936	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i];        }        if(dev    <    expected[i])    {    sumSq    +=    dev    *    expected[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[	  	non-compiled	[CE]  ']'  expected	49	None	add
937	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i]  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i]  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i];        }        if(dev    <    expected[i])    {    sumSq    +=    dev    *    expected[i];    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i];  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  expected[i]	  	non-compiled	[CE]  ';'  expected	49	None	add
938	[BUG]  [BUGGY]  sumSq  +=  observed[i]  *  dev;  if(dev  >  0.0)  {  sumSq  +=  observed[i]  *  dev;  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  dev;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  dev;  if(dev  >  0.0)  {  sumSq  +=  observed[i]  *  dev;  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i]    *    dev;    if(dev  >  0.0)  {  sumSq  +=  observed[i]  *  dev;  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  dev;  }	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
939	[BUG]  [BUGGY]  sumSq  +=  observed[i]  *  dev;  if(dev  >  0.0)  {  sumSq  +=  observed[i]  *  dev;  }  else  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  *  dev;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  dev;  if(dev  >  0.0)  {  sumSq  +=  observed[i]  *  dev;  }  else  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i]    *    dev;    if(dev  >  0.0)  {  sumSq  +=  observed[i]  *  dev;  }  else  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  sumSq  +=  observed[i]  *  dev;  }	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
940	[BUG]  [BUGGY]  sumSq  +=  observed[i]  *  dev;  if(dev  >  0.0)  {  sumSq  +=  observed[i]  *  dev;  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  dev;  if(dev  >  0.0)  {  sumSq  +=  observed[i]  *  dev;  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i]    *    dev;    if(dev  >  0.0)  {  sumSq  +=  observed[i]  *  dev;  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
941	[BUG]  [BUGGY]  sumSq  +=  observed[i]  *  dev;  if(dev  >  0.0)  {  sumSq  +=  observed[i]  *  dev;  }  else  {  for(int  i  =  0;  i  <  observed.length;  ++i)  {  sumSq  +=  observed[i]  *  dev;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  *  dev;  if(dev  >  0.0)  {  sumSq  +=  observed[i]  *  dev;  }  else  {  for(int  i  =  0;  i  <  observed.length;  ++i)  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i]    *    dev;    if(dev  >  0.0)  {  sumSq  +=  observed[i]  *  dev;  }  else  {  for(int  i  =  0;  i  <  observed.length;  ++i)  {  sumSq  +=  observed[i]  *  dev;  }	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
942	[BUG]  [BUGGY]  SumSquare  sumSq  +=  dev  /  expected[i];  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  SumSquare  sumSq  +=  dev  /  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	SumSquare  sumSq  +=  dev  /  expected[i];	  SumSquare    sumSq    +=    dev    *    expected[i];    	non-compiled	[CE]  ';'  expected	145	None	replace
943	[BUG]  [BUGGY]  ((  ChiSquareDistribution)dev).set(dev);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  ((  ChiSquareDistribution)dev).set(dev);  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	((  ChiSquareDistribution)dev).set(dev);	  ((    ChiSquareDistribution)dev).set();    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
944	[BUG]  [BUGGY]  ((  ChiSquareDistribution)dev).clear();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  ((  ChiSquareDistribution)dev).clear();  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	((  ChiSquareDistribution)dev).clear();	  ((    ChiSquareDistribution)dev).set();    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
945	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i]  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  *  observed[i]  /  observed[i];	  sumSq    +=    expected    *    observed[i]    /    dev;    	compilable	  [FE]  AssertionFailedError  	101	6	replace
946	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i]  /  observed[i];  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i]  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  observed[i]  /  observed[i];	  sumSq    +=    expected    *    observed[i]    /    dev;    	compilable	  [FE]  AssertionFailedError  	101	6	replace
947	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i]  /  observed.length;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  *  observed[i]  /  observed.length;	  sumSq    +=    expected    *    observed[i]    /    dev;    	compilable	  [FE]  AssertionFailedError  	101	6	replace
948	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i]  /  observed.length;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i]  /  observed.length;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  observed[i]  /  observed.length;	  sumSq    +=    expected    *    observed[i]    /    dev;    	compilable	  [FE]  AssertionFailedError  	101	6	replace
949	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  2  *  observed[i  -  1]  /  2;  sumSq  +=  2  *  observed[i  -  1]  /  2;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  2  *  observed[i  -  1]  /  2;  sumSq  +=  2  *  observed[i  -  1]  /  2;	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq    +=    dev    *    observed[i    -    1]    /    dev;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	25	6	replace
950	[BUG]  [BUGGY]  sumSq  +=  2  *  observed[i  -  1]  /  2;  sumSq  +=  2  *  observed[i  -  1]  /  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  2  *  observed[i  -  1]  /  2;  sumSq  +=  2  *  observed[i  -  1]  /  2;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  2  *  observed[i  -  1]  /  2;  sumSq  +=  2  *  observed[i  -  1]  /  2;	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq    +=    dev    *    observed[i    -    1]    /    dev;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	25	6	replace
951	[BUG]  [BUGGY]  sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  desv  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  [CE]  cannot  find  symbol  desv  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  /  dev  /  observed[i];  sumSq  +=  dev  /  desv  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        /        dev        /        observed[i];        sumSq    +=    dev    /    dev    /    observed[i];    sumSq  +=  dev  /  desv  /  observed[i];  sumSq  +=  dev  /  dev  /  observed[i];	  	non-compiled	[CE]  cannot  find  symbol  desv	38	None	add
952	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        <        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	56	6	add
953	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	56	6	add
954	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i	  	non-compiled	[CE]  ']'  expected	56	None	add
955	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    dev    *    observed[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	180	6	add
956	[BUG]  [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    dev    *    observed[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	180	6	add
957	[BUG]  [BUGGY]  sumSq  +=  desv  *  observed[i  -  1]  /  dev;  [CE]  cannot  find  symbol  desv  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  desv  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  desv  *  observed[i  -  1]  /  dev;	  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq    +=    desv    *    observed[i    -    1]    /    dev;    	non-compiled	[CE]  cannot  find  symbol  desv	175	None	replace
958	[BUG]  [BUGGY]  sumSq  +=  dev  *  DEV  /  expected[i];  [CE]  cannot  find  symbol  DEV  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  DEV  /  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  DEV  /  expected[i];	  sumSq    +=    dev    /    expected[i];    	non-compiled	[CE]  cannot  find  symbol  DEV	111	None	replace
959	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  1  *  observed[i]  /  dev;  sumSq  +=  1  *  observed[i]  /  2;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  1  *  observed[i]  /  dev;  sumSq  +=  1  *  observed[i]  /  2;	  sumSq    +=    dev    *    observed[i]    /    dev;    sumSq    +=    DEV    *    observed[i]    /    dev;    	compilable	  [FE]  AssertionFailedError  	190	6	replace
960	[BUG]  [BUGGY]  sumSq  +=  1  *  observed[i]  /  dev;  sumSq  +=  1  *  observed[i]  /  2;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  1  *  observed[i]  /  dev;  sumSq  +=  1  *  observed[i]  /  2;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  1  *  observed[i]  /  dev;  sumSq  +=  1  *  observed[i]  /  2;	  sumSq    +=    dev    *    observed[i]    /    dev;    sumSq    +=    DEV    *    observed[i]    /    dev;    	compilable	  [FE]  AssertionFailedError  	190	6	replace
961	[BUG]  [BUGGY]  sumSq  +=  observed[i]  /  dev  /  dev;  amountSq  +=  observed[i]  /  dev  /  dev;  [CE]  cannot  find  symbol  amountSq  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed[i]  /  dev  /  dev;  amountSq  +=  observed[i]  /  dev  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    observed[i]    /    dev    /    dev;    amountSq  +=  observed[i]  /  dev  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  amountSq	62	None	add
962	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  DEV  *  dev;  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  DEV  *  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  DEV  *  dev;  }	          if(sumSq    >    dev)    {    for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    dev    *    dev;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	182	None	replace
963	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  observed.length;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq  +=  dev  *  observed[i  -  1]  /  observed.length;	  sumSq    +=    expected    *    observed[i    -    1]    /    dev;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	6	replace
964	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  observed.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  observed.length;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  observed[i  -  1]  /  observed.length;	  sumSq    +=    expected    *    observed[i    -    1]    /    dev;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	6	replace
965	[BUG]  [BUGGY]  sumSq  +=  expected[i]  *  dev;  if(dev  >  0.0)  {  sumSq  +=  expected[i]  *  dev;  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  dev;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected[i]  *  dev;  if(dev  >  0.0)  {  sumSq  +=  expected[i]  *  dev;  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    expected[i]    *    dev;    if(dev  >  0.0)  {  sumSq  +=  expected[i]  *  dev;  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i]  *  dev;  }	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
966	[BUG]  [BUGGY]  sumSq  +=  expected[i]  *  dev;  if(dev  >  0.0)  {  sumSq  +=  expected[i]  *  dev;  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected[i]  *  dev;  if(dev  >  0.0)  {  sumSq  +=  expected[i]  *  dev;  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    expected[i]    *    dev;    if(dev  >  0.0)  {  sumSq  +=  expected[i]  *  dev;  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
967	[BUG]  [BUGGY]  sumSq  +=  expected[i]  *  dev;  if(dev  >  0.0)  {  sumSq  +=  expected[i]  *  dev;  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  *  dev;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected[i]  *  dev;  if(dev  >  0.0)  {  sumSq  +=  expected[i]  *  dev;  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    expected[i]    *    dev;    if(dev  >  0.0)  {  sumSq  +=  expected[i]  *  dev;  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  expected[i]  *  dev;  }	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
968	[BUG]  [BUGGY]  sumSq  +=  expected[i]  *  dev;  if(dev  >  0.0)  {  sumSq  +=  expected[i]  *  dev;  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  dev;  }  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected[i]  *  dev;  if(dev  >  0.0)  {  sumSq  +=  expected[i]  *  dev;  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    expected[i]    *    dev;    if(dev  >  0.0)  {  sumSq  +=  expected[i]  *  dev;  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  long[i]  *  dev;  }	  	non-compiled	[CE]  ']'  expected	72	None	add
969	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i]  /  dev[i];  [CE]  array  required,  but  double  found  [FE]                  AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected[i]  /  dev[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  expected[i]  /  dev[i];	  sumSq    +=    dev    *    observed    /    dev[i];    	non-compiled	[CE]  array  required,  but  double  found	112	None	replace
970	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i]  /  distribution.doubleValue();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i]  /  distribution.doubleValue();  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  observed[i]  /  distribution.doubleValue();	  sumSq    +=    dev    *    observed[i]    /    distribution;    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
971	[BUG]  [BUGGY]  int  i  =  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  int  i  =  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	int  i  =  observed[i];  sumSq  +=  dev  *  dev  /  observed[i];	  sumSq    +=    dev    /    dev    /    observed[i];    int    i    =    observed[i];    sumSq    +=    dev    /    dev    /    observed[i];    	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	43	None	replace
972	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i];  }  AssertionFailedError  <  AssertionFailedError  >>   "Unexpected  array  lengths  incorrect ");  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i];  }  AssertionFailedError  <  AssertionFailedError  >>   "Unexpected  array  lengths  incorrect ");  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  dev  *  observed[i];  }  AssertionFailedError  <  AssertionFailedError  >>   "Unexpected  array  lengths  incorrect ");	          if(dev    <    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    AssertionFailedError    <    AssertionFailedError    >>       "Unexpected    array    lengths    incorrect   ");    	non-compiled	[CE]  not  a  statement	125	None	replace
973	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	12	6	add
974	[BUG]  [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  expected[i]  /  dev;  sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        expected[i]        /        dev;        sumSq    +=    dev    *    expected[i]    /    dev;    sumSq  +=  dev  *  observed[i]  /  dev;  sumSq  +=  dev  *  expected[i]  /  dev;	  	compilable	  [FE]  AssertionFailedError  	12	6	add
975	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    ==    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==	  	non-compiled	[CE]  ')'  expected	36	None	add
976	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    ==    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	36	6	add
977	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    ==    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	36	6	add
978	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    ==    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[	  	non-compiled	[CE]  ']'  expected	36	None	add
979	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    ==    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	36	6	add
980	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    ==    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	36	6	add
981	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[i  [CE]  ']'  expected  [FE]            AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[i  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    ==    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  ==  expected[i])  {  sumSq  +=  observed[i	  	non-compiled	[CE]  ']'  expected	36	None	add
982	[BUG]  [BUGGY]  sumSq  +=  reported  *  dev  *  observed[i  -  1]  /  dev;  [CE]  cannot  find  symbol  reported  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  reported  *  dev  *  observed[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  reported  *  dev  *  observed[i  -  1]  /  dev;	  sumSq    +=    observed    *    dev    *    observed[i    -    1]    /    dev;    	non-compiled	[CE]  cannot  find  symbol  reported	19	None	replace
983	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);  sumSq  +=  DEV  *  observed[i  -  1]  /  dev;  sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);  [CE]  cannot  find  symbol  DEV  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i    -    1]    /    dev;    sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);  sumSq  +=  DEV  *  observed[i  -  1]  /  dev;  sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i        -        1]        /        dev;        sumSq    +=    ((    double)dev    *    observed[i    -    1]    /    dev);    sumSq  +=  DEV  *  observed[i  -  1]  /  dev;  sumSq  +=  ((  double)dev  *  observed[i  -  1]  /  dev);	  	non-compiled	[CE]  cannot  find  symbol  DEV	29	None	add
984	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  DEV;  }  else  {  return  dev;  }  [CE]  cannot  find  symbol  DEV  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  DEV;  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev;    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  DEV;  }  else  {  return  dev;  }	  	non-compiled	[CE]  cannot  find  symbol  DEV	134	None	add
985	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  (dev  *  expected[i]);  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev;    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  (dev  *  expected[i]);  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	134	6	add
986	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  (dev  *  expected[i]);  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  (dev  *  expected[i]);  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev;    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  (dev  *  expected[i]);  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	134	6	add
987	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i];  amountSq  +=  dev  /  observed[i];  [CE]  cannot  find  symbol  amountSq  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i];  amountSq  +=  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    observed[i];    amountSq  +=  dev  /  observed[i];	  	non-compiled	[CE]  cannot  find  symbol  amountSq	60	None	add
988	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i];  sumSq  +=  DEV  /  observed[i];  [CE]  cannot  find  symbol  DEV  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i];  sumSq  +=  DEV  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    observed[i];    sumSq  +=  DEV  /  observed[i];	  	non-compiled	[CE]  cannot  find  symbol  DEV	60	None	add
989	[BUG]  [BUGGY]  sumSq  +=  dev  *  dev  /  observed[i];  sumSq  +=  DEV  *  dev  /  observed[i];  [CE]  cannot  find  symbol  DEV  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  dev  /  observed[i];  sumSq  +=  DEV  *  dev  /  observed[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    dev    /    observed[i];    sumSq  +=  DEV  *  dev  /  observed[i];	  	non-compiled	[CE]  cannot  find  symbol  DEV	58	None	add
990	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev!=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	33	6	add
991	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev!=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	33	6	add
992	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev!=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	33	6	add
993	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev!=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	33	6	add
994	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev!=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev!=	  	non-compiled	[CE]  ')'  expected	33	None	add
995	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  2;  if(dev  >  0.0)  {  sumSq  +=  dev  *  observed[i  -  1]  /  2;  }  else  {  sumSq  +=  dev  *  observed[i  -  1]  /  2;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    dev    *    observed[i    -    1]    /    2;    if(dev  >  0.0)  {  sumSq  +=  dev  *  observed[i  -  1]  /  2;  }  else  {  sumSq  +=  dev  *  observed[i  -  1]  /  2;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	188	6	add
996	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  2;  if(dev  >  0.0)  {  sumSq  +=  dev  *  observed[i  -  1]  /  2;  }  else  {  sumSq  +=  dev  *  observed[i  -  1]  /  2;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  2;  if(dev  >  0.0)  {  sumSq  +=  dev  *  observed[i  -  1]  /  2;  }  else  {  sumSq  +=  dev  *  observed[i  -  1]  /  2;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i    -    1]    /    2;    if(dev  >  0.0)  {  sumSq  +=  dev  *  observed[i  -  1]  /  2;  }  else  {  sumSq  +=  dev  *  observed[i  -  1]  /  2;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	188	6	add
997	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  2;  if(dev  >  0.0)  {  sumSq  +=  dev  *  observed[i  -  1]  /  2;  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  observed[i  -  1]  /  2;  }  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  2;  if(dev  >  0.0)  {  sumSq  +=  dev  *  observed[i  -  1]  /  2;  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  observed[i  -  1]  /  2;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i    -    1]    /    2;    if(dev  >  0.0)  {  sumSq  +=  dev  *  observed[i  -  1]  /  2;  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  *  observed[i  -  1]  /  2;  }	  	non-compiled	[CE]  illegal  start  of  expression	188	None	add
998	[BUG]  [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  2;  int  i  =  observed.length  -  1;  sumSq  +=  dev  *  observed[i  -  1]  /  2;  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  observed[i  -  1]  /  2;  int  i  =  observed.length  -  1;  sumSq  +=  dev  *  observed[i  -  1]  /  2;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    observed[i    -    1]    /    2;    int  i  =  observed.length  -  1;  sumSq  +=  dev  *  observed[i  -  1]  /  2;	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	188	None	add
999	[BUG]  [BUGGY]  if(observed[i]  <  =  DEV)  {  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(observed[i]  <  =  DEV)  {  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	if(observed[i]  <  =  DEV)  {  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev    /    expected[i];    }    else    {    return    dev;    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
1000	[BUG]  [BUGGY]  if(observed[i]  >=  null)  {  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(observed[i]  >=  null)  {  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	if(observed[i]  >=  null)  {  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev    /    expected[i];    }    else    {    return    dev;    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
1001	[BUG]  [BUGGY]  ((  ChiSquareDistribution)dev).sumSq  +=  dev  /  dev.length;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  ((  ChiSquareDistribution)dev).sumSq  +=  dev  /  dev.length;  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	((  ChiSquareDistribution)dev).sumSq  +=  dev  /  dev.length;	  ((    ChiSquareDistribution)dev).sumSq    +=    dev    /    distribution.length;    	non-compiled	[CE]  cannot  find  symbol	171	None	replace
1002	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i]        /        dev;        if(sumSq    >    0)    {    sumSq    +=    dev    *    observed[i]    /    dev;    }    sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }	  	non-compiled	[CE]  illegal  start  of  expression	149	None	add
1003	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(sumSq)&&!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(sumSq)&&!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  if(!isPositive(sumSq)&&!isNegative(dev))  {  throw  new  IllegalArgumentException( " ");  }	          for(int    i    =    0;    i    <    observed.length;    i++)    {    if(!isPositive(expected)&&!isNegative(dev))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
1004	[BUG]  [BUGGY]  if(observed[i]  <  =  0.0)  {  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  if(observed[i]  <  =  0.0)  {  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	if(observed[i]  <  =  0.0)  {  if(dev  >=  expected[i])  {  sumSq  +=  observed[i];  }  else  {  return  dev;  }	          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev    >=    expected[i])    {    sumSq    +=    dev    *    observed[i];    }    else    {    return    dev;    }    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
1005	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  dev.length;  i++)  {  sumSq[i]  =  ((  double)dev  -  observed[i]);  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  for(int  i  =  0;  i  <  dev.length;  i++)  {  sumSq[i]  =  ((  double)dev  -  observed[i]);  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  dev.length;  i++)  {  sumSq[i]  =  ((  double)dev  -  observed[i]);  }	          for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq[i]    =    ((    double)dev    -    observed[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	2	None	replace
1006	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	31	6	add
1007	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	31	6	add
1008	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  observed[i	  	non-compiled	[CE]  ']'  expected	31	None	add
1009	[BUG]  [BUGGY]  sumSq  +=  dev  /  expected[i]  /  dev;  amountSq  +=  dev  /  expected[i]  /  dev;  [CE]  cannot  find  symbol  amountSq  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  expected[i]  /  dev;  amountSq  +=  dev  /  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    expected[i]    /    dev;    amountSq  +=  dev  /  expected[i]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  amountSq	129	None	add
1010	[BUG]  [BUGGY]  sumSq  +=  dev  /  expected[i]  /  dev;  sumSq  +=  DEV  /  expected[i]  /  dev;  [CE]  cannot  find  symbol  DEV  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  expected[i]  /  dev;  sumSq  +=  DEV  /  expected[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    expected[i]    /    dev;    sumSq  +=  DEV  /  expected[i]  /  dev;	  	non-compiled	[CE]  cannot  find  symbol  DEV	129	None	add
1011	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)dev  -  observed[i]);  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)dev  -  observed[i]);  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)dev  -  observed[i]);  }	          for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    ((    double)observed[i]    -    observed[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	1	None	replace
1012	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  -  expected[i];  sumSq  +=  dev  *  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    dev    -    expected[i];    sumSq  +=  dev  *  expected[i];	  	compilable	  [FE]  AssertionFailedError  	156	6	add
1013	[BUG]  [BUGGY]  sumSq  +=  dev  -  expected[i];  sumSq  +=  dev  *  expected[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  -  expected[i];  sumSq  +=  dev  *  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    -    expected[i];    sumSq  +=  dev  *  expected[i];	  	compilable	  [FE]  AssertionFailedError  	156	6	add
1014	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  dev[i]);  }  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  dev[i]);  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  ((  double)observed[i]  -  dev[i]);  }	          for(int    i    =    0;    i    <    observed.length;    i++)    {    sumSq    +=    ((    double)observed[i]    -    expected[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	4	None	replace
1015	[BUG]  [BUGGY]  sumSq  +=  observed.length  *  dev  /  dev[i];  [CE]  array  required,  but  double  found  [FE]                  AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  observed.length  *  dev  /  dev[i];  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  observed.length  *  dev  /  dev[i];	  sumSq    +=    estimated    *    dev    /    dev[i];    	non-compiled	[CE]  array  required,  but  double  found	155	None	replace
1016	[BUG]  [BUGGY]  sumSq  +=  y  *  observed[i]  /  dev;  [CE]  cannot  find  symbol  y  [FE]          AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  y  *  observed[i]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq  +=  y  *  observed[i]  /  dev;	  sumSq    +=    dev    *    observed[i]    /    dev;    sumSq    +=    x    *    observed[i]    /    dev;    	non-compiled	[CE]  cannot  find  symbol  y	191	None	replace
1017	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  if(dev  >  0.0)  {  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  if(dev  >  0.0)  {  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    observed[i    -    1]    /    dev;    if(dev  >  0.0)  {  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  }	  	non-compiled	[CE]  illegal  start  of  expression	138	None	add
1018	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  if(dev  >  0.0)  {  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i  -  1]  /  dev;  }  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  if(dev  >  0.0)  {  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i  -  1]  /  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    observed[i    -    1]    /    dev;    if(dev  >  0.0)  {  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  }  else  {  for(int  i  =  0;  i  <  observed.length;  i++)  {  sumSq  +=  observed[i  -  1]  /  dev;  }	  	non-compiled	[CE]  illegal  start  of  expression	138	None	add
1019	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  if(dev  >  0.0)  {  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  }  else  {  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    dev    /    observed[i    -    1]    /    dev;    if(dev  >  0.0)  {  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  }  else  {  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	138	6	add
1020	[BUG]  [BUGGY]  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  if(dev  >  0.0)  {  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  }  else  {  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  if(dev  >  0.0)  {  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  }  else  {  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    /    observed[i    -    1]    /    dev;    if(dev  >  0.0)  {  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  }  else  {  sumSq  +=  dev  /  observed[i  -  1]  /  dev;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	138	6	add
1021	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  dev.length;  i++)  {  if(!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  for(int  i  =  0;  i  <  dev.length;  i++)  {  if(!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	for(int  i  =  0;  i  <  dev.length;  i++)  {  if(!isNegative(expected))  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!isNegative(expected))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
1022	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  int  i  =  observed.length;  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  [CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  int  i  =  observed.length;  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    expected[i    -    1]    /    dev;    int  i  =  observed.length;  sumSq  +=  dev  *  expected[i  -  1]  /  dev;	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  chiSquare(double[],long[])	136	None	add
1023	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  if(dev  >  0.0)  {  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    dev    *    expected[i    -    1]    /    dev;    if(dev  >  0.0)  {  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	136	6	add
1024	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  if(dev  >  0.0)  {  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  if(dev  >  0.0)  {  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    expected[i    -    1]    /    dev;    if(dev  >  0.0)  {  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	136	6	add
1025	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  i  +=  dev  *  expected[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    dev    *    expected[i    -    1]    /    dev;    i  +=  dev  *  expected[i  -  1]  /  dev;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	136	6	add
1026	[BUG]  [BUGGY]  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  i  +=  dev  *  expected[i  -  1]  /  dev;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  dev  *  expected[i  -  1]  /  dev;  i  +=  dev  *  expected[i  -  1]  /  dev;  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    dev    *    expected[i    -    1]    /    dev;    i  +=  dev  *  expected[i  -  1]  /  dev;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	136	6	add
1027	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        <        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	51	6	add
1028	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	51	6	add
1029	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i	  	non-compiled	[CE]  ']'  expected	51	None	add
1030	[BUG]  [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq    +=    dev    *    observed[i]    /    dev;    if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }  [BUGGY]      }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq        +=        dev        *        observed[i]        /        dev;        if(sumSq    >    0.0)    {    sumSq    +=    dev    *    observed[i]    /    dev;    }    sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  if(sumSq  >  0.0)  {  sumSq  +=  dev  *  observed[i]  /  dev;  }	  	non-compiled	[CE]  illegal  start  of  expression	151	None	add
1031	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev;    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	95	6	add
1032	[BUG]  [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    >=    expected[i])    {    sumSq    +=    observed[i];    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev;  }  else  {  return  dev;  }  if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        >=        expected[i])        {        sumSq        +=        observed[i];        }        else        {        return        dev;        }        if(dev    >=    expected[i])    {    sumSq    +=    dev    *    dev;    }    else    {    return    dev;    }    if(dev  >=  expected[i])  {  sumSq  +=  dev  *  dev  /  expected[i];  }  else  {  return  dev;  }	  	compilable	  [FE]  AssertionFailedError  	95	6	add
1033	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected[i];  sumSq  +=  dev  *  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    expected[i];    sumSq  +=  dev  *  expected[i];	  	compilable	  [FE]  AssertionFailedError  	82	6	add
1034	[BUG]  [BUGGY]  sumSq  +=  expected[i];  sumSq  +=  dev  *  expected[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected[i];  sumSq  +=  dev  *  expected[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    expected[i];    sumSq  +=  dev  *  expected[i];	  	compilable	  [FE]  AssertionFailedError  	82	6	add
1035	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected[i];  sumSq  +=  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	sumSq    +=    expected[i];    sumSq  +=  observed[i];	  	compilable	  [FE]  AssertionFailedError  	82	6	add
1036	[BUG]  [BUGGY]  sumSq  +=  expected[i];  sumSq  +=  observed[i];  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]  sumSq  +=  expected[i];  sumSq  +=  observed[i];  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	sumSq    +=    expected[i];    sumSq  +=  observed[i];	  	compilable	  [FE]  AssertionFailedError  	82	6	add
1037	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	add	                if(dev        <        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    <    expected[i])    {    sumSq    +=    dev    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	54	6	add
1038	[BUG]  [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);      [BUGGY]          if(dev    <    expected[i])    {    sumSq    +=    observed[i]    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  [BUGGY]      sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	78	78	6	replace	                if(dev        <        expected[i])        {        sumSq        +=        observed[i]        *        dev;        }        if(dev    <    expected[i])    {    sumSq    +=    dev    *    dev;    }    if(dev  <  expected[i])  {  sumSq  +=  observed[i]  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }  if(dev  <  expected[i])  {  sumSq  +=  dev  *  dev;  }	  	compilable	  [FE]  AssertionFailedError  	54	6	add
