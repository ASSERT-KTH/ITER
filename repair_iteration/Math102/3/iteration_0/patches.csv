bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    long[]  observed  =  observed.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]    long[]  observed  =  observed.clone();  [BUGGY]  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	    long[]  observed  =  observed.clone();		non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	6	None	add
2	[BUG]  [BUGGY]    long  observed[]  =  observed.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]    long  observed[]  =  observed.clone();  [BUGGY]  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	    long  observed[]  =  observed.clone();		non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	6	None	add
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]    int  observedLength  =  observed.length;  [BUGGY]  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	    int  observedLength  =  observed.length;		compilable	  [FE]  AssertionFailedError  	6	6	add
4	[BUG]  [BUGGY]    int  observedLength  =  observed.length;  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]    int  observedLength  =  observed.length;  [BUGGY]  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	    int  observedLength  =  observed.length;		compilable	  [FE]  AssertionFailedError  	6	6	add
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]    int  observedCount  =  observed.length;  [BUGGY]  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	    int  observedCount  =  observed.length;		compilable	  [FE]  AssertionFailedError  	6	6	add
6	[BUG]  [BUGGY]    int  observedCount  =  observed.length;  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]    int  observedCount  =  observed.length;  [BUGGY]  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	    int  observedCount  =  observed.length;		compilable	  [FE]  AssertionFailedError  	6	6	add
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]    int  observedCount  =  observed.length  -  1;  [BUGGY]  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	    int  observedCount  =  observed.length  -  1;		compilable	  [FE]  AssertionFailedError  	6	6	add
8	[BUG]  [BUGGY]    int  observedCount  =  observed.length  -  1;  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]    int  observedCount  =  observed.length  -  1;  [BUGGY]  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	    int  observedCount  =  observed.length  -  1;		compilable	  [FE]  AssertionFailedError  	6	6	add
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]  double  sumSq  =  0.0;  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	double  sumSq  =  0.0;	double  sumSq  =  0.0d;  	compilable	  [FE]  AssertionFailedError  	5	6	replace
10	[BUG]  [BUGGY]  double  sumSq  =  0.0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]  double  sumSq  =  0.0;  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  sumSq  =  0.0;	double  sumSq  =  0.0d;  	compilable	  [FE]  AssertionFailedError  	5	6	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]  double  sumSq  =  1.0;  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	double  sumSq  =  1.0;	double  sumSq  =  0.0d;  	compilable	  [FE]  AssertionFailedError  	5	6	replace
12	[BUG]  [BUGGY]  double  sumSq  =  1.0;  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]  double  sumSq  =  1.0;  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  sumSq  =  1.0;	double  sumSq  =  0.0d;  	compilable	  [FE]  AssertionFailedError  	5	6	replace
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]  double  sumSq  =  0.0d  +  observed.length;  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	double  sumSq  =  0.0d  +  observed.length;	double  sumSq  =  0.0d;  	compilable	  [FE]  AssertionFailedError  	5	6	replace
14	[BUG]  [BUGGY]  double  sumSq  =  0.0d  +  observed.length;  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]  double  sumSq  =  0.0d  +  observed.length;  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  sumSq  =  0.0d  +  observed.length;	double  sumSq  =  0.0d;  	compilable	  [FE]  AssertionFailedError  	5	6	replace
15	[BUG]  [BUGGY]    long[]  expected  =  observed.clone();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]    long[]  expected  =  observed.clone();  [BUGGY]  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	    long[]  expected  =  observed.clone();		non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	6	None	add
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]    int  expectedCount  =  observed.length;  [BUGGY]  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	    int  expectedCount  =  observed.length;		compilable	  [FE]  AssertionFailedError  	6	6	add
17	[BUG]  [BUGGY]    int  expectedCount  =  observed.length;  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]    int  expectedCount  =  observed.length;  [BUGGY]  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	    int  expectedCount  =  observed.length;		compilable	  [FE]  AssertionFailedError  	6	6	add
18	[BUG]  [BUGGY]    long[]  expected  =  observed.cloneTree();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]    long[]  expected  =  observed.cloneTree();  [BUGGY]  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	    long[]  expected  =  observed.cloneTree();		non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	6	None	add
19	[BUG]  [BUGGY]    long[]  expected  =  new  long[expected.length];  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]    long[]  expected  =  new  long[expected.length];  [BUGGY]  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	    long[]  expected  =  new  long[expected.length];		non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	6	None	add
20	[BUG]  [BUGGY]    long[]  expected  =  new  long[expected.length  -  1];  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]    long[]  expected  =  new  long[expected.length  -  1];  [BUGGY]  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	    long[]  expected  =  new  long[expected.length  -  1];		non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	6	None	add
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]  double  sumSq  =  0.001;  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	double  sumSq  =  0.001;	double  sumSq  =  0.0d;  	compilable	  [FE]  AssertionFailedError  	5	6	replace
22	[BUG]  [BUGGY]  double  sumSq  =  0.001;  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]  double  sumSq  =  0.001;  [BUGGY]  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  sumSq  =  0.001;	double  sumSq  =  0.0d;  	compilable	  [FE]  AssertionFailedError  	5	6	replace
23	[BUG]  [BUGGY]    double[]  observed  =(double[])this.distribution.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]    double[]  observed  =(double[])this.distribution.clone();  [BUGGY]  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	    double[]  observed  =(double[])this.distribution.clone();		non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	6	None	add
24	[BUG]  [BUGGY]    double[]  observed  =(double[])this.re  distribution.clone();  [CE]  ';'  expected  [FE]      AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]    double[]  observed  =(double[])this.re  distribution.clone();  [BUGGY]  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	    double[]  observed  =(double[])this.re  distribution.clone();		non-compiled	[CE]  ';'  expected	6	None	add
25	[BUG]  [BUGGY]    double[]  observed  =(double[])super.chiSquare();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]    double[]  observed  =(double[])super.chiSquare();  [BUGGY]  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	    double[]  observed  =(double[])super.chiSquare();		non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	6	None	add
26	[BUG]  [BUGGY]    double[]  observed  =(double[])super.chiSquare(expected,  observed);  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]    double[]  observed  =(double[])super.chiSquare(expected,  observed);  [BUGGY]  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	    double[]  observed  =(double[])super.chiSquare(expected,  observed);		non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	6	None	add
27	[BUG]  [BUGGY]    double[]  observed  =(double[])this.reverse();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError  [CONTEXT]  public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(   "observed,  expected  array  lengths  incorrect ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(   "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  }  [BUGGY]    double[]  observed  =(double[])this.reverse();  [BUGGY]  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	    double[]  observed  =(double[])this.reverse();		non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	6	None	add
