bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int[]  expected  =  observed.length;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int[]  expected  =  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int[]  expected  =  observed.length;	  int[]    expected    =    observed.cloneTree();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	51	None	replace
2	[BUG]  [BUGGY]  long[]  expected  =  observed.cloneTree(this,  observed);  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  observed.cloneTree(this,  observed);  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  observed.cloneTree(this,  observed);	  long[]    expected    =    observed.cloneTree(this);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	110	None	replace
3	[BUG]  [BUGGY]  int[]  expected  =  observed.cloneTree(this);  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int[]  expected  =  observed.cloneTree(this);  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int[]  expected  =  observed.cloneTree(this);	  long[]    expected    =    observed.cloneTree(this);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	110	None	replace
4	[BUG]  [BUGGY]  long[]  expected  =  observed.cloneTree(this,  distribution);  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  observed.cloneTree(this,  distribution);  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  observed.cloneTree(this,  distribution);	  long[]    expected    =    observed.cloneTree(this);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	110	None	replace
5	[BUG]  [BUGGY]  long[]  observed  =(long[])this.reDistribution.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =(long[])this.reDistribution.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =(long[])this.reDistribution.clone();	  double[]    observed    =(double[])this.reDistribution.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	73	None	replace
6	[BUG]  [BUGGY]  long[]  observed  =(double[])this.reDistribution.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =(double[])this.reDistribution.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =(double[])this.reDistribution.clone();	  double[]    observed    =(double[])this.reDistribution.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	73	None	replace
7	[BUG]  [BUGGY]  double[]  observed  =(double[])redistribution.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double[]  observed  =(double[])redistribution.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])redistribution.clone();	  double[]    observed    =(double[])this.reDistribution.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	73	None	replace
8	[BUG]  [BUGGY]  long  expectedCount  =  observed.length;  [CE]  cannot  find  symbol  sumSq  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long  expectedCount  =  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long  expectedCount  =  observed.length;	          int    expectedCount    =    observed.length;    double    expectedCount    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol  sumSq	121	None	replace
9	[BUG]  [BUGGY]  Int  observedCount  =  observed.length;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  Int  observedCount  =  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	Int  observedCount  =  observed.length;	          int    observedCount    =    observed.length;    Int    observedCount    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
10	[BUG]  [BUGGY]  Integer  observedCount  =  observed.length;  [CE]  cannot  find  symbol  sumSq  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  Integer  observedCount  =  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	Integer  observedCount  =  observed.length;	          int    observedCount    =    observed.length;    Int    observedCount    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol  sumSq	93	None	replace
11	[BUG]  [BUGGY]  long  observedCount  =  observed.length;  Int  observedCount  =  observedCount;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long  observedCount  =  observed.length;  Int  observedCount  =  observedCount;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long  observedCount  =  observed.length;  Int  observedCount  =  observedCount;	          int    observedCount    =    observed.length;    Int    observedCount    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
12	[BUG]  [BUGGY]  long  observedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  [CE]  cannot  find  symbol  sumSq  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long  observedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long  observedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;	          int    observedCount    =    observed.length    -    1;    int    observedcount    =    observed.length    -    1;    	non-compiled	[CE]  cannot  find  symbol  sumSq	7	None	replace
13	[BUG]  [BUGGY]  double  observedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  [CE]  cannot  find  symbol  sumSq  [FE]      AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  observedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  observedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;	          int    observedCount    =    observed.length    -    1;    int    observedcount    =    observed.length    -    1;    	non-compiled	[CE]  cannot  find  symbol  sumSq	7	None	replace
14	[BUG]  [BUGGY]  double  expectedCount  =  observed.length  -  1;  [CE]  cannot  find  symbol  sumSq  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  expectedCount  =  observed.length  -  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  expectedCount  =  observed.length  -  1;	  double    expectedCount    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol  sumSq	60	None	replace
15	[BUG]  [BUGGY]  double  expectedCount  =  observed.length  -  2;  [CE]  cannot  find  symbol  sumSq  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  expectedCount  =  observed.length  -  2;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  expectedCount  =  observed.length  -  2;	  double    expectedCount    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol  sumSq	60	None	replace
16	[BUG]  [BUGGY]  double  expectedCount  =  observed.length  /  2;  [CE]  cannot  find  symbol  sumSq  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  expectedCount  =  observed.length  /  2;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  expectedCount  =  observed.length  /  2;	  double    expectedCount    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol  sumSq	60	None	replace
17	[BUG]  [BUGGY]  long  observedCount  =  observed.length;  int  observed.length  =  observed.length;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long  observedCount  =  observed.length;  int  observed.length  =  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long  observedCount  =  observed.length;  int  observed.length  =  observed.length;	          int    observedCount    =    observed.length;    int    observed.length    =    observed.length;    	non-compiled	[CE]  ';'  expected	87	None	replace
18	[BUG]  [BUGGY]  long  observedCount  =  observed.length;  [CE]  cannot  find  symbol  sumSq  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long  observedCount  =  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long  observedCount  =  observed.length;	          int    observedCount    =    observed.length;    int    observed.length    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol  sumSq	87	None	replace
19	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  /  2  +  1;  [CE]  cannot  find  symbol  sumSq  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  expectedCount  =  observed.length  /  2  +  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  expectedCount  =  observed.length  /  2  +  1;	  int    expectedCount    =    observed.length    /    2;    	non-compiled	[CE]  cannot  find  symbol  sumSq	59	None	replace
20	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  /  2  *  observed.length;  [CE]  cannot  find  symbol  sumSq  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  expectedCount  =  observed.length  /  2  *  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  expectedCount  =  observed.length  /  2  *  observed.length;	  int    expectedCount    =    observed.length    /    2;    	non-compiled	[CE]  cannot  find  symbol  sumSq	59	None	replace
21	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  /  4;  [CE]  cannot  find  symbol  sumSq  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  expectedCount  =  observed.length  /  4;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  expectedCount  =  observed.length  /  4;	  int    expectedCount    =    observed.length    /    2;    	non-compiled	[CE]  cannot  find  symbol  sumSq	59	None	replace
22	[BUG]  [BUGGY]  long[]  expected  =  new  long[observed.length  +  1];  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  new  long[observed.length  +  1];  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  new  long[observed.length  +  1];	  long[]    expected    =    new    long[observed.length];    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	61	None	replace
23	[BUG]  [BUGGY]  int[]  expected  =  new  int[observed.length];  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int[]  expected  =  new  int[observed.length];  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int[]  expected  =  new  int[observed.length];	  long[]    expected    =    new    long[observed.length];    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	61	None	replace
24	[BUG]  [BUGGY]  long[]  expected  =  new  long[observed.length  -  2];  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                      AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  new  long[observed.length  -  2];  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  new  long[observed.length  -  2];	  long[]    expected    =    new    long[observed.length];    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	61	None	replace
25	[BUG]  [BUGGY]  long[]  expected  =  observed  ==  null?  observed.clone()  :  Long.MAX_VALUE;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  observed  ==  null?  observed.clone()  :  Long.MAX_VALUE;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  observed  ==  null?  observed.clone()  :  Long.MAX_VALUE;	  long[]    expected    =    observed!=    null?    observed.clone()    :    Long.MAX_VALUE;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	70	None	replace
26	[BUG]  [BUGGY]  long[]  expected  =  observed!=  null?  observed.length  :  Long.MAX_VALUE;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  observed!=  null?  observed.length  :  Long.MAX_VALUE;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  observed!=  null?  observed.length  :  Long.MAX_VALUE;	  long[]    expected    =    observed!=    null?    observed.clone()    :    Long.MAX_VALUE;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	70	None	replace
27	[BUG]  [BUGGY]  long[]  observed  =(long[])super.chiSquare(expected);  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =(long[])super.chiSquare(expected);  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =(long[])super.chiSquare(expected);	  long[]    observed    =(long[])super.chiSquare();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	14	None	replace
28	[BUG]  [BUGGY]  long[]  observed  =(long[])super.chiSquare(observed);  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =(long[])super.chiSquare(observed);  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =(long[])super.chiSquare(observed);	  long[]    observed    =(long[])super.chiSquare();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	14	None	replace
29	[BUG]  [BUGGY]  long[]  observed  =(long[])this.super.chiSquare(expected,  observed);  [CE]  '('  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =(long[])this.super.chiSquare(expected,  observed);  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =(long[])this.super.chiSquare(expected,  observed);	  long[]    observed    =(long[])super.chiSquare();    	non-compiled	[CE]  '('  expected	14	None	replace
30	[BUG]  [BUGGY]  double  sumSq  =  0.0d  +  expected.length;  double  sumSq  =  0.0d  +  expected.length;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.0d  +  expected.length;  double  sumSq  =  0.0d  +  expected.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    0.0d    +    expected.length;    double  sumSq  =  0.0d  +  expected.length;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	28	None	add
31	[BUG]  [BUGGY]  double  sumSq  =  0.0d  +  expected.length;  Double  sumSq  =  0.0d  +  expected.length;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.0d  +  expected.length;  Double  sumSq  =  0.0d  +  expected.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    0.0d    +    expected.length;    Double  sumSq  =  0.0d  +  expected.length;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	28	None	add
32	[BUG]  [BUGGY]  double  sumSq  =  0.0d  +  expected.length;  long  sumSq  =  0.0d  +  expected.length;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.0d  +  expected.length;  long  sumSq  =  0.0d  +  expected.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    0.0d    +    expected.length;    long  sumSq  =  0.0d  +  expected.length;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	28	None	add
33	[BUG]  [BUGGY]  double  sumSq  =  0.0d  +  expected.length;  int  sumSq  =  0.0d  +  expected.length;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.0d  +  expected.length;  int  sumSq  =  0.0d  +  expected.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    0.0d    +    expected.length;    int  sumSq  =  0.0d  +  expected.length;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	28	None	add
34	[BUG]  [BUGGY]  double  sumSq  =  0.0d  +  expected.length;  double  sumSq  =  0.00d  +  expected.length;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.0d  +  expected.length;  double  sumSq  =  0.00d  +  expected.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    0.0d    +    expected.length;    double  sumSq  =  0.00d  +  expected.length;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	28	None	add
35	[BUG]  [BUGGY]  long  sumSq  =  0.0;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long  sumSq  =  0.0;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long  sumSq  =  0.0;	  double    sumSq    =    0.0;    long    sumSq    =    0.0;    	non-compiled	[CE]  possible  loss  of  precision	44	None	replace
36	[BUG]  [BUGGY]  int  sumSq  =  0.0;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  sumSq  =  0.0;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  sumSq  =  0.0;	  double    sumSq    =    0.0;    long    sumSq    =    0.0;    	non-compiled	[CE]  possible  loss  of  precision	44	None	replace
37	[BUG]  [BUGGY]  long[]  observed  =(long[])distribution.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =(long[])distribution.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =(long[])distribution.clone();	  double[]    observed    =(double[])distribution.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	67	None	replace
38	[BUG]  [BUGGY]          int    expectedCount    =    observed.length;    int  expectCount  =  observed.length;  int  expectedCount  =  observed.length;  int  expectCount  =  observed.length;  [CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]          int    expectedCount    =    observed.length;    int  expectCount  =  observed.length;  int  expectedCount  =  observed.length;  int  expectCount  =  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	                int        expectedCount        =        observed.length;        int    expectCount    =    observed.length;    int  expectedCount  =  observed.length;  int  expectCount  =  observed.length;	  	non-compiled	[CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])	20	None	add
39	[BUG]  [BUGGY]          int    expectedCount    =    observed.length;    int  expectCount  =  observed.length;  int  expectCount  =  observed.length;  int  expectCount  =  observed.length;  [CE]  variable  expectCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]          int    expectedCount    =    observed.length;    int  expectCount  =  observed.length;  int  expectCount  =  observed.length;  int  expectCount  =  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	                int        expectedCount        =        observed.length;        int    expectCount    =    observed.length;    int  expectCount  =  observed.length;  int  expectCount  =  observed.length;	  	non-compiled	[CE]  variable  expectCount  is  already  defined  in  method  chiSquare(double[],long[])	20	None	add
40	[BUG]  [BUGGY]          int    expectedCount    =    observed.length;    int  expectCount  =  observed.length;  Integer  expectedCount  =  observed.length;  int  expectCount  =  observed.length;  [CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]          int    expectedCount    =    observed.length;    int  expectCount  =  observed.length;  Integer  expectedCount  =  observed.length;  int  expectCount  =  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	                int        expectedCount        =        observed.length;        int    expectCount    =    observed.length;    Integer  expectedCount  =  observed.length;  int  expectCount  =  observed.length;	  	non-compiled	[CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])	20	None	add
41	[BUG]  [BUGGY]          int    expectedCount    =    observed.length;    int  expectCount  =  observed.length;  long[]  observed  =  observed.length;  int  expectCount  =  observed.length;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]          int    expectedCount    =    observed.length;    int  expectCount  =  observed.length;  long[]  observed  =  observed.length;  int  expectCount  =  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	                int        expectedCount        =        observed.length;        int    expectCount    =    observed.length;    long[]  observed  =  observed.length;  int  expectCount  =  observed.length;	  	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	20	None	add
42	[BUG]  [BUGGY]  double[]  observed  =  distribution.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double[]  observed  =  distribution.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =  distribution.clone();	  double[]    observed    =    this.distribution.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	123	None	replace
43	[BUG]  [BUGGY]  long[]  observed  =  this.distribution.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =  this.distribution.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =  this.distribution.clone();	  double[]    observed    =    this.distribution.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	123	None	replace
44	[BUG]  [BUGGY]  double[]  observed  =  this.distribution.clone(),  observed);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double[]  observed  =  this.distribution.clone(),  observed);  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =  this.distribution.clone(),  observed);	  double[]    observed    =    this.distribution.clone();    	non-compiled	[CE]  ';'  expected	123	None	replace
45	[BUG]  [BUGGY]  long  sumSq  =  0.0d  +  observed.length;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long  sumSq  =  0.0d  +  observed.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long  sumSq  =  0.0d  +  observed.length;	  double    sumSq    =    0.0d    +    observed.length;    double    sumSq    =    0.0d    +    observed.length;    	non-compiled	[CE]  possible  loss  of  precision	46	None	replace
46	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  /  1;  [CE]  cannot  find  symbol  sumSq  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  expectedCount  =  observed.length  /  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  expectedCount  =  observed.length  /  1;	  int    expectedCount    =    observed.length    +    1;    	non-compiled	[CE]  cannot  find  symbol  sumSq	92	None	replace
47	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  +  2;  [CE]  cannot  find  symbol  sumSq  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  expectedCount  =  observed.length  +  2;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  expectedCount  =  observed.length  +  2;	  int    expectedCount    =    observed.length    +    1;    	non-compiled	[CE]  cannot  find  symbol  sumSq	92	None	replace
48	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  +  3;  [CE]  cannot  find  symbol  sumSq  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  expectedCount  =  observed.length  +  3;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  expectedCount  =  observed.length  +  3;	  int    expectedCount    =    observed.length    +    1;    	non-compiled	[CE]  cannot  find  symbol  sumSq	92	None	replace
49	[BUG]  [BUGGY]  long[]  observed  =(long[])reverse();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                      AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =(long[])reverse();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =(long[])reverse();	  long[]    observed    =(double[])this.reverse();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	33	None	replace
50	[BUG]  [BUGGY]  long[]  observed  =(long[])super.reverse();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =(long[])super.reverse();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =(long[])super.reverse();	  long[]    observed    =(double[])this.reverse();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	33	None	replace
51	[BUG]  [BUGGY]          int    observedCount    =    observed.length    -    1;    int  observedLength  =  observed.length  -  1;  int  observedCount  =  observed.length  -  1;  int  observedLength  =  observed.length  -  1;  [CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]          int    observedCount    =    observed.length    -    1;    int  observedLength  =  observed.length  -  1;  int  observedCount  =  observed.length  -  1;  int  observedLength  =  observed.length  -  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	                int        observedCount        =        observed.length        -        1;        int    observedLength    =    observed.length    -    1;    int  observedCount  =  observed.length  -  1;  int  observedLength  =  observed.length  -  1;	  	non-compiled	[CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])	8	None	add
52	[BUG]  [BUGGY]          int    observedCount    =    observed.length    -    1;    int  observedLength  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  int  observedLength  =  observed.length  -  1;  [CE]  variable  observedLength  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]          int    observedCount    =    observed.length    -    1;    int  observedLength  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  int  observedLength  =  observed.length  -  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	                int        observedCount        =        observed.length        -        1;        int    observedLength    =    observed.length    -    1;    int  observedcount  =  observed.length  -  1;  int  observedLength  =  observed.length  -  1;	  	non-compiled	[CE]  variable  observedLength  is  already  defined  in  method  chiSquare(double[],long[])	8	None	add
53	[BUG]  [BUGGY]          int    observedCount    =    observed.length    -    1;    int  observedLength  =  observed.length  -  1;  long  observedCount  =  observed.length  -  1;  int  observedLength  =  observed.length  -  1;  [CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]          int    observedCount    =    observed.length    -    1;    int  observedLength  =  observed.length  -  1;  long  observedCount  =  observed.length  -  1;  int  observedLength  =  observed.length  -  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	                int        observedCount        =        observed.length        -        1;        int    observedLength    =    observed.length    -    1;    long  observedCount  =  observed.length  -  1;  int  observedLength  =  observed.length  -  1;	  	non-compiled	[CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])	8	None	add
54	[BUG]  [BUGGY]          int    observedCount    =    observed.length    -    1;    int  observedLength  =  observed.length  -  1;  int  observedCount  =  observed.length  -  1;  int  observedLength  =  observed.length  -  1;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]          int    observedCount    =    observed.length    -    1;    int  observedLength  =  observed.length  -  1;  int  observedCount  =  observed.length  -  1;  int  observedLength  =  observed.length  -  1;  }  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	                int        observedCount        =        observed.length        -        1;        int    observedLength    =    observed.length    -    1;    int  observedCount  =  observed.length  -  1;  int  observedLength  =  observed.length  -  1;  }	  	non-compiled	[CE]  illegal  start  of  type	8	None	add
55	[BUG]  [BUGGY]  int[]  observed  =  this.observed.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int[]  observed  =  this.observed.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int[]  observed  =  this.observed.clone();	  long[]    observed    =    this.observed.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	115	None	replace
56	[BUG]  [BUGGY]  int[]  expected  =  new  int[result.length];  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int[]  expected  =  new  int[result.length];  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int[]  expected  =  new  int[result.length];	  long[]    expected    =    new    long[result.length];    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	120	None	replace
57	[BUG]  [BUGGY]  long[]  expected  =  observed.length  -  1;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  observed.length  -  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  observed.length  -  1;	  long[]    expected    =    observed.length;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	124	None	replace
58	[BUG]  [BUGGY]  long[]  expected  =  observed.length  -  2;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  observed.length  -  2;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  observed.length  -  2;	  long[]    expected    =    observed.length;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	124	None	replace
59	[BUG]  [BUGGY]  long[]  expected  =  observed.length  /  2;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  observed.length  /  2;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  observed.length  /  2;	  long[]    expected    =    observed.length;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	124	None	replace
60	[BUG]  [BUGGY]  long[]  observed  =  observed.toArray(new  long[1]);  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =  observed.toArray(new  long[1]);  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =  observed.toArray(new  long[1]);	  long[]    observed    =    observed.toArray(new    long[0]);    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	116	None	replace
61	[BUG]  [BUGGY]  int[]  observed  =  observed.toArray(new  int[0]);  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int[]  observed  =  observed.toArray(new  int[0]);  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int[]  observed  =  observed.toArray(new  int[0]);	  long[]    observed    =    observed.toArray(new    long[0]);    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	116	None	replace
62	[BUG]  [BUGGY]  long[]  observed  =  observed.toArray(new  long[2]);  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =  observed.toArray(new  long[2]);  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =  observed.toArray(new  long[2]);	  long[]    observed    =    observed.toArray(new    long[0]);    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	116	None	replace
63	[BUG]  [BUGGY]  Long[]  observed  =  observed!=  null?  null  :  observed.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  Long[]  observed  =  observed!=  null?  null  :  observed.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	Long[]  observed  =  observed!=  null?  null  :  observed.clone();	  Long[]    observed    =    observed.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	80	None	replace
64	[BUG]  [BUGGY]  Long[]  observed  =  expected.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  Long[]  observed  =  expected.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	Long[]  observed  =  expected.clone();	  Long[]    observed    =    observed.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	80	None	replace
65	[BUG]  [BUGGY]  long  observedLength  =  observed.length  -  1;  [CE]  cannot  find  symbol  sumSq  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long  observedLength  =  observed.length  -  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long  observedLength  =  observed.length  -  1;	  long    observedLength    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol  sumSq	75	None	replace
66	[BUG]  [BUGGY]  long  observedLength  =  observed.length  -  2;  [CE]  cannot  find  symbol  sumSq  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long  observedLength  =  observed.length  -  2;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long  observedLength  =  observed.length  -  2;	  long    observedLength    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol  sumSq	75	None	replace
67	[BUG]  [BUGGY]  int  observedLength  =  observed.length  /  1;  [CE]  cannot  find  symbol  sumSq  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  observedLength  =  observed.length  /  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  observedLength  =  observed.length  /  1;	  int    observedLength    =    observed.length    -    1;    	non-compiled	[CE]  cannot  find  symbol  sumSq	74	None	replace
68	[BUG]  [BUGGY]  int  observedLength  =  observed.length  -  3;  [CE]  cannot  find  symbol  sumSq  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  observedLength  =  observed.length  -  3;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  observedLength  =  observed.length  -  3;	  int    observedLength    =    observed.length    -    1;    	non-compiled	[CE]  cannot  find  symbol  sumSq	74	None	replace
69	[BUG]  [BUGGY]  double[]  expected  =  observed.clone();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double[]  expected  =  observed.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  expected  =  observed.clone();	  int[]    expected    =    observed.clone();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	71	None	replace
70	[BUG]  [BUGGY]  double[]  observed  =(double[])this.chiSquareDistribution.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double[]  observed  =(double[])this.chiSquareDistribution.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])this.chiSquareDistribution.clone();	  double[]    observed    =(double[])this.chiSquareDistribution.reverse();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	126	None	replace
71	[BUG]  [BUGGY]  long[]  observed  =(long[])this.chiSquareDistribution.reverse();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                      AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =(long[])this.chiSquareDistribution.reverse();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =(long[])this.chiSquareDistribution.reverse();	  double[]    observed    =(double[])this.chiSquareDistribution.reverse();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	126	None	replace
72	[BUG]  [BUGGY]  double[]  observed  =(double[])this.chiSquareDistribution.period();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double[]  observed  =(double[])this.chiSquareDistribution.period();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])this.chiSquareDistribution.period();	  double[]    observed    =(double[])this.chiSquareDistribution.reverse();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	126	None	replace
73	[BUG]  [BUGGY]  double[]  observed  =(double[])this.chiSquareDistribution.get();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double[]  observed  =(double[])this.chiSquareDistribution.get();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])this.chiSquareDistribution.get();	  double[]    observed    =(double[])this.chiSquareDistribution.reverse();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	126	None	replace
74	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  Double  sumSq  =  0.0d  +  observed.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	Double  sumSq  =  0.0d  +  observed.length;	  double    sumSq    =    0.0d    +    observed.length;    Double    sumSq    =    0.0d    +    observed.length;    	compilable	  [FE]  AssertionFailedError  	47	6	replace
75	[BUG]  [BUGGY]  Double  sumSq  =  0.0d  +  observed.length;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  Double  sumSq  =  0.0d  +  observed.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	Double  sumSq  =  0.0d  +  observed.length;	  double    sumSq    =    0.0d    +    observed.length;    Double    sumSq    =    0.0d    +    observed.length;    	compilable	  [FE]  AssertionFailedError  	47	6	replace
76	[BUG]  [BUGGY]  Integer  observedLength  =  observed.length;  [CE]  cannot  find  symbol  sumSq  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  Integer  observedLength  =  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	Integer  observedLength  =  observed.length;	          int    observedLength    =    observed.length;    Int    observedLength    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol  sumSq	117	None	replace
77	[BUG]  [BUGGY]  long  observedLength  =  observed.length;  Int  observedLength  =  observed.length;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long  observedLength  =  observed.length;  Int  observedLength  =  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long  observedLength  =  observed.length;  Int  observedLength  =  observed.length;	          int    observedLength    =    observed.length;    Int    observedLength    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
78	[BUG]  [BUGGY]  Int  observedLength  =  observed.length;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  Int  observedLength  =  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	Int  observedLength  =  observed.length;	          int    observedLength    =    observed.length;    Int    observedLength    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
79	[BUG]  [BUGGY]  long[]  expected  =  observed  ==  null?  Long.MAX_VALUE  :  observed.clone();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  observed  ==  null?  Long.MAX_VALUE  :  observed.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  observed  ==  null?  Long.MAX_VALUE  :  observed.clone();	  long[]    expected    =    observed!=    null?    Long.MAX_VALUE    :    observed.clone();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	107	None	replace
80	[BUG]  [BUGGY]  double  observed[]  =  expected.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  observed[]  =  expected.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  observed[]  =  expected.clone();	  double    observed[]    =    observed.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	130	None	replace
81	[BUG]  [BUGGY]  long  observedCount  =  observed.length  -  1;  [CE]  cannot  find  symbol  sumSq  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long  observedCount  =  observed.length  -  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long  observedCount  =  observed.length  -  1;	          int    observedCount    =    observed.length    -    1;    int    observedCount    =    observed.length    -    1;    	non-compiled	[CE]  cannot  find  symbol  sumSq	3	None	replace
82	[BUG]  [BUGGY]  long[]  expected  =  new  long[expected.length  /  1];  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  new  long[expected.length  /  1];  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  new  long[expected.length  /  1];	  long[]    expected    =    new    long[expected.length    +    1];    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	96	None	replace
83	[BUG]  [BUGGY]  long[]  observed  =(long[])result.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =(long[])result.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =(long[])result.clone();	  long[]    observed    =(long[])this.distribution.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	68	None	replace
84	[BUG]  [BUGGY]  long[]  observed  =(long[])regex.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =(long[])regex.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =(long[])regex.clone();	  long[]    observed    =(long[])this.distribution.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	68	None	replace
85	[BUG]  [BUGGY]  long[]  observed  =(long[])this.reverseDistribution();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                      AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =(long[])this.reverseDistribution();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =(long[])this.reverseDistribution();	  double[]    observed    =(double[])this.reverseDistribution();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	91	None	replace
86	[BUG]  [BUGGY]  double[]  observed  =(double[])reverseDistribution();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double[]  observed  =(double[])reverseDistribution();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])reverseDistribution();	  double[]    observed    =(double[])this.reverseDistribution();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	91	None	replace
87	[BUG]  [BUGGY]  long[]  observed  =(double[])this.reverseDistribution();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =(double[])this.reverseDistribution();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =(double[])this.reverseDistribution();	  double[]    observed    =(double[])this.reverseDistribution();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	91	None	replace
88	[BUG]  [BUGGY]  double  sumSq  =  0.0d  *  observed.length;  double  sumSq  =  0.0d  *  observed.length;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.0d  *  observed.length;  double  sumSq  =  0.0d  *  observed.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    0.0d    *    observed.length;    double  sumSq  =  0.0d  *  observed.length;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	26	None	add
89	[BUG]  [BUGGY]  double  sumSq  =  0.0d  *  observed.length;  Double  sumSq  =  0.0d  *  observed.length;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.0d  *  observed.length;  Double  sumSq  =  0.0d  *  observed.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    0.0d    *    observed.length;    Double  sumSq  =  0.0d  *  observed.length;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	26	None	add
90	[BUG]  [BUGGY]  double  sumSq  =  0.0d  *  observed.length;  long  sumSq  =  0.0d  *  observed.length;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.0d  *  observed.length;  long  sumSq  =  0.0d  *  observed.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    0.0d    *    observed.length;    long  sumSq  =  0.0d  *  observed.length;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	26	None	add
91	[BUG]  [BUGGY]  double  sumSq  =  0.0d  *  observed.length;  int  sumSq  =  0.0d  *  observed.length;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.0d  *  observed.length;  int  sumSq  =  0.0d  *  observed.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    0.0d    *    observed.length;    int  sumSq  =  0.0d  *  observed.length;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	26	None	add
92	[BUG]  [BUGGY]  double  sumSq  =  0.0d  *  observed.length;  double  sumSq  =  0.00d  *  observed.length;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.0d  *  observed.length;  double  sumSq  =  0.00d  *  observed.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    0.0d    *    observed.length;    double  sumSq  =  0.00d  *  observed.length;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	26	None	add
93	[BUG]  [BUGGY]  long  sumSq  =  1.0;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long  sumSq  =  1.0;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long  sumSq  =  1.0;	  double    sumSq    =    1.0;    long    sumSq    =    1.0;    	non-compiled	[CE]  possible  loss  of  precision	83	None	replace
94	[BUG]  [BUGGY]  int  sumSq  =  1.0;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  sumSq  =  1.0;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  sumSq  =  1.0;	  double    sumSq    =    1.0;    long    sumSq    =    1.0;    	non-compiled	[CE]  possible  loss  of  precision	83	None	replace
95	[BUG]  [BUGGY]  long[]  expected  =  observed.lengths,  observed.lengths);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  observed.lengths,  observed.lengths);  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  observed.lengths,  observed.lengths);	  long[]    expected    =    observed.lengths;    	non-compiled	[CE]  ';'  expected	128	None	replace
96	[BUG]  [BUGGY]  long[]  expected  =  observed.lengths  /  2;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  observed.lengths  /  2;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  observed.lengths  /  2;	  long[]    expected    =    observed.lengths;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	128	None	replace
97	[BUG]  [BUGGY]  int[]  observed  =  expected.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int[]  observed  =  expected.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int[]  observed  =  expected.clone();	  int[]    observed    =    observed.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	79	None	replace
98	[BUG]  [BUGGY]  double[]  observed  =  observed.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double[]  observed  =  observed.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =  observed.clone();	  int[]    observed    =    observed.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	79	None	replace
99	[BUG]  [BUGGY]  long[]  observed  =(long[])this.distribution.reverse();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =(long[])this.distribution.reverse();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =(long[])this.distribution.reverse();	  long[]    observed    =(long[])this.reverse();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	32	None	replace
100	[BUG]  [BUGGY]  long[]  observed  =(long[])this.reverseSquare();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                      AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =(long[])this.reverseSquare();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =(long[])this.reverseSquare();	  long[]    observed    =(long[])this.reverse();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	32	None	replace
101	[BUG]  [BUGGY]  long[]  expected  =  new  long[expected.length  /  2];  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  new  long[expected.length  /  2];  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  new  long[expected.length  /  2];	  long[]    expected    =    new    long[expected.length    -    2];    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	35	None	replace
102	[BUG]  [BUGGY]  long[]  expected  =  new  long[expected.length  -  4];  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                      AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  new  long[expected.length  -  4];  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  new  long[expected.length  -  4];	  long[]    expected    =    new    long[expected.length    -    2];    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	35	None	replace
103	[BUG]  [BUGGY]  Long  observedCount  =  observed.length;  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  Long  observedCount  =  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	Long  observedCount  =  observed.length;	          int    observedCount    =    observed.length;    Integer    observedCount    =    observed.length;    	non-compiled	[CE]  incompatible  types	86	None	replace
104	[BUG]  [BUGGY]  long[]  observed  =(double[])this.chiSquare(expected,  observed);  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =(double[])this.chiSquare(expected,  observed);  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =(double[])this.chiSquare(expected,  observed);	  double[]    observed    =(double[])this.chiSquare(expected,    observed);    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	99	None	replace
105	[BUG]  [BUGGY]  long[]  observed  =(long[])this.chiSquare(expected,  observed);  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =(long[])this.chiSquare(expected,  observed);  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =(long[])this.chiSquare(expected,  observed);	  double[]    observed    =(double[])this.chiSquare(expected,    observed);    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	99	None	replace
106	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  Double  sumSq  =  0.0;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	Double  sumSq  =  0.0;	  double    sumSq    =    0.0;    Double    sumSq    =    0.0;    	compilable	  [FE]  AssertionFailedError  	43	6	replace
107	[BUG]  [BUGGY]  Double  sumSq  =  0.0;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  Double  sumSq  =  0.0;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	Double  sumSq  =  0.0;	  double    sumSq    =    0.0;    Double    sumSq    =    0.0;    	compilable	  [FE]  AssertionFailedError  	43	6	replace
108	[BUG]  [BUGGY]  int  sumSq  =  0.0d  +  observed.length;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  sumSq  =  0.0d  +  observed.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  sumSq  =  0.0d  +  observed.length;	  double    sumSq    =    0.0d    +    observed.length;    long    sumSq    =    0.0d    +    observed.length;    	non-compiled	[CE]  possible  loss  of  precision	48	None	replace
109	[BUG]  [BUGGY]  long  observedCount  =  observed.length  -  1;  int  observed.length  -  1;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long  observedCount  =  observed.length  -  1;  int  observed.length  -  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long  observedCount  =  observed.length  -  1;  int  observed.length  -  1;	          int    observedCount    =    observed.length    -    1;    int    observed.length    -    1;    	non-compiled	[CE]  ';'  expected	5	None	replace
110	[BUG]  [BUGGY]  int[]  expected  =  new  int[observed.length  -  1];  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                      AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int[]  expected  =  new  int[observed.length  -  1];  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int[]  expected  =  new  int[observed.length  -  1];	  long[]    expected    =    new    long[observed.length    -    1];    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	36	None	replace
111	[BUG]  [BUGGY]  double[]  observed  =(double[])reverse().clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double[]  observed  =(double[])reverse().clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])reverse().clone();	  double[]    observed    =(double[])reverse();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	34	None	replace
112	[BUG]  [BUGGY]  Integer  expectedCount  =  observed.length;  [CE]  cannot  find  symbol  sumSq  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  Integer  expectedCount  =  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	Integer  expectedCount  =  observed.length;	          int    expectedCount    =    observed.length;    Integer    expectedCount    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol  sumSq	19	None	replace
113	[BUG]  [BUGGY]  int  observedcount  =  observed.length;  [CE]  cannot  find  symbol  sumSq  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  observedcount  =  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  observedcount  =  observed.length;	          int    observedCount    =    observed.length;    int    observedcount    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol  sumSq	89	None	replace
114	[BUG]  [BUGGY]  long  observedCount  =  observed.length  -  1;  int  observedLength  =  observed.length  -  1;  [CE]  cannot  find  symbol  sumSq  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long  observedCount  =  observed.length  -  1;  int  observedLength  =  observed.length  -  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long  observedCount  =  observed.length  -  1;  int  observedLength  =  observed.length  -  1;	          int    observedCount    =    observed.length    -    1;    int    observedLength    =    observed.length    -    1;    	non-compiled	[CE]  cannot  find  symbol  sumSq	9	None	replace
115	[BUG]  [BUGGY]  double[]  observed  =(double[])this.distribution.cloneTree();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double[]  observed  =(double[])this.distribution.cloneTree();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])this.distribution.cloneTree();	  double[]    observed    =(double[])this.distribution.reverse();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	90	None	replace
116	[BUG]  [BUGGY]  long[]  observed  =(long[])super.chiSquare(expected,  observed,  null);  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =(long[])super.chiSquare(expected,  observed,  null);  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =(long[])super.chiSquare(expected,  observed,  null);	  long[]    observed    =(long[])super.chiSquare(expected,    observed);    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	23	None	replace
117	[BUG]  [BUGGY]  int[]  observed  =(int[])super.chiSquare(expected,  observed);  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int[]  observed  =(int[])super.chiSquare(expected,  observed);  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int[]  observed  =(int[])super.chiSquare(expected,  observed);	  long[]    observed    =(long[])super.chiSquare(expected,    observed);    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	23	None	replace
118	[BUG]  [BUGGY]  long[]  observed  =(long[])super.chiSquare(expected,  observed,  false);  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                      AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =(long[])super.chiSquare(expected,  observed,  false);  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =(long[])super.chiSquare(expected,  observed,  false);	  long[]    observed    =(long[])super.chiSquare(expected,    observed);    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	23	None	replace
119	[BUG]  [BUGGY]  int  observedCount  =  observed.length  /  1  +  1;  [CE]  cannot  find  symbol  sumSq  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  observedCount  =  observed.length  /  1  +  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  observedCount  =  observed.length  /  1  +  1;	  int    observedCount    =    observed.length    -    1    +    1;    	non-compiled	[CE]  cannot  find  symbol  sumSq	98	None	replace
120	[BUG]  [BUGGY]  double  observedCount  =  observed.length  -  1  +  1;  [CE]  cannot  find  symbol  sumSq  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  observedCount  =  observed.length  -  1  +  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  observedCount  =  observed.length  -  1  +  1;	  int    observedCount    =    observed.length    -    1    +    1;    	non-compiled	[CE]  cannot  find  symbol  sumSq	98	None	replace
121	[BUG]  [BUGGY]  int  observed.length  =  observed.length;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  observed.length  =  observed.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  observed.length  =  observed.length;	  double    sumSq    =    0.0d    +    observed.length;    int    observed.length    =    observed.length;    	non-compiled	[CE]  ';'  expected	50	None	replace
122	[BUG]  [BUGGY]  double  sumSq  =  0.0d  *  observed.length;  int  observed.length  =  observed.length;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.0d  *  observed.length;  int  observed.length  =  observed.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  sumSq  =  0.0d  *  observed.length;  int  observed.length  =  observed.length;	  double    sumSq    =    0.0d    +    observed.length;    int    observed.length    =    observed.length;    	non-compiled	[CE]  ';'  expected	50	None	replace
123	[BUG]  [BUGGY]  double  sumSq  =  0.0d  +  expected.length;  int  observed.length  =  observed.length;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.0d  +  expected.length;  int  observed.length  =  observed.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  sumSq  =  0.0d  +  expected.length;  int  observed.length  =  observed.length;	  double    sumSq    =    0.0d    +    observed.length;    int    observed.length    =    observed.length;    	non-compiled	[CE]  ';'  expected	50	None	replace
124	[BUG]  [BUGGY]  long[]  observed  =(double[])super.chiSquare(expected,  observed,  null);  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =(double[])super.chiSquare(expected,  observed,  null);  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =(double[])super.chiSquare(expected,  observed,  null);	  long[]    observed    =(double[])super.chiSquare(expected,    observed);    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	24	None	replace
125	[BUG]  [BUGGY]  long[]  observed  =(double[])this.super.chiSquare(expected,  observed);  [CE]  '('  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =(double[])this.super.chiSquare(expected,  observed);  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =(double[])this.super.chiSquare(expected,  observed);	  double[]    observed    =(double[])this.super.chiSquare(expected,    observed);    	non-compiled	[CE]  '('  expected	103	None	replace
126	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.0d  /  expected.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	double  sumSq  =  0.0d  /  expected.length;	  double    sumSq    =    0.0d    /    observed.length;    	compilable	  [FE]  AssertionFailedError  	31	6	replace
127	[BUG]  [BUGGY]  double  sumSq  =  0.0d  /  expected.length;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.0d  /  expected.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  sumSq  =  0.0d  /  expected.length;	  double    sumSq    =    0.0d    /    observed.length;    	compilable	  [FE]  AssertionFailedError  	31	6	replace
128	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.0d  /  observed.length  +  1;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	double  sumSq  =  0.0d  /  observed.length  +  1;	  double    sumSq    =    0.0d    /    observed.length;    	compilable	  [FE]  AssertionFailedError  	31	6	replace
129	[BUG]  [BUGGY]  double  sumSq  =  0.0d  /  observed.length  +  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.0d  /  observed.length  +  1;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  sumSq  =  0.0d  /  observed.length  +  1;	  double    sumSq    =    0.0d    /    observed.length;    	compilable	  [FE]  AssertionFailedError  	31	6	replace
130	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  -  3;  [CE]  cannot  find  symbol  sumSq  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  expectedCount  =  observed.length  -  3;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  expectedCount  =  observed.length  -  3;	  int    expectedCount    =    observed.length    -    2;    	non-compiled	[CE]  cannot  find  symbol  sumSq	58	None	replace
131	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  Double  sumSq  =  0.001;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	Double  sumSq  =  0.001;	  double    sumSq    =    0.001;    Double    sumSq    =    0.001;    	compilable	  [FE]  AssertionFailedError  	38	6	replace
132	[BUG]  [BUGGY]  Double  sumSq  =  0.001;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  Double  sumSq  =  0.001;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	Double  sumSq  =  0.001;	  double    sumSq    =    0.001;    Double    sumSq    =    0.001;    	compilable	  [FE]  AssertionFailedError  	38	6	replace
133	[BUG]  [BUGGY]  double  sumSq  =  0.0001;  double  sumSq  =  0.0001;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.0001;  double  sumSq  =  0.0001;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    0.0001;    double  sumSq  =  0.0001;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	16	None	add
134	[BUG]  [BUGGY]  double  sumSq  =  0.0001;  Double  sumSq  =  0.0001;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.0001;  Double  sumSq  =  0.0001;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    0.0001;    Double  sumSq  =  0.0001;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	16	None	add
135	[BUG]  [BUGGY]  double  sumSq  =  0.0001;  long  sumSq  =  0.0001;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.0001;  long  sumSq  =  0.0001;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    0.0001;    long  sumSq  =  0.0001;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	16	None	add
136	[BUG]  [BUGGY]  double  sumSq  =  0.0001;  int  sumSq  =  0.0001;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.0001;  int  sumSq  =  0.0001;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    0.0001;    int  sumSq  =  0.0001;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	16	None	add
137	[BUG]  [BUGGY]  double  sumSq  =  0.0001;  double  sumSq  =  0.001;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.0001;  double  sumSq  =  0.001;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    0.0001;    double  sumSq  =  0.001;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	16	None	add
138	[BUG]  [BUGGY]  int  observed[]  =  expected.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  observed[]  =  expected.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  observed[]  =  expected.clone();	  long    observed[]    =    expected.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	64	None	replace
139	[BUG]  [BUGGY]  long  expectedCount  =  observed.length;  int  expectCount  =  observed.length;  [CE]  cannot  find  symbol  sumSq  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long  expectedCount  =  observed.length;  int  expectCount  =  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long  expectedCount  =  observed.length;  int  expectCount  =  observed.length;	          int    expectedCount    =    observed.length;    int    expectCount    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol  sumSq	21	None	replace
140	[BUG]  [BUGGY]  double  expectedCount  =  observed.length;  int  expectCount  =  observed.length;  [CE]  cannot  find  symbol  sumSq  [FE]      AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  expectedCount  =  observed.length;  int  expectCount  =  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  expectedCount  =  observed.length;  int  expectCount  =  observed.length;	          int    expectedCount    =    observed.length;    int    expectCount    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol  sumSq	21	None	replace
141	[BUG]  [BUGGY]  int  expectCount  =  observed.length;  [CE]  cannot  find  symbol  sumSq  [FE]        AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  expectCount  =  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  expectCount  =  observed.length;	          int    expectedCount    =    observed.length;    int    expectCount    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol  sumSq	21	None	replace
142	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.00d  +  observed.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	double  sumSq  =  0.00d  +  observed.length;	  double    sumSq    =    0.0d    +    observed.length;    double    sumSq    =    0.00d    +    observed.length;    	compilable	  [FE]  AssertionFailedError  	129	6	replace
143	[BUG]  [BUGGY]  double  sumSq  =  0.00d  +  observed.length;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.00d  +  observed.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  sumSq  =  0.00d  +  observed.length;	  double    sumSq    =    0.0d    +    observed.length;    double    sumSq    =    0.00d    +    observed.length;    	compilable	  [FE]  AssertionFailedError  	129	6	replace
144	[BUG]  [BUGGY]  Int  expectedCount  =  observed.length;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  Int  expectedCount  =  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	Int  expectedCount  =  observed.length;	          int    expectedCount    =    observed.length;    Int    expectedCount    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
145	[BUG]  [BUGGY]  long[]  expected  =  observed!=  null?  observed.clone()  :  Integer.MIN_VALUE;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  observed!=  null?  observed.clone()  :  Integer.MIN_VALUE;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  observed!=  null?  observed.clone()  :  Integer.MIN_VALUE;	  long[]    expected    =    observed!=    null?    observed.clone()    :    Integer.MAX_VALUE;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	72	None	replace
146	[BUG]  [BUGGY]  long[]  expected  =  observed  ==  null?  observed.clone()  :  Integer.MAX_VALUE;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  observed  ==  null?  observed.clone()  :  Integer.MAX_VALUE;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  observed  ==  null?  observed.clone()  :  Integer.MAX_VALUE;	  long[]    expected    =    observed!=    null?    observed.clone()    :    Integer.MAX_VALUE;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	72	None	replace
147	[BUG]  [BUGGY]  int  observedCount  =  observed.length  /  3;  [CE]  cannot  find  symbol  sumSq  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  observedCount  =  observed.length  /  3;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  observedCount  =  observed.length  /  3;	  int    observedCount    =    observed.length    /    1;    	non-compiled	[CE]  cannot  find  symbol  sumSq	11	None	replace
148	[BUG]  [BUGGY]  int  observedCount  =  observed.length  /  4;  [CE]  cannot  find  symbol  sumSq  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  observedCount  =  observed.length  /  4;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  observedCount  =  observed.length  /  4;	  int    observedCount    =    observed.length    /    1;    	non-compiled	[CE]  cannot  find  symbol  sumSq	11	None	replace
149	[BUG]  [BUGGY]  long[]  observed  =  this.chiSquareDistribution.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =  this.chiSquareDistribution.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =  this.chiSquareDistribution.clone();	  long[]    observed    =    this.chiSquareTestImpl.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	104	None	replace
150	[BUG]  [BUGGY]  long[]  observed  =  this.chiSquareTestImpl.clone(),  observed);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =  this.chiSquareTestImpl.clone(),  observed);  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =  this.chiSquareTestImpl.clone(),  observed);	  long[]    observed    =    this.chiSquareTestImpl.clone();    	non-compiled	[CE]  ';'  expected	104	None	replace
151	[BUG]  [BUGGY]  long[]  observed  =  this.chiSquareDistributionImpl.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =  this.chiSquareDistributionImpl.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =  this.chiSquareDistributionImpl.clone();	  long[]    observed    =    this.chiSquareTestImpl.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	104	None	replace
152	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.5;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	double  sumSq  =  0.5;	  double    sumSq    =    1.0d;    	compilable	  [FE]  AssertionFailedError  	2	6	replace
153	[BUG]  [BUGGY]  double  sumSq  =  0.5;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.5;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  sumSq  =  0.5;	  double    sumSq    =    1.0d;    	compilable	  [FE]  AssertionFailedError  	2	6	replace
154	[BUG]  [BUGGY]  int  observedCount  =  observed.length  -  3;  [CE]  cannot  find  symbol  sumSq  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  observedCount  =  observed.length  -  3;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  observedCount  =  observed.length  -  3;	  int    observedCount    =    observed.length    -    2;    	non-compiled	[CE]  cannot  find  symbol  sumSq	10	None	replace
155	[BUG]  [BUGGY]  long  observedCount  =  observed.length  -  1;  int  observedCount  =  observed.length  -  2;  [CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long  observedCount  =  observed.length  -  1;  int  observedCount  =  observed.length  -  2;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long  observedCount  =  observed.length  -  1;  int  observedCount  =  observed.length  -  2;	          int    observedCount    =    observed.length    -    1;    int    observedCount    =    observed.length    -    2;    	non-compiled	[CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])	100	None	replace
156	[BUG]  [BUGGY]  int  sumSq  =  0.001;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  sumSq  =  0.001;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  sumSq  =  0.001;	  double    sumSq    =    0.001;    int    sumSq    =    0.001;    	non-compiled	[CE]  possible  loss  of  precision	40	None	replace
157	[BUG]  [BUGGY]  double  sumSq  =  0.0d;  int  sumSq  =  0.001;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.0d;  int  sumSq  =  0.001;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  sumSq  =  0.0d;  int  sumSq  =  0.001;	  double    sumSq    =    0.001;    int    sumSq    =    0.001;    	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	40	None	replace
158	[BUG]  [BUGGY]  double  sumSq  =  0.0;  int  sumSq  =  0.001;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.0;  int  sumSq  =  0.001;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  sumSq  =  0.0;  int  sumSq  =  0.001;	  double    sumSq    =    0.001;    int    sumSq    =    0.001;    	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	40	None	replace
159	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.0d  *  expected.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	double  sumSq  =  0.0d  *  expected.length;	  double    sumSq    =    0.0d    +    expected.length;    	compilable	  [FE]  AssertionFailedError  	29	6	replace
160	[BUG]  [BUGGY]  double  sumSq  =  0.0d  *  expected.length;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.0d  *  expected.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  sumSq  =  0.0d  *  expected.length;	  double    sumSq    =    0.0d    +    expected.length;    	compilable	  [FE]  AssertionFailedError  	29	6	replace
161	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  1.0  +  expected.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	double  sumSq  =  1.0  +  expected.length;	  double    sumSq    =    0.0d    +    expected.length;    	compilable	  [FE]  AssertionFailedError  	29	6	replace
162	[BUG]  [BUGGY]  double  sumSq  =  1.0  +  expected.length;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  1.0  +  expected.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  sumSq  =  1.0  +  expected.length;	  double    sumSq    =    0.0d    +    expected.length;    	compilable	  [FE]  AssertionFailedError  	29	6	replace
163	[BUG]  [BUGGY]  double  sumSq  =  1.0d;  double  sumSq  =  1.0d;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  1.0d;  double  sumSq  =  1.0d;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    1.0d;    double  sumSq  =  1.0d;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	1	None	add
164	[BUG]  [BUGGY]  double  sumSq  =  1.0d;  Double  sumSq  =  1.0d;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  1.0d;  Double  sumSq  =  1.0d;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    1.0d;    Double  sumSq  =  1.0d;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	1	None	add
165	[BUG]  [BUGGY]  double  sumSq  =  1.0d;  long  sumSq  =  1.0d;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  1.0d;  long  sumSq  =  1.0d;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    1.0d;    long  sumSq  =  1.0d;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	1	None	add
166	[BUG]  [BUGGY]  double  sumSq  =  1.0d;  int  sumSq  =  1.0d;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  1.0d;  int  sumSq  =  1.0d;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    1.0d;    int  sumSq  =  1.0d;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	1	None	add
167	[BUG]  [BUGGY]  double  sumSq  =  1.0d;  double  sumSq  =  0.0d;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  1.0d;  double  sumSq  =  0.0d;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    1.0d;    double  sumSq  =  0.0d;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	1	None	add
168	[BUG]  [BUGGY]  long[]  observed  =(double[])distribution.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =(double[])distribution.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =(double[])distribution.clone();	  long[]    observed    =(double[])this.distribution.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	69	None	replace
169	[BUG]  [BUGGY]  double[]  observed  =(double[])this.chiSquare(expected);  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double[]  observed  =(double[])this.chiSquare(expected);  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])this.chiSquare(expected);	  double[]    observed    =(double[])this.chiSquare();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	102	None	replace
170	[BUG]  [BUGGY]  long[]  observed  =(long[])this.chiSquare();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =(long[])this.chiSquare();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =(long[])this.chiSquare();	  double[]    observed    =(double[])this.chiSquare();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	102	None	replace
171	[BUG]  [BUGGY]  long[]  observed  =(double[])super.chiSquare(expected);  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =(double[])super.chiSquare(expected);  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =(double[])super.chiSquare(expected);	  long[]    observed    =(double[])super.chiSquare();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	15	None	replace
172	[BUG]  [BUGGY]  int  observed[]  =  x.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  observed[]  =  x.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  observed[]  =  x.clone();	  long    observed[]    =    x.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	95	None	replace
173	[BUG]  [BUGGY]  double  observed[]  =  x.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  observed[]  =  x.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  observed[]  =  x.clone();	  long    observed[]    =    x.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	95	None	replace
174	[BUG]  [BUGGY]  double[]  observed  =(double[])distribution.clone()  *  distribution.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double[]  observed  =(double[])distribution.clone()  *  distribution.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])distribution.clone()  *  distribution.clone();	  double[]    observed    =(double[])this.distribution.clone()    /    distribution.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	122	None	replace
175	[BUG]  [BUGGY]  double[]  observed  =(double[])distribution.clone()  /  this.distribution.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double[]  observed  =(double[])distribution.clone()  /  this.distribution.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])distribution.clone()  /  this.distribution.clone();	  double[]    observed    =(double[])this.distribution.clone()    /    distribution.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	122	None	replace
176	[BUG]  [BUGGY]  double[]  observed  =(double[])this.distribution.clone()  *  distribution.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double[]  observed  =(double[])this.distribution.clone()  *  distribution.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])this.distribution.clone()  *  distribution.clone();	  double[]    observed    =(double[])this.distribution.clone()    /    distribution.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	122	None	replace
177	[BUG]  [BUGGY]  long  sumSq  =  0.001;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long  sumSq  =  0.001;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long  sumSq  =  0.001;	  double    sumSq    =    0.001;    long    sumSq    =    0.001;    	non-compiled	[CE]  possible  loss  of  precision	39	None	replace
178	[BUG]  [BUGGY]  long[]  observed  =  distribution.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =  distribution.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =  distribution.clone();	  long[]    observed    =    x.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	106	None	replace
179	[BUG]  [BUGGY]  long[]  observed  =  this.x.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =  this.x.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =  this.x.clone();	  long[]    observed    =    x.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	106	None	replace
180	[BUG]  [BUGGY]  long[]  observed  =  distribution.x.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =  distribution.x.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =  distribution.x.clone();	  long[]    observed    =    x.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	106	None	replace
181	[BUG]  [BUGGY]  Int  observedCount  =  observed.length  -  1;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  Int  observedCount  =  observed.length  -  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	Int  observedCount  =  observed.length  -  1;	          int    observedCount    =    observed.length    -    1;    Int    observedCount    =    observed.length    -    1;    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
182	[BUG]  [BUGGY]  long  observedCount  =  observed.length  -  1;  Int  observedCount  =  observed.length  -  1;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long  observedCount  =  observed.length  -  1;  Int  observedCount  =  observed.length  -  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long  observedCount  =  observed.length  -  1;  Int  observedCount  =  observed.length  -  1;	          int    observedCount    =    observed.length    -    1;    Int    observedCount    =    observed.length    -    1;    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
183	[BUG]  [BUGGY]  double  observedCount  =  observed.length  -  2;  [CE]  cannot  find  symbol  sumSq  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  observedCount  =  observed.length  -  2;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  observedCount  =  observed.length  -  2;	  double    observedCount    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol  sumSq	65	None	replace
184	[BUG]  [BUGGY]  double  observedCount  =  observed.length  /  2;  [CE]  cannot  find  symbol  sumSq  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  observedCount  =  observed.length  /  2;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  observedCount  =  observed.length  /  2;	  double    observedCount    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol  sumSq	65	None	replace
185	[BUG]  [BUGGY]  long  observedCount  =  observed.length  -  1;  int  observed.length  =  observed.length  -  1;  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long  observedCount  =  observed.length  -  1;  int  observed.length  =  observed.length  -  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long  observedCount  =  observed.length  -  1;  int  observed.length  =  observed.length  -  1;	          int    observedCount    =    observed.length    -    1;    int    observed.length    =    observed.length    -    1;    	non-compiled	[CE]  ';'  expected	4	None	replace
186	[BUG]  [BUGGY]  int  observedLength  =  observed.length  /  2;  [CE]  cannot  find  symbol  sumSq  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  observedLength  =  observed.length  /  2;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  observedLength  =  observed.length  /  2;	  int    observedLength    =    observed.length    -    2;    	non-compiled	[CE]  cannot  find  symbol  sumSq	76	None	replace
187	[BUG]  [BUGGY]          int    observedCount    =    observed.length;    int  observedcount  =  observed.length;  int  observedCount  =  observed.length;  int  observedcount  =  observed.length;  [CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]          int    observedCount    =    observed.length;    int  observedcount  =  observed.length;  int  observedCount  =  observed.length;  int  observedcount  =  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	                int        observedCount        =        observed.length;        int    observedcount    =    observed.length;    int  observedCount  =  observed.length;  int  observedcount  =  observed.length;	  	non-compiled	[CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])	88	None	add
188	[BUG]  [BUGGY]          int    observedCount    =    observed.length;    int  observedcount  =  observed.length;  int  observed.length  =  observed.length;  int  observedcount  =  observed.length;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]          int    observedCount    =    observed.length;    int  observedcount  =  observed.length;  int  observed.length  =  observed.length;  int  observedcount  =  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	                int        observedCount        =        observed.length;        int    observedcount    =    observed.length;    int  observed.length  =  observed.length;  int  observedcount  =  observed.length;	  	non-compiled	[CE]  ';'  expected	88	None	add
189	[BUG]  [BUGGY]          int    observedCount    =    observed.length;    int  observedcount  =  observed.length;  int  observedcount  =  observed.length;  int  observedcount  =  observed.length;  [CE]  variable  observedcount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]          int    observedCount    =    observed.length;    int  observedcount  =  observed.length;  int  observedcount  =  observed.length;  int  observedcount  =  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	                int        observedCount        =        observed.length;        int    observedcount    =    observed.length;    int  observedcount  =  observed.length;  int  observedcount  =  observed.length;	  	non-compiled	[CE]  variable  observedcount  is  already  defined  in  method  chiSquare(double[],long[])	88	None	add
190	[BUG]  [BUGGY]          int    observedCount    =    observed.length;    int  observedcount  =  observed.length;  int  observed  =  observed.length;  int  observedcount  =  observed.length;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]          int    observedCount    =    observed.length;    int  observedcount  =  observed.length;  int  observed  =  observed.length;  int  observedcount  =  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	                int        observedCount        =        observed.length;        int    observedcount    =    observed.length;    int  observed  =  observed.length;  int  observedcount  =  observed.length;	  	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	88	None	add
191	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.0d  *  observed.length  +  1;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	double  sumSq  =  0.0d  *  observed.length  +  1;	  double    sumSq    =    0.0d    *    observed.length;    	compilable	  [FE]  AssertionFailedError  	27	6	replace
192	[BUG]  [BUGGY]  double  sumSq  =  0.0d  *  observed.length  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.0d  *  observed.length  +  1;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  sumSq  =  0.0d  *  observed.length  +  1;	  double    sumSq    =    0.0d    *    observed.length;    	compilable	  [FE]  AssertionFailedError  	27	6	replace
193	[BUG]  [BUGGY]  double  expected  =  new  double[expected.length];  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  expected  =  new  double[expected.length];  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  expected  =  new  double[expected.length];	  int    expected    =    new    int[expected.length];    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	62	None	replace
194	[BUG]  [BUGGY]  int  expected  =  new  int[observed.length];  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                      AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  expected  =  new  int[observed.length];  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  expected  =  new  int[observed.length];	  int    expected    =    new    int[expected.length];    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	62	None	replace
195	[BUG]  [BUGGY]  double  expected  =  new  int[expected.length];  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  expected  =  new  int[expected.length];  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  expected  =  new  int[expected.length];	  int    expected    =    new    int[expected.length];    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	62	None	replace
196	[BUG]  [BUGGY]  long  expected  =  new  long[expected.length];  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long  expected  =  new  long[expected.length];  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long  expected  =  new  long[expected.length];	  int    expected    =    new    int[expected.length];    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	62	None	replace
197	[BUG]  [BUGGY]  int  observedCount  =  observed.length  /  2  +  1;  [CE]  cannot  find  symbol  sumSq  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  observedCount  =  observed.length  /  2  +  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  observedCount  =  observed.length  /  2  +  1;	  int    observedCount    =    observed.length    /    2;    	non-compiled	[CE]  cannot  find  symbol  sumSq	66	None	replace
198	[BUG]  [BUGGY]  Double[]  observed  =(double[])super.chiSquare(expected,  observed,  null);  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                      AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  Double[]  observed  =(double[])super.chiSquare(expected,  observed,  null);  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	Double[]  observed  =(double[])super.chiSquare(expected,  observed,  null);	  Double[]    observed    =(double[])super.chiSquare(expected,    observed);    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	25	None	replace
199	[BUG]  [BUGGY]  Double[]  observed  =(double[])super.chiSquare(expected,  observed,  false);  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  Double[]  observed  =(double[])super.chiSquare(expected,  observed,  false);  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	Double[]  observed  =(double[])super.chiSquare(expected,  observed,  false);	  Double[]    observed    =(double[])super.chiSquare(expected,    observed);    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	25	None	replace
200	[BUG]  [BUGGY]  long[]  observed  =(long[])this.retribution.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =(long[])this.retribution.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =(long[])this.retribution.clone();	  double[]    observed    =(double[])this.retribution.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	119	None	replace
201	[BUG]  [BUGGY]  long[]  observed  =(double[])this.retribution.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =(double[])this.retribution.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =(double[])this.retribution.clone();	  double[]    observed    =(double[])this.retribution.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	119	None	replace
202	[BUG]  [BUGGY]  double[]  observed  =(double[])retribution.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double[]  observed  =(double[])retribution.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])retribution.clone();	  double[]    observed    =(double[])this.retribution.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	119	None	replace
203	[BUG]  [BUGGY]  long  sumSq  =  0.0d  +  observed.length;  int  sumSq  =  0.0d  +  observed.length;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long  sumSq  =  0.0d  +  observed.length;  int  sumSq  =  0.0d  +  observed.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long  sumSq  =  0.0d  +  observed.length;  int  sumSq  =  0.0d  +  observed.length;	  double    sumSq    =    0.0d    +    observed.length;    int    sumSq    =    0.0d    +    observed.length;    	non-compiled	[CE]  possible  loss  of  precision	49	None	replace
204	[BUG]  [BUGGY]  long[]  expected  =  observed.length  -  observed.length;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  observed.length  -  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  observed.length  -  observed.length;	  long[]    expected    =    observed.length    -    observed.cloneTree();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	125	None	replace
205	[BUG]  [BUGGY]  long[]  expected  =  observed.length  /  observed.cloneTree();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  observed.length  /  observed.cloneTree();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  observed.length  /  observed.cloneTree();	  long[]    expected    =    observed.length    -    observed.cloneTree();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	125	None	replace
206	[BUG]  [BUGGY]  long[]  expected  =  observed.length  *  observed.cloneTree();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                      AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  observed.length  *  observed.cloneTree();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  observed.length  *  observed.cloneTree();	  long[]    expected    =    observed.length    -    observed.cloneTree();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	125	None	replace
207	[BUG]  [BUGGY]  double  sumSq  =  0.0d  /  observed.length;  double  sumSq  =  0.0d  /  observed.length;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.0d  /  observed.length;  double  sumSq  =  0.0d  /  observed.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    0.0d    /    observed.length;    double  sumSq  =  0.0d  /  observed.length;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	30	None	add
208	[BUG]  [BUGGY]  double  sumSq  =  0.0d  /  observed.length;  Double  sumSq  =  0.0d  /  observed.length;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.0d  /  observed.length;  Double  sumSq  =  0.0d  /  observed.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    0.0d    /    observed.length;    Double  sumSq  =  0.0d  /  observed.length;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	30	None	add
209	[BUG]  [BUGGY]  double  sumSq  =  0.0d  /  observed.length;  long  sumSq  =  0.0d  /  observed.length;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.0d  /  observed.length;  long  sumSq  =  0.0d  /  observed.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    0.0d    /    observed.length;    long  sumSq  =  0.0d  /  observed.length;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	30	None	add
210	[BUG]  [BUGGY]  double  sumSq  =  0.0d  /  observed.length;  int  sumSq  =  0.0d  /  observed.length;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.0d  /  observed.length;  int  sumSq  =  0.0d  /  observed.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    0.0d    /    observed.length;    int  sumSq  =  0.0d  /  observed.length;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	30	None	add
211	[BUG]  [BUGGY]  double  sumSq  =  0.0d  /  observed.length;  double  sumSq  =  0.00d  /  observed.length;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.0d  /  observed.length;  double  sumSq  =  0.00d  /  observed.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    0.0d    /    observed.length;    double  sumSq  =  0.00d  /  observed.length;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	30	None	add
212	[BUG]  [BUGGY]          int    observedCount    =    observed.length    -    1;    int  observedcount  =  observed.length  -  1;  int  observedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  [CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]          int    observedCount    =    observed.length    -    1;    int  observedcount  =  observed.length  -  1;  int  observedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	                int        observedCount        =        observed.length        -        1;        int    observedcount    =    observed.length    -    1;    int  observedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;	  	non-compiled	[CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])	6	None	add
213	[BUG]  [BUGGY]          int    observedCount    =    observed.length    -    1;    int  observedcount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  [CE]  variable  observedcount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]          int    observedCount    =    observed.length    -    1;    int  observedcount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	                int        observedCount        =        observed.length        -        1;        int    observedcount    =    observed.length    -    1;    int  observedcount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;	  	non-compiled	[CE]  variable  observedcount  is  already  defined  in  method  chiSquare(double[],long[])	6	None	add
214	[BUG]  [BUGGY]          int    observedCount    =    observed.length    -    1;    int  observedcount  =  observed.length  -  1;  int  observed.length  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]          int    observedCount    =    observed.length    -    1;    int  observedcount  =  observed.length  -  1;  int  observed.length  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	                int        observedCount        =        observed.length        -        1;        int    observedcount    =    observed.length    -    1;    int  observed.length  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;	  	non-compiled	[CE]  ';'  expected	6	None	add
215	[BUG]  [BUGGY]          int    observedCount    =    observed.length    -    1;    int  observedcount  =  observed.length  -  1;  long  observedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  [CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]          int    observedCount    =    observed.length    -    1;    int  observedcount  =  observed.length  -  1;  long  observedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	                int        observedCount        =        observed.length        -        1;        int    observedcount    =    observed.length    -    1;    long  observedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;	  	non-compiled	[CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])	6	None	add
216	[BUG]  [BUGGY]  long[]  observed  =  this.chiSquare.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =  this.chiSquare.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =  this.chiSquare.clone();	  long[]    observed    =    chiSquare.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	105	None	replace
217	[BUG]  [BUGGY]  double  sumSq  =  0.0d;  int  sumSq  =  0.0d;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.0d;  int  sumSq  =  0.0d;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  sumSq  =  0.0d;  int  sumSq  =  0.0d;	  double    sumSq    =    0.0;    int    sumSq    =    0.0;    	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	45	None	replace
218	[BUG]  [BUGGY]  Long[]  expected  =  observed.clone();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  Long[]  expected  =  observed.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	Long[]  expected  =  observed.clone();	  Long[]    expected    =    observed.cloneTree();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	52	None	replace
219	[BUG]  [BUGGY]  Long[]  expected  =  observed.cloneTree(true);  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  Long[]  expected  =  observed.cloneTree(true);  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	Long[]  expected  =  observed.cloneTree(true);	  Long[]    expected    =    observed.cloneTree();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	52	None	replace
220	[BUG]  [BUGGY]  long[]  expected  =  observed.lengths,  observed.lengths.clone();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  observed.lengths,  observed.lengths.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  observed.lengths,  observed.lengths.clone();	  long[]    expected    =    observed.lengths.clone();    	non-compiled	[CE]  ';'  expected	127	None	replace
221	[BUG]  [BUGGY]  long[]  expected  =  observed.lengths.toArray(new  long[expected.lengths]);  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  observed.lengths.toArray(new  long[expected.lengths]);  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  observed.lengths.toArray(new  long[expected.lengths]);	  long[]    expected    =    observed.lengths.clone();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	127	None	replace
222	[BUG]  [BUGGY]  double[]  observed  =(double[])expected.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double[]  observed  =(double[])expected.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])expected.clone();	  double[]    observed    =(double[])reversed.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	111	None	replace
223	[BUG]  [BUGGY]  long[]  observed  =(long[])reversed.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =(long[])reversed.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =(long[])reversed.clone();	  double[]    observed    =(double[])reversed.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	111	None	replace
224	[BUG]  [BUGGY]  double[]  observed  =(double[])this.reversed.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double[]  observed  =(double[])this.reversed.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])this.reversed.clone();	  double[]    observed    =(double[])reversed.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	111	None	replace
225	[BUG]  [BUGGY]  long[]  expected  =  new  long[expected.length  +  3];  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  new  long[expected.length  +  3];  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  new  long[expected.length  +  3];	  long[]    expected    =    new    long[expected.length    +    2];    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	97	None	replace
226	[BUG]  [BUGGY]  double  observedCount  =  observed.length  /  1;  [CE]  cannot  find  symbol  sumSq  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  observedCount  =  observed.length  /  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  observedCount  =  observed.length  /  1;	  double    observedCount    =    observed.length    -    1;    	non-compiled	[CE]  cannot  find  symbol  sumSq	12	None	replace
227	[BUG]  [BUGGY]  double  observedLength  =  observed.length  -  1;  [CE]  cannot  find  symbol  sumSq  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  observedLength  =  observed.length  -  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  observedLength  =  observed.length  -  1;	  double    observedLength    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol  sumSq	77	None	replace
228	[BUG]  [BUGGY]  double  observedLength  =  expected.length;  [CE]  cannot  find  symbol  sumSq  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  observedLength  =  expected.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  observedLength  =  expected.length;	  double    observedLength    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol  sumSq	77	None	replace
229	[BUG]  [BUGGY]  double  observedLength  =  observed.length  -  2;  [CE]  cannot  find  symbol  sumSq  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  observedLength  =  observed.length  -  2;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  observedLength  =  observed.length  -  2;	  double    observedLength    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol  sumSq	77	None	replace
230	[BUG]  [BUGGY]  Long  observedLength  =  observed.length;  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  Long  observedLength  =  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	Long  observedLength  =  observed.length;	          int    observedLength    =    observed.length;    Integer    observedLength    =    observed.length;    	non-compiled	[CE]  incompatible  types	54	None	replace
231	[BUG]  [BUGGY]  long[]  observed  =  observed.toArray(new  long[3]);  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =  observed.toArray(new  long[3]);  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =  observed.toArray(new  long[3]);	  long[]    observed    =    observed.toArray(new    long[0]);    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	116	None	replace
232	[BUG]  [BUGGY]  long[]  expected  =  observed.length  +  1;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  observed.length  +  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  observed.length  +  1;	  long[]    expected    =    observed.length;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	124	None	replace
233	[BUG]  [BUGGY]  long[]  expected  =  new  long[observed.length  -  3];  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                      AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  new  long[observed.length  -  3];  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  new  long[observed.length  -  3];	  long[]    expected    =    new    long[observed.length    -    1];    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	36	None	replace
234	[BUG]  [BUGGY]  double[]  observed  =(double[])this.redDistribution.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double[]  observed  =(double[])this.redDistribution.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])this.redDistribution.clone();	  double[]    observed    =(double[])this.red    distribution.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	118	None	replace
235	[BUG]  [BUGGY]  long[]  expected  =  new  long[expected.length  *  2];  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  new  long[expected.length  *  2];  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  new  long[expected.length  *  2];	  long[]    expected    =    new    long[expected.length    +    2];    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	97	None	replace
236	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.00d  +  expected.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	double  sumSq  =  0.00d  +  expected.length;	  double    sumSq    =    0.0d    +    observed.length;    double    sumSq    =    0.00d    +    observed.length;    	compilable	  [FE]  AssertionFailedError  	129	6	replace
237	[BUG]  [BUGGY]  double  sumSq  =  0.00d  +  expected.length;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.00d  +  expected.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  sumSq  =  0.00d  +  expected.length;	  double    sumSq    =    0.0d    +    observed.length;    double    sumSq    =    0.00d    +    observed.length;    	compilable	  [FE]  AssertionFailedError  	129	6	replace
238	[BUG]  [BUGGY]  double[]  observed  =(double[])this.distribution.chiSquare();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double[]  observed  =(double[])this.distribution.chiSquare();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])this.distribution.chiSquare();	  double[]    observed    =(double[])this.distribution.reverse();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	90	None	replace
239	[BUG]  [BUGGY]  double[]  observed  =(double[])this.distribution.longValue();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                      AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double[]  observed  =(double[])this.distribution.longValue();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])this.distribution.longValue();	  double[]    observed    =(double[])this.distribution.reverse();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	90	None	replace
240	[BUG]  [BUGGY]  double[]  observed  =(double[])this.chiSquareTestImpl();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double[]  observed  =(double[])this.chiSquareTestImpl();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])this.chiSquareTestImpl();	  double[]    observed    =(double[])this.chiSquare();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	102	None	replace
241	[BUG]  [BUGGY]  long  observed[]  =  this.x.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long  observed[]  =  this.x.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long  observed[]  =  this.x.clone();	  long    observed[]    =    x.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	95	None	replace
242	[BUG]  [BUGGY]  long  observed[]  =  distribution.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long  observed[]  =  distribution.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long  observed[]  =  distribution.clone();	  long    observed[]    =    x.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	95	None	replace
243	[BUG]  [BUGGY]  long[]  expected  =  new  long[expected.length  *  1];  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  new  long[expected.length  *  1];  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  new  long[expected.length  *  1];	  long[]    expected    =    new    long[expected.length    +    1];    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	96	None	replace
244	[BUG]  [BUGGY]          int    observedCount    =    observed.length    -    1;    int  observedcount  =  observed.length  -  1;  Integer  observedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  [CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]          int    observedCount    =    observed.length    -    1;    int  observedcount  =  observed.length  -  1;  Integer  observedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	                int        observedCount        =        observed.length        -        1;        int    observedcount    =    observed.length    -    1;    Integer  observedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;	  	non-compiled	[CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])	6	None	add
245	[BUG]  [BUGGY]          int    observedCount    =    observed.length    -    1;    int  observedcount  =  observed.length  -  1;  long[]  observedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  [CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]          int    observedCount    =    observed.length    -    1;    int  observedcount  =  observed.length  -  1;  long[]  observedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	                int        observedCount        =        observed.length        -        1;        int    observedcount    =    observed.length    -    1;    long[]  observedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;	  	non-compiled	[CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])	6	None	add
246	[BUG]  [BUGGY]  long[]  observed  =(long[])this.distribution.chiSquare();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =(long[])this.distribution.chiSquare();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =(long[])this.distribution.chiSquare();	  long[]    observed    =(long[])super.chiSquare();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	14	None	replace
247	[BUG]  [BUGGY]  int  observedCount  =  observed.length  -  2;  int  observedLength  =  observed.length  -  2;  [CE]  cannot  find  symbol  sumSq  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  observedCount  =  observed.length  -  2;  int  observedLength  =  observed.length  -  2;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  observedCount  =  observed.length  -  2;  int  observedLength  =  observed.length  -  2;	          int    observedCount    =    observed.length    -    1;    int    observedLength    =    observed.length    -    1;    	non-compiled	[CE]  cannot  find  symbol  sumSq	9	None	replace
248	[BUG]  [BUGGY]          int    expectedCount    =    observed.length;    int  expectCount  =  observed.length;  long  expectedCount  =  observed.length;  int  expectCount  =  observed.length;  [CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]          int    expectedCount    =    observed.length;    int  expectCount  =  observed.length;  long  expectedCount  =  observed.length;  int  expectCount  =  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	                int        expectedCount        =        observed.length;        int    expectCount    =    observed.length;    long  expectedCount  =  observed.length;  int  expectCount  =  observed.length;	  	non-compiled	[CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])	20	None	add
249	[BUG]  [BUGGY]          int    expectedCount    =    observed.length;    int  expectCount  =  observed.length;  int  expectedCount  =  observed.length;  int  ExpectedCount  =  observed.length;  [CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]          int    expectedCount    =    observed.length;    int  expectCount  =  observed.length;  int  expectedCount  =  observed.length;  int  ExpectedCount  =  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	                int        expectedCount        =        observed.length;        int    expectCount    =    observed.length;    int  expectedCount  =  observed.length;  int  ExpectedCount  =  observed.length;	  	non-compiled	[CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])	20	None	add
250	[BUG]  [BUGGY]  int  expected  =  new  int[expected.length  -  1];  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  expected  =  new  int[expected.length  -  1];  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  expected  =  new  int[expected.length  -  1];	  int    expected    =    new    int[expected.length];    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	62	None	replace
251	[BUG]  [BUGGY]  int  observedLength  =  expected.length;  [CE]  cannot  find  symbol  sumSq  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  observedLength  =  expected.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  observedLength  =  expected.length;	          int    observedLength    =    observed.length;    long    observedLength    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol  sumSq	55	None	replace
252	[BUG]  [BUGGY]  double[]  observed  =(double[])reverse.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double[]  observed  =(double[])reverse.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])reverse.clone();	  double[]    observed    =(double[])distribution.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	67	None	replace
253	[BUG]  [BUGGY]  long[]  expected  =  observed  ==  null?  null  :  observed.length.clone();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  observed  ==  null?  null  :  observed.length.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  observed  ==  null?  null  :  observed.length.clone();	  long[]    expected    =    observed    ==    null?    null    :    observed.clone();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	108	None	replace
254	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  /  2  +  4;  [CE]  cannot  find  symbol  sumSq  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  expectedCount  =  observed.length  /  2  +  4;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  expectedCount  =  observed.length  /  2  +  4;	  int    expectedCount    =    observed.length    /    2;    	non-compiled	[CE]  cannot  find  symbol  sumSq	59	None	replace
255	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  /  2  +  3;  [CE]  cannot  find  symbol  sumSq  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  expectedCount  =  observed.length  /  2  +  3;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  expectedCount  =  observed.length  /  2  +  3;	  int    expectedCount    =    observed.length    /    2;    	non-compiled	[CE]  cannot  find  symbol  sumSq	59	None	replace
256	[BUG]  [BUGGY]  double  observedCount  =  expected.length;  [CE]  cannot  find  symbol  sumSq  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  observedCount  =  expected.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  observedCount  =  expected.length;	  double    observedCount    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol  sumSq	65	None	replace
257	[BUG]  [BUGGY]  int  observedCount  =  observed.length  /  2  +  expected.length;  [CE]  cannot  find  symbol  sumSq  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  observedCount  =  observed.length  /  2  +  expected.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  observedCount  =  observed.length  /  2  +  expected.length;	  int    observedCount    =    observed.length    /    2;    	non-compiled	[CE]  cannot  find  symbol  sumSq	66	None	replace
258	[BUG]  [BUGGY]  int  observedCount  =  observed.length  /  2  +  4;  [CE]  cannot  find  symbol  sumSq  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  observedCount  =  observed.length  /  2  +  4;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  observedCount  =  observed.length  /  2  +  4;	  int    observedCount    =    observed.length    /    2;    	non-compiled	[CE]  cannot  find  symbol  sumSq	66	None	replace
259	[BUG]  [BUGGY]  long[]  expected  =  new  long[result.length  -  1];  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  new  long[result.length  -  1];  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  new  long[result.length  -  1];	  long[]    expected    =    new    long[result.length];    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	120	None	replace
260	[BUG]  [BUGGY]  long[]  expected  =  new  long[result.length  +  1];  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  new  long[result.length  +  1];  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  new  long[result.length  +  1];	  long[]    expected    =    new    long[result.length];    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	120	None	replace
261	[BUG]  [BUGGY]  double[]  observed  =(double[])distribution.reverseDistribution();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                      AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double[]  observed  =(double[])distribution.reverseDistribution();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])distribution.reverseDistribution();	  double[]    observed    =(double[])this.reverseDistribution();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	91	None	replace
262	[BUG]  [BUGGY]  long[]  expected  =  new  long[observed.length  *  2];  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  new  long[observed.length  *  2];  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  new  long[observed.length  *  2];	  long[]    expected    =    new    long[observed.length];    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	61	None	replace
263	[BUG]  [BUGGY]  double[]  observed  =(double[])this.reDistribution.clone()  /  distribution.length;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double[]  observed  =(double[])this.reDistribution.clone()  /  distribution.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])this.reDistribution.clone()  /  distribution.length;	  double[]    observed    =(double[])this.reDistribution.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	73	None	replace
264	[BUG]  [BUGGY]  int  observedLength  =  observed.length  -  2  +  1;  [CE]  cannot  find  symbol  sumSq  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  observedLength  =  observed.length  -  2  +  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  observedLength  =  observed.length  -  2  +  1;	  int    observedLength    =    observed.length    -    2;    	non-compiled	[CE]  cannot  find  symbol  sumSq	76	None	replace
265	[BUG]  [BUGGY]  Long[]  observed  =  this.observed.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  Long[]  observed  =  this.observed.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	Long[]  observed  =  this.observed.clone();	  long[]    observed    =    this.observed.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	115	None	replace
266	[BUG]  [BUGGY]  int  observedCount  =  expected.length;  [CE]  cannot  find  symbol  sumSq  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  observedCount  =  expected.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  observedCount  =  expected.length;	          int    observedCount    =    observed.length;    long    observedCount    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol  sumSq	94	None	replace
267	[BUG]  [BUGGY]  int  observedCount  =  observed.length  -  1  +  2;  [CE]  cannot  find  symbol  sumSq  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  observedCount  =  observed.length  -  1  +  2;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  observedCount  =  observed.length  -  1  +  2;	  int    observedCount    =    observed.length    -    1    +    1;    	non-compiled	[CE]  cannot  find  symbol  sumSq	98	None	replace
268	[BUG]  [BUGGY]  double  expectedCount  =  expected.length;  [CE]  cannot  find  symbol  sumSq  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  expectedCount  =  expected.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  expectedCount  =  expected.length;	  double    expectedCount    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol  sumSq	60	None	replace
269	[BUG]  [BUGGY]  long  observedCount  =  observed.length;  int  observedcount  =  observed.length;  [CE]  cannot  find  symbol  sumSq  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long  observedCount  =  observed.length;  int  observedcount  =  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long  observedCount  =  observed.length;  int  observedcount  =  observed.length;	          int    observedCount    =    observed.length;    int    observedcount    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol  sumSq	89	None	replace
270	[BUG]  [BUGGY]  int  observedCount  =  expected.length  -  1;  Int  observedCount  =  observed.length  -  1;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  observedCount  =  expected.length  -  1;  Int  observedCount  =  observed.length  -  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  observedCount  =  expected.length  -  1;  Int  observedCount  =  observed.length  -  1;	          int    observedCount    =    observed.length    -    1;    Int    observedCount    =    observed.length    -    1;    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
271	[BUG]  [BUGGY]  int  observedCount  =  observed.length  *  1;  [CE]  cannot  find  symbol  sumSq  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  observedCount  =  observed.length  *  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  observedCount  =  observed.length  *  1;	  int    observedCount    =    observed.length    /    1;    	non-compiled	[CE]  cannot  find  symbol  sumSq	11	None	replace
272	[BUG]  [BUGGY]  long[]  expected  =  observed.lengths  -  1;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  observed.lengths  -  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  observed.lengths  -  1;	  long[]    expected    =    observed.lengths;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	128	None	replace
273	[BUG]  [BUGGY]  long[]  expected  =  observed.lengths  +  1;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  observed.lengths  +  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  observed.lengths  +  1;	  long[]    expected    =    observed.lengths;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	128	None	replace
274	[BUG]  [BUGGY]          int    observedCount    =    observed.length;    int  observedcount  =  observed.length;  Integer  observedCount  =  observed.length;  int  observedcount  =  observed.length;  [CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]          int    observedCount    =    observed.length;    int  observedcount  =  observed.length;  Integer  observedCount  =  observed.length;  int  observedcount  =  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	                int        observedCount        =        observed.length;        int    observedcount    =    observed.length;    Integer  observedCount  =  observed.length;  int  observedcount  =  observed.length;	  	non-compiled	[CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])	88	None	add
275	[BUG]  [BUGGY]          int    observedCount    =    observed.length;    int  observedcount  =  observed.length;  long  observedCount  =  observed.length;  int  observedcount  =  observed.length;  [CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]          int    observedCount    =    observed.length;    int  observedcount  =  observed.length;  long  observedCount  =  observed.length;  int  observedcount  =  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	                int        observedCount        =        observed.length;        int    observedcount    =    observed.length;    long  observedCount  =  observed.length;  int  observedcount  =  observed.length;	  	non-compiled	[CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])	88	None	add
276	[BUG]  [BUGGY]          int    observedCount    =    observed.length;    int  observedcount  =  observed.length;  long[]  observed  =  observed.length;  int  observedcount  =  observed.length;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]          int    observedCount    =    observed.length;    int  observedcount  =  observed.length;  long[]  observed  =  observed.length;  int  observedcount  =  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	                int        observedCount        =        observed.length;        int    observedcount    =    observed.length;    long[]  observed  =  observed.length;  int  observedcount  =  observed.length;	  	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	88	None	add
277	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  -  1;  Int  expectedCount  =  observed.length;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  expectedCount  =  observed.length  -  1;  Int  expectedCount  =  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  expectedCount  =  observed.length  -  1;  Int  expectedCount  =  observed.length;	          int    expectedCount    =    observed.length;    Int    expectedCount    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
278	[BUG]  [BUGGY]  double[]  observed  =(double[])reverseEquals();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double[]  observed  =(double[])reverseEquals();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])reverseEquals();	  double[]    observed    =(double[])reverse();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	34	None	replace
279	[BUG]  [BUGGY]  Long[]  observed  =  chiSquare.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  Long[]  observed  =  chiSquare.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	Long[]  observed  =  chiSquare.clone();	  Long[]    observed    =    observed.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	80	None	replace
280	[BUG]  [BUGGY]  Long[]  observed  =  this.chiSquare.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  Long[]  observed  =  this.chiSquare.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	Long[]  observed  =  this.chiSquare.clone();	  Long[]    observed    =    observed.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	80	None	replace
281	[BUG]  [BUGGY]  int  observedCount  =  observed.length;  Int  observedCount  =  observedCount;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  observedCount  =  observed.length;  Int  observedCount  =  observedCount;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  observedCount  =  observed.length;  Int  observedCount  =  observedCount;	          int    observedCount    =    observed.length;    Int    observedCount    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
282	[BUG]  [BUGGY]  Long[]  expected  =  observed.cloneTree(this);  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  Long[]  expected  =  observed.cloneTree(this);  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	Long[]  expected  =  observed.cloneTree(this);	  Long[]    expected    =    observed.cloneTree();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	52	None	replace
283	[BUG]  [BUGGY]  Double[]  observed  =(double[])this.chiSquare(expected,  observed);  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                      AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  Double[]  observed  =(double[])this.chiSquare(expected,  observed);  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	Double[]  observed  =(double[])this.chiSquare(expected,  observed);	  Double[]    observed    =(double[])super.chiSquare(expected,    observed);    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	25	None	replace
284	[BUG]  [BUGGY]  Double[]  observed  =(double[])super.chiSquare(expected,  observed  -  1);  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  Double[]  observed  =(double[])super.chiSquare(expected,  observed  -  1);  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	Double[]  observed  =(double[])super.chiSquare(expected,  observed  -  1);	  Double[]    observed    =(double[])super.chiSquare(expected,    observed);    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	25	None	replace
285	[BUG]  [BUGGY]  long[]  expected  =  observed!=  null?  observed.length  :  Integer.MAX_VALUE;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  observed!=  null?  observed.length  :  Integer.MAX_VALUE;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  observed!=  null?  observed.length  :  Integer.MAX_VALUE;	  long[]    expected    =    observed!=    null?    observed.clone()    :    Integer.MAX_VALUE;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	72	None	replace
286	[BUG]  [BUGGY]  Long[]  observed  =  this.chiSquareTestImpl.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  Long[]  observed  =  this.chiSquareTestImpl.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	Long[]  observed  =  this.chiSquareTestImpl.clone();	  long[]    observed    =    this.chiSquareTestImpl.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	104	None	replace
287	[BUG]  [BUGGY]  int  observedLength  =  observed.length;  Int  observedLength  =  observedLength;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  observedLength  =  observed.length;  Int  observedLength  =  observedLength;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  observedLength  =  observed.length;  Int  observedLength  =  observedLength;	          int    observedLength    =    observed.length;    Int    observedLength    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
288	[BUG]  [BUGGY]  int  observedLength  =  expected.length;  Int  observedLength  =  observed.length;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  observedLength  =  expected.length;  Int  observedLength  =  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  observedLength  =  expected.length;  Int  observedLength  =  observed.length;	          int    observedLength    =    observed.length;    Int    observedLength    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
289	[BUG]  [BUGGY]          int    observedCount    =    observed.length    -    1;    int  observedLength  =  observed.length  -  1;  Integer  observedCount  =  observed.length  -  1;  int  observedLength  =  observed.length  -  1;  [CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]          int    observedCount    =    observed.length    -    1;    int  observedLength  =  observed.length  -  1;  Integer  observedCount  =  observed.length  -  1;  int  observedLength  =  observed.length  -  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	                int        observedCount        =        observed.length        -        1;        int    observedLength    =    observed.length    -    1;    Integer  observedCount  =  observed.length  -  1;  int  observedLength  =  observed.length  -  1;	  	non-compiled	[CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])	8	None	add
290	[BUG]  [BUGGY]          int    observedCount    =    observed.length    -    1;    int  observedLength  =  observed.length  -  1;  long[]  observedCount  =  observed.length  -  1;  int  observedLength  =  observed.length  -  1;  [CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]          int    observedCount    =    observed.length    -    1;    int  observedLength  =  observed.length  -  1;  long[]  observedCount  =  observed.length  -  1;  int  observedLength  =  observed.length  -  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	                int        observedCount        =        observed.length        -        1;        int    observedLength    =    observed.length    -    1;    long[]  observedCount  =  observed.length  -  1;  int  observedLength  =  observed.length  -  1;	  	non-compiled	[CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])	8	None	add
291	[BUG]  [BUGGY]  long[]  observed  =(long[])this.chiSquareTestImpl.reverse();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =(long[])this.chiSquareTestImpl.reverse();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =(long[])this.chiSquareTestImpl.reverse();	  long[]    observed    =(long[])this.reverse();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	32	None	replace
292	[BUG]  [BUGGY]  int[]  observed  =  this.chiSquareTestImpl.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int[]  observed  =  this.chiSquareTestImpl.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int[]  observed  =  this.chiSquareTestImpl.clone();	  int[]    observed    =    observed.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	79	None	replace
293	[BUG]  [BUGGY]  int[]  observed  =  x.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int[]  observed  =  x.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int[]  observed  =  x.clone();	  int[]    observed    =    observed.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	79	None	replace
294	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  1.0  *  observed.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	double  sumSq  =  1.0  *  observed.length;	  double    sumSq    =    0.0d    *    observed.length;    	compilable	  [FE]  AssertionFailedError  	27	6	replace
295	[BUG]  [BUGGY]  double  sumSq  =  1.0  *  observed.length;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  1.0  *  observed.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  sumSq  =  1.0  *  observed.length;	  double    sumSq    =    0.0d    *    observed.length;    	compilable	  [FE]  AssertionFailedError  	27	6	replace
296	[BUG]  [BUGGY]  long[]  expected  =  observed.cloneTree(this,  null);  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  observed.cloneTree(this,  null);  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  observed.cloneTree(this,  null);	  long[]    expected    =    observed.cloneTree(this);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	110	None	replace
297	[BUG]  [BUGGY]  long  sumSq  =  0.0d  +  observed.length;  int  observed.length  =  observed.length;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long  sumSq  =  0.0d  +  observed.length;  int  observed.length  =  observed.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long  sumSq  =  0.0d  +  observed.length;  int  observed.length  =  observed.length;	  double    sumSq    =    0.0d    +    observed.length;    int    observed.length    =    observed.length;    	non-compiled	[CE]  ';'  expected	50	None	replace
298	[BUG]  [BUGGY]  int  observedCount  =  expected.length  -  1;  [CE]  cannot  find  symbol  sumSq  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  observedCount  =  expected.length  -  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  observedCount  =  expected.length  -  1;	          int    observedCount    =    observed.length    -    1;    long    observedCount    =    observed.length    -    1;    	non-compiled	[CE]  cannot  find  symbol  sumSq	101	None	replace
299	[BUG]  [BUGGY]  int  expectedLength  =  observed.length  -  1;  [CE]  cannot  find  symbol  sumSq  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  expectedLength  =  observed.length  -  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  expectedLength  =  observed.length  -  1;	  int    observedLength    =    observed.length    -    1;    	non-compiled	[CE]  cannot  find  symbol  sumSq	74	None	replace
300	[BUG]  [BUGGY]  double[]  observed  =  distribution.length.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double[]  observed  =  distribution.length.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =  distribution.length.clone();	  double[]    observed    =    this.distribution.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	123	None	replace
301	[BUG]  [BUGGY]  double  expectedLength  =  observed.length;  [CE]  cannot  find  symbol  sumSq  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  expectedLength  =  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  expectedLength  =  observed.length;	  double    observedLength    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol  sumSq	77	None	replace
302	[BUG]  [BUGGY]  long[]  expected  =  observed.lengths.toArray(new  long[results.size()  ]);  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  observed.lengths.toArray(new  long[results.size()  ]);  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  observed.lengths.toArray(new  long[results.size()  ]);	  long[]    expected    =    observed.lengths.clone();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	127	None	replace
303	[BUG]  [BUGGY]  long[]  expected  =  observed.lengths.toArray(new  long[0]);  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  observed.lengths.toArray(new  long[0]);  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  observed.lengths.toArray(new  long[0]);	  long[]    expected    =    observed.lengths.clone();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	127	None	replace
304	[BUG]  [BUGGY]  Long[]  observed  =(long[])super.chiSquare(expected,  observed);  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  Long[]  observed  =(long[])super.chiSquare(expected,  observed);  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	Long[]  observed  =(long[])super.chiSquare(expected,  observed);	  long[]    observed    =(long[])super.chiSquare(expected,    observed);    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	23	None	replace
305	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  -  1;  int  expectCount  =  observed.length;  [CE]  cannot  find  symbol  sumSq  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  expectedCount  =  observed.length  -  1;  int  expectCount  =  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  expectedCount  =  observed.length  -  1;  int  expectCount  =  observed.length;	          int    expectedCount    =    observed.length;    int    expectCount    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol  sumSq	21	None	replace
306	[BUG]  [BUGGY]  int[]  expected  =  observed.lengths;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int[]  expected  =  observed.lengths;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int[]  expected  =  observed.lengths;	  int[]    expected    =    observed.clone();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	71	None	replace
307	[BUG]  [BUGGY]  double[]  observed  =(double[])this.chiSquareDistribution.doubleValue();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double[]  observed  =(double[])this.chiSquareDistribution.doubleValue();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])this.chiSquareDistribution.doubleValue();	  double[]    observed    =(double[])this.chiSquareDistribution.reverse();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	126	None	replace
308	[BUG]  [BUGGY]  double[]  observed  =(double[])this.chiSquareDistribution.longValue();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                      AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double[]  observed  =(double[])this.chiSquareDistribution.longValue();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])this.chiSquareDistribution.longValue();	  double[]    observed    =(double[])this.chiSquareDistribution.reverse();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	126	None	replace
309	[BUG]  [BUGGY]  long[]  observed  =  this.expected.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =  this.expected.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =  this.expected.clone();	  long[]    observed    =    expected.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	78	None	replace
310	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  1.0  /  observed.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	double  sumSq  =  1.0  /  observed.length;	  double    sumSq    =    0.0d    /    observed.length;    	compilable	  [FE]  AssertionFailedError  	31	6	replace
311	[BUG]  [BUGGY]  double  sumSq  =  1.0  /  observed.length;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  1.0  /  observed.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  sumSq  =  1.0  /  observed.length;	  double    sumSq    =    0.0d    /    observed.length;    	compilable	  [FE]  AssertionFailedError  	31	6	replace
312	[BUG]  [BUGGY]  double  sumSq  =  0.0001;  double  sumSq  =  0.01;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.0001;  double  sumSq  =  0.01;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    0.0001;    double  sumSq  =  0.01;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	16	None	add
313	[BUG]  [BUGGY]  long[]  expected  =  observed!=  null?  Long.MAX_VALUE  :  observed.length;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  observed!=  null?  Long.MAX_VALUE  :  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  observed!=  null?  Long.MAX_VALUE  :  observed.length;	  long[]    expected    =    observed!=    null?    Long.MAX_VALUE    :    observed.clone();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	107	None	replace
314	[BUG]  [BUGGY]  Long[]  expected  =  observed!=  null?  Long.MAX_VALUE  :  observed.clone();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  Long[]  expected  =  observed!=  null?  Long.MAX_VALUE  :  observed.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	Long[]  expected  =  observed!=  null?  Long.MAX_VALUE  :  observed.clone();	  long[]    expected    =    observed!=    null?    Long.MAX_VALUE    :    observed.clone();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	107	None	replace
315	[BUG]  [BUGGY]  double  observed[]  =  observed.toArray();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  observed[]  =  observed.toArray();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  observed[]  =  observed.toArray();	  double    observed[]    =    observed.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	130	None	replace
316	[BUG]  [BUGGY]  double[]  observed  =(double[])x.reverseDistribution();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                      AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double[]  observed  =(double[])x.reverseDistribution();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])x.reverseDistribution();	  double[]    observed    =(double[])this.reverseDistribution();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	91	None	replace
317	[BUG]  [BUGGY]  double[]  observed  =(double[])this.distribution();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double[]  observed  =(double[])this.distribution();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])this.distribution();	  double[]    observed    =(double[])this.reverseDistribution();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	91	None	replace
318	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.001  +  observed.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	double  sumSq  =  0.001  +  observed.length;	  double    sumSq    =    0.0d    +    observed.length;    double    sumSq    =    0.00d    +    observed.length;    	compilable	  [FE]  AssertionFailedError  	129	6	replace
319	[BUG]  [BUGGY]  double  sumSq  =  0.001  +  observed.length;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0.001  +  observed.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  sumSq  =  0.001  +  observed.length;	  double    sumSq    =    0.0d    +    observed.length;    double    sumSq    =    0.00d    +    observed.length;    	compilable	  [FE]  AssertionFailedError  	129	6	replace
320	[BUG]  [BUGGY]          int    observedCount    =    observed.length;    int  observedcount  =  observed.length;  double  observedCount  =  observed.length;  int  observedcount  =  observed.length;  [CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]          int    observedCount    =    observed.length;    int  observedcount  =  observed.length;  double  observedCount  =  observed.length;  int  observedcount  =  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	                int        observedCount        =        observed.length;        int    observedcount    =    observed.length;    double  observedCount  =  observed.length;  int  observedcount  =  observed.length;	  	non-compiled	[CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])	88	None	add
321	[BUG]  [BUGGY]  Long[]  expected  =  observed.length;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  Long[]  expected  =  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	Long[]  expected  =  observed.length;	  Long[]    expected    =    observed.cloneTree();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	52	None	replace
322	[BUG]  [BUGGY]  Long[]  expected  =  observed.lengths();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  Long[]  expected  =  observed.lengths();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	Long[]  expected  =  observed.lengths();	  Long[]    expected    =    observed.cloneTree();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	52	None	replace
323	[BUG]  [BUGGY]  double[]  observed  =(double[])scale();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double[]  observed  =(double[])scale();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])scale();	  double[]    observed    =(double[])reverse();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	34	None	replace
324	[BUG]  [BUGGY]  double[]  observed  =(double[])number();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double[]  observed  =(double[])number();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])number();	  double[]    observed    =(double[])reverse();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	34	None	replace
325	[BUG]  [BUGGY]  int  observedCount  =  observed.length  -  2  +  1;  [CE]  cannot  find  symbol  sumSq  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  observedCount  =  observed.length  -  2  +  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  observedCount  =  observed.length  -  2  +  1;	  int    observedCount    =    observed.length    -    1    +    1;    	non-compiled	[CE]  cannot  find  symbol  sumSq	98	None	replace
326	[BUG]  [BUGGY]  Long[]  observed  =  observed.toArray(new  Long[result.size()  ]);  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  Long[]  observed  =  observed.toArray(new  Long[result.size()  ]);  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	Long[]  observed  =  observed.toArray(new  Long[result.size()  ]);	  Long[]    observed    =    observed.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	80	None	replace
327	[BUG]  [BUGGY]  long[]  expected  =  observed!=  null?  null  :  observed.length;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  observed!=  null?  null  :  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  observed!=  null?  null  :  observed.length;	  long[]    expected    =    observed!=    null?    null    :    observed.clone();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	109	None	replace
328	[BUG]  [BUGGY]  double[]  observed  =(double[])super.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double[]  observed  =(double[])super.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])super.clone();	  double[]    observed    =(double[])reversed.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	111	None	replace
329	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  1.0  +  observed.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	double  sumSq  =  1.0  +  observed.length;	  double    sumSq    =    0.0d    +    observed.length;    double    sumSq    =    0.0d    +    observed.length;    	compilable	  [FE]  AssertionFailedError  	46	6	replace
330	[BUG]  [BUGGY]  double  sumSq  =  1.0  +  observed.length;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  1.0  +  observed.length;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  sumSq  =  1.0  +  observed.length;	  double    sumSq    =    0.0d    +    observed.length;    double    sumSq    =    0.0d    +    observed.length;    	compilable	  [FE]  AssertionFailedError  	46	6	replace
331	[BUG]  [BUGGY]  double[]  observed  =(double[])this.distribution.period();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double[]  observed  =(double[])this.distribution.period();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])this.distribution.period();	  double[]    observed    =(double[])this.distribution.reverse();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	90	None	replace
332	[BUG]  [BUGGY]  int[]  expected  =  observed.lengths.clone();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int[]  expected  =  observed.lengths.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int[]  expected  =  observed.lengths.clone();	  int[]    expected    =    observed.clone();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	71	None	replace
333	[BUG]  [BUGGY]  Long[]  expected  =  observed!=  null?  observed.clone()  :  Long.MAX_VALUE;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  Long[]  expected  =  observed!=  null?  observed.clone()  :  Long.MAX_VALUE;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	Long[]  expected  =  observed!=  null?  observed.clone()  :  Long.MAX_VALUE;	  long[]    expected    =    observed!=    null?    observed.clone()    :    Long.MAX_VALUE;    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	70	None	replace
334	[BUG]  [BUGGY]  float  observedCount  =  observed.length  -  1;  [CE]  cannot  find  symbol  sumSq  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  float  observedCount  =  observed.length  -  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	float  observedCount  =  observed.length  -  1;	          int    observedCount    =    observed.length    -    1;    int    observed.length    -    1;    	non-compiled	[CE]  cannot  find  symbol  sumSq	5	None	replace
335	[BUG]  [BUGGY]  long[]  expected  =  new  long[observed.length  /  1];  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                      AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  new  long[observed.length  /  1];  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  new  long[observed.length  /  1];	  long[]    expected    =    new    long[observed.length    -    1];    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	36	None	replace
336	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  *  1;  [CE]  cannot  find  symbol  sumSq  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  expectedCount  =  observed.length  *  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  expectedCount  =  observed.length  *  1;	  int    expectedCount    =    observed.length    +    1;    	non-compiled	[CE]  cannot  find  symbol  sumSq	92	None	replace
337	[BUG]  [BUGGY]  int  observedCount  =  observed.length  /  2  +  3;  [CE]  cannot  find  symbol  sumSq  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  observedCount  =  observed.length  /  2  +  3;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  observedCount  =  observed.length  /  2  +  3;	  int    observedCount    =    observed.length    /    2;    	non-compiled	[CE]  cannot  find  symbol  sumSq	66	None	replace
338	[BUG]  [BUGGY]  double[]  observed  =(double[])this.red.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double[]  observed  =(double[])this.red.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])this.red.clone();	  double[]    observed    =(double[])this.red    distribution.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	118	None	replace
339	[BUG]  [BUGGY]  long[]  expected  =  new  long[str.length];  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  new  long[str.length];  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  new  long[str.length];	  long[]    expected    =    new    long[result.length];    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	120	None	replace
340	[BUG]  [BUGGY]          int    expectedCount    =    observed.length;    int  expectCount  =  observed.length;  double  expectedCount  =  observed.length;  int  expectCount  =  observed.length;  [CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]          int    expectedCount    =    observed.length;    int  expectCount  =  observed.length;  double  expectedCount  =  observed.length;  int  expectCount  =  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	                int        expectedCount        =        observed.length;        int    expectCount    =    observed.length;    double  expectedCount  =  observed.length;  int  expectCount  =  observed.length;	  	non-compiled	[CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])	20	None	add
341	[BUG]  [BUGGY]  double[]  observed  =  distribution.distribution.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double[]  observed  =  distribution.distribution.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =  distribution.distribution.clone();	  double[]    observed    =    this.distribution.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	123	None	replace
342	[BUG]  [BUGGY]  int[]  expected  =  observed.length.cloneTree();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int[]  expected  =  observed.length.cloneTree();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int[]  expected  =  observed.length.cloneTree();	  int[]    expected    =    observed.cloneTree();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	51	None	replace
343	[BUG]  [BUGGY]  long[]  observed  =  this.observedDistribution.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =  this.observedDistribution.clone();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =  this.observedDistribution.clone();	  long[]    observed    =    this.observed.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	115	None	replace
344	[BUG]  [BUGGY]  int  expected  =  new  int[expected.length  +  1];  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  expected  =  new  int[expected.length  +  1];  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  expected  =  new  int[expected.length  +  1];	  int    expected    =    new    int[expected.length];    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	62	None	replace
345	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	double  sumSq  =  0;	  double    sumSq    =    0.0;    double    sumSq    =    0.0;    	compilable	  [FE]  AssertionFailedError  	42	6	replace
346	[BUG]  [BUGGY]  double  sumSq  =  0;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  0;  [BUGGY]      double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  sumSq  =  0;	  double    sumSq    =    0.0;    double    sumSq    =    0.0;    	compilable	  [FE]  AssertionFailedError  	42	6	replace
347	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  -  1;  Integer  expectedCount  =  observed.length;  [CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  int  expectedCount  =  observed.length  -  1;  Integer  expectedCount  =  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  expectedCount  =  observed.length  -  1;  Integer  expectedCount  =  observed.length;	          int    expectedCount    =    observed.length;    Integer    expectedCount    =    observed.length;    	non-compiled	[CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])	19	None	replace
348	[BUG]  [BUGGY]  Int  observedCount  =  observed.length  -  1;  Int  observedCount  =  observed.length  -  1;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  Int  observedCount  =  observed.length  -  1;  Int  observedCount  =  observed.length  -  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	Int  observedCount  =  observed.length  -  1;  Int  observedCount  =  observed.length  -  1;	          int    observedCount    =    observed.length    -    1;    Int    observedCount    =    observed.length    -    1;    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
349	[BUG]  [BUGGY]  float  observedCount  =  observed.length  -  1;  int  observed.length  =  observed.length  -  1;  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  float  observedCount  =  observed.length  -  1;  int  observed.length  =  observed.length  -  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	float  observedCount  =  observed.length  -  1;  int  observed.length  =  observed.length  -  1;	          int    observedCount    =    observed.length    -    1;    int    observed.length    =    observed.length    -    1;    	non-compiled	[CE]  ';'  expected	4	None	replace
350	[BUG]  [BUGGY]  double  observedCount  =  observed.length  -  1;  int  observed.length  =  observed.length  -  1;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  observedCount  =  observed.length  -  1;  int  observed.length  =  observed.length  -  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  observedCount  =  observed.length  -  1;  int  observed.length  =  observed.length  -  1;	          int    observedCount    =    observed.length    -    1;    int    observed.length    =    observed.length    -    1;    	non-compiled	[CE]  ';'  expected	4	None	replace
351	[BUG]  [BUGGY]  long[]  observed  =(double[])this.distribution.reverse();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                      AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =(double[])this.distribution.reverse();  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =(double[])this.distribution.reverse();	  long[]    observed    =(double[])this.reverse();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	33	None	replace
352	[BUG]  [BUGGY]  double[]  observed  =(double[])this.reDistribution.clone()  -  1;  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double[]  observed  =(double[])this.reDistribution.clone()  -  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])this.reDistribution.clone()  -  1;	  double[]    observed    =(double[])this.reDistribution.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	73	None	replace
353	[BUG]  [BUGGY]          int    observedCount    =    observed.length    -    1;    int  observedcount  =  observed.length  -  1;  double  observedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  [CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]          int    observedCount    =    observed.length    -    1;    int  observedcount  =  observed.length  -  1;  double  observedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	                int        observedCount        =        observed.length        -        1;        int    observedcount    =    observed.length    -    1;    double  observedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;	  	non-compiled	[CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])	6	None	add
354	[BUG]  [BUGGY]  double[]  expected  =  observed.cloneTree(this);  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double[]  expected  =  observed.cloneTree(this);  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  expected  =  observed.cloneTree(this);	  long[]    expected    =    observed.cloneTree(this);    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	110	None	replace
355	[BUG]  [BUGGY]  long[]  observed  =  observed.toArray(new  long[expected.length]);  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  observed  =  observed.toArray(new  long[expected.length]);  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =  observed.toArray(new  long[expected.length]);	  long[]    observed    =    observed.toArray(new    long[0]);    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	116	None	replace
356	[BUG]  [BUGGY]  long[]  expected  =  observed  ==  null?  null  :  observed.length;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  long[]  expected  =  observed  ==  null?  null  :  observed.length;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  observed  ==  null?  null  :  observed.length;	  long[]    expected    =    observed    ==    null?    null    :    observed.clone();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	108	None	replace
357	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  observed.length  -  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	double  sumSq  =  observed.length  -  1;	  double    observedCount    =    observed.length    -    1;    	compilable	  [FE]  AssertionFailedError  	12	6	replace
358	[BUG]  [BUGGY]  double  sumSq  =  observed.length  -  1;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]  double  sumSq  =  observed.length  -  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  sumSq  =  observed.length  -  1;	  double    observedCount    =    observed.length    -    1;    	compilable	  [FE]  AssertionFailedError  	12	6	replace
359	[BUG]  [BUGGY]          int    observedCount    =    observed.length    -    1;    int  observedLength  =  observed.length  -  1;  double  observedCount  =  observed.length  -  1;  int  observedLength  =  observed.length  -  1;  [CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]          int    observedCount    =    observed.length    -    1;    int  observedLength  =  observed.length  -  1;  double  observedCount  =  observed.length  -  1;  int  observedLength  =  observed.length  -  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	                int        observedCount        =        observed.length        -        1;        int    observedLength    =    observed.length    -    1;    double  observedCount  =  observed.length  -  1;  int  observedLength  =  observed.length  -  1;	  	non-compiled	[CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])	8	None	add
360	[BUG]  [BUGGY]          int    observedCount    =    observed.length    -    1;    int  observedLength  =  observed.length  -  1;  Int  observedCount  =  observed.length  -  1;  int  observedLength  =  observed.length  -  1;  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }      [BUGGY]          int    observedCount    =    observed.length    -    1;    int  observedLength  =  observed.length  -  1;  Int  observedCount  =  observed.length  -  1;  int  observedLength  =  observed.length  -  1;  [BUGGY]      double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	                int        observedCount        =        observed.length        -        1;        int    observedLength    =    observed.length    -    1;    Int  observedCount  =  observed.length  -  1;  int  observedLength  =  observed.length  -  1;	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
