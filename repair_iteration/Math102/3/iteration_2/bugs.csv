bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double  sumSq  =  1.0d;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	double  sumSq  =  1.0d;	  double    sumSq    =    1.0;    	compilable	  [FE]  AssertionFailedError  	12	6	replace
2	[BUG]  [BUGGY]  double  sumSq  =  1.0d;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double  sumSq  =  1.0d;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  sumSq  =  1.0d;	  double    sumSq    =    1.0;    	compilable	  [FE]  AssertionFailedError  	12	6	replace
3	[BUG]  [BUGGY]      int  observedCount  =  observed.length  -  1;  int  observedCount  =  observed.length  -  1;  [CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]      int  observedCount  =  observed.length  -  1;  int  observedCount  =  observed.length  -  1;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	        int    observedCount    =    observed.length    -    1;    int  observedCount  =  observed.length  -  1;	  	non-compiled	[CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])	7	None	add
4	[BUG]  [BUGGY]      int  observedCount  =  observed.length  -  1;  int  observed.length  =  observed.length  -  1;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]      int  observedCount  =  observed.length  -  1;  int  observed.length  =  observed.length  -  1;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	        int    observedCount    =    observed.length    -    1;    int  observed.length  =  observed.length  -  1;	  	non-compiled	[CE]  ';'  expected	7	None	add
5	[BUG]  [BUGGY]      int  observedCount  =  observed.length  -  1;  int  observed.length  -  1;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]      int  observedCount  =  observed.length  -  1;  int  observed.length  -  1;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	        int    observedCount    =    observed.length    -    1;    int  observed.length  -  1;	  	non-compiled	[CE]  ';'  expected	7	None	add
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]      int  observedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	        int    observedCount    =    observed.length    -    1;    int  observedcount  =  observed.length  -  1;	  	compilable	  [FE]  AssertionFailedError  	7	6	add
7	[BUG]  [BUGGY]      int  observedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]      int  observedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	        int    observedCount    =    observed.length    -    1;    int  observedcount  =  observed.length  -  1;	  	compilable	  [FE]  AssertionFailedError  	7	6	add
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]      int  observedCount  =  observed.length  -  1;  int  observedLength  =  observed.length  -  1;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	        int    observedCount    =    observed.length    -    1;    int  observedLength  =  observed.length  -  1;	  	compilable	  [FE]  AssertionFailedError  	7	6	add
9	[BUG]  [BUGGY]      int  observedCount  =  observed.length  -  1;  int  observedLength  =  observed.length  -  1;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]      int  observedCount  =  observed.length  -  1;  int  observedLength  =  observed.length  -  1;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	        int    observedCount    =    observed.length    -    1;    int  observedLength  =  observed.length  -  1;	  	compilable	  [FE]  AssertionFailedError  	7	6	add
10	[BUG]  [BUGGY]  int  observedCount  =  observed.length  -  2;  [CE]  cannot  find  symbol  sumSq  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  int  observedCount  =  observed.length  -  2;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  observedCount  =  observed.length  -  2;	      int    observedCount    =    observed.length    -    1;    	non-compiled	[CE]  cannot  find  symbol  sumSq	8	None	replace
11	[BUG]  [BUGGY]  int  observedCount  =  observed.length  /  1;  [CE]  cannot  find  symbol  sumSq  [FE]      AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  int  observedCount  =  observed.length  /  1;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  observedCount  =  observed.length  /  1;	      int    observedCount    =    observed.length    -    1;    	non-compiled	[CE]  cannot  find  symbol  sumSq	8	None	replace
12	[BUG]  [BUGGY]  double  observedCount  =  observed.length  -  1;  [CE]  cannot  find  symbol  sumSq  [FE]        AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double  observedCount  =  observed.length  -  1;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  observedCount  =  observed.length  -  1;	      int    observedCount    =    observed.length    -    1;    	non-compiled	[CE]  cannot  find  symbol  sumSq	8	None	replace
13	[BUG]  [BUGGY]  double[]  observed  =(double[])super.chiSquare(expected);  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double[]  observed  =(double[])super.chiSquare(expected);  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])super.chiSquare(expected);	      double[]    observed    =(double[])super.chiSquare();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	25	None	replace
14	[BUG]  [BUGGY]  long[]  observed  =(long[])super.chiSquare();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  long[]  observed  =(long[])super.chiSquare();  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =(long[])super.chiSquare();	      double[]    observed    =(double[])super.chiSquare();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	25	None	replace
15	[BUG]  [BUGGY]  long[]  observed  =(double[])super.chiSquare();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  long[]  observed  =(double[])super.chiSquare();  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =(double[])super.chiSquare();	      double[]    observed    =(double[])super.chiSquare();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	25	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double  sumSq  =  0.0001;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	double  sumSq  =  0.0001;	  double    sumSq    =    0.001;    	compilable	  [FE]  AssertionFailedError  	22	6	replace
17	[BUG]  [BUGGY]  double  sumSq  =  0.0001;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double  sumSq  =  0.0001;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  sumSq  =  0.0001;	  double    sumSq    =    0.001;    	compilable	  [FE]  AssertionFailedError  	22	6	replace
18	[BUG]  [BUGGY]      int  expectedCount  =  observed.length;  int  expectedCount  =  observed.length;  [CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]      int  expectedCount  =  observed.length;  int  expectedCount  =  observed.length;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	        int    expectedCount    =    observed.length;    int  expectedCount  =  observed.length;	  	non-compiled	[CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])	16	None	add
19	[BUG]  [BUGGY]      int  expectedCount  =  observed.length;  Integer  expectedCount  =  observed.length;  [CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]      int  expectedCount  =  observed.length;  Integer  expectedCount  =  observed.length;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	        int    expectedCount    =    observed.length;    Integer  expectedCount  =  observed.length;	  	non-compiled	[CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])	16	None	add
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]      int  expectedCount  =  observed.length;  int  expectCount  =  observed.length;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	        int    expectedCount    =    observed.length;    int  expectCount  =  observed.length;	  	compilable	  [FE]  AssertionFailedError  	16	6	add
21	[BUG]  [BUGGY]      int  expectedCount  =  observed.length;  int  expectCount  =  observed.length;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]      int  expectedCount  =  observed.length;  int  expectCount  =  observed.length;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	        int    expectedCount    =    observed.length;    int  expectCount  =  observed.length;	  	compilable	  [FE]  AssertionFailedError  	16	6	add
22	[BUG]  [BUGGY]      int  expectedCount  =  observed.length;  long  expectedCount  =  observed.length;  [CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]      int  expectedCount  =  observed.length;  long  expectedCount  =  observed.length;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	        int    expectedCount    =    observed.length;    long  expectedCount  =  observed.length;	  	non-compiled	[CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])	16	None	add
23	[BUG]  [BUGGY]  long[]  observed  =(long[])super.chiSquare(expected,  observed);  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  long[]  observed  =(long[])super.chiSquare(expected,  observed);  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =(long[])super.chiSquare(expected,  observed);	      double[]    observed    =(double[])super.chiSquare(expected,    observed);    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	26	None	replace
24	[BUG]  [BUGGY]  long[]  observed  =(double[])super.chiSquare(expected,  observed);  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  long[]  observed  =(double[])super.chiSquare(expected,  observed);  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =(double[])super.chiSquare(expected,  observed);	      double[]    observed    =(double[])super.chiSquare(expected,    observed);    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	26	None	replace
25	[BUG]  [BUGGY]  Double[]  observed  =(double[])super.chiSquare(expected,  observed);  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  Double[]  observed  =(double[])super.chiSquare(expected,  observed);  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	Double[]  observed  =(double[])super.chiSquare(expected,  observed);	      double[]    observed    =(double[])super.chiSquare(expected,    observed);    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	26	None	replace
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double  sumSq  =  0.0d  *  observed.length;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	double  sumSq  =  0.0d  *  observed.length;	  double    sumSq    =    0.0d    +    observed.length;    	compilable	  [FE]  AssertionFailedError  	14	6	replace
27	[BUG]  [BUGGY]  double  sumSq  =  0.0d  *  observed.length;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double  sumSq  =  0.0d  *  observed.length;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  sumSq  =  0.0d  *  observed.length;	  double    sumSq    =    0.0d    +    observed.length;    	compilable	  [FE]  AssertionFailedError  	14	6	replace
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double  sumSq  =  0.0d  +  expected.length;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	double  sumSq  =  0.0d  +  expected.length;	  double    sumSq    =    0.0d    +    observed.length;    	compilable	  [FE]  AssertionFailedError  	14	6	replace
29	[BUG]  [BUGGY]  double  sumSq  =  0.0d  +  expected.length;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double  sumSq  =  0.0d  +  expected.length;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  sumSq  =  0.0d  +  expected.length;	  double    sumSq    =    0.0d    +    observed.length;    	compilable	  [FE]  AssertionFailedError  	14	6	replace
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double  sumSq  =  0.0d  /  observed.length;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	double  sumSq  =  0.0d  /  observed.length;	  double    sumSq    =    0.0d    +    observed.length;    	compilable	  [FE]  AssertionFailedError  	14	6	replace
31	[BUG]  [BUGGY]  double  sumSq  =  0.0d  /  observed.length;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double  sumSq  =  0.0d  /  observed.length;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  sumSq  =  0.0d  /  observed.length;	  double    sumSq    =    0.0d    +    observed.length;    	compilable	  [FE]  AssertionFailedError  	14	6	replace
32	[BUG]  [BUGGY]  long[]  observed  =(long[])this.reverse();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  long[]  observed  =(long[])this.reverse();  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =(long[])this.reverse();	      double[]    observed    =(double[])this.reverse();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	27	None	replace
33	[BUG]  [BUGGY]  long[]  observed  =(double[])this.reverse();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  long[]  observed  =(double[])this.reverse();  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =(double[])this.reverse();	      double[]    observed    =(double[])this.reverse();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	27	None	replace
34	[BUG]  [BUGGY]  double[]  observed  =(double[])reverse();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double[]  observed  =(double[])reverse();  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])reverse();	      double[]    observed    =(double[])this.reverse();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	27	None	replace
35	[BUG]  [BUGGY]  long[]  expected  =  new  long[expected.length  -  2];  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  long[]  expected  =  new  long[expected.length  -  2];  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  new  long[expected.length  -  2];	      long[]    expected    =    new    long[expected.length    -    1];    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	20	None	replace
36	[BUG]  [BUGGY]  long[]  expected  =  new  long[observed.length  -  1];  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  long[]  expected  =  new  long[observed.length  -  1];  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  new  long[observed.length  -  1];	      long[]    expected    =    new    long[expected.length    -    1];    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	20	None	replace
37	[BUG]  [BUGGY]  double  sumSq  =  0.001;  double  sumSq  =  0.001;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double  sumSq  =  0.001;  double  sumSq  =  0.001;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    0.001;    double  sumSq  =  0.001;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	21	None	add
38	[BUG]  [BUGGY]  double  sumSq  =  0.001;  Double  sumSq  =  0.001;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double  sumSq  =  0.001;  Double  sumSq  =  0.001;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    0.001;    Double  sumSq  =  0.001;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	21	None	add
39	[BUG]  [BUGGY]  double  sumSq  =  0.001;  long  sumSq  =  0.001;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double  sumSq  =  0.001;  long  sumSq  =  0.001;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    0.001;    long  sumSq  =  0.001;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	21	None	add
40	[BUG]  [BUGGY]  double  sumSq  =  0.001;  int  sumSq  =  0.001;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double  sumSq  =  0.001;  int  sumSq  =  0.001;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    0.001;    int  sumSq  =  0.001;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	21	None	add
41	[BUG]  [BUGGY]  double  sumSq  =  0.001;  double  sumSq  =  0.002;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double  sumSq  =  0.001;  double  sumSq  =  0.002;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    0.001;    double  sumSq  =  0.002;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	21	None	add
42	[BUG]  [BUGGY]  double  sumSq  =  0.0;  double  sumSq  =  0.0;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double  sumSq  =  0.0;  double  sumSq  =  0.0;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    0.0;    double  sumSq  =  0.0;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	9	None	add
43	[BUG]  [BUGGY]  double  sumSq  =  0.0;  Double  sumSq  =  0.0;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double  sumSq  =  0.0;  Double  sumSq  =  0.0;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    0.0;    Double  sumSq  =  0.0;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	9	None	add
44	[BUG]  [BUGGY]  double  sumSq  =  0.0;  long  sumSq  =  0.0;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double  sumSq  =  0.0;  long  sumSq  =  0.0;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    0.0;    long  sumSq  =  0.0;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	9	None	add
45	[BUG]  [BUGGY]  double  sumSq  =  0.0;  int  sumSq  =  0.0;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double  sumSq  =  0.0;  int  sumSq  =  0.0;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    0.0;    int  sumSq  =  0.0;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	9	None	add
46	[BUG]  [BUGGY]  double  sumSq  =  0.0d  +  observed.length;  double  sumSq  =  0.0d  +  observed.length;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double  sumSq  =  0.0d  +  observed.length;  double  sumSq  =  0.0d  +  observed.length;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    0.0d    +    observed.length;    double  sumSq  =  0.0d  +  observed.length;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	13	None	add
47	[BUG]  [BUGGY]  double  sumSq  =  0.0d  +  observed.length;  Double  sumSq  =  0.0d  +  observed.length;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double  sumSq  =  0.0d  +  observed.length;  Double  sumSq  =  0.0d  +  observed.length;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    0.0d    +    observed.length;    Double  sumSq  =  0.0d  +  observed.length;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	13	None	add
48	[BUG]  [BUGGY]  double  sumSq  =  0.0d  +  observed.length;  long  sumSq  =  0.0d  +  observed.length;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double  sumSq  =  0.0d  +  observed.length;  long  sumSq  =  0.0d  +  observed.length;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    0.0d    +    observed.length;    long  sumSq  =  0.0d  +  observed.length;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	13	None	add
49	[BUG]  [BUGGY]  double  sumSq  =  0.0d  +  observed.length;  int  sumSq  =  0.0d  +  observed.length;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double  sumSq  =  0.0d  +  observed.length;  int  sumSq  =  0.0d  +  observed.length;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    0.0d    +    observed.length;    int  sumSq  =  0.0d  +  observed.length;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	13	None	add
50	[BUG]  [BUGGY]  double  sumSq  =  0.0d  +  observed.length;  int  observed.length  =  observed.length;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double  sumSq  =  0.0d  +  observed.length;  int  observed.length  =  observed.length;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    0.0d    +    observed.length;    int  observed.length  =  observed.length;	  	non-compiled	[CE]  ';'  expected	13	None	add
51	[BUG]  [BUGGY]  int[]  expected  =  observed.cloneTree();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  int[]  expected  =  observed.cloneTree();  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int[]  expected  =  observed.cloneTree();	      long[]    expected    =    observed.cloneTree();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	18	None	replace
52	[BUG]  [BUGGY]  Long[]  expected  =  observed.cloneTree();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  Long[]  expected  =  observed.cloneTree();  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	Long[]  expected  =  observed.cloneTree();	      long[]    expected    =    observed.cloneTree();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	18	None	replace
53	[BUG]  [BUGGY]      int  observedLength  =  observed.length;  int  observedLength  =  observed.length;  [CE]  variable  observedLength  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]      int  observedLength  =  observed.length;  int  observedLength  =  observed.length;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	        int    observedLength    =    observed.length;    int  observedLength  =  observed.length;	  	non-compiled	[CE]  variable  observedLength  is  already  defined  in  method  chiSquare(double[],long[])	3	None	add
54	[BUG]  [BUGGY]      int  observedLength  =  observed.length;  Integer  observedLength  =  observed.length;  [CE]  variable  observedLength  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]      int  observedLength  =  observed.length;  Integer  observedLength  =  observed.length;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	        int    observedLength    =    observed.length;    Integer  observedLength  =  observed.length;	  	non-compiled	[CE]  variable  observedLength  is  already  defined  in  method  chiSquare(double[],long[])	3	None	add
55	[BUG]  [BUGGY]      int  observedLength  =  observed.length;  long  observedLength  =  observed.length;  [CE]  variable  observedLength  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]      int  observedLength  =  observed.length;  long  observedLength  =  observed.length;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	        int    observedLength    =    observed.length;    long  observedLength  =  observed.length;	  	non-compiled	[CE]  variable  observedLength  is  already  defined  in  method  chiSquare(double[],long[])	3	None	add
56	[BUG]  [BUGGY]      int  observedLength  =  observed.length;  double  observedLength  =  observed.length;  [CE]  variable  observedLength  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]      int  observedLength  =  observed.length;  double  observedLength  =  observed.length;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	        int    observedLength    =    observed.length;    double  observedLength  =  observed.length;	  	non-compiled	[CE]  variable  observedLength  is  already  defined  in  method  chiSquare(double[],long[])	3	None	add
57	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  -  1;  [CE]  cannot  find  symbol  sumSq  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  int  expectedCount  =  observed.length  -  1;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  expectedCount  =  observed.length  -  1;	      int    expectedCount    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol  sumSq	17	None	replace
58	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  -  2;  [CE]  cannot  find  symbol  sumSq  [FE]      AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  int  expectedCount  =  observed.length  -  2;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  expectedCount  =  observed.length  -  2;	      int    expectedCount    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol  sumSq	17	None	replace
59	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  /  2;  [CE]  cannot  find  symbol  sumSq  [FE]        AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  int  expectedCount  =  observed.length  /  2;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  expectedCount  =  observed.length  /  2;	      int    expectedCount    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol  sumSq	17	None	replace
60	[BUG]  [BUGGY]  double  expectedCount  =  observed.length;  [CE]  cannot  find  symbol  sumSq  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double  expectedCount  =  observed.length;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  expectedCount  =  observed.length;	      int    expectedCount    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol  sumSq	17	None	replace
61	[BUG]  [BUGGY]  long[]  expected  =  new  long[observed.length];  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  long[]  expected  =  new  long[observed.length];  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  new  long[observed.length];	      long[]    expected    =    new    long[expected.length];    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	19	None	replace
62	[BUG]  [BUGGY]  int  expected  =  new  int[expected.length];  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  int  expected  =  new  int[expected.length];  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  expected  =  new  int[expected.length];	      long[]    expected    =    new    long[expected.length];    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	19	None	replace
63	[BUG]  [BUGGY]  int  observed[]  =  observed.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  int  observed[]  =  observed.clone();  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  observed[]  =  observed.clone();	      long    observed[]    =    observed.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	2	None	replace
64	[BUG]  [BUGGY]  long  observed[]  =  expected.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  long  observed[]  =  expected.clone();  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long  observed[]  =  expected.clone();	      long    observed[]    =    observed.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	2	None	replace
65	[BUG]  [BUGGY]  double  observedCount  =  observed.length;  [CE]  cannot  find  symbol  sumSq  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double  observedCount  =  observed.length;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  observedCount  =  observed.length;	      int    observedCount    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol  sumSq	6	None	replace
66	[BUG]  [BUGGY]  int  observedCount  =  observed.length  /  2;  [CE]  cannot  find  symbol  sumSq  [FE]      AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  int  observedCount  =  observed.length  /  2;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  observedCount  =  observed.length  /  2;	      int    observedCount    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol  sumSq	6	None	replace
67	[BUG]  [BUGGY]  double[]  observed  =(double[])distribution.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double[]  observed  =(double[])distribution.clone();  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])distribution.clone();	      double[]    observed    =(double[])this.distribution.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	23	None	replace
68	[BUG]  [BUGGY]  long[]  observed  =(long[])this.distribution.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  long[]  observed  =(long[])this.distribution.clone();  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =(long[])this.distribution.clone();	      double[]    observed    =(double[])this.distribution.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	23	None	replace
69	[BUG]  [BUGGY]  long[]  observed  =(double[])this.distribution.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  long[]  observed  =(double[])this.distribution.clone();  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =(double[])this.distribution.clone();	      double[]    observed    =(double[])this.distribution.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	23	None	replace
70	[BUG]  [BUGGY]  long[]  expected  =  observed!=  null?  observed.clone()  :  Long.MAX_VALUE;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  long[]  expected  =  observed!=  null?  observed.clone()  :  Long.MAX_VALUE;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  observed!=  null?  observed.clone()  :  Long.MAX_VALUE;	      long[]    expected    =    observed.clone();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	15	None	replace
71	[BUG]  [BUGGY]  int[]  expected  =  observed.clone();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  int[]  expected  =  observed.clone();  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int[]  expected  =  observed.clone();	      long[]    expected    =    observed.clone();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	15	None	replace
72	[BUG]  [BUGGY]  long[]  expected  =  observed!=  null?  observed.clone()  :  Integer.MAX_VALUE;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  long[]  expected  =  observed!=  null?  observed.clone()  :  Integer.MAX_VALUE;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  observed!=  null?  observed.clone()  :  Integer.MAX_VALUE;	      long[]    expected    =    observed.clone();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	15	None	replace
73	[BUG]  [BUGGY]  double[]  observed  =(double[])this.reDistribution.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double[]  observed  =(double[])this.reDistribution.clone();  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])this.reDistribution.clone();	      double[]    observed    =(double[])this.re    distribution.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	24	None	replace
74	[BUG]  [BUGGY]  int  observedLength  =  observed.length  -  1;  [CE]  cannot  find  symbol  sumSq  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  int  observedLength  =  observed.length  -  1;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  observedLength  =  observed.length  -  1;	      int    observedLength    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol  sumSq	4	None	replace
75	[BUG]  [BUGGY]  long  observedLength  =  observed.length;  [CE]  cannot  find  symbol  sumSq  [FE]      AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  long  observedLength  =  observed.length;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long  observedLength  =  observed.length;	      int    observedLength    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol  sumSq	4	None	replace
76	[BUG]  [BUGGY]  int  observedLength  =  observed.length  -  2;  [CE]  cannot  find  symbol  sumSq  [FE]        AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  int  observedLength  =  observed.length  -  2;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  observedLength  =  observed.length  -  2;	      int    observedLength    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol  sumSq	4	None	replace
77	[BUG]  [BUGGY]  double  observedLength  =  observed.length;  [CE]  cannot  find  symbol  sumSq  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double  observedLength  =  observed.length;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  observedLength  =  observed.length;	      int    observedLength    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol  sumSq	4	None	replace
78	[BUG]  [BUGGY]  long[]  observed  =  expected.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  long[]  observed  =  expected.clone();  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =  expected.clone();	      long[]    observed    =    observed.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	1	None	replace
79	[BUG]  [BUGGY]  int[]  observed  =  observed.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  int[]  observed  =  observed.clone();  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int[]  observed  =  observed.clone();	      long[]    observed    =    observed.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	1	None	replace
80	[BUG]  [BUGGY]  Long[]  observed  =  observed.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  Long[]  observed  =  observed.clone();  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	Long[]  observed  =  observed.clone();	      long[]    observed    =    observed.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	1	None	replace
81	[BUG]  [BUGGY]  double  sumSq  =  1.0;  double  sumSq  =  1.0;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double  sumSq  =  1.0;  double  sumSq  =  1.0;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    1.0;    double  sumSq  =  1.0;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	11	None	add
82	[BUG]  [BUGGY]  double  sumSq  =  1.0;  Double  sumSq  =  1.0;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double  sumSq  =  1.0;  Double  sumSq  =  1.0;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    1.0;    Double  sumSq  =  1.0;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	11	None	add
83	[BUG]  [BUGGY]  double  sumSq  =  1.0;  long  sumSq  =  1.0;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double  sumSq  =  1.0;  long  sumSq  =  1.0;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    1.0;    long  sumSq  =  1.0;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	11	None	add
84	[BUG]  [BUGGY]  double  sumSq  =  1.0;  int  sumSq  =  1.0;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double  sumSq  =  1.0;  int  sumSq  =  1.0;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    1.0;    int  sumSq  =  1.0;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	11	None	add
85	[BUG]  [BUGGY]      int  observedCount  =  observed.length;  int  observedCount  =  observed.length;  [CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]      int  observedCount  =  observed.length;  int  observedCount  =  observed.length;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	        int    observedCount    =    observed.length;    int  observedCount  =  observed.length;	  	non-compiled	[CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])	5	None	add
86	[BUG]  [BUGGY]      int  observedCount  =  observed.length;  Integer  observedCount  =  observed.length;  [CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]      int  observedCount  =  observed.length;  Integer  observedCount  =  observed.length;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	        int    observedCount    =    observed.length;    Integer  observedCount  =  observed.length;	  	non-compiled	[CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])	5	None	add
87	[BUG]  [BUGGY]      int  observedCount  =  observed.length;  int  observed.length  =  observed.length;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]      int  observedCount  =  observed.length;  int  observed.length  =  observed.length;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	        int    observedCount    =    observed.length;    int  observed.length  =  observed.length;	  	non-compiled	[CE]  ';'  expected	5	None	add
88	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]      int  observedCount  =  observed.length;  int  observedcount  =  observed.length;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	add	        int    observedCount    =    observed.length;    int  observedcount  =  observed.length;	  	compilable	  [FE]  AssertionFailedError  	5	6	add
89	[BUG]  [BUGGY]      int  observedCount  =  observed.length;  int  observedcount  =  observed.length;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]      int  observedCount  =  observed.length;  int  observedcount  =  observed.length;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	        int    observedCount    =    observed.length;    int  observedcount  =  observed.length;	  	compilable	  [FE]  AssertionFailedError  	5	6	add
90	[BUG]  [BUGGY]  double[]  observed  =(double[])this.distribution.reverse();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double[]  observed  =(double[])this.distribution.reverse();  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])this.distribution.reverse();	      double[]    observed    =(double[])this.reverse();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	27	None	replace
91	[BUG]  [BUGGY]  double[]  observed  =(double[])this.reverseDistribution();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                  AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double[]  observed  =(double[])this.reverseDistribution();  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])this.reverseDistribution();	      double[]    observed    =(double[])this.reverse();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	27	None	replace
92	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  +  1;  [CE]  cannot  find  symbol  sumSq  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  int  expectedCount  =  observed.length  +  1;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  expectedCount  =  observed.length  +  1;	      int    expectedCount    =    observed.length;    	non-compiled	[CE]  cannot  find  symbol  sumSq	17	None	replace
93	[BUG]  [BUGGY]      int  observedCount  =  observed.length;  Int  observedCount  =  observed.length;  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]      int  observedCount  =  observed.length;  Int  observedCount  =  observed.length;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	        int    observedCount    =    observed.length;    Int  observedCount  =  observed.length;	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
94	[BUG]  [BUGGY]      int  observedCount  =  observed.length;  long  observedCount  =  observed.length;  [CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]      int  observedCount  =  observed.length;  long  observedCount  =  observed.length;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	        int    observedCount    =    observed.length;    long  observedCount  =  observed.length;	  	non-compiled	[CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])	5	None	add
95	[BUG]  [BUGGY]  long  observed[]  =  x.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  long  observed[]  =  x.clone();  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long  observed[]  =  x.clone();	      long    observed[]    =    observed.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	2	None	replace
96	[BUG]  [BUGGY]  long[]  expected  =  new  long[expected.length  +  1];  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  long[]  expected  =  new  long[expected.length  +  1];  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  new  long[expected.length  +  1];	      long[]    expected    =    new    long[expected.length];    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	19	None	replace
97	[BUG]  [BUGGY]  long[]  expected  =  new  long[expected.length  +  2];  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  long[]  expected  =  new  long[expected.length  +  2];  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  new  long[expected.length  +  2];	      long[]    expected    =    new    long[expected.length];    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	19	None	replace
98	[BUG]  [BUGGY]  int  observedCount  =  observed.length  -  1  +  1;  [CE]  cannot  find  symbol  sumSq  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  int  observedCount  =  observed.length  -  1  +  1;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	int  observedCount  =  observed.length  -  1  +  1;	      int    observedCount    =    observed.length    -    1;    	non-compiled	[CE]  cannot  find  symbol  sumSq	8	None	replace
99	[BUG]  [BUGGY]  double[]  observed  =(double[])this.chiSquare(expected,  observed);  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double[]  observed  =(double[])this.chiSquare(expected,  observed);  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])this.chiSquare(expected,  observed);	      double[]    observed    =(double[])super.chiSquare(expected,    observed);    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	26	None	replace
100	[BUG]  [BUGGY]      int  observedCount  =  observed.length  -  1;  int  observedCount  =  observed.length  -  2;  [CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]      int  observedCount  =  observed.length  -  1;  int  observedCount  =  observed.length  -  2;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	        int    observedCount    =    observed.length    -    1;    int  observedCount  =  observed.length  -  2;	  	non-compiled	[CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])	7	None	add
101	[BUG]  [BUGGY]      int  observedCount  =  observed.length  -  1;  long  observedCount  =  observed.length  -  1;  [CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]      int  observedCount  =  observed.length  -  1;  long  observedCount  =  observed.length  -  1;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	        int    observedCount    =    observed.length    -    1;    long  observedCount  =  observed.length  -  1;	  	non-compiled	[CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])	7	None	add
102	[BUG]  [BUGGY]  double[]  observed  =(double[])this.chiSquare();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double[]  observed  =(double[])this.chiSquare();  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])this.chiSquare();	      double[]    observed    =(double[])super.chiSquare();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	25	None	replace
103	[BUG]  [BUGGY]  double[]  observed  =(double[])this.super.chiSquare(expected,  observed);  [CE]  '('  expected  [FE]              AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double[]  observed  =(double[])this.super.chiSquare(expected,  observed);  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])this.super.chiSquare(expected,  observed);	      double[]    observed    =(double[])super.chiSquare();    	non-compiled	[CE]  '('  expected	25	None	replace
104	[BUG]  [BUGGY]  long[]  observed  =  this.chiSquareTestImpl.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  long[]  observed  =  this.chiSquareTestImpl.clone();  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =  this.chiSquareTestImpl.clone();	      long[]    observed    =    observed.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	1	None	replace
105	[BUG]  [BUGGY]  long[]  observed  =  chiSquare.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  long[]  observed  =  chiSquare.clone();  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =  chiSquare.clone();	      long[]    observed    =    observed.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	1	None	replace
106	[BUG]  [BUGGY]  long[]  observed  =  x.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  long[]  observed  =  x.clone();  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =  x.clone();	      long[]    observed    =    observed.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	1	None	replace
107	[BUG]  [BUGGY]  long[]  expected  =  observed!=  null?  Long.MAX_VALUE  :  observed.clone();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  long[]  expected  =  observed!=  null?  Long.MAX_VALUE  :  observed.clone();  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  observed!=  null?  Long.MAX_VALUE  :  observed.clone();	      long[]    expected    =    observed.clone();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	15	None	replace
108	[BUG]  [BUGGY]  long[]  expected  =  observed  ==  null?  null  :  observed.clone();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  long[]  expected  =  observed  ==  null?  null  :  observed.clone();  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  observed  ==  null?  null  :  observed.clone();	      long[]    expected    =    observed.clone();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	15	None	replace
109	[BUG]  [BUGGY]  long[]  expected  =  observed!=  null?  null  :  observed.clone();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  long[]  expected  =  observed!=  null?  null  :  observed.clone();  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  observed!=  null?  null  :  observed.clone();	      long[]    expected    =    observed.clone();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	15	None	replace
110	[BUG]  [BUGGY]  long[]  expected  =  observed.cloneTree(this);  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  long[]  expected  =  observed.cloneTree(this);  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  observed.cloneTree(this);	      long[]    expected    =    observed.cloneTree();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	18	None	replace
111	[BUG]  [BUGGY]  double[]  observed  =(double[])reversed.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double[]  observed  =(double[])reversed.clone();  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])reversed.clone();	      double[]    observed    =(double[])this.distribution.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	23	None	replace
112	[BUG]  [BUGGY]  double  sumSq  =  1.0;  double  sumSq  =  0.0;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double  sumSq  =  1.0;  double  sumSq  =  0.0;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    1.0;    double  sumSq  =  0.0;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	11	None	add
113	[BUG]  [BUGGY]      int  expectedCount  =  observed.length;  Int  expectedCount  =  observed.length;  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]      int  expectedCount  =  observed.length;  Int  expectedCount  =  observed.length;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	        int    expectedCount    =    observed.length;    Int  expectedCount  =  observed.length;	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
114	[BUG]  [BUGGY]      int  observedCount  =  observed.length  -  1;  Int  observedCount  =  observed.length  -  1;  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]      int  observedCount  =  observed.length  -  1;  Int  observedCount  =  observed.length  -  1;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	        int    observedCount    =    observed.length    -    1;    Int  observedCount  =  observed.length  -  1;	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
115	[BUG]  [BUGGY]  long[]  observed  =  this.observed.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  long[]  observed  =  this.observed.clone();  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =  this.observed.clone();	      long[]    observed    =    observed.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	1	None	replace
116	[BUG]  [BUGGY]  long[]  observed  =  observed.toArray(new  long[0]);  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  long[]  observed  =  observed.toArray(new  long[0]);  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  observed  =  observed.toArray(new  long[0]);	      long[]    observed    =    observed.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	1	None	replace
117	[BUG]  [BUGGY]      int  observedLength  =  observed.length;  Int  observedLength  =  observed.length;  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]      int  observedLength  =  observed.length;  Int  observedLength  =  observed.length;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	        int    observedLength    =    observed.length;    Int  observedLength  =  observed.length;	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
118	[BUG]  [BUGGY]  double[]  observed  =(double[])this.red  distribution.clone();  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double[]  observed  =(double[])this.red  distribution.clone();  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])this.red  distribution.clone();	      double[]    observed    =(double[])this.re    distribution.clone();    	non-compiled	[CE]  ';'  expected	24	None	replace
119	[BUG]  [BUGGY]  double[]  observed  =(double[])this.retribution.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double[]  observed  =(double[])this.retribution.clone();  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])this.retribution.clone();	      double[]    observed    =(double[])this.re    distribution.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	24	None	replace
120	[BUG]  [BUGGY]  long[]  expected  =  new  long[result.length];  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  long[]  expected  =  new  long[result.length];  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  new  long[result.length];	      long[]    expected    =    new    long[expected.length];    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	19	None	replace
121	[BUG]  [BUGGY]      int  expectedCount  =  observed.length;  double  expectedCount  =  observed.length;  [CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]      int  expectedCount  =  observed.length;  double  expectedCount  =  observed.length;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	        int    expectedCount    =    observed.length;    double  expectedCount  =  observed.length;	  	non-compiled	[CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])	16	None	add
122	[BUG]  [BUGGY]  double[]  observed  =(double[])this.distribution.clone()  /  distribution.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double[]  observed  =(double[])this.distribution.clone()  /  distribution.clone();  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])this.distribution.clone()  /  distribution.clone();	      double[]    observed    =(double[])this.distribution.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	23	None	replace
123	[BUG]  [BUGGY]  double[]  observed  =  this.distribution.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double[]  observed  =  this.distribution.clone();  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =  this.distribution.clone();	      double[]    observed    =(double[])this.distribution.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	23	None	replace
124	[BUG]  [BUGGY]  long[]  expected  =  observed.length;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  long[]  expected  =  observed.length;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  observed.length;	      long[]    expected    =    observed.cloneTree();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	18	None	replace
125	[BUG]  [BUGGY]  long[]  expected  =  observed.length  -  observed.cloneTree();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  long[]  expected  =  observed.length  -  observed.cloneTree();  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  observed.length  -  observed.cloneTree();	      long[]    expected    =    observed.cloneTree();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	18	None	replace
126	[BUG]  [BUGGY]  double[]  observed  =(double[])this.chiSquareDistribution.reverse();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]                AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double[]  observed  =(double[])this.chiSquareDistribution.reverse();  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double[]  observed  =(double[])this.chiSquareDistribution.reverse();	      double[]    observed    =(double[])this.reverse();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	27	None	replace
127	[BUG]  [BUGGY]  long[]  expected  =  observed.lengths.clone();  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  long[]  expected  =  observed.lengths.clone();  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  observed.lengths.clone();	      long[]    expected    =    observed.clone();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	15	None	replace
128	[BUG]  [BUGGY]  long[]  expected  =  observed.lengths;  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  long[]  expected  =  observed.lengths;  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	long[]  expected  =  observed.lengths;	      long[]    expected    =    observed.clone();    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	15	None	replace
129	[BUG]  [BUGGY]  double  sumSq  =  0.0d  +  observed.length;  double  sumSq  =  0.00d  +  observed.length;  [CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double  sumSq  =  0.0d  +  observed.length;  double  sumSq  =  0.00d  +  observed.length;  [BUGGY]    double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double    sumSq    =    0.0d    +    observed.length;    double  sumSq  =  0.00d  +  observed.length;	  	non-compiled	[CE]  variable  sumSq  is  already  defined  in  method  chiSquare(double[],long[])	13	None	add
130	[BUG]  [BUGGY]  double  observed[]  =  observed.clone();  [CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }    [BUGGY]  double  observed[]  =  observed.clone();  [BUGGY]    double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	74	74	6	replace	double  observed[]  =  observed.clone();	      long    observed[]    =    observed.clone();    	non-compiled	[CE]  variable  observed  is  already  defined  in  method  chiSquare(double[],long[])	2	None	replace
