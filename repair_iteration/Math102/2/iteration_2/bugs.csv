bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[2];  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[2];  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[2];	      ((    ChiSquaredDistribution)distribution).chiSquare    =    new    double[1];    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
2	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[0];  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[0];  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[0];	      ((    ChiSquaredDistribution)distribution).chiSquare    =    new    double[1];    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
3	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[3];  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[3];  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[3];	      ((    ChiSquaredDistribution)distribution).chiSquare    =    new    double[1];    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
4	[BUG]  [BUGGY]      int  expectedCount  =  observed.length  -  1;  int  expectedCount  =  observed.length  -  1;  [CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]      int  expectedCount  =  observed.length  -  1;  int  expectedCount  =  observed.length  -  1;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	        int    expectedCount    =    observed.length    -    1;    int  expectedCount  =  observed.length  -  1;	  	non-compiled	[CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])	19	None	add
5	[BUG]  [BUGGY]      int  expectedCount  =  observed.length  -  1;  Integer  expectedCount  =  observed.length  -  1;  [CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]      int  expectedCount  =  observed.length  -  1;  Integer  expectedCount  =  observed.length  -  1;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	        int    expectedCount    =    observed.length    -    1;    Integer  expectedCount  =  observed.length  -  1;	  	non-compiled	[CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])	19	None	add
6	[BUG]  [BUGGY]      int  expectedCount  =  observed.length  -  1;  int  expectedCount  =  observed.length  -  2;  [CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]      int  expectedCount  =  observed.length  -  1;  int  expectedCount  =  observed.length  -  2;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	        int    expectedCount    =    observed.length    -    1;    int  expectedCount  =  observed.length  -  2;	  	non-compiled	[CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])	19	None	add
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]      int  expectedCount  =  observed.length  -  1;  int  expectCount  =  observed.length  -  1;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	add	        int    expectedCount    =    observed.length    -    1;    int  expectCount  =  observed.length  -  1;	  	compilable	  [FE]  AssertionFailedError  	19	6	add
8	[BUG]  [BUGGY]      int  expectedCount  =  observed.length  -  1;  int  expectCount  =  observed.length  -  1;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]      int  expectedCount  =  observed.length  -  1;  int  expectCount  =  observed.length  -  1;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	        int    expectedCount    =    observed.length    -    1;    int  expectCount  =  observed.length  -  1;	  	compilable	  [FE]  AssertionFailedError  	19	6	add
9	[BUG]  [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  observed);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  observed);  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  observed);	      ((    ChiSquareDistributionImpl)this).chiSquare(expected,    observed);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
10	[BUG]  [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  distribution);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  distribution);  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  distribution);	      ((    ChiSquareDistributionImpl)this).chiSquare(expected,    observed);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
11	[BUG]  [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(observed,  expected);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(observed,  expected);  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistributionImpl)this).chiSquare(observed,  expected);	      ((    ChiSquareDistributionImpl)this).chiSquare(expected,    observed);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
12	[BUG]  [BUGGY]  if  (!isPositive(expected)&&!isNegative(expected))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  if  (!isPositive(expected)&&!isNegative(expected))  {  [BUGGY]    throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	if  (!isPositive(expected)&&!isNegative(expected))  {	  if    (!isPositive(expected)||!isNegative(expected))    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
13	[BUG]  [BUGGY]  if  (!isNegative(expected)||!isPositive(expected))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  if  (!isNegative(expected)||!isPositive(expected))  {  [BUGGY]    throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	if  (!isNegative(expected)||!isPositive(expected))  {	  if    (!isPositive(expected)||!isNegative(expected))    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
14	[BUG]  [BUGGY]  int  observed[]  =  observed.clone();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  int  observed[]  =  observed.clone();  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  observed[]  =  observed.clone();	      long    observed[]    =    observed.clone();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
15	[BUG]  [BUGGY]  long  observed[]  =  expected.clone();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  long  observed[]  =  expected.clone();  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long  observed[]  =  expected.clone();	      long    observed[]    =    observed.clone();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
16	[BUG]  [BUGGY]      int  observedCount  =  observed.length  -  1;  int  observedCount  =  observed.length  -  1;  [CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]      int  observedCount  =  observed.length  -  1;  int  observedCount  =  observed.length  -  1;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	        int    observedCount    =    observed.length    -    1;    int  observedCount  =  observed.length  -  1;	  	non-compiled	[CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])	7	None	add
17	[BUG]  [BUGGY]      int  observedCount  =  observed.length  -  1;  int  observed.length  =  observed.length  -  1;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]      int  observedCount  =  observed.length  -  1;  int  observed.length  =  observed.length  -  1;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	        int    observedCount    =    observed.length    -    1;    int  observed.length  =  observed.length  -  1;	  	non-compiled	[CE]  ';'  expected	7	None	add
18	[BUG]  [BUGGY]      int  observedCount  =  observed.length  -  1;  Integer  observedCount  =  observed.length  -  1;  [CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]      int  observedCount  =  observed.length  -  1;  Integer  observedCount  =  observed.length  -  1;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	        int    observedCount    =    observed.length    -    1;    Integer  observedCount  =  observed.length  -  1;	  	non-compiled	[CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])	7	None	add
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]      int  observedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	add	        int    observedCount    =    observed.length    -    1;    int  observedcount  =  observed.length  -  1;	  	compilable	  [FE]  AssertionFailedError  	7	6	add
20	[BUG]  [BUGGY]      int  observedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]      int  observedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	        int    observedCount    =    observed.length    -    1;    int  observedcount  =  observed.length  -  1;	  	compilable	  [FE]  AssertionFailedError  	7	6	add
21	[BUG]  [BUGGY]      int  observedCount  =  observed.length  -  1;  int  observedCount  =  observed.length  -  2;  [CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]            AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]      int  observedCount  =  observed.length  -  1;  int  observedCount  =  observed.length  -  2;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	        int    observedCount    =    observed.length    -    1;    int  observedCount  =  observed.length  -  2;	  	non-compiled	[CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])	7	None	add
22	[BUG]  [BUGGY]  if  (!isNegative(expected)&&!isPositive(observed))  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  if  (!isNegative(expected)&&!isPositive(observed))  {  [BUGGY]    throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	if  (!isNegative(expected)&&!isPositive(observed))  {	  if    (!isPositive(expected)&&!isNegative(observed))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
23	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[expected.length  +  1];  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[expected.length  +  1];  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[expected.length  +  1];	      ((    ChiSquaredDistribution)distribution).chiSquare    =    new    double[expected.length];    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
24	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[expected.length  -  1];  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[expected.length  -  1];  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[expected.length  -  1];	      ((    ChiSquaredDistribution)distribution).chiSquare    =    new    double[expected.length];    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
25	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[expected.length  +  observed.length];  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[expected.length  +  observed.length];  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[expected.length  +  observed.length];	      ((    ChiSquaredDistribution)distribution).chiSquare    =    new    double[expected.length];    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
26	[BUG]  [BUGGY]      int  expectedCount  =  observed.length;  int  expectedCount  =  observed.length;  [CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]      int  expectedCount  =  observed.length;  int  expectedCount  =  observed.length;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	        int    expectedCount    =    observed.length;    int  expectedCount  =  observed.length;	  	non-compiled	[CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])	5	None	add
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]      int  expectedCount  =  observed.length;  int  expectCount  =  observed.length;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	add	        int    expectedCount    =    observed.length;    int  expectCount  =  observed.length;	  	compilable	  [FE]  AssertionFailedError  	5	6	add
28	[BUG]  [BUGGY]      int  expectedCount  =  observed.length;  int  expectCount  =  observed.length;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]      int  expectedCount  =  observed.length;  int  expectCount  =  observed.length;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	        int    expectedCount    =    observed.length;    int  expectCount  =  observed.length;	  	compilable	  [FE]  AssertionFailedError  	5	6	add
29	[BUG]  [BUGGY]      int  expectedCount  =  observed.length;  Int  expectedCount  =  observed.length;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]      int  expectedCount  =  observed.length;  Int  expectedCount  =  observed.length;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	        int    expectedCount    =    observed.length;    Int  expectedCount  =  observed.length;	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
30	[BUG]  [BUGGY]      int  expectedCount  =  observed.length;  long  expectedCount  =  observed.length;  [CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]      int  expectedCount  =  observed.length;  long  expectedCount  =  observed.length;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	        int    expectedCount    =    observed.length;    long  expectedCount  =  observed.length;	  	non-compiled	[CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])	5	None	add
31	[BUG]  [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(expected,  observed,  observed);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(expected,  observed,  observed);  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)distribution).chiSquare(expected,  observed,  observed);	      ((    ChiSquareDistribution)distribution).chiSquare(expected,    observed);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
32	[BUG]  [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(observed,  expected);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(observed,  expected);  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)distribution).chiSquare(observed,  expected);	      ((    ChiSquareDistribution)distribution).chiSquare(expected,    observed);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
33	[BUG]  [BUGGY]  ((  ChiSquareDistribution)observed).chiSquare(expected,  observed);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  ((  ChiSquareDistribution)observed).chiSquare(expected,  observed);  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)observed).chiSquare(expected,  observed);	      ((    ChiSquareDistribution)distribution).chiSquare(expected,    observed);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
34	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)observed).chiSquare(expected,  observed);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  ((  ChiSquaredDistribution)observed).chiSquare(expected,  observed);  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)observed).chiSquare(expected,  observed);	      ((    ChiSquaredDistribution)delegate).chiSquare(expected,    observed);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
35	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)expected).chiSquare(observed,  observed);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  ((  ChiSquaredDistribution)expected).chiSquare(observed,  observed);  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)expected).chiSquare(observed,  observed);	      ((    ChiSquaredDistribution)delegate).chiSquare(expected,    observed);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
36	[BUG]  [BUGGY]  long[]  observed  =  expected.clone();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  long[]  observed  =  expected.clone();  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long[]  observed  =  expected.clone();	      long[]    observed    =    observed.clone();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
37	[BUG]  [BUGGY]  int[]  observed  =  observed.clone();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  int[]  observed  =  observed.clone();  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int[]  observed  =  observed.clone();	      long[]    observed    =    observed.clone();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
38	[BUG]  [BUGGY]  Long[]  observed  =  observed.clone();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  Long[]  observed  =  observed.clone();  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	Long[]  observed  =  observed.clone();	      long[]    observed    =    observed.clone();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
39	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  -  2;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  int  expectedCount  =  observed.length  -  2;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  expectedCount  =  observed.length  -  2;	      int    expectedCount    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
40	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  /  2;  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  int  expectedCount  =  observed.length  /  2;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  expectedCount  =  observed.length  /  2;	      int    expectedCount    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
41	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  +  1;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  int  expectedCount  =  observed.length  +  1;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  expectedCount  =  observed.length  +  1;	      int    expectedCount    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
42	[BUG]  [BUGGY]  int  observedCount  =  observed.length  -  2;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  int  observedCount  =  observed.length  -  2;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  observedCount  =  observed.length  -  2;	      int    observedCount    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
43	[BUG]  [BUGGY]  int  observedCount  =  observed.length  /  2;  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  int  observedCount  =  observed.length  /  2;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  observedCount  =  observed.length  /  2;	      int    observedCount    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
44	[BUG]  [BUGGY]  long  observedCount  =  observed.length;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  long  observedCount  =  observed.length;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long  observedCount  =  observed.length;	      int    observedCount    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
45	[BUG]  [BUGGY]      int  observedCount  =  observed.length;  int  observedCount  =  observed.length;  [CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]      int  observedCount  =  observed.length;  int  observedCount  =  observed.length;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	        int    observedCount    =    observed.length;    int  observedCount  =  observed.length;	  	non-compiled	[CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])	3	None	add
46	[BUG]  [BUGGY]      int  observedCount  =  observed.length;  Integer  observedCount  =  observed.length;  [CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]      int  observedCount  =  observed.length;  Integer  observedCount  =  observed.length;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	        int    observedCount    =    observed.length;    Integer  observedCount  =  observed.length;	  	non-compiled	[CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])	3	None	add
47	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]      int  observedCount  =  observed.length;  int  observedcount  =  observed.length;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	add	        int    observedCount    =    observed.length;    int  observedcount  =  observed.length;	  	compilable	  [FE]  AssertionFailedError  	3	6	add
48	[BUG]  [BUGGY]      int  observedCount  =  observed.length;  int  observedcount  =  observed.length;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]      int  observedCount  =  observed.length;  int  observedcount  =  observed.length;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	        int    observedCount    =    observed.length;    int  observedcount  =  observed.length;	  	compilable	  [FE]  AssertionFailedError  	3	6	add
49	[BUG]  [BUGGY]      int  observedCount  =  observed.length;  long  observedCount  =  observed.length;  [CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]      int  observedCount  =  observed.length;  long  observedCount  =  observed.length;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	        int    observedCount    =    observed.length;    long  observedCount  =  observed.length;	  	non-compiled	[CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])	3	None	add
50	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(expected,  observed,  observed);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(expected,  observed,  observed);  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)distribution).chiSquare(expected,  observed,  observed);	      ((    ChiSquaredDistribution)distribution).chiSquare(expected,    observed);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
51	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(observed,  expected);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(observed,  expected);  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)distribution).chiSquare(observed,  expected);	      ((    ChiSquaredDistribution)distribution).chiSquare(expected,    observed);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
52	[BUG]  [BUGGY]  int  observedCount  =  observed.length  /  1;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  int  observedCount  =  observed.length  /  1;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  observedCount  =  observed.length  /  1;	      int    observedCount    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
53	[BUG]  [BUGGY]  int  observedCount  =  observed.length  -  3;  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  int  observedCount  =  observed.length  -  3;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  observedCount  =  observed.length  -  3;	      int    observedCount    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
54	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  /  1;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  int  expectedCount  =  observed.length  /  1;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  expectedCount  =  observed.length  /  1;	      int    expectedCount    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
55	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  -  3;  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  int  expectedCount  =  observed.length  -  3;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  expectedCount  =  observed.length  -  3;	      int    expectedCount    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
56	[BUG]  [BUGGY]  if  (!isPositive(expected)&&!isNonNegative(observed))  {  if  (!isPositive(expected)&&!isNonNegative(observed))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  if  (!isPositive(expected)&&!isNonNegative(observed))  {  if  (!isPositive(expected)&&!isNonNegative(observed))  {  [BUGGY]    throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	if    (!isPositive(expected)&&!isNonNegative(observed))    {    if  (!isPositive(expected)&&!isNonNegative(observed))  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
57	[BUG]  [BUGGY]  if  (!isPositive(expected)&&!isNonNegative(observed))  {  if  (!isPositive(expected)&&!isNegative(observed))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  if  (!isPositive(expected)&&!isNonNegative(observed))  {  if  (!isPositive(expected)&&!isNegative(observed))  {  [BUGGY]    throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	if    (!isPositive(expected)&&!isNonNegative(observed))    {    if  (!isPositive(expected)&&!isNegative(observed))  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
58	[BUG]  [BUGGY]  if  (!isPositive(expected)&&!isNonNegative(observed))  {  If  (!isPositive(expected)&&!isNonNegative(observed))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  if  (!isPositive(expected)&&!isNonNegative(observed))  {  If  (!isPositive(expected)&&!isNonNegative(observed))  {  [BUGGY]    throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	if    (!isPositive(expected)&&!isNonNegative(observed))    {    If  (!isPositive(expected)&&!isNonNegative(observed))  {	  	non-compiled	[CE]  ';'  expected	9	None	add
59	[BUG]  [BUGGY]      int  observedCount  =  observed.length  -  1;  long  observedCount  =  observed.length  -  1;  [CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]      int  observedCount  =  observed.length  -  1;  long  observedCount  =  observed.length  -  1;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	        int    observedCount    =    observed.length    -    1;    long  observedCount  =  observed.length  -  1;	  	non-compiled	[CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])	7	None	add
60	[BUG]  [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(x,  observed);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(x,  observed);  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)distribution).chiSquare(x,  observed);	      ((    ChiSquareDistribution)distribution).chiSquare(expected,    observed);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
61	[BUG]  [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(x,  expected,  observed);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(x,  expected,  observed);  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)distribution).chiSquare(x,  expected,  observed);	      ((    ChiSquareDistribution)distribution).chiSquare(expected,    observed);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
62	[BUG]  [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(new  long[]  {  expected,  observed  }  );  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(new  long[]  {  expected,  observed  }  );  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)distribution).chiSquare(new  long[]  {  expected,  observed  }  );	      ((    ChiSquareDistribution)distribution).chiSquare(expected,    observed);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
63	[BUG]  [BUGGY]  long[]  observed  =  this.chiSquareTestImpl.clone();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  long[]  observed  =  this.chiSquareTestImpl.clone();  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long[]  observed  =  this.chiSquareTestImpl.clone();	      long[]    observed    =    observed.clone();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
64	[BUG]  [BUGGY]  long[]  observed  =  chiSquare.clone();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  long[]  observed  =  chiSquare.clone();  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long[]  observed  =  chiSquare.clone();	      long[]    observed    =    observed.clone();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
65	[BUG]  [BUGGY]  if  (!isPositive(expected)||!isNegative(expected,  observed))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  if  (!isPositive(expected)||!isNegative(expected,  observed))  {  [BUGGY]    throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	if  (!isPositive(expected)||!isNegative(expected,  observed))  {	  if    (!isPositive(expected)||!isNegative(observed))    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
66	[BUG]  [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed.length);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed.length);  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed.length);	      ((    ChiSquareDistributionImpl)this).chiSquare(expected,    observed);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
67	[BUG]  [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  null);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  null);  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  null);	      ((    ChiSquareDistributionImpl)this).chiSquare(expected,    observed);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
68	[BUG]  [BUGGY]  int  observedCount  =  observed.length  -  1  +  1;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  int  observedCount  =  observed.length  -  1  +  1;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  observedCount  =  observed.length  -  1  +  1;	      int    observedCount    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
69	[BUG]  [BUGGY]  if  (!isPositive(expected)&&!isNegative(expected,  observed))  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  if  (!isPositive(expected)&&!isNegative(expected,  observed))  {  [BUGGY]    throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	if  (!isPositive(expected)&&!isNegative(expected,  observed))  {	  if    (!isPositive(expected)&&!isNegative(observed))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
70	[BUG]  [BUGGY]  if  (!isPositive(expected)&&!isNonNegative(expected))  {  [CE]  no  suitable  method  found  for  isNonNegative(double[])  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  if  (!isPositive(expected)&&!isNonNegative(expected))  {  [BUGGY]    throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	if  (!isPositive(expected)&&!isNonNegative(expected))  {	  if    (!isPositive(expected)&&!isNonNegative(observed))    {    	non-compiled	[CE]  no  suitable  method  found  for  isNonNegative(double[])	10	None	replace
71	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(x,  observed);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(x,  observed);  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)distribution).chiSquare(x,  observed);	      ((    ChiSquaredDistribution)distribution).chiSquare(expected,    observed);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
72	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  -  1  +  1;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  int  expectedCount  =  observed.length  -  1  +  1;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  expectedCount  =  observed.length  -  1  +  1;	      int    expectedCount    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
73	[BUG]  [BUGGY]  long  observed[]  =  x.clone();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  long  observed[]  =  x.clone();  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long  observed[]  =  x.clone();	      long    observed[]    =    observed.clone();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
74	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)expected).chiSquare  =  new  double[expected.length];  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  ((  ChiSquaredDistribution)expected).chiSquare  =  new  double[expected.length];  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)expected).chiSquare  =  new  double[expected.length];	      ((    ChiSquaredDistribution)distribution).chiSquare    =    new    double[expected.length];    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
75	[BUG]  [BUGGY]      int  expectedCount  =  observed.length  -  1;  long  expectedCount  =  observed.length  -  1;  [CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]      int  expectedCount  =  observed.length  -  1;  long  expectedCount  =  observed.length  -  1;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	        int    expectedCount    =    observed.length    -    1;    long  expectedCount  =  observed.length  -  1;	  	non-compiled	[CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])	19	None	add
76	[BUG]  [BUGGY]      int  observedCount  =  observed.length;  Int  int  observedCount  =  observed.length;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]      int  observedCount  =  observed.length;  Int  int  observedCount  =  observed.length;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	        int    observedCount    =    observed.length;    Int  int  observedCount  =  observed.length;	  	non-compiled	[CE]  not  a  statement	3	None	add
77	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]      int  observedCount  =  observed.length;  int  expectedCount  =  observed.length;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	add	        int    observedCount    =    observed.length;    int  expectedCount  =  observed.length;	  	compilable	  [FE]  AssertionFailedError  	3	6	add
78	[BUG]  [BUGGY]      int  observedCount  =  observed.length;  int  expectedCount  =  observed.length;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]      int  observedCount  =  observed.length;  int  expectedCount  =  observed.length;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	        int    observedCount    =    observed.length;    int  expectedCount  =  observed.length;	  	compilable	  [FE]  AssertionFailedError  	3	6	add
79	[BUG]  [BUGGY]  double  expectedCount  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  double  expectedCount  =  observed.length  -  1;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	double  expectedCount  =  observed.length  -  1;	      int    expectedCount    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
80	[BUG]  [BUGGY]  double  observedCount  =  observed.length;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  double  observedCount  =  observed.length;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	double  observedCount  =  observed.length;	      int    observedCount    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
81	[BUG]  [BUGGY]      int  expectedCount  =  observed.length;  double  expectedCount  =  observed.length;  [CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]      int  expectedCount  =  observed.length;  double  expectedCount  =  observed.length;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	        int    expectedCount    =    observed.length;    double  expectedCount  =  observed.length;	  	non-compiled	[CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])	5	None	add
82	[BUG]  [BUGGY]  double  expectedCount  =  observed.length;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  double  expectedCount  =  observed.length;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	double  expectedCount  =  observed.length;	      int    expectedCount    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
83	[BUG]  [BUGGY]  ((  ChiSquareDistribution)expected).chiSquare(observed,  observed);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  ((  ChiSquareDistribution)expected).chiSquare(observed,  observed);  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)expected).chiSquare(observed,  observed);	      ((    ChiSquareDistribution)distribution).chiSquare(expected,    observed);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
84	[BUG]  [BUGGY]  if  (!isPositive(expected)&&!isNonNegative(observed))  {  If  (!isPositive(expected)&&!isNegative(observed))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  if  (!isPositive(expected)&&!isNonNegative(observed))  {  If  (!isPositive(expected)&&!isNegative(observed))  {  [BUGGY]    throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	if    (!isPositive(expected)&&!isNonNegative(observed))    {    If  (!isPositive(expected)&&!isNegative(observed))  {	  	non-compiled	[CE]  ';'  expected	9	None	add
85	[BUG]  [BUGGY]      int  expectedCount  =  observed.length  -  1;  Int  expectedCount  =  observed.length  -  1;  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]      int  expectedCount  =  observed.length  -  1;  Int  expectedCount  =  observed.length  -  1;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	        int    expectedCount    =    observed.length    -    1;    Int  expectedCount  =  observed.length  -  1;	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
86	[BUG]  [BUGGY]      int  expectedCount  =  observed.length  -  1;  double  expectedCount  =  observed.length  -  1;  [CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]      int  expectedCount  =  observed.length  -  1;  double  expectedCount  =  observed.length  -  1;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	        int    expectedCount    =    observed.length    -    1;    double  expectedCount  =  observed.length  -  1;	  	non-compiled	[CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])	19	None	add
87	[BUG]  [BUGGY]  long[]  observed  =  this.observed.clone();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  long[]  observed  =  this.observed.clone();  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long[]  observed  =  this.observed.clone();	      long[]    observed    =    observed.clone();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
88	[BUG]  [BUGGY]  long[]  observed  =  observed.toArray(new  long[0]);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  long[]  observed  =  observed.toArray(new  long[0]);  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long[]  observed  =  observed.toArray(new  long[0]);	      long[]    observed    =    observed.clone();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
89	[BUG]  [BUGGY]  long  observed[]  =  observed.toArray(new  long[0]);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  long  observed[]  =  observed.toArray(new  long[0]);  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long  observed[]  =  observed.toArray(new  long[0]);	      long    observed[]    =    observed.clone();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
90	[BUG]  [BUGGY]      int  observedCount  =  observed.length;  Int  observedCount  =  observed.length;  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]      int  observedCount  =  observed.length;  Int  observedCount  =  observed.length;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	        int    observedCount    =    observed.length;    Int  observedCount  =  observed.length;	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
91	[BUG]  [BUGGY]      int  observedCount  =  observed.length  -  1;  Int  observedCount  =  observed.length  -  1;  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]      int  observedCount  =  observed.length  -  1;  Int  observedCount  =  observed.length  -  1;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	        int    observedCount    =    observed.length    -    1;    Int  observedCount  =  observed.length  -  1;	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
92	[BUG]  [BUGGY]  double  observedCount  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }    [BUGGY]  double  observedCount  =  observed.length  -  1;  [BUGGY]    if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	double  observedCount  =  observed.length  -  1;	      int    observedCount    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
