bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  long  observedCount  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  long  observedCount  =  observed.length  -  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long  observedCount  =  observed.length  -  1;	          int    observedCount    =    observed.length    -    1;    long    observedCount    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
2	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(observed,  observed);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(observed,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)distribution).chiSquare(observed,  observed);	  ((    ChiSquaredDistribution)distribution).chiSquare(observed,    expected);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
3	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)expected).chiSquare(distribution,  observed);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)expected).chiSquare(distribution,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)expected).chiSquare(distribution,  observed);	  ((    ChiSquaredDistribution)distribution).chiSquare(observed,    expected);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
4	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(normalized,  observed);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(normalized,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)distribution).chiSquare(normalized,  observed);	  ((    ChiSquaredDistribution)distribution).chiSquare(observed,    expected);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
5	[BUG]  [BUGGY]  If  (!isPositive(expected)&&!isNegative(observed))  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  If  (!isPositive(expected)&&!isNegative(observed))  {  [BUGGY]      throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	If  (!isPositive(expected)&&!isNegative(observed))  {	  if    (!isPositive(expected)&&!isNonNegative(observed))    {    If    (!isPositive(expected)&&!isNegative(observed))    {    	non-compiled	[CE]  ';'  expected	84	None	replace
6	[BUG]  [BUGGY]  If  (!isPositive(expected)&&!isNegative(expected))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  If  (!isPositive(expected)&&!isNegative(expected))  {  [BUGGY]      throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	If  (!isPositive(expected)&&!isNegative(expected))  {	  if    (!isPositive(expected)&&!isNonNegative(observed))    {    If    (!isPositive(expected)&&!isNegative(observed))    {    	non-compiled	[CE]  ';'  expected	84	None	replace
7	[BUG]  [BUGGY]  Int  observedCount  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  Int  observedCount  =  observed.length  -  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	Int  observedCount  =  observed.length  -  1;	          int    observedCount    =    observed.length    -    1;    Int    observedCount    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
8	[BUG]  [BUGGY]  long  observedCount  =  observed.length  -  1;  Int  observedCount  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  long  observedCount  =  observed.length  -  1;  Int  observedCount  =  observed.length  -  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long  observedCount  =  observed.length  -  1;  Int  observedCount  =  observed.length  -  1;	          int    observedCount    =    observed.length    -    1;    Int    observedCount    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
9	[BUG]  [BUGGY]  Integer  observedCount  =  observed.length;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  Integer  observedCount  =  observed.length;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	Integer  observedCount  =  observed.length;	          int    observedCount    =    observed.length;    Integer    observedCount    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
10	[BUG]  [BUGGY]  Long  observedCount  =  observed.length;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  Long  observedCount  =  observed.length;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	Long  observedCount  =  observed.length;	          int    observedCount    =    observed.length;    Integer    observedCount    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
11	[BUG]  [BUGGY]  double  observedCount  =  observed.length  -  2;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  double  observedCount  =  observed.length  -  2;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	double  observedCount  =  observed.length  -  2;	  int    observedCount    =    observed.length    -    2;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
12	[BUG]  [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  observed,  distribution);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  observed,  distribution);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  observed,  distribution);	  ((    ChiSquareDistributionImpl)this).chiSquare(expected,    observed,    distribution);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
13	[BUG]  [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  distribution,  observed);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  distribution,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  distribution,  observed);	  ((    ChiSquareDistributionImpl)this).chiSquare(expected,    observed,    distribution);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
14	[BUG]  [BUGGY]  int  observedCount  =  observed.length  /  2  +  1;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  observedCount  =  observed.length  /  2  +  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  observedCount  =  observed.length  /  2  +  1;	  int    observedCount    =    observed.length    /    2;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
15	[BUG]  [BUGGY]  double  observedCount  =  observed.length  /  2;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  double  observedCount  =  observed.length  /  2;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	double  observedCount  =  observed.length  /  2;	  int    observedCount    =    observed.length    /    2;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
16	[BUG]  [BUGGY]  int  observedCount  =  observed.length  /  2L;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  observedCount  =  observed.length  /  2L;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  observedCount  =  observed.length  /  2L;	  int    observedCount    =    observed.length    /    2;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
17	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  /  3;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  expectedCount  =  observed.length  /  3;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  expectedCount  =  observed.length  /  3;	  int    expectedCount    =    observed.length    -    3;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
18	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  -  4;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  expectedCount  =  observed.length  -  4;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  expectedCount  =  observed.length  -  4;	  int    expectedCount    =    observed.length    -    3;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
19	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[4];  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[4];  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[4];	  ((    ChiSquaredDistribution)distribution).chiSquare    =    new    double[2];    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
20	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  /  1  +  1;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  expectedCount  =  observed.length  /  1  +  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  expectedCount  =  observed.length  /  1  +  1;	  int    expectedCount    =    observed.length    -    1    +    1;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
21	[BUG]  [BUGGY]  double  expectedCount  =  observed.length  /  1;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  double  expectedCount  =  observed.length  /  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	double  expectedCount  =  observed.length  /  1;	  int    expectedCount    =    observed.length    /    1;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
22	[BUG]  [BUGGY]  long  expectedCount  =  observed.length  /  1;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  long  expectedCount  =  observed.length  /  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long  expectedCount  =  observed.length  /  1;	  int    expectedCount    =    observed.length    /    1;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
23	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  /  4;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  expectedCount  =  observed.length  /  4;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  expectedCount  =  observed.length  /  4;	  int    expectedCount    =    observed.length    /    1;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
24	[BUG]  [BUGGY]  long[]  observed  =  observed.toArray(new  long[1]);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  long[]  observed  =  observed.toArray(new  long[1]);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long[]  observed  =  observed.toArray(new  long[1]);	  long[]    observed    =    observed.toArray(new    long[0]);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
25	[BUG]  [BUGGY]  long[]  observed  =  observed.toArray(new  long[2]);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  long[]  observed  =  observed.toArray(new  long[2]);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long[]  observed  =  observed.toArray(new  long[2]);	  long[]    observed    =    observed.toArray(new    long[0]);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
26	[BUG]  [BUGGY]  long[]  observed  =  observed.toArray(new  long[3]);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  long[]  observed  =  observed.toArray(new  long[3]);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long[]  observed  =  observed.toArray(new  long[3]);	  long[]    observed    =    observed.toArray(new    long[0]);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
27	[BUG]  [BUGGY]  long  expectedCount  =  observed.length;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  long  expectedCount  =  observed.length;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long  expectedCount  =  observed.length;	          int    expectedCount    =    observed.length;    int    expectedCount    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
28	[BUG]  [BUGGY]  long  expectedCount  =  observed.length  -  1;  int  expectedCount  =  observed.length  -  2;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  long  expectedCount  =  observed.length  -  1;  int  expectedCount  =  observed.length  -  2;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long  expectedCount  =  observed.length  -  1;  int  expectedCount  =  observed.length  -  2;	          int    expectedCount    =    observed.length    -    1;    int    expectedCount    =    observed.length    -    2;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
29	[BUG]  [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(observed,  observed);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(observed,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistributionImpl)this).chiSquare(observed,  observed);	  ((    ChiSquareDistributionImpl)this).chiSquare(observed,    expected);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
30	[BUG]  [BUGGY]  ((  ChiSquareDistributionImpl)observed).chiSquare(expected,  observed);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistributionImpl)observed).chiSquare(expected,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistributionImpl)observed).chiSquare(expected,  observed);	  ((    ChiSquareDistributionImpl)this).chiSquare(observed,    expected);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
31	[BUG]  [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(observed,  expected,  observed);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(observed,  expected,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistributionImpl)this).chiSquare(observed,  expected,  observed);	  ((    ChiSquareDistributionImpl)this).chiSquare(observed,    expected);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
32	[BUG]  [BUGGY]  if  (!isPositive(expected,  observed)&&!isNonNegative(expected))  {  [CE]  method  isPositive  in  class  ChiSquareTestImpl  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  if  (!isPositive(expected,  observed)&&!isNonNegative(expected))  {  [BUGGY]      throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	if  (!isPositive(expected,  observed)&&!isNonNegative(expected))  {	  if    (!isPositive(expected)&&!isNonNegative(expected))    {    	non-compiled	[CE]  method  isPositive  in  class  ChiSquareTestImpl  cannot  be  applied  to  given  types;	70	None	replace
33	[BUG]  [BUGGY]  if  (!isPositive(expected)&&!isNonNegative(observed,  expected))  {  [CE]  no  suitable  method  found  for  isNonNegative(long[],double[])  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  if  (!isPositive(expected)&&!isNonNegative(observed,  expected))  {  [BUGGY]      throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	if  (!isPositive(expected)&&!isNonNegative(observed,  expected))  {	  if    (!isPositive(expected)&&!isNonNegative(expected))    {    	non-compiled	[CE]  no  suitable  method  found  for  isNonNegative(long[],double[])	70	None	replace
34	[BUG]  [BUGGY]  if  (!isPositive(expected)||!isNonNegative(expected))  {  [CE]  no  suitable  method  found  for  isNonNegative(double[])  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  if  (!isPositive(expected)||!isNonNegative(expected))  {  [BUGGY]      throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	if  (!isPositive(expected)||!isNonNegative(expected))  {	  if    (!isPositive(expected)&&!isNonNegative(expected))    {    	non-compiled	[CE]  no  suitable  method  found  for  isNonNegative(double[])	70	None	replace
35	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[expected.length  -  2];  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[expected.length  -  2];  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[expected.length  -  2];	  ((    ChiSquaredDistribution)distribution).chiSquare    =    new    double[expected.length    -    1];    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
36	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[expected.length  /  1];  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[expected.length  /  1];  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[expected.length  /  1];	  ((    ChiSquaredDistribution)distribution).chiSquare    =    new    double[expected.length    -    1];    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
37	[BUG]  [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(new  long[]  {  expected,  observed,  observed  }  );  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(new  long[]  {  expected,  observed,  observed  }  );  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)distribution).chiSquare(new  long[]  {  expected,  observed,  observed  }  );	  ((    ChiSquareDistribution)distribution).chiSquare(new    long[]    {    expected,    observed    }    );    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
38	[BUG]  [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(new  long[]  {  observed,  expected  }  );  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(new  long[]  {  observed,  expected  }  );  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)distribution).chiSquare(new  long[]  {  observed,  expected  }  );	  ((    ChiSquareDistribution)distribution).chiSquare(new    long[]    {    expected,    observed    }    );    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
39	[BUG]  [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(new  long[]  {  expected,  observed  },  distribution);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(new  long[]  {  expected,  observed  },  distribution);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)distribution).chiSquare(new  long[]  {  expected,  observed  },  distribution);	  ((    ChiSquareDistribution)distribution).chiSquare(new    long[]    {    expected,    observed    }    );    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
40	[BUG]  [BUGGY]  long  observedCount  =  observed.length;  int  expectedCount  =  observed.length;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  long  observedCount  =  observed.length;  int  expectedCount  =  observed.length;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long  observedCount  =  observed.length;  int  expectedCount  =  observed.length;	          int    observedCount    =    observed.length;    int    expectedCount    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
41	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(observed,  x);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(observed,  x);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)distribution).chiSquare(observed,  x);	  ((    ChiSquaredDistribution)distribution).chiSquare(x,    observed);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
42	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(variable,  x,  observed);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(variable,  x,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)distribution).chiSquare(variable,  x,  observed);	  ((    ChiSquaredDistribution)distribution).chiSquare(x,    observed);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
43	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(sumSq,  x,  observed);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(sumSq,  x,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)distribution).chiSquare(sumSq,  x,  observed);	  ((    ChiSquaredDistribution)distribution).chiSquare(x,    observed);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
44	[BUG]  [BUGGY]  long[]  observed  =  this.chiSquareDistribution.clone();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  long[]  observed  =  this.chiSquareDistribution.clone();  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long[]  observed  =  this.chiSquareDistribution.clone();	  long[]    observed    =    this.chiSquareTestImpl.clone();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
45	[BUG]  [BUGGY]  long[]  observed  =  this.chiSquareTestImpl.clone(),  observed);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  long[]  observed  =  this.chiSquareTestImpl.clone(),  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long[]  observed  =  this.chiSquareTestImpl.clone(),  observed);	  long[]    observed    =    this.chiSquareTestImpl.clone();    	non-compiled	[CE]  ';'  expected	63	None	replace
46	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[expected.length  *  observed.length];  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[expected.length  *  observed.length];  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[expected.length  *  observed.length];	  ((    ChiSquaredDistribution)distribution).chiSquare    =    new    double[expected.length    +    observed.length];    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
47	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[expected.length  +  observed.length  -  1];  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[expected.length  +  observed.length  -  1];  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[expected.length  +  observed.length  -  1];	  ((    ChiSquaredDistribution)distribution).chiSquare    =    new    double[expected.length    +    observed.length];    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
48	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)expected).chiSquare  =  new  double[expected.length  +  observed.length];  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)expected).chiSquare  =  new  double[expected.length  +  observed.length];  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)expected).chiSquare  =  new  double[expected.length  +  observed.length];	  ((    ChiSquaredDistribution)distribution).chiSquare    =    new    double[expected.length    +    observed.length];    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
49	[BUG]  [BUGGY]          int    observedCount    =    observed.length;    int  expectedCount  =  observed.length;  int  observedCount  =  observed.length;  int  expectedCount  =  observed.length;  [CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]          int    observedCount    =    observed.length;    int  expectedCount  =  observed.length;  int  observedCount  =  observed.length;  int  expectedCount  =  observed.length;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	                int        observedCount        =        observed.length;        int    expectedCount    =    observed.length;    int  observedCount  =  observed.length;  int  expectedCount  =  observed.length;	  	non-compiled	[CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])	77	None	add
50	[BUG]  [BUGGY]          int    observedCount    =    observed.length;    int  expectedCount  =  observed.length;  Integer  observedCount  =  observed.length;  int  expectedCount  =  observed.length;  [CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]          int    observedCount    =    observed.length;    int  expectedCount  =  observed.length;  Integer  observedCount  =  observed.length;  int  expectedCount  =  observed.length;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	                int        observedCount        =        observed.length;        int    expectedCount    =    observed.length;    Integer  observedCount  =  observed.length;  int  expectedCount  =  observed.length;	  	non-compiled	[CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])	77	None	add
51	[BUG]  [BUGGY]          int    observedCount    =    observed.length;    int  expectedCount  =  observed.length;  long  observedCount  =  observed.length;  int  expectedCount  =  observed.length;  [CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]          int    observedCount    =    observed.length;    int  expectedCount  =  observed.length;  long  observedCount  =  observed.length;  int  expectedCount  =  observed.length;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	                int        observedCount        =        observed.length;        int    expectedCount    =    observed.length;    long  observedCount  =  observed.length;  int  expectedCount  =  observed.length;	  	non-compiled	[CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])	77	None	add
52	[BUG]  [BUGGY]          int    observedCount    =    observed.length;    int  expectedCount  =  observed.length;  int  observedcount  =  observed.length;  int  expectedCount  =  observed.length;  [CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]          int    observedCount    =    observed.length;    int  expectedCount  =  observed.length;  int  observedcount  =  observed.length;  int  expectedCount  =  observed.length;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	                int        observedCount        =        observed.length;        int    expectedCount    =    observed.length;    int  observedcount  =  observed.length;  int  expectedCount  =  observed.length;	  	non-compiled	[CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])	77	None	add
53	[BUG]  [BUGGY]  if(!isPositive(expected,  observed)&&!isNegative(observed))  {  [CE]  method  isPositive  in  class  ChiSquareTestImpl  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  if(!isPositive(expected,  observed)&&!isNegative(observed))  {  [BUGGY]      throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	if(!isPositive(expected,  observed)&&!isNegative(observed))  {	  if    (!isPositive(expected)&&!isNonNegative(observed))    {    if    (!isPositive(expected)&&!isNegative(observed))    {    	non-compiled	[CE]  method  isPositive  in  class  ChiSquareTestImpl  cannot  be  applied  to  given  types;	57	None	replace
54	[BUG]  [BUGGY]  long  expectedCount  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  long  expectedCount  =  observed.length  -  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long  expectedCount  =  observed.length  -  1;	          int    expectedCount    =    observed.length    -    1;    double    expectedCount    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
55	[BUG]  [BUGGY]  Int  observedCount  =  observed.length;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  Int  observedCount  =  observed.length;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	Int  observedCount  =  observed.length;	          int    observedCount    =    observed.length;    Int    observedCount    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
56	[BUG]  [BUGGY]  long  observedCount  =  observed.length;  Int  observedCount  =  observed.length;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  long  observedCount  =  observed.length;  Int  observedCount  =  observed.length;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long  observedCount  =  observed.length;  Int  observedCount  =  observed.length;	          int    observedCount    =    observed.length;    Int    observedCount    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
57	[BUG]  [BUGGY]  int  observedCount  =  observed.length  /  3;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  observedCount  =  observed.length  /  3;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  observedCount  =  observed.length  /  3;	  int    observedCount    =    observed.length    -    3;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
58	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  -  2;  int  expectCount  =  observed.length  -  2;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  expectedCount  =  observed.length  -  2;  int  expectCount  =  observed.length  -  2;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  expectedCount  =  observed.length  -  2;  int  expectCount  =  observed.length  -  2;	          int    expectedCount    =    observed.length    -    1;    int    expectCount    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
59	[BUG]  [BUGGY]  long  expectedCount  =  observed.length  -  1;  int  expectCount  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  long  expectedCount  =  observed.length  -  1;  int  expectCount  =  observed.length  -  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long  expectedCount  =  observed.length  -  1;  int  expectCount  =  observed.length  -  1;	          int    expectedCount    =    observed.length    -    1;    int    expectCount    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
60	[BUG]  [BUGGY]  double  observedCount  =  observed.length  /  1;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  double  observedCount  =  observed.length  /  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	double  observedCount  =  observed.length  /  1;	  double    observedCount    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
61	[BUG]  [BUGGY]  double  observedCount  =  observed.length  -  3;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  double  observedCount  =  observed.length  -  3;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	double  observedCount  =  observed.length  -  3;	  double    observedCount    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
62	[BUG]  [BUGGY]          int    expectedCount    =    observed.length;    int  expectCount  =  observed.length;  int  expectedCount  =  observed.length;  int  expectCount  =  observed.length;  [CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]          int    expectedCount    =    observed.length;    int  expectCount  =  observed.length;  int  expectedCount  =  observed.length;  int  expectCount  =  observed.length;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	                int        expectedCount        =        observed.length;        int    expectCount    =    observed.length;    int  expectedCount  =  observed.length;  int  expectCount  =  observed.length;	  	non-compiled	[CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])	27	None	add
63	[BUG]  [BUGGY]          int    expectedCount    =    observed.length;    int  expectCount  =  observed.length;  int  expectCount  =  observed.length;  int  expectCount  =  observed.length;  [CE]  variable  expectCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]          int    expectedCount    =    observed.length;    int  expectCount  =  observed.length;  int  expectCount  =  observed.length;  int  expectCount  =  observed.length;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	                int        expectedCount        =        observed.length;        int    expectCount    =    observed.length;    int  expectCount  =  observed.length;  int  expectCount  =  observed.length;	  	non-compiled	[CE]  variable  expectCount  is  already  defined  in  method  chiSquare(double[],long[])	27	None	add
64	[BUG]  [BUGGY]          int    expectedCount    =    observed.length;    int  expectCount  =  observed.length;  Integer  expectedCount  =  observed.length;  int  expectCount  =  observed.length;  [CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]          int    expectedCount    =    observed.length;    int  expectCount  =  observed.length;  Integer  expectedCount  =  observed.length;  int  expectCount  =  observed.length;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	                int        expectedCount        =        observed.length;        int    expectCount    =    observed.length;    Integer  expectedCount  =  observed.length;  int  expectCount  =  observed.length;	  	non-compiled	[CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])	27	None	add
65	[BUG]  [BUGGY]          int    expectedCount    =    observed.length;    int  expectCount  =  observed.length;  int  unexpectedCount  =  observed.length;  int  expectCount  =  observed.length;  [CE]  variable  expectCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]          int    expectedCount    =    observed.length;    int  expectCount  =  observed.length;  int  unexpectedCount  =  observed.length;  int  expectCount  =  observed.length;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	                int        expectedCount        =        observed.length;        int    expectCount    =    observed.length;    int  unexpectedCount  =  observed.length;  int  expectCount  =  observed.length;	  	non-compiled	[CE]  variable  expectCount  is  already  defined  in  method  chiSquare(double[],long[])	27	None	add
66	[BUG]  [BUGGY]  double  expectedCount  =  observed.length  -  2;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  double  expectedCount  =  observed.length  -  2;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	double  expectedCount  =  observed.length  -  2;	  int    expectedCount    =    observed.length    -    2;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
67	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[expected.length  +  2];  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[expected.length  +  2];  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[expected.length  +  2];	  ((    ChiSquaredDistribution)distribution).chiSquare    =    new    double[expected.length    +    1];    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
68	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[expected.length  +  3];  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[expected.length  +  3];  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[expected.length  +  3];	  ((    ChiSquaredDistribution)distribution).chiSquare    =    new    double[expected.length    +    1];    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
69	[BUG]  [BUGGY]  int  observed[]  =  expected.clone();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  observed[]  =  expected.clone();  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  observed[]  =  expected.clone();	  long    observed[]    =    expected.clone();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
70	[BUG]  [BUGGY]  double  observed[]  =  expected.clone();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  double  observed[]  =  expected.clone();  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	double  observed[]  =  expected.clone();	  long    observed[]    =    expected.clone();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
71	[BUG]  [BUGGY]          int    observedCount    =    observed.length    -    1;    int  observedcount  =  observed.length  -  1;  int  observedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  [CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]          int    observedCount    =    observed.length    -    1;    int  observedcount  =  observed.length  -  1;  int  observedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	                int        observedCount        =        observed.length        -        1;        int    observedcount    =    observed.length    -    1;    int  observedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;	  	non-compiled	[CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])	19	None	add
72	[BUG]  [BUGGY]          int    observedCount    =    observed.length    -    1;    int  observedcount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  [CE]  variable  observedcount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]          int    observedCount    =    observed.length    -    1;    int  observedcount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	                int        observedCount        =        observed.length        -        1;        int    observedcount    =    observed.length    -    1;    int  observedcount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;	  	non-compiled	[CE]  variable  observedcount  is  already  defined  in  method  chiSquare(double[],long[])	19	None	add
73	[BUG]  [BUGGY]          int    observedCount    =    observed.length    -    1;    int  observedcount  =  observed.length  -  1;  Integer  observedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  [CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]          int    observedCount    =    observed.length    -    1;    int  observedcount  =  observed.length  -  1;  Integer  observedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	                int        observedCount        =        observed.length        -        1;        int    observedcount    =    observed.length    -    1;    Integer  observedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;	  	non-compiled	[CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])	19	None	add
74	[BUG]  [BUGGY]          int    observedCount    =    observed.length    -    1;    int  observedcount  =  observed.length  -  1;  long  observedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  [CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]          int    observedCount    =    observed.length    -    1;    int  observedcount  =  observed.length  -  1;  long  observedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	                int        observedCount        =        observed.length        -        1;        int    observedcount    =    observed.length    -    1;    long  observedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;	  	non-compiled	[CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])	19	None	add
75	[BUG]  [BUGGY]  int[]  observed  =  expected.clone();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int[]  observed  =  expected.clone();  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int[]  observed  =  expected.clone();	  long[]    observed    =    expected.clone();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
76	[BUG]  [BUGGY]  long  observedCount  =  observed.length  /  1;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  long  observedCount  =  observed.length  /  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long  observedCount  =  observed.length  /  1;	  int    observedCount    =    observed.length    /    1;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
77	[BUG]  [BUGGY]  int  observedCount  =  observed.length  /  4;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  observedCount  =  observed.length  /  4;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  observedCount  =  observed.length  /  4;	  int    observedCount    =    observed.length    /    1;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
78	[BUG]  [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(observed,  x);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(observed,  x);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)distribution).chiSquare(observed,  x);	  ((    ChiSquareDistribution)distribution).chiSquare(x,    observed);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
79	[BUG]  [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(variable,  x,  observed);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(variable,  x,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)distribution).chiSquare(variable,  x,  observed);	  ((    ChiSquareDistribution)distribution).chiSquare(x,    observed);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
80	[BUG]  [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(sumSq,  x,  observed);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(sumSq,  x,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)distribution).chiSquare(sumSq,  x,  observed);	  ((    ChiSquareDistribution)distribution).chiSquare(x,    observed);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
81	[BUG]  [BUGGY]  Int  expectedCount  =  observed.length;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  Int  expectedCount  =  observed.length;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	Int  expectedCount  =  observed.length;	          int    expectedCount    =    observed.length;    Int    expectedCount    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
82	[BUG]  [BUGGY]  Integer  expectedCount  =  observed.length;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  Integer  expectedCount  =  observed.length;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	Integer  expectedCount  =  observed.length;	          int    expectedCount    =    observed.length;    Int    expectedCount    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
83	[BUG]  [BUGGY]  If  (!isPositive(expected)&&!isNonNegative(observed))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  If  (!isPositive(expected)&&!isNonNegative(observed))  {  [BUGGY]      throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	If  (!isPositive(expected)&&!isNonNegative(observed))  {	  if    (!isPositive(expected)&&!isNonNegative(observed))    {    If    (!isPositive(expected)&&!isNonNegative(observed))    {    	non-compiled	[CE]  ';'  expected	58	None	replace
84	[BUG]  [BUGGY]  If  (!isPositive(expected)&&!isNonNegative(expected))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  If  (!isPositive(expected)&&!isNonNegative(expected))  {  [BUGGY]      throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	If  (!isPositive(expected)&&!isNonNegative(expected))  {	  if    (!isPositive(expected)&&!isNonNegative(observed))    {    If    (!isPositive(expected)&&!isNonNegative(observed))    {    	non-compiled	[CE]  ';'  expected	58	None	replace
85	[BUG]  [BUGGY]          int    expectedCount    =    observed.length    -    1;    int  expectCount  =  observed.length  -  1;  int  expectedCount  =  observed.length  -  1;  int  expectCount  =  observed.length  -  1;  [CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]          int    expectedCount    =    observed.length    -    1;    int  expectCount  =  observed.length  -  1;  int  expectedCount  =  observed.length  -  1;  int  expectCount  =  observed.length  -  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	                int        expectedCount        =        observed.length        -        1;        int    expectCount    =    observed.length    -    1;    int  expectedCount  =  observed.length  -  1;  int  expectCount  =  observed.length  -  1;	  	non-compiled	[CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])	7	None	add
86	[BUG]  [BUGGY]          int    expectedCount    =    observed.length    -    1;    int  expectCount  =  observed.length  -  1;  int  expectCount  =  observed.length  -  1;  int  expectCount  =  observed.length  -  1;  [CE]  variable  expectCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]          int    expectedCount    =    observed.length    -    1;    int  expectCount  =  observed.length  -  1;  int  expectCount  =  observed.length  -  1;  int  expectCount  =  observed.length  -  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	                int        expectedCount        =        observed.length        -        1;        int    expectCount    =    observed.length    -    1;    int  expectCount  =  observed.length  -  1;  int  expectCount  =  observed.length  -  1;	  	non-compiled	[CE]  variable  expectCount  is  already  defined  in  method  chiSquare(double[],long[])	7	None	add
87	[BUG]  [BUGGY]          int    expectedCount    =    observed.length    -    1;    int  expectCount  =  observed.length  -  1;  int  expectedCount  =  observed.length  -  2;  int  expectCount  =  observed.length  -  1;  [CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]          int    expectedCount    =    observed.length    -    1;    int  expectCount  =  observed.length  -  1;  int  expectedCount  =  observed.length  -  2;  int  expectCount  =  observed.length  -  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	                int        expectedCount        =        observed.length        -        1;        int    expectCount    =    observed.length    -    1;    int  expectedCount  =  observed.length  -  2;  int  expectCount  =  observed.length  -  1;	  	non-compiled	[CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])	7	None	add
88	[BUG]  [BUGGY]          int    expectedCount    =    observed.length    -    1;    int  expectCount  =  observed.length  -  1;  int  unexpectedCount  =  observed.length  -  1;  int  expectCount  =  observed.length  -  1;  [CE]  variable  expectCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]          int    expectedCount    =    observed.length    -    1;    int  expectCount  =  observed.length  -  1;  int  unexpectedCount  =  observed.length  -  1;  int  expectCount  =  observed.length  -  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	                int        expectedCount        =        observed.length        -        1;        int    expectCount    =    observed.length    -    1;    int  unexpectedCount  =  observed.length  -  1;  int  expectCount  =  observed.length  -  1;	  	non-compiled	[CE]  variable  expectCount  is  already  defined  in  method  chiSquare(double[],long[])	7	None	add
89	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  /  2  +  1;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  expectedCount  =  observed.length  /  2  +  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  expectedCount  =  observed.length  /  2  +  1;	  int    expectedCount    =    observed.length    /    2;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
90	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  /  2  *  observed.length;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  expectedCount  =  observed.length  /  2  *  observed.length;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  expectedCount  =  observed.length  /  2  *  observed.length;	  int    expectedCount    =    observed.length    /    2;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
91	[BUG]  [BUGGY]  double  expectedCount  =  observed.length  /  2;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  double  expectedCount  =  observed.length  /  2;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	double  expectedCount  =  observed.length  /  2;	  int    expectedCount    =    observed.length    /    2;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
92	[BUG]  [BUGGY]  if  (!isNegative(expected)&&!isPositive(expected))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  if  (!isNegative(expected)&&!isPositive(expected))  {  [BUGGY]      throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	if  (!isNegative(expected)&&!isPositive(expected))  {	  if    (!isNegative(expected)||!isPositive(expected))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
93	[BUG]  [BUGGY]  if  (!isNegative(expected)||!isPositive(observed))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  if  (!isNegative(expected)||!isPositive(observed))  {  [BUGGY]      throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	if  (!isNegative(expected)||!isPositive(observed))  {	  if    (!isNegative(expected)||!isPositive(expected))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
94	[BUG]  [BUGGY]  if  (!isPositive(expected)||!isNegative(expected,  observed.length))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  if  (!isPositive(expected)||!isNegative(expected,  observed.length))  {  [BUGGY]      throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	if  (!isPositive(expected)||!isNegative(expected,  observed.length))  {	  if    (!isPositive(expected)||!isNegative(expected,    observed))    {    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
95	[BUG]  [BUGGY]  long  observedCount  =  observed.length  -  2;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  long  observedCount  =  observed.length  -  2;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long  observedCount  =  observed.length  -  2;	  long    observedCount    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
96	[BUG]  [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(expected,  observed,  distribution);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(expected,  observed,  distribution);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)distribution).chiSquare(expected,  observed,  distribution);	  ((    ChiSquareDistribution)distribution).chiSquare(expected,    observed,    observed);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
97	[BUG]  [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(expected,  observed,  sumSq);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(expected,  observed,  sumSq);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)distribution).chiSquare(expected,  observed,  sumSq);	  ((    ChiSquareDistribution)distribution).chiSquare(expected,    observed,    observed);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
98	[BUG]  [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(observed,  expected,  observed);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(observed,  expected,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)distribution).chiSquare(observed,  expected,  observed);	  ((    ChiSquareDistribution)distribution).chiSquare(expected,    observed,    observed);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
99	[BUG]  [BUGGY]  long[]  observed  =  this.chiSquare.clone();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  long[]  observed  =  this.chiSquare.clone();  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long[]  observed  =  this.chiSquare.clone();	  long[]    observed    =    chiSquare.clone();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
100	[BUG]  [BUGGY]  long  observedCount  =  observed.length  -  1;  int  observedCount  =  observed.length  -  2;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  long  observedCount  =  observed.length  -  1;  int  observedCount  =  observed.length  -  2;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long  observedCount  =  observed.length  -  1;  int  observedCount  =  observed.length  -  2;	          int    observedCount    =    observed.length    -    1;    int    observedCount    =    observed.length    -    2;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
101	[BUG]  [BUGGY]  Integer  observedCount  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  Integer  observedCount  =  observed.length  -  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	Integer  observedCount  =  observed.length  -  1;	          int    observedCount    =    observed.length    -    1;    Integer    observedCount    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
102	[BUG]  [BUGGY]  int[]  observed  =  this.observed.clone();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int[]  observed  =  this.observed.clone();  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int[]  observed  =  this.observed.clone();	  int[]    observed    =    observed.clone();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
103	[BUG]  [BUGGY]  Long[]  observed  =  observed!=  null?  null  :  observed.clone();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  Long[]  observed  =  observed!=  null?  null  :  observed.clone();  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	Long[]  observed  =  observed!=  null?  null  :  observed.clone();	  Long[]    observed    =    observed.clone();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
104	[BUG]  [BUGGY]  Long[]  observed  =  expected.clone();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  Long[]  observed  =  expected.clone();  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	Long[]  observed  =  expected.clone();	  Long[]    observed    =    observed.clone();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
105	[BUG]  [BUGGY]  Long[]  observed  =  this.observed.clone();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  Long[]  observed  =  this.observed.clone();  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	Long[]  observed  =  this.observed.clone();	  Long[]    observed    =    observed.clone();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
106	[BUG]  [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(x,  observed,  expected);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(x,  observed,  expected);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)distribution).chiSquare(x,  observed,  expected);	  ((    ChiSquareDistribution)distribution).chiSquare(x,    expected,    observed);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
107	[BUG]  [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(x,  observed,  observed);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(x,  observed,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)distribution).chiSquare(x,  observed,  observed);	  ((    ChiSquareDistribution)distribution).chiSquare(x,    expected,    observed);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
108	[BUG]  [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(observed,  x,  expected);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(observed,  x,  expected);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)distribution).chiSquare(observed,  x,  expected);	  ((    ChiSquareDistribution)distribution).chiSquare(x,    expected,    observed);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
109	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(expected,  observed,  sumSq);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(expected,  observed,  sumSq);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)distribution).chiSquare(expected,  observed,  sumSq);	  ((    ChiSquaredDistribution)distribution).chiSquare(expected,    observed,    observed);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
110	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(expected,  observed,  distribution);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(expected,  observed,  distribution);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)distribution).chiSquare(expected,  observed,  distribution);	  ((    ChiSquaredDistribution)distribution).chiSquare(expected,    observed,    observed);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
111	[BUG]  [BUGGY]          int    observedCount    =    observed.length;    int  observedcount  =  observed.length;  int  observedCount  =  observed.length;  int  observedcount  =  observed.length;  [CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]          int    observedCount    =    observed.length;    int  observedcount  =  observed.length;  int  observedCount  =  observed.length;  int  observedcount  =  observed.length;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	                int        observedCount        =        observed.length;        int    observedcount    =    observed.length;    int  observedCount  =  observed.length;  int  observedcount  =  observed.length;	  	non-compiled	[CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])	47	None	add
112	[BUG]  [BUGGY]          int    observedCount    =    observed.length;    int  observedcount  =  observed.length;  int  observedcount  =  observed.length;  int  observedcount  =  observed.length;  [CE]  variable  observedcount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]          int    observedCount    =    observed.length;    int  observedcount  =  observed.length;  int  observedcount  =  observed.length;  int  observedcount  =  observed.length;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	                int        observedCount        =        observed.length;        int    observedcount    =    observed.length;    int  observedcount  =  observed.length;  int  observedcount  =  observed.length;	  	non-compiled	[CE]  variable  observedcount  is  already  defined  in  method  chiSquare(double[],long[])	47	None	add
113	[BUG]  [BUGGY]          int    observedCount    =    observed.length;    int  observedcount  =  observed.length;  Integer  observedCount  =  observed.length;  int  observedcount  =  observed.length;  [CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]          int    observedCount    =    observed.length;    int  observedcount  =  observed.length;  Integer  observedCount  =  observed.length;  int  observedcount  =  observed.length;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	                int        observedCount        =        observed.length;        int    observedcount    =    observed.length;    Integer  observedCount  =  observed.length;  int  observedcount  =  observed.length;	  	non-compiled	[CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])	47	None	add
114	[BUG]  [BUGGY]          int    observedCount    =    observed.length;    int  observedcount  =  observed.length;  long  observedCount  =  observed.length;  int  observedcount  =  observed.length;  [CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]          int    observedCount    =    observed.length;    int  observedcount  =  observed.length;  long  observedCount  =  observed.length;  int  observedcount  =  observed.length;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	                int        observedCount        =        observed.length;        int    observedcount    =    observed.length;    long  observedCount  =  observed.length;  int  observedcount  =  observed.length;	  	non-compiled	[CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])	47	None	add
115	[BUG]  [BUGGY]  long[]  observed  =  this.observed,  observed.clone();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  long[]  observed  =  this.observed,  observed.clone();  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long[]  observed  =  this.observed,  observed.clone();	  long[]    observed    =    this.observed.clone();    	non-compiled	[CE]  ';'  expected	87	None	replace
116	[BUG]  [BUGGY]  if  (!isNegative(expected)&&!isPositive(observed,  false))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  if  (!isNegative(expected)&&!isPositive(observed,  false))  {  [BUGGY]      throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	if  (!isNegative(expected)&&!isPositive(observed,  false))  {	  if    (!isNegative(expected)&&!isPositive(observed))    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
117	[BUG]  [BUGGY]  long  observedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  long  observedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long  observedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;	          int    observedCount    =    observed.length    -    1;    int    observedcount    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
118	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)expected).chiSquare  =  new  double[2];  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)expected).chiSquare  =  new  double[2];  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)expected).chiSquare  =  new  double[2];	  ((    ChiSquaredDistribution)expected).chiSquare    =    new    double[expected.length];    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
119	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)expected).chiSquare  =  new  double[1];  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)expected).chiSquare  =  new  double[1];  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)expected).chiSquare  =  new  double[1];	  ((    ChiSquaredDistribution)expected).chiSquare    =    new    double[expected.length];    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
120	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)expected).chiSquare  =  new  double[observed.length];  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)expected).chiSquare  =  new  double[observed.length];  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)expected).chiSquare  =  new  double[observed.length];	  ((    ChiSquaredDistribution)expected).chiSquare    =    new    double[expected.length];    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
121	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)expected).chiSquare  =  new  double[3];  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)expected).chiSquare  =  new  double[3];  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)expected).chiSquare  =  new  double[3];	  ((    ChiSquaredDistribution)expected).chiSquare    =    new    double[expected.length];    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
122	[BUG]  [BUGGY]  int  observed[]  =  observed.toArray(new  int[0]);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  observed[]  =  observed.toArray(new  int[0]);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  observed[]  =  observed.toArray(new  int[0]);	  long    observed[]    =    observed.toArray(new    long[0]);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
123	[BUG]  [BUGGY]  int  observed[]  =  observed.toArray(new  long[0]);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  observed[]  =  observed.toArray(new  long[0]);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  observed[]  =  observed.toArray(new  long[0]);	  long    observed[]    =    observed.toArray(new    long[0]);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
124	[BUG]  [BUGGY]  long  observed[]  =  observed.toArray(new  long[1]);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  long  observed[]  =  observed.toArray(new  long[1]);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long  observed[]  =  observed.toArray(new  long[1]);	  long    observed[]    =    observed.toArray(new    long[0]);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
125	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  -  2;  long  expectedCount  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  expectedCount  =  observed.length  -  2;  long  expectedCount  =  observed.length  -  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  expectedCount  =  observed.length  -  2;  long  expectedCount  =  observed.length  -  1;	          int    expectedCount    =    observed.length    -    1;    long    expectedCount    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
126	[BUG]  [BUGGY]  Integer  expectedCount  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  Integer  expectedCount  =  observed.length  -  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	Integer  expectedCount  =  observed.length  -  1;	          int    expectedCount    =    observed.length    -    1;    Integer    expectedCount    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
127	[BUG]  [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  observed.length);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  observed.length);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  observed.length);	  ((    ChiSquareDistributionImpl)this).chiSquare(expected,    observed,    observed);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
128	[BUG]  [BUGGY]  ((  ChiSquareDistribution)observed).chiSquare(expected,  observed,  distribution);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)observed).chiSquare(expected,  observed,  distribution);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)observed).chiSquare(expected,  observed,  distribution);	  ((    ChiSquareDistribution)observed).chiSquare(expected,    observed);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
129	[BUG]  [BUGGY]  ((  ChiSquareDistribution)observed).chiSquare(expected,  observed,  observed);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)observed).chiSquare(expected,  observed,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)observed).chiSquare(expected,  observed,  observed);	  ((    ChiSquareDistribution)observed).chiSquare(expected,    observed);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
130	[BUG]  [BUGGY]  ((  ChiSquareDistribution)observed).chiSquare(expected,  observed,  observed.length);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)observed).chiSquare(expected,  observed,  observed.length);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)observed).chiSquare(expected,  observed,  observed.length);	  ((    ChiSquareDistribution)observed).chiSquare(expected,    observed);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
131	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)observed).chiSquare(expected,  observed,  observed);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)observed).chiSquare(expected,  observed,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)observed).chiSquare(expected,  observed,  observed);	  ((    ChiSquaredDistribution)observed).chiSquare(expected,    observed);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
132	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)observed).chiSquare(expected,  observed,  distribution);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)observed).chiSquare(expected,  observed,  distribution);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)observed).chiSquare(expected,  observed,  distribution);	  ((    ChiSquaredDistribution)observed).chiSquare(expected,    observed);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
133	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)observed).chiSquare(expected,  observed,  observed.length);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)observed).chiSquare(expected,  observed,  observed.length);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)observed).chiSquare(expected,  observed,  observed.length);	  ((    ChiSquaredDistribution)observed).chiSquare(expected,    observed);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
134	[BUG]  [BUGGY]  if  (!isPositive(expected)&&!isNegative(expected,  observed.length))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  if  (!isPositive(expected)&&!isNegative(expected,  observed.length))  {  [BUGGY]      throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	if  (!isPositive(expected)&&!isNegative(expected,  observed.length))  {	  if    (!isPositive(expected)&&!isNegative(expected,    observed))    {    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
135	[BUG]  [BUGGY]  if  (!isPositive(expected)&&!isNegative(expected,  observed[0]))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  if  (!isPositive(expected)&&!isNegative(expected,  observed[0]))  {  [BUGGY]      throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	if  (!isPositive(expected)&&!isNegative(expected,  observed[0]))  {	  if    (!isPositive(expected)&&!isNegative(expected,    observed))    {    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
136	[BUG]  [BUGGY]  long  expectedCount  =  observed.length;  int  expectCount  =  observed.length;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  long  expectedCount  =  observed.length;  int  expectCount  =  observed.length;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long  expectedCount  =  observed.length;  int  expectCount  =  observed.length;	          int    expectedCount    =    observed.length;    int    expectCount    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
137	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  -  1;  int  expectCount  =  observed.length;  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  expectedCount  =  observed.length  -  1;  int  expectCount  =  observed.length;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  expectedCount  =  observed.length  -  1;  int  expectCount  =  observed.length;	          int    expectedCount    =    observed.length;    int    expectCount    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
138	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  -  2;  int  expectCount  =  observed.length;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  expectedCount  =  observed.length  -  2;  int  expectCount  =  observed.length;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  expectedCount  =  observed.length  -  2;  int  expectCount  =  observed.length;	          int    expectedCount    =    observed.length;    int    expectCount    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
139	[BUG]  [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(observed,  observed);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(observed,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)distribution).chiSquare(observed,  observed);	  ((    ChiSquareDistribution)distribution).chiSquare(observed,    expected);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
140	[BUG]  [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(sumSq,  observed);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(sumSq,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)distribution).chiSquare(sumSq,  observed);	  ((    ChiSquareDistribution)distribution).chiSquare(observed,    expected);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
141	[BUG]  [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(normalized,  observed);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(normalized,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)distribution).chiSquare(normalized,  observed);	  ((    ChiSquareDistribution)distribution).chiSquare(observed,    expected);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
142	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare  =  new  long[1];  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare  =  new  long[1];  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)distribution).chiSquare  =  new  long[1];	  ((    ChiSquaredDistribution)distribution).chiSquare    =    new    double[0];    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
143	[BUG]  [BUGGY]  double  expectedCount  =  observed.length  -  3;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  double  expectedCount  =  observed.length  -  3;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	double  expectedCount  =  observed.length  -  3;	  double    expectedCount    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
144	[BUG]  [BUGGY]  ((  ChiSquareDistribution)expected).chiSquare(distribution,  observed);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)expected).chiSquare(distribution,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)expected).chiSquare(distribution,  observed);	  ((    ChiSquareDistribution)expected).chiSquare(observed,    observed);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
145	[BUG]  [BUGGY]  ((  ChiSquareDistribution)expected).chiSquare(normalized,  observed);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)expected).chiSquare(normalized,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)expected).chiSquare(normalized,  observed);	  ((    ChiSquareDistribution)expected).chiSquare(observed,    observed);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
146	[BUG]  [BUGGY]  ((  ChiSquareDistribution)expected).chiSquare(sumSq,  observed);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)expected).chiSquare(sumSq,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)expected).chiSquare(sumSq,  observed);	  ((    ChiSquareDistribution)expected).chiSquare(observed,    observed);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
147	[BUG]  [BUGGY]  long  observedCount  =  observed.length  -  1;  int  observed.length  =  observed.length  -  1;  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  long  observedCount  =  observed.length  -  1;  int  observed.length  =  observed.length  -  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long  observedCount  =  observed.length  -  1;  int  observed.length  =  observed.length  -  1;	          int    observedCount    =    observed.length    -    1;    int    observed.length    =    observed.length    -    1;    	non-compiled	[CE]  ';'  expected	17	None	replace
148	[BUG]  [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed.length,  observed.length);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed.length,  observed.length);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed.length,  observed.length);	  ((    ChiSquareDistributionImpl)this).chiSquare(expected,    observed.length);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
149	[BUG]  [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed[0],  observed.length);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed[0],  observed.length);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed[0],  observed.length);	  ((    ChiSquareDistributionImpl)this).chiSquare(expected,    observed.length);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
150	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)expected).chiSquare(normalized,  observed);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)expected).chiSquare(normalized,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)expected).chiSquare(normalized,  observed);	  ((    ChiSquaredDistribution)expected).chiSquare(observed,    observed);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
151	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)expected).chiSquare(sumSq,  observed);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)expected).chiSquare(sumSq,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)expected).chiSquare(sumSq,  observed);	  ((    ChiSquaredDistribution)expected).chiSquare(observed,    observed);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
152	[BUG]  [BUGGY]  int  observedcount  =  observed.length;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  observedcount  =  observed.length;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  observedcount  =  observed.length;	          int    observedCount    =    observed.length;    int    observedcount    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
153	[BUG]  [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  distribution,  null);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  distribution,  null);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  distribution,  null);	  ((    ChiSquareDistributionImpl)this).chiSquare(expected,    observed,    null);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
154	[BUG]  [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  null,  observed);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  null,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  null,  observed);	  ((    ChiSquareDistributionImpl)this).chiSquare(expected,    observed,    null);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
155	[BUG]  [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  sumSq,  null);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  sumSq,  null);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  sumSq,  null);	  ((    ChiSquareDistributionImpl)this).chiSquare(expected,    observed,    null);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
156	[BUG]  [BUGGY]  int  observed[]  =  x.clone();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  observed[]  =  x.clone();  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  observed[]  =  x.clone();	  long    observed[]    =    x.clone();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
157	[BUG]  [BUGGY]  long  observed[]  =  observed.length.clone();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  long  observed[]  =  observed.length.clone();  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long  observed[]  =  observed.length.clone();	  long    observed[]    =    x.clone();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
158	[BUG]  [BUGGY]  double  observed[]  =  observed.clone();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  double  observed[]  =  observed.clone();  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	double  observed[]  =  observed.clone();	  int    observed[]    =    observed.clone();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
159	[BUG]  [BUGGY]  Int  expectedCount  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  Int  expectedCount  =  observed.length  -  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	Int  expectedCount  =  observed.length  -  1;	          int    expectedCount    =    observed.length    -    1;    Int    expectedCount    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
160	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  -  2;  Int  expectedCount  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  expectedCount  =  observed.length  -  2;  Int  expectedCount  =  observed.length  -  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  expectedCount  =  observed.length  -  2;  Int  expectedCount  =  observed.length  -  1;	          int    expectedCount    =    observed.length    -    1;    Int    expectedCount    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
161	[BUG]  [BUGGY]  int  observedCount  =  observed.length  /  1  +  1;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  observedCount  =  observed.length  /  1  +  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  observedCount  =  observed.length  /  1  +  1;	  int    observedCount    =    observed.length    -    1    +    1;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
162	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  +  2;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  expectedCount  =  observed.length  +  2;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  expectedCount  =  observed.length  +  2;	  int    expectedCount    =    observed.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
163	[BUG]  [BUGGY]  double  expectedCount  =  observed.length  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  double  expectedCount  =  observed.length  +  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	double  expectedCount  =  observed.length  +  1;	  int    expectedCount    =    observed.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
164	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  /  2  +  4;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  expectedCount  =  observed.length  /  2  +  4;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  expectedCount  =  observed.length  /  2  +  4;	  int    expectedCount    =    observed.length    /    2;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
165	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  /  2  +  3;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  expectedCount  =  observed.length  /  2  +  3;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  expectedCount  =  observed.length  /  2  +  3;	  int    expectedCount    =    observed.length    /    2;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
166	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  -  1;  Int  expectedCount  =  observed.length;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  expectedCount  =  observed.length  -  1;  Int  expectedCount  =  observed.length;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  expectedCount  =  observed.length  -  1;  Int  expectedCount  =  observed.length;	          int    expectedCount    =    observed.length;    Int    expectedCount    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
167	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)observed).chiSquare(new  long[]  {  0,  }  );  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)observed).chiSquare(new  long[]  {  0,  }  );  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)observed).chiSquare(new  long[]  {  0,  }  );	  ((    ChiSquaredDistribution)observed).chiSquare(expected,    observed);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
168	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)observed).chiSquare(new  long[]  {  },  observed);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)observed).chiSquare(new  long[]  {  },  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)observed).chiSquare(new  long[]  {  },  observed);	  ((    ChiSquaredDistribution)observed).chiSquare(expected,    observed);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
169	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)observed).chiSquare(q,  observed);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)observed).chiSquare(q,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)observed).chiSquare(q,  observed);	  ((    ChiSquaredDistribution)observed).chiSquare(expected,    observed);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
170	[BUG]  [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(new  double[]  {  expected,  observed  }  );  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(new  double[]  {  expected,  observed  }  );  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)distribution).chiSquare(new  double[]  {  expected,  observed  }  );	  ((    ChiSquareDistribution)distribution).chiSquare(new    long[]    {    expected,    observed    }    );    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
171	[BUG]  [BUGGY]  int  observedCount  =  observed.length  -  4;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  observedCount  =  observed.length  -  4;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  observedCount  =  observed.length  -  4;	  int    observedCount    =    observed.length    -    3;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
172	[BUG]  [BUGGY]  int  observedCount  =  observed.length  -  1;  Integer  observedCount  =  observedCount  -  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  observedCount  =  observed.length  -  1;  Integer  observedCount  =  observedCount  -  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  observedCount  =  observed.length  -  1;  Integer  observedCount  =  observedCount  -  1;	          int    observedCount    =    observed.length    -    1;    Integer    observedCount    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
173	[BUG]  [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  expected);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  expected);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistributionImpl)this).chiSquare(expected,  expected);	  ((    ChiSquareDistributionImpl)this).chiSquare(observed,    expected);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
174	[BUG]  [BUGGY]  ((  ChiSquareDistributionImpl)super).chiSquare(expected,  observed);  [CE]  '.'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistributionImpl)super).chiSquare(expected,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistributionImpl)super).chiSquare(expected,  observed);	  ((    ChiSquareDistributionImpl)this).chiSquare(observed,    expected);    	non-compiled	[CE]  '.'  expected	11	None	replace
175	[BUG]  [BUGGY]  ((  ChiSquareDistributionImpl)checked).chiSquare(expected,  observed);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistributionImpl)checked).chiSquare(expected,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistributionImpl)checked).chiSquare(expected,  observed);	  ((    ChiSquareDistributionImpl)this).chiSquare(observed,    expected);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
176	[BUG]  [BUGGY]          int    expectedCount    =    observed.length;    int  expectCount  =  observed.length;  long  expectedCount  =  observed.length;  int  expectCount  =  observed.length;  [CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]          int    expectedCount    =    observed.length;    int  expectCount  =  observed.length;  long  expectedCount  =  observed.length;  int  expectCount  =  observed.length;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	                int        expectedCount        =        observed.length;        int    expectCount    =    observed.length;    long  expectedCount  =  observed.length;  int  expectCount  =  observed.length;	  	non-compiled	[CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])	27	None	add
177	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[expected.length  *  1];  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[expected.length  *  1];  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[expected.length  *  1];	  ((    ChiSquaredDistribution)distribution).chiSquare    =    new    double[expected.length    +    1];    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
178	[BUG]  [BUGGY]  int  observedCount  =  observed.length;  Int  observedCount  =  observedCount;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  observedCount  =  observed.length;  Int  observedCount  =  observedCount;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  observedCount  =  observed.length;  Int  observedCount  =  observedCount;	          int    observedCount    =    observed.length;    Int    observedCount    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
179	[BUG]  [BUGGY]  int  observedCount  =  observed.length  -  1;  Int  observedCount  =  observed.length;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  observedCount  =  observed.length  -  1;  Int  observedCount  =  observed.length;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  observedCount  =  observed.length  -  1;  Int  observedCount  =  observed.length;	          int    observedCount    =    observed.length;    Int    observedCount    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
180	[BUG]  [BUGGY]  if  (!isNegative(expected)&&!isPositive(expected,  observed))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  if  (!isNegative(expected)&&!isPositive(expected,  observed))  {  [BUGGY]      throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	if  (!isNegative(expected)&&!isPositive(expected,  observed))  {	  if    (!isNegative(expected)&&!isPositive(observed))    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
181	[BUG]  [BUGGY]  long  observedCount  =  observed.length;  Int  int  observedCount  =  observedCount;  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  long  observedCount  =  observed.length;  Int  int  observedCount  =  observedCount;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long  observedCount  =  observed.length;  Int  int  observedCount  =  observedCount;	          int    observedCount    =    observed.length;    Int    int    observedCount    =    observed.length;    	non-compiled	[CE]  not  a  statement	76	None	replace
182	[BUG]  [BUGGY]  Int  int  observedCount  =  observed.length;  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  Int  int  observedCount  =  observed.length;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	Int  int  observedCount  =  observed.length;	          int    observedCount    =    observed.length;    Int    int    observedCount    =    observed.length;    	non-compiled	[CE]  not  a  statement	76	None	replace
183	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[1  +  observed.length];  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[1  +  observed.length];  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)distribution).chiSquare  =  new  double[1  +  observed.length];	  ((    ChiSquaredDistribution)distribution).chiSquare    =    new    double[expected.length    +    observed.length];    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
184	[BUG]  [BUGGY]  int  observedCount  =  observed.length  /  2  +  4;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  observedCount  =  observed.length  /  2  +  4;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  observedCount  =  observed.length  /  2  +  4;	  int    observedCount    =    observed.length    /    2;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
185	[BUG]  [BUGGY]  int  observedCount  =  observed.length  /  2  +  3;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  observedCount  =  observed.length  /  2  +  3;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  observedCount  =  observed.length  /  2  +  3;	  int    observedCount    =    observed.length    /    2;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
186	[BUG]  [BUGGY]          int    expectedCount    =    observed.length    -    1;    int  expectCount  =  observed.length  -  1;  long  expectedCount  =  observed.length  -  1;  int  expectCount  =  observed.length  -  1;  [CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]          int    expectedCount    =    observed.length    -    1;    int  expectCount  =  observed.length  -  1;  long  expectedCount  =  observed.length  -  1;  int  expectCount  =  observed.length  -  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	                int        expectedCount        =        observed.length        -        1;        int    expectCount    =    observed.length    -    1;    long  expectedCount  =  observed.length  -  1;  int  expectCount  =  observed.length  -  1;	  	non-compiled	[CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])	7	None	add
187	[BUG]  [BUGGY]          int    expectedCount    =    observed.length    -    1;    int  expectCount  =  observed.length  -  1;  Integer  expectedCount  =  observed.length  -  1;  int  expectCount  =  observed.length  -  1;  [CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]          int    expectedCount    =    observed.length    -    1;    int  expectCount  =  observed.length  -  1;  Integer  expectedCount  =  observed.length  -  1;  int  expectCount  =  observed.length  -  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	                int        expectedCount        =        observed.length        -        1;        int    expectCount    =    observed.length    -    1;    Integer  expectedCount  =  observed.length  -  1;  int  expectCount  =  observed.length  -  1;	  	non-compiled	[CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])	7	None	add
188	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(mult,  x,  observed);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(mult,  x,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)distribution).chiSquare(mult,  x,  observed);	  ((    ChiSquaredDistribution)distribution).chiSquare(x,    observed);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
189	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(x,  observed,  sumSq);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(x,  observed,  sumSq);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)distribution).chiSquare(x,  observed,  sumSq);	  ((    ChiSquaredDistribution)distribution).chiSquare(x,    observed);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
190	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)expected).chiSquare  =  new  double[4];  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)expected).chiSquare  =  new  double[4];  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)expected).chiSquare  =  new  double[4];	  ((    ChiSquaredDistribution)expected).chiSquare    =    new    double[expected.length];    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
191	[BUG]  [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  sumSq);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  sumSq);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  sumSq);	  ((    ChiSquareDistributionImpl)this).chiSquare(expected,    observed,    distribution);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
192	[BUG]  [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  intervals);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  intervals);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  intervals);	  ((    ChiSquareDistributionImpl)this).chiSquare(expected,    observed,    distribution);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
193	[BUG]  [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  x);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  x);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  x);	  ((    ChiSquareDistributionImpl)this).chiSquare(expected,    observed,    distribution);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
194	[BUG]  [BUGGY]  ((  ChiSquareDistribution)expected).chiSquare(expected,  observed);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)expected).chiSquare(expected,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)expected).chiSquare(expected,  observed);	  ((    ChiSquareDistribution)distribution).chiSquare(observed,    expected);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
195	[BUG]  [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(normalized,  expected);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(normalized,  expected);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)distribution).chiSquare(normalized,  expected);	  ((    ChiSquareDistribution)distribution).chiSquare(observed,    expected);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
196	[BUG]  [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(mult,  observed,  expected);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(mult,  observed,  expected);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)distribution).chiSquare(mult,  observed,  expected);	  ((    ChiSquareDistribution)distribution).chiSquare(observed,    expected);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
197	[BUG]  [BUGGY]  double  expectedCount  =  observed.length  -  1L;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  double  expectedCount  =  observed.length  -  1L;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	double  expectedCount  =  observed.length  -  1L;	  double    expectedCount    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
198	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  -  2;  Int  expectedCount  =  observed.length  -  2;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  expectedCount  =  observed.length  -  2;  Int  expectedCount  =  observed.length  -  2;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  expectedCount  =  observed.length  -  2;  Int  expectedCount  =  observed.length  -  2;	          int    expectedCount    =    observed.length    -    1;    Int    expectedCount    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
199	[BUG]  [BUGGY]  int  observedCount  =  expected.length  -  1;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  observedCount  =  expected.length  -  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  observedCount  =  expected.length  -  1;	          int    observedCount    =    observed.length    -    1;    int    observedCount    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
200	[BUG]  [BUGGY]  long[]  observed  =  distribution.clone();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  long[]  observed  =  distribution.clone();  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long[]  observed  =  distribution.clone();	  long[]    observed    =    chiSquare.clone();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
201	[BUG]  [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(mult,  expected,  observed);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(mult,  expected,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)distribution).chiSquare(mult,  expected,  observed);	  ((    ChiSquareDistribution)distribution).chiSquare(x,    expected,    observed);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
202	[BUG]  [BUGGY]  Long[]  observed  =  chiSquare.clone();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  Long[]  observed  =  chiSquare.clone();  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	Long[]  observed  =  chiSquare.clone();	  Long[]    observed    =    observed.clone();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
203	[BUG]  [BUGGY]  Long[]  observed  =  this.chiSquare.clone();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  Long[]  observed  =  this.chiSquare.clone();  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	Long[]  observed  =  this.chiSquare.clone();	  Long[]    observed    =    observed.clone();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
204	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(x,  expected,  observed);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(x,  expected,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)distribution).chiSquare(x,  expected,  observed);	  ((    ChiSquaredDistribution)distribution).chiSquare(expected,    observed,    observed);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
205	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(mult,  expected,  observed);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(mult,  expected,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)distribution).chiSquare(mult,  expected,  observed);	  ((    ChiSquaredDistribution)distribution).chiSquare(expected,    observed,    observed);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
206	[BUG]  [BUGGY]  ((  ChiSquareDistribution)expected).chiSquare(variable,  observed);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)expected).chiSquare(variable,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)expected).chiSquare(variable,  observed);	  ((    ChiSquareDistribution)expected).chiSquare(observed,    observed);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
207	[BUG]  [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  0,  observed.length);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  0,  observed.length);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  0,  observed.length);	  ((    ChiSquareDistributionImpl)this).chiSquare(expected,    observed.length);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
208	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)expected).chiSquare(variable,  observed);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)expected).chiSquare(variable,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)expected).chiSquare(variable,  observed);	  ((    ChiSquaredDistribution)expected).chiSquare(observed,    observed);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
209	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  -  2;  Integer  expectedCount  =  observed.length  -  2;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  expectedCount  =  observed.length  -  2;  Integer  expectedCount  =  observed.length  -  2;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  expectedCount  =  observed.length  -  2;  Integer  expectedCount  =  observed.length  -  2;	          int    expectedCount    =    observed.length    -    1;    Integer    expectedCount    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
210	[BUG]  [BUGGY]  int  observedCount  =  expected.length;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  observedCount  =  expected.length;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  observedCount  =  expected.length;	          int    observedCount    =    observed.length;    long    observedCount    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
211	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  *  1;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  expectedCount  =  observed.length  *  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  expectedCount  =  observed.length  *  1;	  int    expectedCount    =    observed.length    /    1;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
212	[BUG]  [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(mult,  x,  observed);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(mult,  x,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)distribution).chiSquare(mult,  x,  observed);	  ((    ChiSquareDistribution)distribution).chiSquare(x,    observed);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
213	[BUG]  [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(x,  observed,  sumSq);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(x,  observed,  sumSq);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)distribution).chiSquare(x,  observed,  sumSq);	  ((    ChiSquareDistribution)distribution).chiSquare(x,    observed);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
214	[BUG]  [BUGGY]  long  observed[]  =  observed.toArray(new  long[2]);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  long  observed[]  =  observed.toArray(new  long[2]);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long  observed[]  =  observed.toArray(new  long[2]);	  long    observed[]    =    observed.toArray(new    long[0]);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
215	[BUG]  [BUGGY]  long[]  observed  =  this.expected.clone();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  long[]  observed  =  this.expected.clone();  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long[]  observed  =  this.expected.clone();	  long[]    observed    =    expected.clone();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
216	[BUG]  [BUGGY]  if  (!isPositive(expected,  observed)||!isNegative(expected,  observed))  {  [CE]  method  isPositive  in  class  ChiSquareTestImpl  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  if  (!isPositive(expected,  observed)||!isNegative(expected,  observed))  {  [BUGGY]      throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	if  (!isPositive(expected,  observed)||!isNegative(expected,  observed))  {	  if    (!isPositive(expected)||!isNegative(expected,    observed))    {    	non-compiled	[CE]  method  isPositive  in  class  ChiSquareTestImpl  cannot  be  applied  to  given  types;	65	None	replace
217	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)expected).chiSquare  =  new  double[expected.length  -  1];  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)expected).chiSquare  =  new  double[expected.length  -  1];  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)expected).chiSquare  =  new  double[expected.length  -  1];	  ((    ChiSquaredDistribution)distribution).chiSquare    =    new    double[expected.length    -    1];    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
218	[BUG]  [BUGGY]  long  observed[]  =  this.x.clone();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  long  observed[]  =  this.x.clone();  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long  observed[]  =  this.x.clone();	  long    observed[]    =    x.clone();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
219	[BUG]  [BUGGY]  long  observed[]  =  distribution.clone();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  long  observed[]  =  distribution.clone();  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long  observed[]  =  distribution.clone();	  long    observed[]    =    x.clone();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
220	[BUG]  [BUGGY]  long  observed[]  =  chiSquare.clone();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  long  observed[]  =  chiSquare.clone();  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long  observed[]  =  chiSquare.clone();	  long    observed[]    =    expected.clone();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
221	[BUG]  [BUGGY]  AssertionFailedError  x  =  new  AssertionFailedError( "Unexpected  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  AssertionFailedError  x  =  new  AssertionFailedError( "Unexpected  counts  must  be  non-negative  and  expected  counts  must  be  postive ");  [BUGGY]      throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	AssertionFailedError  x  =  new  AssertionFailedError( "Unexpected  counts  must  be  non-negative  and  expected  counts  must  be  postive ");	  if    (!isPositive(expected)&&!isNonNegative(observed))    {    If    (!isPositive(expected)&&!isNegative(observed))    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
222	[BUG]  [BUGGY]  ((  ChiSquareDistribution)observed).chiSquare(new  long[]  {  0,  }  );  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)observed).chiSquare(new  long[]  {  0,  }  );  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)observed).chiSquare(new  long[]  {  0,  }  );	  ((    ChiSquareDistribution)observed).chiSquare(expected,    observed);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
223	[BUG]  [BUGGY]  ((  ChiSquareDistribution)observed).chiSquare(normalized,  expected);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)observed).chiSquare(normalized,  expected);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)observed).chiSquare(normalized,  expected);	  ((    ChiSquareDistribution)observed).chiSquare(expected,    observed);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
224	[BUG]  [BUGGY]  ((  ChiSquareDistribution)observed).chiSquare(new  long[]  {  },  observed);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)observed).chiSquare(new  long[]  {  },  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)observed).chiSquare(new  long[]  {  },  observed);	  ((    ChiSquareDistribution)observed).chiSquare(expected,    observed);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
225	[BUG]  [BUGGY]          int    observedCount    =    observed.length;    int  expectedCount  =  observed.length;  long  expectedCount  =  observed.length;  int  expectedCount  =  observed.length;  [CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]          int    observedCount    =    observed.length;    int  expectedCount  =  observed.length;  long  expectedCount  =  observed.length;  int  expectedCount  =  observed.length;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	                int        observedCount        =        observed.length;        int    expectedCount    =    observed.length;    long  expectedCount  =  observed.length;  int  expectedCount  =  observed.length;	  	non-compiled	[CE]  variable  expectedCount  is  already  defined  in  method  chiSquare(double[],long[])	77	None	add
226	[BUG]  [BUGGY]  int[]  observed  =  this.chiSquare.clone();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int[]  observed  =  this.chiSquare.clone();  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int[]  observed  =  this.chiSquare.clone();	  int[]    observed    =    observed.clone();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
227	[BUG]  [BUGGY]  int[]  observed  =  this.chiSquareTestImpl.clone();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int[]  observed  =  this.chiSquareTestImpl.clone();  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int[]  observed  =  this.chiSquareTestImpl.clone();	  int[]    observed    =    observed.clone();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
228	[BUG]  [BUGGY]  if  (!isPositive(expected)&&!isNonNegative(expected,  observed))  {  [CE]  no  suitable  method  found  for  isNonNegative(double[],long[])  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  if  (!isPositive(expected)&&!isNonNegative(expected,  observed))  {  [BUGGY]      throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	if  (!isPositive(expected)&&!isNonNegative(expected,  observed))  {	  if    (!isPositive(expected)&&!isNonNegative(expected))    {    	non-compiled	[CE]  no  suitable  method  found  for  isNonNegative(double[],long[])	70	None	replace
229	[BUG]  [BUGGY]  long  observedCount  =  observed.length;  int  observedcount  =  observed.length;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  long  observedCount  =  observed.length;  int  observedcount  =  observed.length;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long  observedCount  =  observed.length;  int  observedcount  =  observed.length;	          int    observedCount    =    observed.length;    int    observedcount    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
230	[BUG]  [BUGGY]  double  observedCount  =  observed.length  -  1L;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  double  observedCount  =  observed.length  -  1L;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	double  observedCount  =  observed.length  -  1L;	  double    observedCount    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
231	[BUG]  [BUGGY]  int  observedCount  =  expected.length  -  1;  Int  observedCount  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  observedCount  =  expected.length  -  1;  Int  observedCount  =  observed.length  -  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  observedCount  =  expected.length  -  1;  Int  observedCount  =  observed.length  -  1;	          int    observedCount    =    observed.length    -    1;    Int    observedCount    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
232	[BUG]  [BUGGY]  long[]  observed  =  this.chiSquareDistributionImpl.clone();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  long[]  observed  =  this.chiSquareDistributionImpl.clone();  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long[]  observed  =  this.chiSquareDistributionImpl.clone();	  long[]    observed    =    this.chiSquareTestImpl.clone();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
233	[BUG]  [BUGGY]  long[]  observed  =  this.chiSquareTestImpl.toArray(new  long[this.chiSquareTestImpl.length]);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  long[]  observed  =  this.chiSquareTestImpl.toArray(new  long[this.chiSquareTestImpl.length]);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long[]  observed  =  this.chiSquareTestImpl.toArray(new  long[this.chiSquareTestImpl.length]);	  long[]    observed    =    this.chiSquareTestImpl.clone();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
234	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)expected).chiSquare(expected,  observed);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)expected).chiSquare(expected,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)expected).chiSquare(expected,  observed);	  ((    ChiSquaredDistribution)distribution).chiSquare(observed,    expected);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
235	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(normalized,  expected);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(normalized,  expected);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)distribution).chiSquare(normalized,  expected);	  ((    ChiSquaredDistribution)distribution).chiSquare(observed,    expected);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
236	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(mult,  observed,  expected);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(mult,  observed,  expected);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)distribution).chiSquare(mult,  observed,  expected);	  ((    ChiSquaredDistribution)distribution).chiSquare(observed,    expected);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
237	[BUG]  [BUGGY]          int    observedCount    =    observed.length    -    1;    int  observedcount  =  observed.length  -  1;  long  expectedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  [CE]  variable  observedcount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]          int    observedCount    =    observed.length    -    1;    int  observedcount  =  observed.length  -  1;  long  expectedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	                int        observedCount        =        observed.length        -        1;        int    observedcount    =    observed.length    -    1;    long  expectedCount  =  observed.length  -  1;  int  observedcount  =  observed.length  -  1;	  	non-compiled	[CE]  variable  observedcount  is  already  defined  in  method  chiSquare(double[],long[])	19	None	add
238	[BUG]  [BUGGY]  int  observedCount  =  observed.length  *  1;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  observedCount  =  observed.length  *  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  observedCount  =  observed.length  *  1;	  int    observedCount    =    observed.length    /    1;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
239	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  -  2;  long  expectedCount  =  observed.length  -  2;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  expectedCount  =  observed.length  -  2;  long  expectedCount  =  observed.length  -  2;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  expectedCount  =  observed.length  -  2;  long  expectedCount  =  observed.length  -  2;	          int    expectedCount    =    observed.length    -    1;    long    expectedCount    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
240	[BUG]  [BUGGY]          int    observedCount    =    observed.length;    int  expectedCount  =  observed.length;  double  observedCount  =  observed.length;  int  expectedCount  =  observed.length;  [CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]          int    observedCount    =    observed.length;    int  expectedCount  =  observed.length;  double  observedCount  =  observed.length;  int  expectedCount  =  observed.length;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	                int        observedCount        =        observed.length;        int    expectedCount    =    observed.length;    double  observedCount  =  observed.length;  int  expectedCount  =  observed.length;	  	non-compiled	[CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])	77	None	add
241	[BUG]  [BUGGY]          int    observedCount    =    observed.length;    int  observedcount  =  observed.length;  int  observedCount  =  observed.length;  int  observedcount  =  recorded.length;  [CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]          int    observedCount    =    observed.length;    int  observedcount  =  observed.length;  int  observedCount  =  observed.length;  int  observedcount  =  recorded.length;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	                int        observedCount        =        observed.length;        int    observedcount    =    observed.length;    int  observedCount  =  observed.length;  int  observedcount  =  recorded.length;	  	non-compiled	[CE]  variable  observedCount  is  already  defined  in  method  chiSquare(double[],long[])	47	None	add
242	[BUG]  [BUGGY]  double  observedCount  =  observed.length  -  1  +  1;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  double  observedCount  =  observed.length  -  1  +  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	double  observedCount  =  observed.length  -  1  +  1;	  int    observedCount    =    observed.length    -    1    +    1;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
243	[BUG]  [BUGGY]  long  observedCount  =  observed.length;  Int  int  observedCount  =  observed.length;  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  long  observedCount  =  observed.length;  Int  int  observedCount  =  observed.length;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long  observedCount  =  observed.length;  Int  int  observedCount  =  observed.length;	          int    observedCount    =    observed.length;    Int    int    observedCount    =    observed.length;    	non-compiled	[CE]  not  a  statement	76	None	replace
244	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(x,  observed,  observed);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(x,  observed,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)distribution).chiSquare(x,  observed,  observed);	  ((    ChiSquaredDistribution)distribution).chiSquare(x,    observed);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
245	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(multe,  observed);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(multe,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)distribution).chiSquare(multe,  observed);	  ((    ChiSquaredDistribution)distribution).chiSquare(x,    observed);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
246	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(miSq,  observed);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(miSq,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)distribution).chiSquare(miSq,  observed);	  ((    ChiSquaredDistribution)distribution).chiSquare(x,    observed);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
247	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)expected).chiSquare(discontinuous,  observed);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)expected).chiSquare(discontinuous,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)expected).chiSquare(discontinuous,  observed);	  ((    ChiSquaredDistribution)expected).chiSquare(observed,    observed);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
248	[BUG]  [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  this);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  this);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  this);	  ((    ChiSquareDistributionImpl)this).chiSquare(expected,    observed,    null);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
249	[BUG]  [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  null,  observed.length);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  null,  observed.length);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  null,  observed.length);	  ((    ChiSquareDistributionImpl)this).chiSquare(expected,    observed,    null);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
250	[BUG]  [BUGGY]  ((  ChiSquareDistribution)expected).chiSquare(discontinuous,  observed);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)expected).chiSquare(discontinuous,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)expected).chiSquare(discontinuous,  observed);	  ((    ChiSquareDistribution)expected).chiSquare(observed,    observed);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
251	[BUG]  [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(expected,  observed,  intervals);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(expected,  observed,  intervals);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)distribution).chiSquare(expected,  observed,  intervals);	  ((    ChiSquareDistribution)distribution).chiSquare(expected,    observed,    observed);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
252	[BUG]  [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(multe,  expected,  observed);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(multe,  expected,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)distribution).chiSquare(multe,  expected,  observed);	  ((    ChiSquareDistribution)distribution).chiSquare(expected,    observed,    observed);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
253	[BUG]  [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(multe,  observed,  expected);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(multe,  observed,  expected);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)distribution).chiSquare(multe,  observed,  expected);	  ((    ChiSquareDistribution)distribution).chiSquare(observed,    expected);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
254	[BUG]  [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  distribution,  x);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  distribution,  x);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  distribution,  x);	  ((    ChiSquareDistributionImpl)this).chiSquare(expected,    observed,    distribution);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
255	[BUG]  [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  distribution,  expected);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  distribution,  expected);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistributionImpl)this).chiSquare(expected,  observed,  distribution,  expected);	  ((    ChiSquareDistributionImpl)this).chiSquare(expected,    observed,    distribution);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
256	[BUG]  [BUGGY]  for(int  i  =  expected.length;  i  <  observed.length;  i++)  {  observed[i]  =  observed[i].clone();  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  for(int  i  =  expected.length;  i  <  observed.length;  i++)  {  observed[i]  =  observed[i].clone();  }  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	for(int  i  =  expected.length;  i  <  observed.length;  i++)  {  observed[i]  =  observed[i].clone();  }	  long    observed[]    =    expected.clone();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
257	[BUG]  [BUGGY]  int  observedCount  =  observed.length  -  2;  int  observed.length  =  observed.length  -  2;  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  observedCount  =  observed.length  -  2;  int  observed.length  =  observed.length  -  2;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  observedCount  =  observed.length  -  2;  int  observed.length  =  observed.length  -  2;	          int    observedCount    =    observed.length    -    1;    int    observed.length    =    observed.length    -    1;    	non-compiled	[CE]  ';'  expected	17	None	replace
258	[BUG]  [BUGGY]  float  observedCount  =  observed.length  -  1;  int  observed.length  =  observed.length  -  1;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  float  observedCount  =  observed.length  -  1;  int  observed.length  =  observed.length  -  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	float  observedCount  =  observed.length  -  1;  int  observed.length  =  observed.length  -  1;	          int    observedCount    =    observed.length    -    1;    int    observed.length    =    observed.length    -    1;    	non-compiled	[CE]  ';'  expected	17	None	replace
259	[BUG]  [BUGGY]  if(isPositive(expected)&&!isNegative(observed))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  if(isPositive(expected)&&!isNegative(observed))  {  [BUGGY]      throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	if(isPositive(expected)&&!isNegative(observed))  {	  if    (!isPositive(expected)&&!isNonNegative(observed))    {    if    (!isPositive(expected)&&!isNegative(observed))    {    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
260	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(multe,  observed,  expected);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(multe,  observed,  expected);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)distribution).chiSquare(multe,  observed,  expected);	  ((    ChiSquaredDistribution)distribution).chiSquare(observed,    expected);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
261	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(sumSq,  observed);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(sumSq,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)distribution).chiSquare(sumSq,  observed);	  ((    ChiSquaredDistribution)distribution).chiSquare(observed,    expected);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
262	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(expected,  observed,  intervals);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)distribution).chiSquare(expected,  observed,  intervals);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)distribution).chiSquare(expected,  observed,  intervals);	  ((    ChiSquaredDistribution)distribution).chiSquare(expected,    observed,    observed);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
263	[BUG]  [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(multe,  observed);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(multe,  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)distribution).chiSquare(multe,  observed);	  ((    ChiSquareDistribution)distribution).chiSquare(x,    observed);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
264	[BUG]  [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(normalized,  expected);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(normalized,  expected);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistributionImpl)this).chiSquare(normalized,  expected);	  ((    ChiSquareDistributionImpl)this).chiSquare(observed,    expected);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
265	[BUG]  [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(miSquare,  observed,  expected);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistributionImpl)this).chiSquare(miSquare,  observed,  expected);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistributionImpl)this).chiSquare(miSquare,  observed,  expected);	  ((    ChiSquareDistributionImpl)this).chiSquare(observed,    expected);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
266	[BUG]  [BUGGY]  int  observedCount  =  observed.length  -  1;  Integer  observedCount  =  observed.length;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  observedCount  =  observed.length  -  1;  Integer  observedCount  =  observed.length;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  observedCount  =  observed.length  -  1;  Integer  observedCount  =  observed.length;	          int    observedCount    =    observed.length;    Integer    observedCount    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
267	[BUG]  [BUGGY]  int  observedCount  =  observed.length  -  2;  Integer  observedCount  =  observed.length;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  observedCount  =  observed.length  -  2;  Integer  observedCount  =  observed.length;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  observedCount  =  observed.length  -  2;  Integer  observedCount  =  observed.length;	          int    observedCount    =    observed.length;    Integer    observedCount    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
268	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)observed).chiSquare(expected,  observed,  null);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)observed).chiSquare(expected,  observed,  null);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)observed).chiSquare(expected,  observed,  null);	  ((    ChiSquaredDistribution)observed).chiSquare(expected,    observed);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
269	[BUG]  [BUGGY]  ((  ChiSquaredDistribution)observed).chiSquare(expected,  observed,  x);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquaredDistribution)observed).chiSquare(expected,  observed,  x);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquaredDistribution)observed).chiSquare(expected,  observed,  x);	  ((    ChiSquaredDistribution)observed).chiSquare(expected,    observed);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
270	[BUG]  [BUGGY]  long[]  observed  =  this.chiSquareTestImpl.toArray(new  long[this.chiSquareTestImpl.size()  ]);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  long[]  observed  =  this.chiSquareTestImpl.toArray(new  long[this.chiSquareTestImpl.size()  ]);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long[]  observed  =  this.chiSquareTestImpl.toArray(new  long[this.chiSquareTestImpl.size()  ]);	  long[]    observed    =    this.chiSquareTestImpl.clone();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
271	[BUG]  [BUGGY]  long[]  observed  =  this.chiSquareTestImpl.toArray(new  long[this.chiSquareTestImpl.length()  ]);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  long[]  observed  =  this.chiSquareTestImpl.toArray(new  long[this.chiSquareTestImpl.length()  ]);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long[]  observed  =  this.chiSquareTestImpl.toArray(new  long[this.chiSquareTestImpl.length()  ]);	  long[]    observed    =    this.chiSquareTestImpl.clone();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
272	[BUG]  [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(new  long[]  {  observed,  observed  }  );  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(new  long[]  {  observed,  observed  }  );  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)distribution).chiSquare(new  long[]  {  observed,  observed  }  );	  ((    ChiSquareDistribution)distribution).chiSquare(new    long[]    {    expected,    observed    }    );    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
273	[BUG]  [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(new  long[]  {  expected,  observed  },  observed);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)distribution).chiSquare(new  long[]  {  expected,  observed  },  observed);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)distribution).chiSquare(new  long[]  {  expected,  observed  },  observed);	  ((    ChiSquareDistribution)distribution).chiSquare(new    long[]    {    expected,    observed    }    );    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
274	[BUG]  [BUGGY]  ((  ChiSquareDistribution)observed).chiSquare(expected,  observed,  null);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)observed).chiSquare(expected,  observed,  null);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)observed).chiSquare(expected,  observed,  null);	  ((    ChiSquareDistribution)observed).chiSquare(expected,    observed);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
275	[BUG]  [BUGGY]  ((  ChiSquareDistribution)observed).chiSquare(expected,  observed,  x);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  ((  ChiSquareDistribution)observed).chiSquare(expected,  observed,  x);  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	((  ChiSquareDistribution)observed).chiSquare(expected,  observed,  x);	  ((    ChiSquareDistribution)observed).chiSquare(expected,    observed);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
276	[BUG]  [BUGGY]  long  expectedCount  =  observed.length  -  1;  Integer  expectedCount  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  long  expectedCount  =  observed.length  -  1;  Integer  expectedCount  =  observed.length  -  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	long  expectedCount  =  observed.length  -  1;  Integer  expectedCount  =  observed.length  -  1;	          int    expectedCount    =    observed.length    -    1;    Integer    expectedCount    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
277	[BUG]  [BUGGY]  Long[]  observed  =  monitored.clone();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  Long[]  observed  =  monitored.clone();  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	Long[]  observed  =  monitored.clone();	  Long[]    observed    =    observed.clone();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
278	[BUG]  [BUGGY]  int  observedCount  =  observed.length  -  2;  Int  observedCount  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  observedCount  =  observed.length  -  2;  Int  observedCount  =  observed.length  -  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  observedCount  =  observed.length  -  2;  Int  observedCount  =  observed.length  -  1;	          int    observedCount    =    observed.length    -    1;    Int    observedCount    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
279	[BUG]  [BUGGY]  int  expectedCount  =  observed.length  /  2;  int  expectCount  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      public  double  chiSquare(double[]  expected,  long[]  observed)  throws  IllegalArgumentException  {  if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }      [BUGGY]  int  expectedCount  =  observed.length  /  2;  int  expectCount  =  observed.length  -  1;  [BUGGY]      if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;  for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	70	70	6	replace	int  expectedCount  =  observed.length  /  2;  int  expectCount  =  observed.length  -  1;	          int    expectedCount    =    observed.length    -    1;    int    expectCount    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
