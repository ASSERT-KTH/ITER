bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]      int  expectedLength  =  observed.length  -  1;  int  expectedLength  =  observed.length  -  1;  [CE]  variable  expectedLength  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]      int  expectedLength  =  observed.length  -  1;  int  expectedLength  =  observed.length  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	        int    expectedLength    =    observed.length    -    1;    int  expectedLength  =  observed.length  -  1;	  	non-compiled	[CE]  variable  expectedLength  is  already  defined  in  method  chiSquare(double[],long[])	16	None	add
2	[BUG]  [BUGGY]      int  expectedLength  =  observed.length  -  1;  Int  expectedLength  =  observed.length  -  1;  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]      int  expectedLength  =  observed.length  -  1;  Int  expectedLength  =  observed.length  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	        int    expectedLength    =    observed.length    -    1;    Int  expectedLength  =  observed.length  -  1;	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]      int  expectedLength  =  observed.length  -  1;  int  expectLength  =  observed.length  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	add	        int    expectedLength    =    observed.length    -    1;    int  expectLength  =  observed.length  -  1;	  	compilable	  [FE]  AssertionFailedError  	16	6	add
4	[BUG]  [BUGGY]      int  expectedLength  =  observed.length  -  1;  int  expectLength  =  observed.length  -  1;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]      int  expectedLength  =  observed.length  -  1;  int  expectLength  =  observed.length  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	        int    expectedLength    =    observed.length    -    1;    int  expectLength  =  observed.length  -  1;	  	compilable	  [FE]  AssertionFailedError  	16	6	add
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]      int  expectedLength  =  observed.length  -  1;  int  unexpectedLength  =  observed.length  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	add	        int    expectedLength    =    observed.length    -    1;    int  unexpectedLength  =  observed.length  -  1;	  	compilable	  [FE]  AssertionFailedError  	16	6	add
6	[BUG]  [BUGGY]      int  expectedLength  =  observed.length  -  1;  int  unexpectedLength  =  observed.length  -  1;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]      int  expectedLength  =  observed.length  -  1;  int  unexpectedLength  =  observed.length  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	        int    expectedLength    =    observed.length    -    1;    int  unexpectedLength  =  observed.length  -  1;	  	compilable	  [FE]  AssertionFailedError  	16	6	add
7	[BUG]  [BUGGY]      int  expectedSq  =  observed.length;  int  expectedSq  =  observed.length;  [CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]      int  expectedSq  =  observed.length;  int  expectedSq  =  observed.length;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	        int    expectedSq    =    observed.length;    int  expectedSq  =  observed.length;	  	non-compiled	[CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])	2	None	add
8	[BUG]  [BUGGY]      int  expectedSq  =  observed.length;  Int  expectedSq  =  observed.length;  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]      int  expectedSq  =  observed.length;  Int  expectedSq  =  observed.length;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	        int    expectedSq    =    observed.length;    Int  expectedSq  =  observed.length;	  	non-compiled	[CE]  cannot  find  symbol	2	None	add
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]      int  expectedSq  =  observed.length;  int  expectSq  =  observed.length;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	add	        int    expectedSq    =    observed.length;    int  expectSq  =  observed.length;	  	compilable	  [FE]  AssertionFailedError  	2	6	add
10	[BUG]  [BUGGY]      int  expectedSq  =  observed.length;  int  expectSq  =  observed.length;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]      int  expectedSq  =  observed.length;  int  expectSq  =  observed.length;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	        int    expectedSq    =    observed.length;    int  expectSq  =  observed.length;	  	compilable	  [FE]  AssertionFailedError  	2	6	add
11	[BUG]  [BUGGY]      int  expectedSq  =  observed.length;  long  expectedSq  =  observed.length;  [CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]      int  expectedSq  =  observed.length;  long  expectedSq  =  observed.length;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	        int    expectedSq    =    observed.length;    long  expectedSq  =  observed.length;	  	non-compiled	[CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])	2	None	add
12	[BUG]  [BUGGY]  int  expectedLength  =  observed.length  -  2;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  int  expectedLength  =  observed.length  -  2;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expectedLength  =  observed.length  -  2;	      int    expectedLength    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
13	[BUG]  [BUGGY]  double  expectedLength  =  observed.length;  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  double  expectedLength  =  observed.length;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	double  expectedLength  =  observed.length;	      int    expectedLength    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
14	[BUG]  [BUGGY]  long  expectedLength  =  observed.length;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  long  expectedLength  =  observed.length;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  expectedLength  =  observed.length;	      int    expectedLength    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
15	[BUG]  [BUGGY]  long[]  expected  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  long[]  expected  =  observed.length  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long[]  expected  =  observed.length  -  1;	      long[]    expected    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
16	[BUG]  [BUGGY]  long[]  expected  =  observed.length  /  2;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  long[]  expected  =  observed.length  /  2;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long[]  expected  =  observed.length  /  2;	      long[]    expected    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
17	[BUG]  [BUGGY]  int[]  expected  =  observed.length;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  int[]  expected  =  observed.length;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int[]  expected  =  observed.length;	      long[]    expected    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
18	[BUG]  [BUGGY]      int  expectedSq  =  observed.length  -  1;  int  expectedSq  =  observed.length  -  1;  [CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]      int  expectedSq  =  observed.length  -  1;  int  expectedSq  =  observed.length  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	        int    expectedSq    =    observed.length    -    1;    int  expectedSq  =  observed.length  -  1;	  	non-compiled	[CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])	6	None	add
19	[BUG]  [BUGGY]      int  expectedSq  =  observed.length  -  1;  Int  expectedSq  =  observed.length  -  1;  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]      int  expectedSq  =  observed.length  -  1;  Int  expectedSq  =  observed.length  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	        int    expectedSq    =    observed.length    -    1;    Int  expectedSq  =  observed.length  -  1;	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]      int  expectedSq  =  observed.length  -  1;  int  observedSq  =  observed.length  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	add	        int    expectedSq    =    observed.length    -    1;    int  observedSq  =  observed.length  -  1;	  	compilable	  [FE]  AssertionFailedError  	6	6	add
21	[BUG]  [BUGGY]      int  expectedSq  =  observed.length  -  1;  int  observedSq  =  observed.length  -  1;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]      int  expectedSq  =  observed.length  -  1;  int  observedSq  =  observed.length  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	        int    expectedSq    =    observed.length    -    1;    int  observedSq  =  observed.length  -  1;	  	compilable	  [FE]  AssertionFailedError  	6	6	add
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]      int  expectedSq  =  observed.length  -  1;  int  unexpectedSq  =  observed.length  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	add	        int    expectedSq    =    observed.length    -    1;    int  unexpectedSq  =  observed.length  -  1;	  	compilable	  [FE]  AssertionFailedError  	6	6	add
23	[BUG]  [BUGGY]      int  expectedSq  =  observed.length  -  1;  int  unexpectedSq  =  observed.length  -  1;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]      int  expectedSq  =  observed.length  -  1;  int  unexpectedSq  =  observed.length  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	        int    expectedSq    =    observed.length    -    1;    int  unexpectedSq  =  observed.length  -  1;	  	compilable	  [FE]  AssertionFailedError  	6	6	add
24	[BUG]  [BUGGY]  int  expectedSq  =  observed.length  /  1;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  int  expectedSq  =  observed.length  /  1;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expectedSq  =  observed.length  /  1;	      int    expectedSq    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
25	[BUG]  [BUGGY]  int  expectedSq  =  observed.length  -  2;  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  int  expectedSq  =  observed.length  -  2;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expectedSq  =  observed.length  -  2;	      int    expectedSq    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
26	[BUG]  [BUGGY]  double  expectedSq  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  double  expectedSq  =  observed.length  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	double  expectedSq  =  observed.length  -  1;	      int    expectedSq    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int    i    =    0;    i    <    expected.length;    i++)    {    for(int  i  =  0;  i  <  expected.length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
28	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  For(int  i  =  0;  i  <  expected.length;  i++)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  For(int  i  =  0;  i  <  expected.length;  i++)  {  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int    i    =    0;    i    <    expected.length;    i++)    {    For(int  i  =  0;  i  <  expected.length;  i++)  {	  	non-compiled	[CE]  '.class'  expected	8	None	add
29	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  int  i  =  0;  i  <  expected.length;  i++)  {  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  int  i  =  0;  i  <  expected.length;  i++)  {  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int    i    =    0;    i    <    expected.length;    i++)    {    int  i  =  0;  i  <  expected.length;  i++)  {	  	non-compiled	[CE]  >  expected	8	None	add
30	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  for(int  i  =  0;  i  >=  expected.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  for(int  i  =  0;  i  >=  expected.length;  i++)  {  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int    i    =    0;    i    <    expected.length;    i++)    {    for(int  i  =  0;  i  >=  expected.length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
31	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	add	for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {	  for(int    i    =    0;    i    <    expected.length;    i++)    {    	compilable	  [FE]  AssertionFailedError  	9	6	replace
32	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {	  for(int    i    =    0;    i    <    expected.length;    i++)    {    	compilable	  [FE]  AssertionFailedError  	9	6	replace
33	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	add	for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length;    i++)    {    	compilable	  [FE]  AssertionFailedError  	9	6	replace
34	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length;    i++)    {    	compilable	  [FE]  AssertionFailedError  	9	6	replace
35	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i].length;  i++)  {  [CE]  long  cannot  be  dereferenced  [FE]        AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  observed[i].length;  i++)  {  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int  i  =  0;  i  <  observed[i].length;  i++)  {	  for(int    i    =    0;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  long  cannot  be  dereferenced	9	None	replace
36	[BUG]  [BUGGY]      int  expectedLength  =  observed.length;  int  expectedLength  =  observed.length;  [CE]  variable  expectedLength  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]      int  expectedLength  =  observed.length;  int  expectedLength  =  observed.length;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	        int    expectedLength    =    observed.length;    int  expectedLength  =  observed.length;	  	non-compiled	[CE]  variable  expectedLength  is  already  defined  in  method  chiSquare(double[],long[])	12	None	add
37	[BUG]  [BUGGY]      int  expectedLength  =  observed.length;  Int  expectedLength  =  observed.length;  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]      int  expectedLength  =  observed.length;  Int  expectedLength  =  observed.length;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	        int    expectedLength    =    observed.length;    Int  expectedLength  =  observed.length;	  	non-compiled	[CE]  cannot  find  symbol	12	None	add
38	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]      int  expectedLength  =  observed.length;  int  expectLength  =  observed.length;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	add	        int    expectedLength    =    observed.length;    int  expectLength  =  observed.length;	  	compilable	  [FE]  AssertionFailedError  	12	6	add
39	[BUG]  [BUGGY]      int  expectedLength  =  observed.length;  int  expectLength  =  observed.length;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]      int  expectedLength  =  observed.length;  int  expectLength  =  observed.length;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	        int    expectedLength    =    observed.length;    int  expectLength  =  observed.length;	  	compilable	  [FE]  AssertionFailedError  	12	6	add
40	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]      int  expectedLength  =  observed.length;  int  unexpectedLength  =  observed.length;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	add	        int    expectedLength    =    observed.length;    int  unexpectedLength  =  observed.length;	  	compilable	  [FE]  AssertionFailedError  	12	6	add
41	[BUG]  [BUGGY]      int  expectedLength  =  observed.length;  int  unexpectedLength  =  observed.length;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]      int  expectedLength  =  observed.length;  int  unexpectedLength  =  observed.length;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	        int    expectedLength    =    observed.length;    int  unexpectedLength  =  observed.length;	  	compilable	  [FE]  AssertionFailedError  	12	6	add
42	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  observed.length;  i++)  {  [CE]  '.class'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  For(int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	For(int  i  =  0;  i  <  observed.length;  i++)  {	  For(int    i    =    0;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	18	None	replace
43	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  observed[i].length;  i++)  {  [CE]  '.class'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  For(int  i  =  0;  i  <  observed[i].length;  i++)  {  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	For(int  i  =  0;  i  <  observed[i].length;  i++)  {	  For(int    i    =    0;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	18	None	replace
44	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  observed[i];  i++)  {  [CE]  '.class'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  For(int  i  =  0;  i  <  observed[i];  i++)  {  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	For(int  i  =  0;  i  <  observed[i];  i++)  {	  For(int    i    =    0;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	18	None	replace
45	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  [CE]  '.class'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  For(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	For(int  i  =  0;  i  <  expected.length  -  2;  i++)  {	  For(int    i    =    0;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	18	None	replace
46	[BUG]  [BUGGY]  int  observed.length  =  observed.length  -  1;  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  int  observed.length  =  observed.length  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  observed.length  =  observed.length  -  1;	      int    observed.length    =    observed.length;    	non-compiled	[CE]  ';'  expected	5	None	replace
47	[BUG]  [BUGGY]  int  observed.length  =  expected.length;  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  int  observed.length  =  expected.length;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  observed.length  =  expected.length;	      int    observed.length    =    observed.length;    	non-compiled	[CE]  ';'  expected	5	None	replace
48	[BUG]  [BUGGY]  int  observed.length  -=  observed.length;  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  int  observed.length  -=  observed.length;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  observed.length  -=  observed.length;	      int    observed.length    =    observed.length;    	non-compiled	[CE]  ';'  expected	5	None	replace
49	[BUG]  [BUGGY]  int  observed.length  =  observed.length  -  2;  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  int  observed.length  =  observed.length  -  2;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  observed.length  =  observed.length  -  2;	      int    observed.length    =    observed.length;    	non-compiled	[CE]  ';'  expected	5	None	replace
50	[BUG]  [BUGGY]  int  expected[]  =  observed.longValue();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  int  expected[]  =  observed.longValue();  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expected[]  =  observed.longValue();	      long    expected[]    =    observed.longValue();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
51	[BUG]  [BUGGY]  long  expected[]  =  observed.length();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  long  expected[]  =  observed.length();  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  expected[]  =  observed.length();	      long    expected[]    =    observed.longValue();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
52	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	add	for(int  i  =  1;  i  <  expected.length;  i++)  {	  for(int    i    =    1;    i    <    observed.length;    i++)    {    	compilable	  [FE]  AssertionFailedError  	11	6	replace
53	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int  i  =  1;  i  <  expected.length;  i++)  {	  for(int    i    =    1;    i    <    observed.length;    i++)    {    	compilable	  [FE]  AssertionFailedError  	11	6	replace
54	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  for(int  i  =  2;  i  <  observed.length;  i++)  {  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	add	for(int  i  =  2;  i  <  observed.length;  i++)  {	  for(int    i    =    1;    i    <    observed.length;    i++)    {    	compilable	  [FE]  AssertionFailedError  	11	6	replace
55	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  observed.length;  i++)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  for(int  i  =  2;  i  <  observed.length;  i++)  {  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int  i  =  2;  i  <  observed.length;  i++)  {	  for(int    i    =    1;    i    <    observed.length;    i++)    {    	compilable	  [FE]  AssertionFailedError  	11	6	replace
56	[BUG]  [BUGGY]  int  expected[]  =  observed.length;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  int  expected[]  =  observed.length;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expected[]  =  observed.length;	      long    expected[]    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
57	[BUG]  [BUGGY]  long  expected[]  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  long  expected[]  =  observed.length  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  expected[]  =  observed.length  -  1;	      long    expected[]    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
58	[BUG]  [BUGGY]  long  expected[]  =  observed.length  -  2;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  long  expected[]  =  observed.length  -  2;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  expected[]  =  observed.length  -  2;	      long    expected[]    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
59	[BUG]  [BUGGY]  double  expectedSq  =  observed.length;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  double  expectedSq  =  observed.length;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	double  expectedSq  =  observed.length;	      int    expectedSq    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
60	[BUG]  [BUGGY]  long  expectedSq  =  observed.length;  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  long  expectedSq  =  observed.length;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  expectedSq  =  observed.length;	      int    expectedSq    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
61	[BUG]  [BUGGY]  int  expectedLength  =  observed.length  /  1;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  int  expectedLength  =  observed.length  /  1;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expectedLength  =  observed.length  /  1;	      int    expectedLength    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
62	[BUG]  [BUGGY]  double  expectedLength  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  double  expectedLength  =  observed.length  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	double  expectedLength  =  observed.length  -  1;	      int    expectedLength    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
63	[BUG]  [BUGGY]  int  observed[]  =  observed.length;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  int  observed[]  =  observed.length;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  observed[]  =  observed.length;	      long    observed[]    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
64	[BUG]  [BUGGY]  long  observed[]  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  long  observed[]  =  observed.length  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  observed[]  =  observed.length  -  1;	      long    observed[]    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
65	[BUG]  [BUGGY]  long  observed[]  =  observed.length  -  2;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  long  observed[]  =  observed.length  -  2;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  observed[]  =  observed.length  -  2;	      long    observed[]    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
66	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  observed.length;  i++)  {  for(int  i  =  1;  i  <  observed.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  for(int  i  =  1;  i  <  observed.length;  i++)  {  for(int  i  =  1;  i  <  observed.length;  i++)  {  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int    i    =    1;    i    <    observed.length;    i++)    {    for(int  i  =  1;  i  <  observed.length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
67	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  observed.length;  i++)  {  For(int  i  =  1;  i  <  observed.length;  i++)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  for(int  i  =  1;  i  <  observed.length;  i++)  {  For(int  i  =  1;  i  <  observed.length;  i++)  {  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int    i    =    1;    i    <    observed.length;    i++)    {    For(int  i  =  1;  i  <  observed.length;  i++)  {	  	non-compiled	[CE]  '.class'  expected	10	None	add
68	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  observed.length;  i++)  {  int  i  =  1;  i  <  observed.length;  i++)  {  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  for(int  i  =  1;  i  <  observed.length;  i++)  {  int  i  =  1;  i  <  observed.length;  i++)  {  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int    i    =    1;    i    <    observed.length;    i++)    {    int  i  =  1;  i  <  observed.length;  i++)  {	  	non-compiled	[CE]  >  expected	10	None	add
69	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  observed.length;  i++)  {  for(int  i  =  1;  i  >=  observed.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  for(int  i  =  1;  i  <  observed.length;  i++)  {  for(int  i  =  1;  i  >=  observed.length;  i++)  {  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int    i    =    1;    i    <    observed.length;    i++)    {    for(int  i  =  1;  i  >=  observed.length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
70	[BUG]  [BUGGY]      int  expectedLength  =  observed.length;  long  expectedLength  =  observed.length;  [CE]  variable  expectedLength  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]      int  expectedLength  =  observed.length;  long  expectedLength  =  observed.length;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	        int    expectedLength    =    observed.length;    long  expectedLength  =  observed.length;	  	non-compiled	[CE]  variable  expectedLength  is  already  defined  in  method  chiSquare(double[],long[])	12	None	add
71	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  (int  i  =  0;  i  <  expected.length;  i++)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  (int  i  =  0;  i  <  expected.length;  i++)  {  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int    i    =    0;    i    <    expected.length;    i++)    {    (int  i  =  0;  i  <  expected.length;  i++)  {	  	non-compiled	[CE]  ')'  expected	8	None	add
72	[BUG]  [BUGGY]      int  expectedSq  =  observed.length  -  1;  int  expectedSq  =  observed.length  -  2;  [CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]      int  expectedSq  =  observed.length  -  1;  int  expectedSq  =  observed.length  -  2;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	        int    expectedSq    =    observed.length    -    1;    int  expectedSq  =  observed.length  -  2;	  	non-compiled	[CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])	6	None	add
73	[BUG]  [BUGGY]      int  expectedSq  =  observed.length  -  1;  long  expectedSq  =  observed.length  -  1;  [CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]      int  expectedSq  =  observed.length  -  1;  long  expectedSq  =  observed.length  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	        int    expectedSq    =    observed.length    -    1;    long  expectedSq  =  observed.length  -  1;	  	non-compiled	[CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])	6	None	add
74	[BUG]  [BUGGY]      int  expectedLength  =  observed.length  -  1;  int  expectedLength  =  observed.length  -  2;  [CE]  variable  expectedLength  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]      int  expectedLength  =  observed.length  -  1;  int  expectedLength  =  observed.length  -  2;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	        int    expectedLength    =    observed.length    -    1;    int  expectedLength  =  observed.length  -  2;	  	non-compiled	[CE]  variable  expectedLength  is  already  defined  in  method  chiSquare(double[],long[])	16	None	add
75	[BUG]  [BUGGY]      int  expectedLength  =  observed.length  -  1;  long  expectedLength  =  observed.length  -  1;  [CE]  variable  expectedLength  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]      int  expectedLength  =  observed.length  -  1;  long  expectedLength  =  observed.length  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	        int    expectedLength    =    observed.length    -    1;    long  expectedLength  =  observed.length  -  1;	  	non-compiled	[CE]  variable  expectedLength  is  already  defined  in  method  chiSquare(double[],long[])	16	None	add
76	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [CE]  '.class'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  For(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	For(int  i  =  0;  i  <  expected.length  -  1;  i++)  {	  For(int    i    =    0;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	18	None	replace
77	[BUG]  [BUGGY]  int  expectedLength  =  observed.length  -  1  +  sumSq;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  int  expectedLength  =  observed.length  -  1  +  sumSq;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expectedLength  =  observed.length  -  1  +  sumSq;	      int    expectedLength    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
78	[BUG]  [BUGGY]  long  expected[]  =  observed.longValue()  +  sumSq;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  long  expected[]  =  observed.longValue()  +  sumSq;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  expected[]  =  observed.longValue()  +  sumSq;	      long    expected[]    =    observed.longValue();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
79	[BUG]  [BUGGY]  int  expectedLength  =  observed.length  +  1;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  int  expectedLength  =  observed.length  +  1;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expectedLength  =  observed.length  +  1;	      int    expectedLength    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
80	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected[i].length;  i++)  {  [CE]  double  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  for(int  i  =  0;  i  <  expected[i].length;  i++)  {  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int  i  =  0;  i  <  expected[i].length;  i++)  {	  for(int    i    =    0;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	9	None	replace
81	[BUG]  [BUGGY]  long  observed[]  =  expected.length;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  long  observed[]  =  expected.length;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  observed[]  =  expected.length;	      long    observed[]    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
82	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]      int  expectedSq  =  observed.length;  int  expectedSQ  =  observed.length;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	add	        int    expectedSq    =    observed.length;    int  expectedSQ  =  observed.length;	  	compilable	  [FE]  AssertionFailedError  	2	6	add
83	[BUG]  [BUGGY]      int  expectedSq  =  observed.length;  int  expectedSQ  =  observed.length;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]      int  expectedSq  =  observed.length;  int  expectedSQ  =  observed.length;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	        int    expectedSq    =    observed.length;    int  expectedSQ  =  observed.length;	  	compilable	  [FE]  AssertionFailedError  	2	6	add
84	[BUG]  [BUGGY]  long[]  expected  =  observed.length  +  1;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  long[]  expected  =  observed.length  +  1;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long[]  expected  =  observed.length  +  1;	      long[]    expected    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
85	[BUG]  [BUGGY]  long[]  expected  =  observed.length  /  sumSq;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  long[]  expected  =  observed.length  /  sumSq;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long[]  expected  =  observed.length  /  sumSq;	      long[]    expected    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
86	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  observed.length;  i++)  {  (int  i  =  1;  i  <  observed.length;  i++)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  for(int  i  =  1;  i  <  observed.length;  i++)  {  (int  i  =  1;  i  <  observed.length;  i++)  {  [BUGGY]    dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int    i    =    1;    i    <    observed.length;    i++)    {    (int  i  =  1;  i  <  observed.length;  i++)  {	  	non-compiled	[CE]  ')'  expected	10	None	add
87	[BUG]  [BUGGY]  long  expected[]  =  observed.length  +  1;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  long  expected[]  =  observed.length  +  1;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  expected[]  =  observed.length  +  1;	      long    expected[]    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
88	[BUG]  [BUGGY]      int  expectedSq  =  observed.length;  float  expectedSq  =  observed.length;  [CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]      int  expectedSq  =  observed.length;  float  expectedSq  =  observed.length;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	        int    expectedSq    =    observed.length;    float  expectedSq  =  observed.length;	  	non-compiled	[CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])	2	None	add
89	[BUG]  [BUGGY]      int  expectedSq  =  observed.length;  double  expectedSq  =  observed.length;  [CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]      int  expectedSq  =  observed.length;  double  expectedSq  =  observed.length;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	        int    expectedSq    =    observed.length;    double  expectedSq  =  observed.length;	  	non-compiled	[CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])	2	None	add
90	[BUG]  [BUGGY]      int  expectedLength  =  observed.length;  int  expectedLength  =  recorded.length;  [CE]  variable  expectedLength  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]      int  expectedLength  =  observed.length;  int  expectedLength  =  recorded.length;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	        int    expectedLength    =    observed.length;    int  expectedLength  =  recorded.length;	  	non-compiled	[CE]  variable  expectedLength  is  already  defined  in  method  chiSquare(double[],long[])	12	None	add
91	[BUG]  [BUGGY]  long[]  expected  =  observed.length  -  2;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  long[]  expected  =  observed.length  -  2;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long[]  expected  =  observed.length  -  2;	      long[]    expected    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
92	[BUG]  [BUGGY]  long[]  expected  =  observed.length,  sumSq;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  long[]  expected  =  observed.length,  sumSq;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long[]  expected  =  observed.length,  sumSq;	      long[]    expected    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
93	[BUG]  [BUGGY]  int  expectedSq  =  observed.length  /  dev;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  int  expectedSq  =  observed.length  /  dev;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expectedSq  =  observed.length  /  dev;	      int    expectedSq    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
94	[BUG]  [BUGGY]  double  expected[]  =  observed.longValue();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  double  expected[]  =  observed.longValue();  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	double  expected[]  =  observed.longValue();	      long    expected[]    =    observed.longValue();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
95	[BUG]  [BUGGY]  double  observed.length  =  observed.length;  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]  double  observed.length  =  observed.length;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	double  observed.length  =  observed.length;	      int    observed.length    =    observed.length;    	non-compiled	[CE]  ';'  expected	5	None	replace
96	[BUG]  [BUGGY]      int  expectedSq  =  observed.length  -  1;  double  expectedSq  =  observed.length  -  1;  [CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]    if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(     "observed,  expected  array  lengths  incorrect   ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(     "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive   ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;    [BUGGY]      int  expectedSq  =  observed.length  -  1;  double  expectedSq  =  observed.length  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	        int    expectedSq    =    observed.length    -    1;    double  expectedSq  =  observed.length  -  1;	  	non-compiled	[CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])	6	None	add
