bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  expectedLength  =  recorded.length;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  expectedLength  =  recorded.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expectedLength  =  recorded.length;	          int    expectedLength    =    observed.length;    int    expectedLength    =    recorded.length;    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
2	[BUG]  [BUGGY]  double  expectedLength  =  observed.length  /  1;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  double  expectedLength  =  observed.length  /  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	double  expectedLength  =  observed.length  /  1;	  double    expectedLength    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
3	[BUG]  [BUGGY]  double  expectedLength  =  observed.length  -  2;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  double  expectedLength  =  observed.length  -  2;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	double  expectedLength  =  observed.length  -  2;	  double    expectedLength    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
4	[BUG]  [BUGGY]  double  expectedLength  =  observed.length  -  3;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  double  expectedLength  =  observed.length  -  3;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	double  expectedLength  =  observed.length  -  3;	  double    expectedLength    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
5	[BUG]  [BUGGY]  double  expectedSq  =  observed.length  -  2;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  double  expectedSq  =  observed.length  -  2;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	double  expectedSq  =  observed.length  -  2;	  int    expectedSq    =    observed.length    -    2;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
6	[BUG]  [BUGGY]  int  expectedSq  =  observed.length  /  2;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  expectedSq  =  observed.length  /  2;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expectedSq  =  observed.length  /  2;	  int    expectedSq    =    observed.length    -    2;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
7	[BUG]  [BUGGY]  double  observed.length  =  expected.length;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  double  observed.length  =  expected.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	double  observed.length  =  expected.length;	  int    observed.length    =    expected.length;    	non-compiled	[CE]  ';'  expected	47	None	replace
8	[BUG]  [BUGGY]  int  observed.length  -=  expected.length;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  observed.length  -=  expected.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  observed.length  -=  expected.length;	  int    observed.length    =    expected.length;    	non-compiled	[CE]  ';'  expected	47	None	replace
9	[BUG]  [BUGGY]  int  observed.length  =  expected.length  -  1;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  observed.length  =  expected.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  observed.length  =  expected.length  -  1;	  int    observed.length    =    expected.length;    	non-compiled	[CE]  ';'  expected	47	None	replace
10	[BUG]  [BUGGY]  int  observed.length  =  observed.length  /  2;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  observed.length  =  observed.length  /  2;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  observed.length  =  observed.length  /  2;	  int    observed.length    =    observed.length    -    2;    	non-compiled	[CE]  ';'  expected	49	None	replace
11	[BUG]  [BUGGY]  int  observed.length  =  observed.length  -  3;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  observed.length  =  observed.length  -  3;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  observed.length  =  observed.length  -  3;	  int    observed.length    =    observed.length    -    2;    	non-compiled	[CE]  ';'  expected	49	None	replace
12	[BUG]  [BUGGY]          int    expectedSq    =    observed.length    -    1;    int  observedSq  =  observed.length  -  1;  int  expectedSq  =  observed.length  -  1;  int  observedSq  =  observed.length  -  1;  [CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedSq    =    observed.length    -    1;    int  observedSq  =  observed.length  -  1;  int  expectedSq  =  observed.length  -  1;  int  observedSq  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedSq        =        observed.length        -        1;        int    observedSq    =    observed.length    -    1;    int  expectedSq  =  observed.length  -  1;  int  observedSq  =  observed.length  -  1;	  	non-compiled	[CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])	20	None	add
13	[BUG]  [BUGGY]          int    expectedSq    =    observed.length    -    1;    int  observedSq  =  observed.length  -  1;  Integer  expectedSq  =  observed.length  -  1;  int  observedSq  =  observed.length  -  1;  [CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedSq    =    observed.length    -    1;    int  observedSq  =  observed.length  -  1;  Integer  expectedSq  =  observed.length  -  1;  int  observedSq  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedSq        =        observed.length        -        1;        int    observedSq    =    observed.length    -    1;    Integer  expectedSq  =  observed.length  -  1;  int  observedSq  =  observed.length  -  1;	  	non-compiled	[CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])	20	None	add
14	[BUG]  [BUGGY]          int    expectedSq    =    observed.length    -    1;    int  observedSq  =  observed.length  -  1;  int  expectSq  =  observed.length  -  1;  int  observedSq  =  observed.length  -  1;  [CE]  variable  observedSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedSq    =    observed.length    -    1;    int  observedSq  =  observed.length  -  1;  int  expectSq  =  observed.length  -  1;  int  observedSq  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedSq        =        observed.length        -        1;        int    observedSq    =    observed.length    -    1;    int  expectSq  =  observed.length  -  1;  int  observedSq  =  observed.length  -  1;	  	non-compiled	[CE]  variable  observedSq  is  already  defined  in  method  chiSquare(double[],long[])	20	None	add
15	[BUG]  [BUGGY]          int    expectedSq    =    observed.length    -    1;    int  observedSq  =  observed.length  -  1;  int  unexpectedSq  =  observed.length  -  1;  int  observedSq  =  observed.length  -  1;  [CE]  variable  observedSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedSq    =    observed.length    -    1;    int  observedSq  =  observed.length  -  1;  int  unexpectedSq  =  observed.length  -  1;  int  observedSq  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedSq        =        observed.length        -        1;        int    observedSq    =    observed.length    -    1;    int  unexpectedSq  =  observed.length  -  1;  int  observedSq  =  observed.length  -  1;	  	non-compiled	[CE]  variable  observedSq  is  already  defined  in  method  chiSquare(double[],long[])	20	None	add
16	[BUG]  [BUGGY]  long[]  expected  =  observed.length  -  sumSq;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long[]  expected  =  observed.length  -  sumSq;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long[]  expected  =  observed.length  -  sumSq;	  long[]    expected    =    observed.length    -    2;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
17	[BUG]  [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  [CE]  >  expected  [FE]        AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  i  =  0;  i  <  expected.length;  i++)  {	  for(int    i    =    0;    i    <    expected.length;    i++)    {    (int    i    =    0;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  >  expected	71	None	replace
18	[BUG]  [BUGGY]  (int  i  =  0;  i  <  observed.length;  i++)  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	(int  i  =  0;  i  <  observed.length;  i++)  {	  for(int    i    =    0;    i    <    expected.length;    i++)    {    (int    i    =    0;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  ')'  expected	71	None	replace
19	[BUG]  [BUGGY]  long  expected[]  =  observed.longValue()  *  sumSq;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long  expected[]  =  observed.longValue()  *  sumSq;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  expected[]  =  observed.longValue()  *  sumSq;	  long    expected[]    =    observed.longValue()    +    sumSq;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
20	[BUG]  [BUGGY]  long  expected[]  =  observed.longValue()  /  sumSq;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long  expected[]  =  observed.longValue()  /  sumSq;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  expected[]  =  observed.longValue()  /  sumSq;	  long    expected[]    =    observed.longValue()    +    sumSq;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
21	[BUG]  [BUGGY]  long  expected[]  =  observed.length()  +  sumSq;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long  expected[]  =  observed.length()  +  sumSq;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  expected[]  =  observed.length()  +  sumSq;	  long    expected[]    =    observed.longValue()    +    sumSq;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
22	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  int  i  =  1;  i  <  observed.length;  i++)  {  [CE]  >  expected  [FE]        AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  int  i  =  1;  i  <  observed.length;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  int  i  =  1;  i  <  observed.length;  i++)  {	  for(int    i    =    1;    i    <    observed.length;    i++)    {    (int    i    =    1;    i    <    observed.length;    i++)    {    	non-compiled	[CE]  >  expected	86	None	replace
23	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  (int  i  =  0;  i  <  observed.length;  i++)  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  (int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  (int  i  =  0;  i  <  observed.length;  i++)  {	  for(int    i    =    1;    i    <    observed.length;    i++)    {    (int    i    =    1;    i    <    observed.length;    i++)    {    	non-compiled	[CE]  ')'  expected	86	None	replace
24	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  (int  i  =  1;  i  <  observed.length;  i++)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  (int  i  =  1;  i  <  observed.length;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  (int  i  =  1;  i  <  observed.length;  i++)  {	  for(int    i    =    1;    i    <    observed.length;    i++)    {    (int    i    =    1;    i    <    observed.length;    i++)    {    	non-compiled	[CE]  ')'  expected	86	None	replace
25	[BUG]  [BUGGY]  long  expectedSq  =  observed.length  -  1;  int  observedSq  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long  expectedSq  =  observed.length  -  1;  int  observedSq  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  expectedSq  =  observed.length  -  1;  int  observedSq  =  observed.length  -  1;	          int    expectedSq    =    observed.length    -    1;    int    observedSq    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
26	[BUG]  [BUGGY]  int  observedSq  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  observedSq  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  observedSq  =  observed.length  -  1;	          int    expectedSq    =    observed.length    -    1;    int    observedSq    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
27	[BUG]  [BUGGY]  double  expectedSq  =  observed.length  -  1;  int  observedSq  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  double  expectedSq  =  observed.length  -  1;  int  observedSq  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	double  expectedSq  =  observed.length  -  1;  int  observedSq  =  observed.length  -  1;	          int    expectedSq    =    observed.length    -    1;    int    observedSq    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
28	[BUG]  [BUGGY]  long[]  expected  =  sumSq  /  observed.length;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long[]  expected  =  sumSq  /  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long[]  expected  =  sumSq  /  observed.length;	  long[]    expected    =    observed.length    /    sumSq;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
29	[BUG]  [BUGGY]  long[]  expected  =  sumSq.length  /  observed.length;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long[]  expected  =  sumSq.length  /  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long[]  expected  =  sumSq.length  /  observed.length;	  long[]    expected    =    observed.length    /    sumSq;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
30	[BUG]  [BUGGY]  int[]  expected  =  observed.length  /  sumSq;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int[]  expected  =  observed.length  /  sumSq;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int[]  expected  =  observed.length  /  sumSq;	  long[]    expected    =    observed.length    /    sumSq;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
31	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length  -  2;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	add	for(int  i  =  0;  i  <  observed.length  -  2;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    2;    i++)    {    	compilable	  [FE]  AssertionFailedError  	32	6	replace
32	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length  -  2;  i++)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length  -  2;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int  i  =  0;  i  <  observed.length  -  2;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    2;    i++)    {    	compilable	  [FE]  AssertionFailedError  	32	6	replace
33	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length  -  1;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	add	for(int  i  =  0;  i  <  observed.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    2;    i++)    {    	compilable	  [FE]  AssertionFailedError  	32	6	replace
34	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length  -  1;  i++)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length  -  1;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int  i  =  0;  i  <  observed.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    2;    i++)    {    	compilable	  [FE]  AssertionFailedError  	32	6	replace
35	[BUG]  [BUGGY]  long[]  expected  =  observed.length  -  1L;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long[]  expected  =  observed.length  -  1L;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long[]  expected  =  observed.length  -  1L;	  long[]    expected    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
36	[BUG]  [BUGGY]  long[]  expected  =  observed.length  /  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long[]  expected  =  observed.length  /  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long[]  expected  =  observed.length  /  1;	  long[]    expected    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
37	[BUG]  [BUGGY]  double  expectedLength  =  observed.length  +  1;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  double  expectedLength  =  observed.length  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	double  expectedLength  =  observed.length  +  1;	  double    expectedLength    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
38	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int    i    =    0;    i    <    expected.length    -    2;    i++)    {    for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
39	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  For(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  For(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int    i    =    0;    i    <    expected.length    -    2;    i++)    {    For(int  i  =  0;  i  <  expected.length  -  2;  i++)  {	  	non-compiled	[CE]  '.class'  expected	31	None	add
40	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  int  i  =  0;  i  <  expected.length  -  2;  i++)  {  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  int  i  =  0;  i  <  expected.length  -  2;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int    i    =    0;    i    <    expected.length    -    2;    i++)    {    int  i  =  0;  i  <  expected.length  -  2;  i++)  {	  	non-compiled	[CE]  >  expected	31	None	add
41	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  for(int  i  =  0;  i  <  expected[length  -  2;  i++)  {  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  for(int  i  =  0;  i  <  expected[length  -  2;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int    i    =    0;    i    <    expected.length    -    2;    i++)    {    for(int  i  =  0;  i  <  expected[length  -  2;  i++)  {	  	non-compiled	[CE]  ']'  expected	31	None	add
42	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  observed.length  -  1;  i++)  {  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  For(int  i  =  0;  i  <  observed.length  -  1;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	For(int  i  =  0;  i  <  observed.length  -  1;  i++)  {	  For(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    	non-compiled	[CE]  '.class'  expected	76	None	replace
43	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  observed[i].length  -  1;  i++)  {  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  For(int  i  =  0;  i  <  observed[i].length  -  1;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	For(int  i  =  0;  i  <  observed[i].length  -  1;  i++)  {	  For(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    	non-compiled	[CE]  '.class'  expected	76	None	replace
44	[BUG]  [BUGGY]  long[]  expected  =  observed.length,  sumSq  +  1;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long[]  expected  =  observed.length,  sumSq  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long[]  expected  =  observed.length,  sumSq  +  1;	  long[]    expected    =    observed.length,    sumSq;    	non-compiled	[CE]  ';'  expected	92	None	replace
45	[BUG]  [BUGGY]  long[]  expected  =  sumSq,  observed.length;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long[]  expected  =  sumSq,  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long[]  expected  =  sumSq,  observed.length;	  long[]    expected    =    observed.length,    sumSq;    	non-compiled	[CE]  ';'  expected	92	None	replace
46	[BUG]  [BUGGY]  long[]  expected  =  observed.length,  sumSq  -  observed.length;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long[]  expected  =  observed.length,  sumSq  -  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long[]  expected  =  observed.length,  sumSq  -  observed.length;	  long[]    expected    =    observed.length,    sumSq;    	non-compiled	[CE]  ';'  expected	92	None	replace
47	[BUG]  [BUGGY]  int  observed[]  =  expected.length;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  observed[]  =  expected.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  observed[]  =  expected.length;	  long    observed[]    =    expected.length;    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
48	[BUG]  [BUGGY]  short  observed[]  =  expected.length;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  short  observed[]  =  expected.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	short  observed[]  =  expected.length;	  long    observed[]    =    expected.length;    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
49	[BUG]  [BUGGY]          int    expectedSq    =    observed.length;    int  expectSq  =  observed.length;  int  expectedSq  =  observed.length;  int  expectSq  =  observed.length;  [CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedSq    =    observed.length;    int  expectSq  =  observed.length;  int  expectedSq  =  observed.length;  int  expectSq  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedSq        =        observed.length;        int    expectSq    =    observed.length;    int  expectedSq  =  observed.length;  int  expectSq  =  observed.length;	  	non-compiled	[CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])	9	None	add
50	[BUG]  [BUGGY]          int    expectedSq    =    observed.length;    int  expectSq  =  observed.length;  Integer  expectedSq  =  observed.length;  int  expectSq  =  observed.length;  [CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedSq    =    observed.length;    int  expectSq  =  observed.length;  Integer  expectedSq  =  observed.length;  int  expectSq  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedSq        =        observed.length;        int    expectSq    =    observed.length;    Integer  expectedSq  =  observed.length;  int  expectSq  =  observed.length;	  	non-compiled	[CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])	9	None	add
51	[BUG]  [BUGGY]          int    expectedSq    =    observed.length;    int  expectSq  =  observed.length;  int  expectSq  =  observed.length;  int  expectSq  =  observed.length;  [CE]  variable  expectSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedSq    =    observed.length;    int  expectSq  =  observed.length;  int  expectSq  =  observed.length;  int  expectSq  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedSq        =        observed.length;        int    expectSq    =    observed.length;    int  expectSq  =  observed.length;  int  expectSq  =  observed.length;	  	non-compiled	[CE]  variable  expectSq  is  already  defined  in  method  chiSquare(double[],long[])	9	None	add
52	[BUG]  [BUGGY]          int    expectedSq    =    observed.length;    int  expectSq  =  observed.length;  long  expectedSq  =  observed.length;  int  expectSq  =  observed.length;  [CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedSq    =    observed.length;    int  expectSq  =  observed.length;  long  expectedSq  =  observed.length;  int  expectSq  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedSq        =        observed.length;        int    expectSq    =    observed.length;    long  expectedSq  =  observed.length;  int  expectSq  =  observed.length;	  	non-compiled	[CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])	9	None	add
53	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  for(int  i  =  2;  i  <  expected.length;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	add	for(int  i  =  2;  i  <  expected.length;  i++)  {	  for(int    i    =    2;    i    <    observed.length;    i++)    {    	compilable	  [FE]  AssertionFailedError  	55	6	replace
54	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  expected.length;  i++)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  for(int  i  =  2;  i  <  expected.length;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int  i  =  2;  i  <  expected.length;  i++)  {	  for(int    i    =    2;    i    <    observed.length;    i++)    {    	compilable	  [FE]  AssertionFailedError  	55	6	replace
55	[BUG]  [BUGGY]  long  expectedSq  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long  expectedSq  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  expectedSq  =  observed.length  -  1;	  long    expectedSq    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
56	[BUG]  [BUGGY]  long  expectedSq  =  observed.length  -  2;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long  expectedSq  =  observed.length  -  2;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  expectedSq  =  observed.length  -  2;	  long    expectedSq    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
57	[BUG]  [BUGGY]          int    expectedLength    =    observed.length;    int  expectLength  =  observed.length;  int  expectedLength  =  observed.length;  int  expectLength  =  observed.length;  [CE]  variable  expectedLength  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedLength    =    observed.length;    int  expectLength  =  observed.length;  int  expectedLength  =  observed.length;  int  expectLength  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedLength        =        observed.length;        int    expectLength    =    observed.length;    int  expectedLength  =  observed.length;  int  expectLength  =  observed.length;	  	non-compiled	[CE]  variable  expectedLength  is  already  defined  in  method  chiSquare(double[],long[])	38	None	add
58	[BUG]  [BUGGY]          int    expectedLength    =    observed.length;    int  expectLength  =  observed.length;  int  expectLength  =  observed.length;  int  expectLength  =  observed.length;  [CE]  variable  expectLength  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedLength    =    observed.length;    int  expectLength  =  observed.length;  int  expectLength  =  observed.length;  int  expectLength  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedLength        =        observed.length;        int    expectLength    =    observed.length;    int  expectLength  =  observed.length;  int  expectLength  =  observed.length;	  	non-compiled	[CE]  variable  expectLength  is  already  defined  in  method  chiSquare(double[],long[])	38	None	add
59	[BUG]  [BUGGY]          int    expectedLength    =    observed.length;    int  expectLength  =  observed.length;  Integer  expectedLength  =  observed.length;  int  expectLength  =  observed.length;  [CE]  variable  expectedLength  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedLength    =    observed.length;    int  expectLength  =  observed.length;  Integer  expectedLength  =  observed.length;  int  expectLength  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedLength        =        observed.length;        int    expectLength    =    observed.length;    Integer  expectedLength  =  observed.length;  int  expectLength  =  observed.length;	  	non-compiled	[CE]  variable  expectedLength  is  already  defined  in  method  chiSquare(double[],long[])	38	None	add
60	[BUG]  [BUGGY]          int    expectedLength    =    observed.length;    int  expectLength  =  observed.length;  int  expectedLength  =  observed.length;  int  expectLength  =  recorded.length;  [CE]  variable  expectedLength  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedLength    =    observed.length;    int  expectLength  =  observed.length;  int  expectedLength  =  observed.length;  int  expectLength  =  recorded.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedLength        =        observed.length;        int    expectLength    =    observed.length;    int  expectedLength  =  observed.length;  int  expectLength  =  recorded.length;	  	non-compiled	[CE]  variable  expectedLength  is  already  defined  in  method  chiSquare(double[],long[])	38	None	add
61	[BUG]  [BUGGY]  long  expectedLength  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long  expectedLength  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  expectedLength  =  observed.length  -  1;	  long    expectedLength    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
62	[BUG]  [BUGGY]  long  expectedLength  =  observed.length  -  2;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long  expectedLength  =  observed.length  -  2;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  expectedLength  =  observed.length  -  2;	  long    expectedLength    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
63	[BUG]  [BUGGY]  int[]  expected  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int[]  expected  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int[]  expected  =  observed.length  -  1;	  int[]    expected    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
64	[BUG]  [BUGGY]  int[]  expected  =  observed.length,  sumSq;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int[]  expected  =  observed.length,  sumSq;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int[]  expected  =  observed.length,  sumSq;	  int[]    expected    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
65	[BUG]  [BUGGY]  double  observed[]  =  observed.length;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  double  observed[]  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	double  observed[]  =  observed.length;	  int    observed[]    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
66	[BUG]  [BUGGY]  int  observed[]  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  observed[]  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  observed[]  =  observed.length  -  1;	  int    observed[]    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
67	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
68	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  For(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  For(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    For(int  i  =  0;  i  <  expected.length  -  1;  i++)  {	  	non-compiled	[CE]  '.class'  expected	33	None	add
69	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    int  i  =  0;  i  <  expected.length  -  1;  i++)  {	  	non-compiled	[CE]  >  expected	33	None	add
70	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  for(int  i  =  0;  i  <  expected[length  -  1;  i++)  {  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  for(int  i  =  0;  i  <  expected[length  -  1;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    for(int  i  =  0;  i  <  expected[length  -  1;  i++)  {	  	non-compiled	[CE]  ']'  expected	33	None	add
71	[BUG]  [BUGGY]  long  expectedSq  =  observed.length  -  1;  int  expectedSq  =  observed.length  -  2;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long  expectedSq  =  observed.length  -  1;  int  expectedSq  =  observed.length  -  2;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  expectedSq  =  observed.length  -  1;  int  expectedSq  =  observed.length  -  2;	          int    expectedSq    =    observed.length    -    1;    int    expectedSq    =    observed.length    -    2;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
72	[BUG]  [BUGGY]  double  expectedSq  =  observed.length  -  1;  int  expectedSq  =  observed.length  -  2;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  double  expectedSq  =  observed.length  -  1;  int  expectedSq  =  observed.length  -  2;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	double  expectedSq  =  observed.length  -  1;  int  expectedSq  =  observed.length  -  2;	          int    expectedSq    =    observed.length    -    1;    int    expectedSq    =    observed.length    -    2;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
73	[BUG]  [BUGGY]  long  expectedSq  =  observed.length;  int  expectSq  =  observed.length;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long  expectedSq  =  observed.length;  int  expectSq  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  expectedSq  =  observed.length;  int  expectSq  =  observed.length;	          int    expectedSq    =    observed.length;    int    expectSq    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
74	[BUG]  [BUGGY]  double  expectedSq  =  observed.length;  int  expectSq  =  observed.length;  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  double  expectedSq  =  observed.length;  int  expectSq  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	double  expectedSq  =  observed.length;  int  expectSq  =  observed.length;	          int    expectedSq    =    observed.length;    int    expectSq    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
75	[BUG]  [BUGGY]  int  expectedSq  =  observed.length  -  1;  int  expectSq  =  observed.length;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  expectedSq  =  observed.length  -  1;  int  expectSq  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expectedSq  =  observed.length  -  1;  int  expectSq  =  observed.length;	          int    expectedSq    =    observed.length;    int    expectSq    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
76	[BUG]  [BUGGY]  long  expectedLength  =  observed.length  -  1;  int  expectedLength  =  observed.length  -  2;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long  expectedLength  =  observed.length  -  1;  int  expectedLength  =  observed.length  -  2;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  expectedLength  =  observed.length  -  1;  int  expectedLength  =  observed.length  -  2;	          int    expectedLength    =    observed.length    -    1;    int    expectedLength    =    observed.length    -    2;    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
77	[BUG]  [BUGGY]  int  expectedLength  =  observed.length  /  2;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  expectedLength  =  observed.length  /  2;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expectedLength  =  observed.length  /  2;	          int    expectedLength    =    observed.length    -    1;    int    expectedLength    =    observed.length    -    2;    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
78	[BUG]  [BUGGY]  Integer  expectedLength  =  observed.length;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  Integer  expectedLength  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	Integer  expectedLength  =  observed.length;	          int    expectedLength    =    observed.length;    Int    expectedLength    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
79	[BUG]  [BUGGY]  Int  expectedLength  =  observed.length;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  Int  expectedLength  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	Int  expectedLength  =  observed.length;	          int    expectedLength    =    observed.length;    Int    expectedLength    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
80	[BUG]  [BUGGY]  long  expectedSq  =  observed.length  -  1;  int  unexpectedSq  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long  expectedSq  =  observed.length  -  1;  int  unexpectedSq  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  expectedSq  =  observed.length  -  1;  int  unexpectedSq  =  observed.length  -  1;	          int    expectedSq    =    observed.length    -    1;    int    unexpectedSq    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
81	[BUG]  [BUGGY]  double  expectedSq  =  observed.length  -  1;  int  unexpectedSq  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  double  expectedSq  =  observed.length  -  1;  int  unexpectedSq  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	double  expectedSq  =  observed.length  -  1;  int  unexpectedSq  =  observed.length  -  1;	          int    expectedSq    =    observed.length    -    1;    int    unexpectedSq    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
82	[BUG]  [BUGGY]  int  expectedSq  =  observed.length  /  1;  int  unexpectedSq  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  expectedSq  =  observed.length  /  1;  int  unexpectedSq  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expectedSq  =  observed.length  /  1;  int  unexpectedSq  =  observed.length  -  1;	          int    expectedSq    =    observed.length    -    1;    int    unexpectedSq    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
83	[BUG]  [BUGGY]  Int  expectedLength  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  Int  expectedLength  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	Int  expectedLength  =  observed.length  -  1;	          int    expectedLength    =    observed.length    -    1;    Int    expectedLength    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
84	[BUG]  [BUGGY]          int    expectedLength    =    observed.length    -    1;    int  expectLength  =  observed.length  -  1;  int  expectedLength  =  observed.length  -  1;  int  expectLength  =  observed.length  -  1;  [CE]  variable  expectedLength  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedLength    =    observed.length    -    1;    int  expectLength  =  observed.length  -  1;  int  expectedLength  =  observed.length  -  1;  int  expectLength  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedLength        =        observed.length        -        1;        int    expectLength    =    observed.length    -    1;    int  expectedLength  =  observed.length  -  1;  int  expectLength  =  observed.length  -  1;	  	non-compiled	[CE]  variable  expectedLength  is  already  defined  in  method  chiSquare(double[],long[])	3	None	add
85	[BUG]  [BUGGY]          int    expectedLength    =    observed.length    -    1;    int  expectLength  =  observed.length  -  1;  int  expectLength  =  observed.length  -  1;  int  expectLength  =  observed.length  -  1;  [CE]  variable  expectLength  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedLength    =    observed.length    -    1;    int  expectLength  =  observed.length  -  1;  int  expectLength  =  observed.length  -  1;  int  expectLength  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedLength        =        observed.length        -        1;        int    expectLength    =    observed.length    -    1;    int  expectLength  =  observed.length  -  1;  int  expectLength  =  observed.length  -  1;	  	non-compiled	[CE]  variable  expectLength  is  already  defined  in  method  chiSquare(double[],long[])	3	None	add
86	[BUG]  [BUGGY]          int    expectedLength    =    observed.length    -    1;    int  expectLength  =  observed.length  -  1;  Integer  expectedLength  =  observed.length  -  1;  int  expectLength  =  observed.length  -  1;  [CE]  variable  expectedLength  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedLength    =    observed.length    -    1;    int  expectLength  =  observed.length  -  1;  Integer  expectedLength  =  observed.length  -  1;  int  expectLength  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedLength        =        observed.length        -        1;        int    expectLength    =    observed.length    -    1;    Integer  expectedLength  =  observed.length  -  1;  int  expectLength  =  observed.length  -  1;	  	non-compiled	[CE]  variable  expectedLength  is  already  defined  in  method  chiSquare(double[],long[])	3	None	add
87	[BUG]  [BUGGY]          int    expectedLength    =    observed.length    -    1;    int  expectLength  =  observed.length  -  1;  long  expectedLength  =  observed.length  -  1;  int  expectLength  =  observed.length  -  1;  [CE]  variable  expectedLength  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedLength    =    observed.length    -    1;    int  expectLength  =  observed.length  -  1;  long  expectedLength  =  observed.length  -  1;  int  expectLength  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedLength        =        observed.length        -        1;        int    expectLength    =    observed.length    -    1;    long  expectedLength  =  observed.length  -  1;  int  expectLength  =  observed.length  -  1;	  	non-compiled	[CE]  variable  expectedLength  is  already  defined  in  method  chiSquare(double[],long[])	3	None	add
88	[BUG]  [BUGGY]  long  expectedLength  =  observed.length  -  1;  int  unexpectedLength  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long  expectedLength  =  observed.length  -  1;  int  unexpectedLength  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  expectedLength  =  observed.length  -  1;  int  unexpectedLength  =  observed.length  -  1;	          int    expectedLength    =    observed.length    -    1;    int    unexpectedLength    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
89	[BUG]  [BUGGY]  int  expectedLength  =  observed.length  /  1;  int  unexpectedLength  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  expectedLength  =  observed.length  /  1;  int  unexpectedLength  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expectedLength  =  observed.length  /  1;  int  unexpectedLength  =  observed.length  -  1;	          int    expectedLength    =    observed.length    -    1;    int    unexpectedLength    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
90	[BUG]  [BUGGY]  int  expectedLength  =  observed.length  -  2;  int  unexpectedLength  =  observed.length  -  2;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  expectedLength  =  observed.length  -  2;  int  unexpectedLength  =  observed.length  -  2;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expectedLength  =  observed.length  -  2;  int  unexpectedLength  =  observed.length  -  2;	          int    expectedLength    =    observed.length    -    1;    int    unexpectedLength    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
91	[BUG]  [BUGGY]  int  expected[]  =  observed.length();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  expected[]  =  observed.length();  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expected[]  =  observed.length();	  long    expected[]    =    observed.length();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
92	[BUG]  [BUGGY]  long  expected[]  =  observed.length()  -  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long  expected[]  =  observed.length()  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  expected[]  =  observed.length()  -  1;	  long    expected[]    =    observed.length();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
93	[BUG]  [BUGGY]  long  expected[]  =  observed.length()  /  2;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long  expected[]  =  observed.length()  /  2;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  expected[]  =  observed.length()  /  2;	  long    expected[]    =    observed.length();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
94	[BUG]  [BUGGY]  double  expectedSq  =  observed.length  /  dev;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  double  expectedSq  =  observed.length  /  dev;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	double  expectedSq  =  observed.length  /  dev;	  int    expectedSq    =    observed.length    /    dev;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
95	[BUG]  [BUGGY]  int  expectedSq  =  observed.length  /  sumSq;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  expectedSq  =  observed.length  /  sumSq;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expectedSq  =  observed.length  /  sumSq;	  int    expectedSq    =    observed.length    /    dev;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
96	[BUG]  [BUGGY]  int  expectedSq  =  observed.length  *  dev;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  expectedSq  =  observed.length  *  dev;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expectedSq  =  observed.length  *  dev;	  int    expectedSq    =    observed.length    /    dev;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
97	[BUG]  [BUGGY]  int  expectedSq  =  sumSq  /  dev;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  expectedSq  =  sumSq  /  dev;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expectedSq  =  sumSq  /  dev;	  int    expectedSq    =    observed.length    /    dev;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
98	[BUG]  [BUGGY]  For(int  i  =  1;  i  <  observed.length;  i++)  {  [CE]  '.class'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  For(int  i  =  1;  i  <  observed.length;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	For(int  i  =  1;  i  <  observed.length;  i++)  {	  for(int    i    =    1;    i    <    observed.length;    i++)    {    For(int    i    =    1;    i    <    observed.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	67	None	replace
99	[BUG]  [BUGGY]  For(int  i  =  1;  i  <  expected.length;  i++)  {  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  For(int  i  =  1;  i  <  expected.length;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	For(int  i  =  1;  i  <  expected.length;  i++)  {	  for(int    i    =    1;    i    <    observed.length;    i++)    {    For(int    i    =    1;    i    <    observed.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	67	None	replace
100	[BUG]  [BUGGY]  Integer  expectedSq  =  observed.length;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  Integer  expectedSq  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	Integer  expectedSq  =  observed.length;	          int    expectedSq    =    observed.length;    Int    expectedSq    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
101	[BUG]  [BUGGY]  long  expectedSq  =  observed.length;  Int  expectedSq  =  observed.length;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long  expectedSq  =  observed.length;  Int  expectedSq  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  expectedSq  =  observed.length;  Int  expectedSq  =  observed.length;	          int    expectedSq    =    observed.length;    Int    expectedSq    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
102	[BUG]  [BUGGY]  int  expectedLength  =  observed.length  *  1;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  expectedLength  =  observed.length  *  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expectedLength  =  observed.length  *  1;	  int    expectedLength    =    observed.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
103	[BUG]  [BUGGY]  int  expected[]  =  observed.length  -  2;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  expected[]  =  observed.length  -  2;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expected[]  =  observed.length  -  2;	  long    expected[]    =    observed.length    -    2;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
104	[BUG]  [BUGGY]  long  expected[]  =  observed.length  /  2;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long  expected[]  =  observed.length  /  2;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  expected[]  =  observed.length  /  2;	  long    expected[]    =    observed.length    -    2;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
105	[BUG]  [BUGGY]  long  expectedLength  =  observed.length  -  1;  int  expectLength  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long  expectedLength  =  observed.length  -  1;  int  expectLength  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  expectedLength  =  observed.length  -  1;  int  expectLength  =  observed.length  -  1;	          int    expectedLength    =    observed.length    -    1;    int    expectLength    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
106	[BUG]  [BUGGY]  int  expectedLength  =  observed.length  -  2;  int  expectLength  =  observed.length  -  2;  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  expectedLength  =  observed.length  -  2;  int  expectLength  =  observed.length  -  2;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expectedLength  =  observed.length  -  2;  int  expectLength  =  observed.length  -  2;	          int    expectedLength    =    observed.length    -    1;    int    expectLength    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
107	[BUG]  [BUGGY]  long  expectedLength  =  observed.length  /  1;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long  expectedLength  =  observed.length  /  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  expectedLength  =  observed.length  /  1;	  int    expectedLength    =    observed.length    /    1;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
108	[BUG]  [BUGGY]          int    expectedSq    =    observed.length    -    1;    int  unexpectedSq  =  observed.length  -  1;  int  expectedSq  =  observed.length  -  1;  int  unexpectedSq  =  observed.length  -  1;  [CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedSq    =    observed.length    -    1;    int  unexpectedSq  =  observed.length  -  1;  int  expectedSq  =  observed.length  -  1;  int  unexpectedSq  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedSq        =        observed.length        -        1;        int    unexpectedSq    =    observed.length    -    1;    int  expectedSq  =  observed.length  -  1;  int  unexpectedSq  =  observed.length  -  1;	  	non-compiled	[CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])	22	None	add
109	[BUG]  [BUGGY]          int    expectedSq    =    observed.length    -    1;    int  unexpectedSq  =  observed.length  -  1;  int  unexpectedSq  =  observed.length  -  1;  int  unexpectedSq  =  observed.length  -  1;  [CE]  variable  unexpectedSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedSq    =    observed.length    -    1;    int  unexpectedSq  =  observed.length  -  1;  int  unexpectedSq  =  observed.length  -  1;  int  unexpectedSq  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedSq        =        observed.length        -        1;        int    unexpectedSq    =    observed.length    -    1;    int  unexpectedSq  =  observed.length  -  1;  int  unexpectedSq  =  observed.length  -  1;	  	non-compiled	[CE]  variable  unexpectedSq  is  already  defined  in  method  chiSquare(double[],long[])	22	None	add
110	[BUG]  [BUGGY]          int    expectedSq    =    observed.length    -    1;    int  unexpectedSq  =  observed.length  -  1;  Integer  expectedSq  =  observed.length  -  1;  int  unexpectedSq  =  observed.length  -  1;  [CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedSq    =    observed.length    -    1;    int  unexpectedSq  =  observed.length  -  1;  Integer  expectedSq  =  observed.length  -  1;  int  unexpectedSq  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedSq        =        observed.length        -        1;        int    unexpectedSq    =    observed.length    -    1;    Integer  expectedSq  =  observed.length  -  1;  int  unexpectedSq  =  observed.length  -  1;	  	non-compiled	[CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])	22	None	add
111	[BUG]  [BUGGY]          int    expectedSq    =    observed.length    -    1;    int  unexpectedSq  =  observed.length  -  1;  int  expectSq  =  observed.length  -  1;  int  unexpectedSq  =  observed.length  -  1;  [CE]  variable  unexpectedSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedSq    =    observed.length    -    1;    int  unexpectedSq  =  observed.length  -  1;  int  expectSq  =  observed.length  -  1;  int  unexpectedSq  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedSq        =        observed.length        -        1;        int    unexpectedSq    =    observed.length    -    1;    int  expectSq  =  observed.length  -  1;  int  unexpectedSq  =  observed.length  -  1;	  	non-compiled	[CE]  variable  unexpectedSq  is  already  defined  in  method  chiSquare(double[],long[])	22	None	add
112	[BUG]  [BUGGY]  int  expectedSq  =  observed.length  -  2;  long  expectedSq  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  expectedSq  =  observed.length  -  2;  long  expectedSq  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expectedSq  =  observed.length  -  2;  long  expectedSq  =  observed.length  -  1;	          int    expectedSq    =    observed.length    -    1;    long    expectedSq    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
113	[BUG]  [BUGGY]  double  observed.length  =  observed.length  -  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  double  observed.length  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	double  observed.length  =  observed.length  -  1;	  double    observed.length    =    observed.length;    	non-compiled	[CE]  ';'  expected	95	None	replace
114	[BUG]  [BUGGY]  double  observed.length  -=  observed.length;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  double  observed.length  -=  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	double  observed.length  -=  observed.length;	  double    observed.length    =    observed.length;    	non-compiled	[CE]  ';'  expected	95	None	replace
115	[BUG]  [BUGGY]          int    expectedLength    =    observed.length    -    1;    int  unexpectedLength  =  observed.length  -  1;  int  expectedLength  =  observed.length  -  1;  int  unexpectedLength  =  observed.length  -  1;  [CE]  variable  expectedLength  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedLength    =    observed.length    -    1;    int  unexpectedLength  =  observed.length  -  1;  int  expectedLength  =  observed.length  -  1;  int  unexpectedLength  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedLength        =        observed.length        -        1;        int    unexpectedLength    =    observed.length    -    1;    int  expectedLength  =  observed.length  -  1;  int  unexpectedLength  =  observed.length  -  1;	  	non-compiled	[CE]  variable  expectedLength  is  already  defined  in  method  chiSquare(double[],long[])	5	None	add
116	[BUG]  [BUGGY]          int    expectedLength    =    observed.length    -    1;    int  unexpectedLength  =  observed.length  -  1;  int  unexpectedLength  =  observed.length  -  1;  int  unexpectedLength  =  observed.length  -  1;  [CE]  variable  unexpectedLength  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedLength    =    observed.length    -    1;    int  unexpectedLength  =  observed.length  -  1;  int  unexpectedLength  =  observed.length  -  1;  int  unexpectedLength  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedLength        =        observed.length        -        1;        int    unexpectedLength    =    observed.length    -    1;    int  unexpectedLength  =  observed.length  -  1;  int  unexpectedLength  =  observed.length  -  1;	  	non-compiled	[CE]  variable  unexpectedLength  is  already  defined  in  method  chiSquare(double[],long[])	5	None	add
117	[BUG]  [BUGGY]          int    expectedLength    =    observed.length    -    1;    int  unexpectedLength  =  observed.length  -  1;  int  expectLength  =  observed.length  -  1;  int  unexpectedLength  =  observed.length  -  1;  [CE]  variable  unexpectedLength  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedLength    =    observed.length    -    1;    int  unexpectedLength  =  observed.length  -  1;  int  expectLength  =  observed.length  -  1;  int  unexpectedLength  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedLength        =        observed.length        -        1;        int    unexpectedLength    =    observed.length    -    1;    int  expectLength  =  observed.length  -  1;  int  unexpectedLength  =  observed.length  -  1;	  	non-compiled	[CE]  variable  unexpectedLength  is  already  defined  in  method  chiSquare(double[],long[])	5	None	add
118	[BUG]  [BUGGY]          int    expectedLength    =    observed.length    -    1;    int  unexpectedLength  =  observed.length  -  1;  long  expectedLength  =  observed.length  -  1;  int  unexpectedLength  =  observed.length  -  1;  [CE]  variable  expectedLength  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedLength    =    observed.length    -    1;    int  unexpectedLength  =  observed.length  -  1;  long  expectedLength  =  observed.length  -  1;  int  unexpectedLength  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedLength        =        observed.length        -        1;        int    unexpectedLength    =    observed.length    -    1;    long  expectedLength  =  observed.length  -  1;  int  unexpectedLength  =  observed.length  -  1;	  	non-compiled	[CE]  variable  expectedLength  is  already  defined  in  method  chiSquare(double[],long[])	5	None	add
119	[BUG]  [BUGGY]  float  expectedSq  =  observed.length;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  float  expectedSq  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	float  expectedSq  =  observed.length;	          int    expectedSq    =    observed.length;    float    expectedSq    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
120	[BUG]  [BUGGY]  long  expectedSq  =  observed.length  -  1;  int  expectedSq  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long  expectedSq  =  observed.length  -  1;  int  expectedSq  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  expectedSq  =  observed.length  -  1;  int  expectedSq  =  observed.length  -  1;	          int    expectedSq    =    observed.length    -    1;    int    expectedSq    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
121	[BUG]  [BUGGY]  int  expected[]  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  expected[]  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expected[]  =  observed.length  -  1;	  long    expected[]    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
122	[BUG]  [BUGGY]  long  expected[]  =  observed.length  -  1L;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long  expected[]  =  observed.length  -  1L;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  expected[]  =  observed.length  -  1L;	  long    expected[]    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
123	[BUG]  [BUGGY]  long  expected[]  =  observed.length  /  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long  expected[]  =  observed.length  /  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  expected[]  =  observed.length  /  1;	  long    expected[]    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
124	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed[i].length  -  1;  i++)  {  [CE]  long  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed[i].length  -  1;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int  i  =  0;  i  <  observed[i].length  -  1;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    	non-compiled	[CE]  long  cannot  be  dereferenced	34	None	replace
125	[BUG]  [BUGGY]  long  expectedSq  =  observed.length;  int  expectedSQ  =  observed.length;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long  expectedSq  =  observed.length;  int  expectedSQ  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  expectedSq  =  observed.length;  int  expectedSQ  =  observed.length;	          int    expectedSq    =    observed.length;    int    expectedSQ    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
126	[BUG]  [BUGGY]  int  i  =  1;  i  <  observed.length;  i++)  {  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  i  =  1;  i  <  observed.length;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  i  =  1;  i  <  observed.length;  i++)  {	  for(int    i    =    1;    i    <    observed.length;    i++)    {    int    i    =    1;    i    <    observed.length;    i++)    {    	non-compiled	[CE]  >  expected	68	None	replace
127	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  int  i  =  0;  i  <  observed.length;  i++)  {  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  int  i  =  0;  i  <  observed.length;  i++)  {	  for(int    i    =    1;    i    <    observed.length;    i++)    {    int    i    =    1;    i    <    observed.length;    i++)    {    	non-compiled	[CE]  >  expected	68	None	replace
128	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  for(int  i  =  1;  i  <  expected.length;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int    i    =    1;    i    <    expected.length;    i++)    {    for(int  i  =  1;  i  <  expected.length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
129	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  For(int  i  =  1;  i  <  expected.length;  i++)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  For(int  i  =  1;  i  <  expected.length;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int    i    =    1;    i    <    expected.length;    i++)    {    For(int  i  =  1;  i  <  expected.length;  i++)  {	  	non-compiled	[CE]  '.class'  expected	52	None	add
130	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  int  i  =  1;  i  <  expected.length;  i++)  {  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  int  i  =  1;  i  <  expected.length;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int    i    =    1;    i    <    expected.length;    i++)    {    int  i  =  1;  i  <  expected.length;  i++)  {	  	non-compiled	[CE]  >  expected	52	None	add
131	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  for(int  i  =  1;  i  >=  expected.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  for(int  i  =  1;  i  >=  expected.length;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int    i    =    1;    i    <    expected.length;    i++)    {    for(int  i  =  1;  i  >=  expected.length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
132	[BUG]  [BUGGY]  double  expectedSq  =  observed.length  /  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  double  expectedSq  =  observed.length  /  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	double  expectedSq  =  observed.length  /  1;	  double    expectedSq    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
133	[BUG]  [BUGGY]  double  expectedSq  =  observed.length  -  1L;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  double  expectedSq  =  observed.length  -  1L;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	double  expectedSq  =  observed.length  -  1L;	  double    expectedSq    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
134	[BUG]  [BUGGY]  double  expected[]  =  observed.length;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  double  expected[]  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	double  expected[]  =  observed.length;	  int    expected[]    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
135	[BUG]  [BUGGY]  double  expectedSq  =  observed.length  /  2;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  double  expectedSq  =  observed.length  /  2;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	double  expectedSq  =  observed.length  /  2;	  double    expectedSq    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
136	[BUG]  [BUGGY]  long[]  expected  =  observed.length  /  2  +  sumSq;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long[]  expected  =  observed.length  /  2  +  sumSq;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long[]  expected  =  observed.length  /  2  +  sumSq;	  long[]    expected    =    observed.length    /    2;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
137	[BUG]  [BUGGY]  long[]  expected  =  observed.length  /  2L;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long[]  expected  =  observed.length  /  2L;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long[]  expected  =  observed.length  /  2L;	  long[]    expected    =    observed.length    /    2;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
138	[BUG]  [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  i  =  0;  i  <  observed.length;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  i  =  0;  i  <  observed.length;  i++)  {	  for(int    i    =    0;    i    <    expected.length;    i++)    {    int    i    =    0;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  >  expected	29	None	replace
139	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  >=  observed.length;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	add	for(int  i  =  0;  i  >=  observed.length;  i++)  {	  for(int    i    =    0;    i    <    expected.length;    i++)    {    for(int    i    =    0;    i    >=    expected.length;    i++)    {    	compilable	  [FE]  AssertionFailedError  	30	6	replace
140	[BUG]  [BUGGY]  for(int  i  =  0;  i  >=  observed.length;  i++)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  >=  observed.length;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int  i  =  0;  i  >=  observed.length;  i++)  {	  for(int    i    =    0;    i    <    expected.length;    i++)    {    for(int    i    =    0;    i    >=    expected.length;    i++)    {    	compilable	  [FE]  AssertionFailedError  	30	6	replace
141	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  for(int  i  =  0;  i!=  observed.length;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	add	for(int  i  =  0;  i!=  observed.length;  i++)  {	  for(int    i    =    0;    i    <    expected.length;    i++)    {    for(int    i    =    0;    i    >=    expected.length;    i++)    {    	compilable	  [FE]  AssertionFailedError  	30	6	replace
142	[BUG]  [BUGGY]  for(int  i  =  0;  i!=  observed.length;  i++)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  for(int  i  =  0;  i!=  observed.length;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int  i  =  0;  i!=  observed.length;  i++)  {	  for(int    i    =    0;    i    <    expected.length;    i++)    {    for(int    i    =    0;    i    >=    expected.length;    i++)    {    	compilable	  [FE]  AssertionFailedError  	30	6	replace
143	[BUG]  [BUGGY]  int  observed.length  =  observed.length  /  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  observed.length  =  observed.length  /  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  observed.length  =  observed.length  /  1;	  int    observed.length    =    observed.length    -    1;    	non-compiled	[CE]  ';'  expected	46	None	replace
144	[BUG]  [BUGGY]  int  observed.length  =  observed.length  -  1L;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  observed.length  =  observed.length  -  1L;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  observed.length  =  observed.length  -  1L;	  int    observed.length    =    observed.length    -    1;    	non-compiled	[CE]  ';'  expected	46	None	replace
145	[BUG]  [BUGGY]  long  expectedLength  =  observed.length;  int  unexpectedLength  =  observed.length;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long  expectedLength  =  observed.length;  int  unexpectedLength  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  expectedLength  =  observed.length;  int  unexpectedLength  =  observed.length;	          int    expectedLength    =    observed.length;    int    unexpectedLength    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
146	[BUG]  [BUGGY]  int  expectedLength  =  observed.length;  int  unexpectedLength  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  expectedLength  =  observed.length;  int  unexpectedLength  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expectedLength  =  observed.length;  int  unexpectedLength  =  observed.length  -  1;	          int    expectedLength    =    observed.length;    int    unexpectedLength    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
147	[BUG]  [BUGGY]  int  expectedLength  =  observed.length  -  1;  int  unexpectedLength  =  observed.length;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  expectedLength  =  observed.length  -  1;  int  unexpectedLength  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expectedLength  =  observed.length  -  1;  int  unexpectedLength  =  observed.length;	          int    expectedLength    =    observed.length;    int    unexpectedLength    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
148	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  observed.length;  i++)  {  for(int  i  =  2;  i  <  observed.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  for(int  i  =  2;  i  <  observed.length;  i++)  {  for(int  i  =  2;  i  <  observed.length;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int    i    =    2;    i    <    observed.length;    i++)    {    for(int  i  =  2;  i  <  observed.length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
149	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  observed.length;  i++)  {  For(int  i  =  2;  i  <  observed.length;  i++)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  for(int  i  =  2;  i  <  observed.length;  i++)  {  For(int  i  =  2;  i  <  observed.length;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int    i    =    2;    i    <    observed.length;    i++)    {    For(int  i  =  2;  i  <  observed.length;  i++)  {	  	non-compiled	[CE]  '.class'  expected	54	None	add
150	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  observed.length;  i++)  {  int  i  =  2;  i  <  observed.length;  i++)  {  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  for(int  i  =  2;  i  <  observed.length;  i++)  {  int  i  =  2;  i  <  observed.length;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int    i    =    2;    i    <    observed.length;    i++)    {    int  i  =  2;  i  <  observed.length;  i++)  {	  	non-compiled	[CE]  >  expected	54	None	add
151	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  observed.length;  i++)  {  for(int  i  =  2;  i  >=  observed.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  for(int  i  =  2;  i  <  observed.length;  i++)  {  for(int  i  =  2;  i  >=  observed.length;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int    i    =    2;    i    <    observed.length;    i++)    {    for(int  i  =  2;  i  >=  observed.length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
152	[BUG]  [BUGGY]  long  expectedLength  =  observed.length;  int  expectLength  =  observed.length;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long  expectedLength  =  observed.length;  int  expectLength  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  expectedLength  =  observed.length;  int  expectLength  =  observed.length;	          int    expectedLength    =    observed.length;    int    expectLength    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
153	[BUG]  [BUGGY]  double  expectedLength  =  observed.length;  int  expectLength  =  observed.length;  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  double  expectedLength  =  observed.length;  int  expectLength  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	double  expectedLength  =  observed.length;  int  expectLength  =  observed.length;	          int    expectedLength    =    observed.length;    int    expectLength    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
154	[BUG]  [BUGGY]  int  expectedLength  =  observed.length  -  1;  int  expectLength  =  observed.length;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  expectedLength  =  observed.length  -  1;  int  expectLength  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expectedLength  =  observed.length  -  1;  int  expectLength  =  observed.length;	          int    expectedLength    =    observed.length;    int    expectLength    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
155	[BUG]  [BUGGY]  double  expectedLength  =  observed.length  -  1  +  sumSq;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  double  expectedLength  =  observed.length  -  1  +  sumSq;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	double  expectedLength  =  observed.length  -  1  +  sumSq;	  int    expectedLength    =    observed.length    -    1    +    sumSq;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
156	[BUG]  [BUGGY]  int  expectedLength  =  sumSq  -  1  +  observed.length;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  expectedLength  =  sumSq  -  1  +  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expectedLength  =  sumSq  -  1  +  observed.length;	  int    expectedLength    =    observed.length    -    1    +    sumSq;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
157	[BUG]  [BUGGY]  int  expectedLength  =  observed.length  /  1  +  sumSq;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  expectedLength  =  observed.length  /  1  +  sumSq;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expectedLength  =  observed.length  /  1  +  sumSq;	  int    expectedLength    =    observed.length    -    1    +    sumSq;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
158	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected[i];  i++)  {  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  For(int  i  =  0;  i  <  expected[i];  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	For(int  i  =  0;  i  <  expected[i];  i++)  {	  For(int    i    =    0;    i    <    observed[i];    i++)    {    	non-compiled	[CE]  '.class'  expected	44	None	replace
159	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  observed[i]  -  1;  i++)  {  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  For(int  i  =  0;  i  <  observed[i]  -  1;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	For(int  i  =  0;  i  <  observed[i]  -  1;  i++)  {	  For(int    i    =    0;    i    <    observed[i];    i++)    {    	non-compiled	[CE]  '.class'  expected	44	None	replace
160	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  observed[i]  -  2;  i++)  {  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  For(int  i  =  0;  i  <  observed[i]  -  2;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	For(int  i  =  0;  i  <  observed[i]  -  2;  i++)  {	  For(int    i    =    0;    i    <    observed[i];    i++)    {    	non-compiled	[CE]  '.class'  expected	44	None	replace
161	[BUG]  [BUGGY]          int    expectedLength    =    observed.length;    int  unexpectedLength  =  observed.length;  int  expectedLength  =  observed.length;  int  unexpectedLength  =  observed.length;  [CE]  variable  expectedLength  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedLength    =    observed.length;    int  unexpectedLength  =  observed.length;  int  expectedLength  =  observed.length;  int  unexpectedLength  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedLength        =        observed.length;        int    unexpectedLength    =    observed.length;    int  expectedLength  =  observed.length;  int  unexpectedLength  =  observed.length;	  	non-compiled	[CE]  variable  expectedLength  is  already  defined  in  method  chiSquare(double[],long[])	40	None	add
162	[BUG]  [BUGGY]          int    expectedLength    =    observed.length;    int  unexpectedLength  =  observed.length;  int  unexpectedLength  =  observed.length;  int  unexpectedLength  =  observed.length;  [CE]  variable  unexpectedLength  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedLength    =    observed.length;    int  unexpectedLength  =  observed.length;  int  unexpectedLength  =  observed.length;  int  unexpectedLength  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedLength        =        observed.length;        int    unexpectedLength    =    observed.length;    int  unexpectedLength  =  observed.length;  int  unexpectedLength  =  observed.length;	  	non-compiled	[CE]  variable  unexpectedLength  is  already  defined  in  method  chiSquare(double[],long[])	40	None	add
163	[BUG]  [BUGGY]          int    expectedLength    =    observed.length;    int  unexpectedLength  =  observed.length;  int  expectLength  =  observed.length;  int  unexpectedLength  =  observed.length;  [CE]  variable  unexpectedLength  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedLength    =    observed.length;    int  unexpectedLength  =  observed.length;  int  expectLength  =  observed.length;  int  unexpectedLength  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedLength        =        observed.length;        int    unexpectedLength    =    observed.length;    int  expectLength  =  observed.length;  int  unexpectedLength  =  observed.length;	  	non-compiled	[CE]  variable  unexpectedLength  is  already  defined  in  method  chiSquare(double[],long[])	40	None	add
164	[BUG]  [BUGGY]          int    expectedLength    =    observed.length;    int  unexpectedLength  =  observed.length;  long  expectedLength  =  observed.length;  int  unexpectedLength  =  observed.length;  [CE]  variable  expectedLength  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedLength    =    observed.length;    int  unexpectedLength  =  observed.length;  long  expectedLength  =  observed.length;  int  unexpectedLength  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedLength        =        observed.length;        int    unexpectedLength    =    observed.length;    long  expectedLength  =  observed.length;  int  unexpectedLength  =  observed.length;	  	non-compiled	[CE]  variable  expectedLength  is  already  defined  in  method  chiSquare(double[],long[])	40	None	add
165	[BUG]  [BUGGY]  int  observed[]  =  observed.length  -  2;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  observed[]  =  observed.length  -  2;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  observed[]  =  observed.length  -  2;	  long    observed[]    =    observed.length    -    2;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
166	[BUG]  [BUGGY]  long  observed[]  =  observed.length  /  2;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long  observed[]  =  observed.length  /  2;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  observed[]  =  observed.length  /  2;	  long    observed[]    =    observed.length    -    2;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
167	[BUG]  [BUGGY]  long[]  expected  =  observed.length  *  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long[]  expected  =  observed.length  *  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long[]  expected  =  observed.length  *  1;	  long[]    expected    =    observed.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
168	[BUG]  [BUGGY]  long[]  expected  =  observed.length  +  2;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long[]  expected  =  observed.length  +  2;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long[]  expected  =  observed.length  +  2;	  long[]    expected    =    observed.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
169	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  observed.length  -  2;  i++)  {  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  For(int  i  =  0;  i  <  observed.length  -  2;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	For(int  i  =  0;  i  <  observed.length  -  2;  i++)  {	  For(int    i    =    0;    i    <    expected.length    -    2;    i++)    {    	non-compiled	[CE]  '.class'  expected	45	None	replace
170	[BUG]  [BUGGY]  int  observed.length  -=  observed.length  +  1;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  observed.length  -=  observed.length  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  observed.length  -=  observed.length  +  1;	  int    observed.length    -=    observed.length;    	non-compiled	[CE]  ';'  expected	48	None	replace
171	[BUG]  [BUGGY]  double  expected[]  =  observed.length();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  double  expected[]  =  observed.length();  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	double  expected[]  =  observed.length();	  double    expected[]    =    observed.longValue();    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
172	[BUG]  [BUGGY]  double  expected[]  =  observed.doubleValue();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  double  expected[]  =  observed.doubleValue();  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	double  expected[]  =  observed.doubleValue();	  double    expected[]    =    observed.longValue();    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
173	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected[i].length;  i++)  {  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  For(int  i  =  0;  i  <  expected[i].length;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	For(int  i  =  0;  i  <  expected[i].length;  i++)  {	  For(int    i    =    0;    i    <    observed[i].length;    i++)    {    	non-compiled	[CE]  '.class'  expected	43	None	replace
174	[BUG]  [BUGGY]  Integer  expectedSq  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  Integer  expectedSq  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	Integer  expectedSq  =  observed.length  -  1;	          int    expectedSq    =    observed.length    -    1;    Int    expectedSq    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
175	[BUG]  [BUGGY]  int  expectedSq  =  observed.length  -  1;  Integer  expectedSq  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  expectedSq  =  observed.length  -  1;  Integer  expectedSq  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expectedSq  =  observed.length  -  1;  Integer  expectedSq  =  observed.length  -  1;	          int    expectedSq    =    observed.length    -    1;    Int    expectedSq    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
176	[BUG]  [BUGGY]  int  expected[]  =  observed.length  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  expected[]  =  observed.length  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expected[]  =  observed.length  +  1;	  long    expected[]    =    observed.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
177	[BUG]  [BUGGY]  long  expected[]  =  observed.length  *  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long  expected[]  =  observed.length  *  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  expected[]  =  observed.length  *  1;	  long    expected[]    =    observed.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
178	[BUG]  [BUGGY]          int    expectedSq    =    observed.length;    int  expectedSQ  =  observed.length;  int  expectedSq  =  observed.length;  int  expectedSQ  =  observed.length;  [CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedSq    =    observed.length;    int  expectedSQ  =  observed.length;  int  expectedSq  =  observed.length;  int  expectedSQ  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedSq        =        observed.length;        int    expectedSQ    =    observed.length;    int  expectedSq  =  observed.length;  int  expectedSQ  =  observed.length;	  	non-compiled	[CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])	82	None	add
179	[BUG]  [BUGGY]          int    expectedSq    =    observed.length;    int  expectedSQ  =  observed.length;  Integer  expectedSq  =  observed.length;  int  expectedSQ  =  observed.length;  [CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedSq    =    observed.length;    int  expectedSQ  =  observed.length;  Integer  expectedSq  =  observed.length;  int  expectedSQ  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedSq        =        observed.length;        int    expectedSQ    =    observed.length;    Integer  expectedSq  =  observed.length;  int  expectedSQ  =  observed.length;	  	non-compiled	[CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])	82	None	add
180	[BUG]  [BUGGY]          int    expectedSq    =    observed.length;    int  expectedSQ  =  observed.length;  int  expectSq  =  observed.length;  int  expectedSQ  =  observed.length;  [CE]  variable  expectedSQ  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedSq    =    observed.length;    int  expectedSQ  =  observed.length;  int  expectSq  =  observed.length;  int  expectedSQ  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedSq        =        observed.length;        int    expectedSQ    =    observed.length;    int  expectSq  =  observed.length;  int  expectedSQ  =  observed.length;	  	non-compiled	[CE]  variable  expectedSQ  is  already  defined  in  method  chiSquare(double[],long[])	82	None	add
181	[BUG]  [BUGGY]          int    expectedSq    =    observed.length;    int  expectedSQ  =  observed.length;  long  expectedSq  =  observed.length;  int  expectedSQ  =  observed.length;  [CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]          AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedSq    =    observed.length;    int  expectedSQ  =  observed.length;  long  expectedSq  =  observed.length;  int  expectedSQ  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedSq        =        observed.length;        int    expectedSQ    =    observed.length;    long  expectedSq  =  observed.length;  int  expectedSQ  =  observed.length;	  	non-compiled	[CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])	82	None	add
182	[BUG]  [BUGGY]  long  expectedSq  =  observed.length  /  1;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long  expectedSq  =  observed.length  /  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  expectedSq  =  observed.length  /  1;	  int    expectedSq    =    observed.length    /    1;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
183	[BUG]  [BUGGY]  int  expectedSq  =  observed.length  /  1L;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  expectedSq  =  observed.length  /  1L;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expectedSq  =  observed.length  /  1L;	  int    expectedSq    =    observed.length    /    1;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
184	[BUG]  [BUGGY]  long  observed[]  =  observed.length  /  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long  observed[]  =  observed.length  /  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  observed[]  =  observed.length  /  1;	  long    observed[]    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
185	[BUG]  [BUGGY]  long  observed[]  =  observed.length  -  1L;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long  observed[]  =  observed.length  -  1L;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  observed[]  =  observed.length  -  1L;	  long    observed[]    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
186	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	add	for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	34	6	replace
187	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int  i  =  0;  i  <  expected.length  -  3;  i++)  {	  for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	34	6	replace
188	[BUG]  [BUGGY]  int  observed.length  =  expected.length  -  2;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  observed.length  =  expected.length  -  2;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  observed.length  =  expected.length  -  2;	  int    observed.length    =    expected.length;    	non-compiled	[CE]  ';'  expected	47	None	replace
189	[BUG]  [BUGGY]  int  observed.length  -  expected.length;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  observed.length  -  expected.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  observed.length  -  expected.length;	  int    observed.length    =    expected.length;    	non-compiled	[CE]  ';'  expected	47	None	replace
190	[BUG]  [BUGGY]  double  expected[]  =  observed.longValue()  +  sumSq;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  double  expected[]  =  observed.longValue()  +  sumSq;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	double  expected[]  =  observed.longValue()  +  sumSq;	  double    expected[]    =    observed.longValue();    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
191	[BUG]  [BUGGY]  short  observed[]  =  observed.length;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  short  observed[]  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	short  observed[]  =  observed.length;	  long    observed[]    =    expected.length;    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
192	[BUG]  [BUGGY]  long  observed[]  =  observed;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long  observed[]  =  observed;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  observed[]  =  observed;	  long    observed[]    =    expected.length;    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
193	[BUG]  [BUGGY]          int    expectedSq    =    observed.length;    int  expectSq  =  observed.length;  Int  expectedSq  =  observed.length;  int  expectSq  =  observed.length;  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedSq    =    observed.length;    int  expectSq  =  observed.length;  Int  expectedSq  =  observed.length;  int  expectSq  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedSq        =        observed.length;        int    expectSq    =    observed.length;    Int  expectedSq  =  observed.length;  int  expectSq  =  observed.length;	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
194	[BUG]  [BUGGY]          int    expectedSq    =    observed.length;    int  expectSq  =  observed.length;  int  expectedSq  =  observed.length;  int  expectSQ  =  observed.length;  [CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedSq    =    observed.length;    int  expectSq  =  observed.length;  int  expectedSq  =  observed.length;  int  expectSQ  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedSq        =        observed.length;        int    expectSq    =    observed.length;    int  expectedSq  =  observed.length;  int  expectSQ  =  observed.length;	  	non-compiled	[CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])	9	None	add
195	[BUG]  [BUGGY]          int    expectedLength    =    observed.length;    int  unexpectedLength  =  observed.length;  Int  expectedLength  =  observed.length;  int  unexpectedLength  =  observed.length;  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedLength    =    observed.length;    int  unexpectedLength  =  observed.length;  Int  expectedLength  =  observed.length;  int  unexpectedLength  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedLength        =        observed.length;        int    unexpectedLength    =    observed.length;    Int  expectedLength  =  observed.length;  int  unexpectedLength  =  observed.length;	  	non-compiled	[CE]  cannot  find  symbol	40	None	add
196	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  (int  i  =  0;  i  <  expected.length  -  2;  i++)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  2;  i++)  {  (int  i  =  0;  i  <  expected.length  -  2;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int    i    =    0;    i    <    expected.length    -    2;    i++)    {    (int  i  =  0;  i  <  expected.length  -  2;  i++)  {	  	non-compiled	[CE]  ')'  expected	31	None	add
197	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  (int  i  =  1;  i  <  expected.length;  i++)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  (int  i  =  1;  i  <  expected.length;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int    i    =    1;    i    <    expected.length;    i++)    {    (int  i  =  1;  i  <  expected.length;  i++)  {	  	non-compiled	[CE]  ')'  expected	52	None	add
198	[BUG]  [BUGGY]  long  expectedLength  =  observed.length;  Int  expectedLength  =  observed.length;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long  expectedLength  =  observed.length;  Int  expectedLength  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  expectedLength  =  observed.length;  Int  expectedLength  =  observed.length;	          int    expectedLength    =    observed.length;    Int    expectedLength    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
199	[BUG]  [BUGGY]          int    expectedSq    =    observed.length    -    1;    int  observedSq  =  observed.length  -  1;  Int  expectedSq  =  observed.length  -  1;  int  observedSq  =  observed.length  -  1;  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedSq    =    observed.length    -    1;    int  observedSq  =  observed.length  -  1;  Int  expectedSq  =  observed.length  -  1;  int  observedSq  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedSq        =        observed.length        -        1;        int    observedSq    =    observed.length    -    1;    Int  expectedSq  =  observed.length  -  1;  int  observedSq  =  observed.length  -  1;	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
200	[BUG]  [BUGGY]          int    expectedSq    =    observed.length    -    1;    int  observedSq  =  observed.length  -  1;  long  expectedSq  =  observed.length  -  1;  int  observedSq  =  observed.length  -  1;  [CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedSq    =    observed.length    -    1;    int  observedSq  =  observed.length  -  1;  long  expectedSq  =  observed.length  -  1;  int  observedSq  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedSq        =        observed.length        -        1;        int    observedSq    =    observed.length    -    1;    long  expectedSq  =  observed.length  -  1;  int  observedSq  =  observed.length  -  1;	  	non-compiled	[CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])	20	None	add
201	[BUG]  [BUGGY]          int    expectedSq    =    observed.length    -    1;    int  observedSq  =  observed.length  -  1;  int  expectedSq  =  observed.length  -  1;  int  observedSQ  =  observed.length  -  1;  [CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]        AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedSq    =    observed.length    -    1;    int  observedSq  =  observed.length  -  1;  int  expectedSq  =  observed.length  -  1;  int  observedSQ  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedSq        =        observed.length        -        1;        int    observedSq    =    observed.length    -    1;    int  expectedSq  =  observed.length  -  1;  int  observedSQ  =  observed.length  -  1;	  	non-compiled	[CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])	20	None	add
202	[BUG]  [BUGGY]  int  expectedSq  =  0;  int  expectSq  =  observed.length;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  expectedSq  =  0;  int  expectSq  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expectedSq  =  0;  int  expectSq  =  observed.length;	          int    expectedSq    =    observed.length;    int    expectSq    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
203	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  (int  i  =  0;  i  <  expected.length;  i++)  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  (int  i  =  0;  i  <  expected.length;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  (int  i  =  0;  i  <  expected.length;  i++)  {	  for(int    i    =    0;    i    <    expected.length;    i++)    {    (int    i    =    0;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  ')'  expected	71	None	replace
204	[BUG]  [BUGGY]  long  expected[]  =  sumSq  +  observed.longValue();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long  expected[]  =  sumSq  +  observed.longValue();  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  expected[]  =  sumSq  +  observed.longValue();	  long    expected[]    =    observed.longValue()    +    sumSq;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
205	[BUG]  [BUGGY]  int  expectedSq  =  observed.length  -  2;  long  expectedSq  =  observed.length  -  2;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  expectedSq  =  observed.length  -  2;  long  expectedSq  =  observed.length  -  2;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expectedSq  =  observed.length  -  2;  long  expectedSq  =  observed.length  -  2;	          int    expectedSq    =    observed.length    -    1;    long    expectedSq    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
206	[BUG]  [BUGGY]  long[]  expected  =  observed.length  /  2  *  sumSq;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long[]  expected  =  observed.length  /  2  *  sumSq;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long[]  expected  =  observed.length  /  2  *  sumSq;	  long[]    expected    =    observed.length    /    2;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
207	[BUG]  [BUGGY]          int    expectedLength    =    observed.length;    int  expectLength  =  observed.length;  Int  expectedLength  =  observed.length;  int  expectLength  =  observed.length;  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedLength    =    observed.length;    int  expectLength  =  observed.length;  Int  expectedLength  =  observed.length;  int  expectLength  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedLength        =        observed.length;        int    expectLength    =    observed.length;    Int  expectedLength  =  observed.length;  int  expectLength  =  observed.length;	  	non-compiled	[CE]  cannot  find  symbol	38	None	add
208	[BUG]  [BUGGY]          int    expectedLength    =    observed.length;    int  expectLength  =  observed.length;  long  expectedLength  =  observed.length;  int  expectLength  =  observed.length;  [CE]  variable  expectedLength  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedLength    =    observed.length;    int  expectLength  =  observed.length;  long  expectedLength  =  observed.length;  int  expectLength  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedLength        =        observed.length;        int    expectLength    =    observed.length;    long  expectedLength  =  observed.length;  int  expectLength  =  observed.length;	  	non-compiled	[CE]  variable  expectedLength  is  already  defined  in  method  chiSquare(double[],long[])	38	None	add
209	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  (int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  (int  i  =  0;  i  <  expected.length  -  1;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int    i    =    0;    i    <    expected.length    -    1;    i++)    {    (int  i  =  0;  i  <  expected.length  -  1;  i++)  {	  	non-compiled	[CE]  ')'  expected	33	None	add
210	[BUG]  [BUGGY]  int  expectedSq  =  dev  /  observed.length;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  expectedSq  =  dev  /  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expectedSq  =  dev  /  observed.length;	  int    expectedSq    =    observed.length    /    dev;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
211	[BUG]  [BUGGY]          int    expectedLength    =    observed.length    -    1;    int  expectLength  =  observed.length  -  1;  int  expectedLength  =  observed.length  -  1;  int  ExpectLength  =  observed.length  -  1;  [CE]  variable  expectedLength  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedLength    =    observed.length    -    1;    int  expectLength  =  observed.length  -  1;  int  expectedLength  =  observed.length  -  1;  int  ExpectLength  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedLength        =        observed.length        -        1;        int    expectLength    =    observed.length    -    1;    int  expectedLength  =  observed.length  -  1;  int  ExpectLength  =  observed.length  -  1;	  	non-compiled	[CE]  variable  expectedLength  is  already  defined  in  method  chiSquare(double[],long[])	3	None	add
212	[BUG]  [BUGGY]  double  observed.length  =  observed.length  +  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  double  observed.length  =  observed.length  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	double  observed.length  =  observed.length  +  1;	  double    observed.length    =    observed.length;    	non-compiled	[CE]  ';'  expected	95	None	replace
213	[BUG]  [BUGGY]  Int  expectedSq  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  Int  expectedSq  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	Int  expectedSq  =  observed.length  -  1;	          int    expectedSq    =    observed.length    -    1;    Int    expectedSq    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
214	[BUG]  [BUGGY]  Int  expectedSq  =  observed.length  -  1;  Int  expectedSq  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  Int  expectedSq  =  observed.length  -  1;  Int  expectedSq  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	Int  expectedSq  =  observed.length  -  1;  Int  expectedSq  =  observed.length  -  1;	          int    expectedSq    =    observed.length    -    1;    Int    expectedSq    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
215	[BUG]  [BUGGY]          int    expectedSq    =    observed.length;    int  expectedSQ  =  observed.length;  Int  expectedSq  =  observed.length;  int  expectedSQ  =  observed.length;  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedSq    =    observed.length;    int  expectedSQ  =  observed.length;  Int  expectedSq  =  observed.length;  int  expectedSQ  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedSq        =        observed.length;        int    expectedSQ    =    observed.length;    Int  expectedSq  =  observed.length;  int  expectedSQ  =  observed.length;	  	non-compiled	[CE]  cannot  find  symbol	82	None	add
216	[BUG]  [BUGGY]          int    expectedSq    =    observed.length;    int  expectedSQ  =  observed.length;  float  expectedSq  =  observed.length;  int  expectedSQ  =  observed.length;  [CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedSq    =    observed.length;    int  expectedSQ  =  observed.length;  float  expectedSq  =  observed.length;  int  expectedSQ  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedSq        =        observed.length;        int    expectedSQ    =    observed.length;    float  expectedSq  =  observed.length;  int  expectedSQ  =  observed.length;	  	non-compiled	[CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])	82	None	add
217	[BUG]  [BUGGY]  int  expectedSq  =  0;  float  expectedSq  =  observed.length;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  expectedSq  =  0;  float  expectedSq  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expectedSq  =  0;  float  expectedSq  =  observed.length;	          int    expectedSq    =    observed.length;    float    expectedSq    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
218	[BUG]  [BUGGY]  int  expectedLength  =  observed.length  -  1  +  sumSq  +  dev;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  expectedLength  =  observed.length  -  1  +  sumSq  +  dev;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expectedLength  =  observed.length  -  1  +  sumSq  +  dev;	  int    expectedLength    =    observed.length    -    1    +    sumSq;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
219	[BUG]  [BUGGY]          int    expectedSq    =    observed.length    -    1;    int  unexpectedSq  =  observed.length  -  1;  Int  int  expectedSq  =  observed.length  -  1;  int  unexpectedSq  =  observed.length  -  1;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedSq    =    observed.length    -    1;    int  unexpectedSq  =  observed.length  -  1;  Int  int  expectedSq  =  observed.length  -  1;  int  unexpectedSq  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedSq        =        observed.length        -        1;        int    unexpectedSq    =    observed.length    -    1;    Int  int  expectedSq  =  observed.length  -  1;  int  unexpectedSq  =  observed.length  -  1;	  	non-compiled	[CE]  not  a  statement	22	None	add
220	[BUG]  [BUGGY]          int    expectedSq    =    observed.length    -    1;    int  unexpectedSq  =  observed.length  -  1;  long  expectedSq  =  observed.length  -  1;  int  unexpectedSq  =  observed.length  -  1;  [CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedSq    =    observed.length    -    1;    int  unexpectedSq  =  observed.length  -  1;  long  expectedSq  =  observed.length  -  1;  int  unexpectedSq  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedSq        =        observed.length        -        1;        int    unexpectedSq    =    observed.length    -    1;    long  expectedSq  =  observed.length  -  1;  int  unexpectedSq  =  observed.length  -  1;	  	non-compiled	[CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])	22	None	add
221	[BUG]  [BUGGY]  long  expectedLength  =  observed.length  -  1;  Int  expectedLength  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long  expectedLength  =  observed.length  -  1;  Int  expectedLength  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  expectedLength  =  observed.length  -  1;  Int  expectedLength  =  observed.length  -  1;	          int    expectedLength    =    observed.length    -    1;    Int    expectedLength    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
222	[BUG]  [BUGGY]  int  observed.length  =  observed.length  -  1  +  sumSq;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  observed.length  =  observed.length  -  1  +  sumSq;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  observed.length  =  observed.length  -  1  +  sumSq;	  int    observed.length    =    observed.length    -    1;    	non-compiled	[CE]  ';'  expected	46	None	replace
223	[BUG]  [BUGGY]  double  expectedLength  =  observed.length  /  sumSq;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  double  expectedLength  =  observed.length  /  sumSq;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	double  expectedLength  =  observed.length  /  sumSq;	  double    expectedLength    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
224	[BUG]  [BUGGY]  long[]  expected  =  observed.length,  sumSq  +  2;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long[]  expected  =  observed.length,  sumSq  +  2;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long[]  expected  =  observed.length,  sumSq  +  2;	  long[]    expected    =    observed.length,    sumSq;    	non-compiled	[CE]  ';'  expected	92	None	replace
225	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  estimated.length;  i++)  {  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  For(int  i  =  0;  i  <  estimated.length;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	For(int  i  =  0;  i  <  estimated.length;  i++)  {	  For(int    i    =    0;    i    <    observed.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	42	None	replace
226	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  int  i  =  0;  i  <  expected.length;  i++)  {  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  for(int  i  =  0;  i  <  observed.length;  i++)  {  int  i  =  0;  i  <  expected.length;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int  i  =  0;  i  <  observed.length;  i++)  {  int  i  =  0;  i  <  expected.length;  i++)  {	  for(int    i    =    0;    i    <    expected.length;    i++)    {    int    i    =    0;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  >  expected	29	None	replace
227	[BUG]  [BUGGY]  int  expectedSq  =  observed.length  -  2;  int  observedSq  =  observed.length  -  2;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  expectedSq  =  observed.length  -  2;  int  observedSq  =  observed.length  -  2;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expectedSq  =  observed.length  -  2;  int  observedSq  =  observed.length  -  2;	          int    expectedSq    =    observed.length    -    1;    int    observedSq    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
228	[BUG]  [BUGGY]  int  expectedSq  =  observed.length  -  2;  int  unexpectedSq  =  observed.length  -  2;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  expectedSq  =  observed.length  -  2;  int  unexpectedSq  =  observed.length  -  2;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expectedSq  =  observed.length  -  2;  int  unexpectedSq  =  observed.length  -  2;	          int    expectedSq    =    observed.length    -    1;    int    unexpectedSq    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
229	[BUG]  [BUGGY]  Int  expectedSq  =  observed.length;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  Int  expectedSq  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	Int  expectedSq  =  observed.length;	          int    expectedSq    =    observed.length;    Int    expectedSq    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
230	[BUG]  [BUGGY]  long  observed.length  -=  observed.length;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long  observed.length  -=  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  observed.length  -=  observed.length;	  int    observed.length    -=    observed.length;    	non-compiled	[CE]  ';'  expected	48	None	replace
231	[BUG]  [BUGGY]  Long[]  expected  =  sumSq  /  observed.length;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  Long[]  expected  =  sumSq  /  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	Long[]  expected  =  sumSq  /  observed.length;	  long[]    expected    =    observed.length    /    sumSq;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
232	[BUG]  [BUGGY]  short[]  expected  =  sumSq  /  observed.length;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  short[]  expected  =  sumSq  /  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	short[]  expected  =  sumSq  /  observed.length;	  long[]    expected    =    observed.length    /    sumSq;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
233	[BUG]  [BUGGY]  double  expectedSq  =  observed.length  -  3;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  double  expectedSq  =  observed.length  -  3;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	double  expectedSq  =  observed.length  -  3;	  double    expectedSq    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
234	[BUG]  [BUGGY]  int  i  =  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  i  =  1;  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  i  =  1;	  for(int    i    =    1;    i    <    observed.length;    i++)    {    int    i    =    1;    i    <    observed.length;    i++)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
235	[BUG]  [BUGGY]  long[]  expected  =  observed.length;  for(int  i  =  1;  i  <  expected.length;  i++)  {  [CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])  [FE]              AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long[]  expected  =  observed.length;  for(int  i  =  1;  i  <  expected.length;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long[]  expected  =  observed.length;  for(int  i  =  1;  i  <  expected.length;  i++)  {	  for(int    i    =    1;    i    <    observed.length;    i++)    {    int    i    =    1;    i    <    observed.length;    i++)    {    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  chiSquare(double[],long[])	68	None	replace
236	[BUG]  [BUGGY]  (int  i  =  1;  i  <  observed.length;  i++)  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  (int  i  =  1;  i  <  observed.length;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	(int  i  =  1;  i  <  observed.length;  i++)  {	  for(int    i    =    1;    i    <    observed.length;    i++)    {    (int    i    =    1;    i    <    observed.length;    i++)    {    	non-compiled	[CE]  ')'  expected	86	None	replace
237	[BUG]  [BUGGY]  for(int  i  =  expected.length;  i  <  observed.length;  i++)  {  observed[i]  =  observed[i];  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  for(int  i  =  expected.length;  i  <  observed.length;  i++)  {  observed[i]  =  observed[i];  }  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int  i  =  expected.length;  i  <  observed.length;  i++)  {  observed[i]  =  observed[i];  }	  long    observed[]    =    expected.length;    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
238	[BUG]  [BUGGY]  for(int  i  =  expected.length;  i  <  observed.length;  i++)  {  long  observed[]  =  observed.length;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  for(int  i  =  expected.length;  i  <  observed.length;  i++)  {  long  observed[]  =  observed.length;  }  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	for(int  i  =  expected.length;  i  <  observed.length;  i++)  {  long  observed[]  =  observed.length;  }	  long    observed[]    =    expected.length;    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
239	[BUG]  [BUGGY]  int  expectedSq  =  observed.length  -  2;  Int  expectedSq  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  expectedSq  =  observed.length  -  2;  Int  expectedSq  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expectedSq  =  observed.length  -  2;  Int  expectedSq  =  observed.length  -  1;	          int    expectedSq    =    observed.length    -    1;    Int    expectedSq    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
240	[BUG]  [BUGGY]  double  expectedSq  =  observed.length  -  1;  Int  expectedSq  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  double  expectedSq  =  observed.length  -  1;  Int  expectedSq  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	double  expectedSq  =  observed.length  -  1;  Int  expectedSq  =  observed.length  -  1;	          int    expectedSq    =    observed.length    -    1;    Int    expectedSq    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
241	[BUG]  [BUGGY]  int  expectedLength  =  observed.length  -  sumSq;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  expectedLength  =  observed.length  -  sumSq;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expectedLength  =  observed.length  -  sumSq;	  int    expectedLength    =    observed.length    -    2;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
242	[BUG]  [BUGGY]          int    expectedSq    =    observed.length;    int  expectedSQ  =  observed.length;  double  expectedSq  =  observed.length;  int  expectedSQ  =  observed.length;  [CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedSq    =    observed.length;    int  expectedSQ  =  observed.length;  double  expectedSq  =  observed.length;  int  expectedSQ  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedSq        =        observed.length;        int    expectedSQ    =    observed.length;    double  expectedSq  =  observed.length;  int  expectedSQ  =  observed.length;	  	non-compiled	[CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])	82	None	add
243	[BUG]  [BUGGY]  double  expectedLength  =  observed.length  -  sumSq;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  double  expectedLength  =  observed.length  -  sumSq;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	double  expectedLength  =  observed.length  -  sumSq;	  double    expectedLength    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
244	[BUG]  [BUGGY]  int  expectedLength  =  observed.length  -  2;  Int  expectedLength  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  expectedLength  =  observed.length  -  2;  Int  expectedLength  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expectedLength  =  observed.length  -  2;  Int  expectedLength  =  observed.length  -  1;	          int    expectedLength    =    observed.length    -    1;    Int    expectedLength    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
245	[BUG]  [BUGGY]  int  expectedLength  =  observed.length  -  sumSq  +  observed.length;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  expectedLength  =  observed.length  -  sumSq  +  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expectedLength  =  observed.length  -  sumSq  +  observed.length;	  int    expectedLength    =    observed.length    -    1    +    sumSq;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
246	[BUG]  [BUGGY]          int    expectedLength    =    observed.length;    int  unexpectedLength  =  observed.length;  double  expectedLength  =  observed.length;  int  unexpectedLength  =  observed.length;  [CE]  variable  expectedLength  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedLength    =    observed.length;    int  unexpectedLength  =  observed.length;  double  expectedLength  =  observed.length;  int  unexpectedLength  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedLength        =        observed.length;        int    unexpectedLength    =    observed.length;    double  expectedLength  =  observed.length;  int  unexpectedLength  =  observed.length;	  	non-compiled	[CE]  variable  expectedLength  is  already  defined  in  method  chiSquare(double[],long[])	40	None	add
247	[BUG]  [BUGGY]          int    expectedLength    =    observed.length    -    1;    int  unexpectedLength  =  observed.length  -  1;  Int  expectedLength  =  observed.length  -  1;  int  unexpectedLength  =  observed.length  -  1;  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedLength    =    observed.length    -    1;    int  unexpectedLength  =  observed.length  -  1;  Int  expectedLength  =  observed.length  -  1;  int  unexpectedLength  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedLength        =        observed.length        -        1;        int    unexpectedLength    =    observed.length    -    1;    Int  expectedLength  =  observed.length  -  1;  int  unexpectedLength  =  observed.length  -  1;	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
248	[BUG]  [BUGGY]  long  expected[]  =  observed.length  +  sumSq;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long  expected[]  =  observed.length  +  sumSq;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long  expected[]  =  observed.length  +  sumSq;	  long    expected[]    =    observed.longValue()    +    sumSq;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
249	[BUG]  [BUGGY]  double  expectedLength  =  observed.length;  int  unexpectedLength  =  observed.length;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  double  expectedLength  =  observed.length;  int  unexpectedLength  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	double  expectedLength  =  observed.length;  int  unexpectedLength  =  observed.length;	          int    expectedLength    =    observed.length;    int    unexpectedLength    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
250	[BUG]  [BUGGY]          int    expectedSq    =    observed.length    -    1;    int  observedSq  =  observed.length  -  1;  double  expectedSq  =  observed.length  -  1;  int  observedSq  =  observed.length  -  1;  [CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedSq    =    observed.length    -    1;    int  observedSq  =  observed.length  -  1;  double  expectedSq  =  observed.length  -  1;  int  observedSq  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedSq        =        observed.length        -        1;        int    observedSq    =    observed.length    -    1;    double  expectedSq  =  observed.length  -  1;  int  observedSq  =  observed.length  -  1;	  	non-compiled	[CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])	20	None	add
251	[BUG]  [BUGGY]  long[]  expected  =  observed.length  /  sumSq  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long[]  expected  =  observed.length  /  sumSq  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long[]  expected  =  observed.length  /  sumSq  +  1;	  long[]    expected    =    observed.length    /    sumSq;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
252	[BUG]  [BUGGY]  long[]  expected  =  observed.length  /  dev;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long[]  expected  =  observed.length  /  dev;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long[]  expected  =  observed.length  /  dev;	  long[]    expected    =    observed.length    /    sumSq;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
253	[BUG]  [BUGGY]  long[]  expected  =  observed.length,  sumSq  +  dev;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long[]  expected  =  observed.length,  sumSq  +  dev;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long[]  expected  =  observed.length,  sumSq  +  dev;	  long[]    expected    =    observed.length,    sumSq;    	non-compiled	[CE]  ';'  expected	92	None	replace
254	[BUG]  [BUGGY]          int    expectedSq    =    observed.length;    int  expectSq  =  observed.length;  double  expectedSq  =  observed.length;  int  expectSq  =  observed.length;  [CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedSq    =    observed.length;    int  expectSq  =  observed.length;  double  expectedSq  =  observed.length;  int  expectSq  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedSq        =        observed.length;        int    expectSq    =    observed.length;    double  expectedSq  =  observed.length;  int  expectSq  =  observed.length;	  	non-compiled	[CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])	9	None	add
255	[BUG]  [BUGGY]  long[]  expected  =  observed.length  /  2  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  long[]  expected  =  observed.length  /  2  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	long[]  expected  =  observed.length  /  2  +  1;	  long[]    expected    =    observed.length    /    2;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
256	[BUG]  [BUGGY]          int    expectedSq    =    observed.length    -    1;    int  unexpectedSq  =  observed.length  -  1;  Int  expectedSq  =  observed.length  -  1;  int  unexpectedSq  =  observed.length  -  1;  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedSq    =    observed.length    -    1;    int  unexpectedSq  =  observed.length  -  1;  Int  expectedSq  =  observed.length  -  1;  int  unexpectedSq  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedSq        =        observed.length        -        1;        int    unexpectedSq    =    observed.length    -    1;    Int  expectedSq  =  observed.length  -  1;  int  unexpectedSq  =  observed.length  -  1;	  	non-compiled	[CE]  cannot  find  symbol	22	None	add
257	[BUG]  [BUGGY]          int    expectedSq    =    observed.length    -    1;    int  unexpectedSq  =  observed.length  -  1;  double  expectedSq  =  observed.length  -  1;  int  unexpectedSq  =  observed.length  -  1;  [CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])  [FE]      AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedSq    =    observed.length    -    1;    int  unexpectedSq  =  observed.length  -  1;  double  expectedSq  =  observed.length  -  1;  int  unexpectedSq  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedSq        =        observed.length        -        1;        int    unexpectedSq    =    observed.length    -    1;    double  expectedSq  =  observed.length  -  1;  int  unexpectedSq  =  observed.length  -  1;	  	non-compiled	[CE]  variable  expectedSq  is  already  defined  in  method  chiSquare(double[],long[])	22	None	add
258	[BUG]  [BUGGY]  For(int  i  =  2;  i  <  observed.length;  i++)  {  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  For(int  i  =  2;  i  <  observed.length;  i++)  {  [BUGGY]      dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	For(int  i  =  2;  i  <  observed.length;  i++)  {	  For(int    i    =    0;    i    <    observed.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	42	None	replace
259	[BUG]  [BUGGY]          int    expectedLength    =    observed.length    -    1;    int  expectLength  =  observed.length  -  1;  Int  expectedLength  =  observed.length  -  1;  int  expectLength  =  observed.length  -  1;  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]          int    expectedLength    =    observed.length    -    1;    int  expectLength  =  observed.length  -  1;  Int  expectedLength  =  observed.length  -  1;  int  expectLength  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	                int        expectedLength        =        observed.length        -        1;        int    expectLength    =    observed.length    -    1;    Int  expectedLength  =  observed.length  -  1;  int  expectLength  =  observed.length  -  1;	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
260	[BUG]  [BUGGY]  double  expectedLength  =  observed.length  -  1;  int  expectLength  =  observed.length  -  1;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  double  expectedLength  =  observed.length  -  1;  int  expectLength  =  observed.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	double  expectedLength  =  observed.length  -  1;  int  expectLength  =  observed.length  -  1;	          int    expectedLength    =    observed.length    -    1;    int    expectLength    =    observed.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
261	[BUG]  [BUGGY]  int  expectedSq  =  observed.length  -  1;  Int  expectedSq  =  observed.length;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      if  ((expected.length  <  2)  ||  (expected.length  !=  observed.length))  {  throw  new  IllegalArgumentException(       "observed,  expected  array  lengths  incorrect     ");  }  if  (!isPositive(expected)  ||  !isNonNegative(observed))  {  throw  new  IllegalArgumentException(       "observed  counts  must  be  non-negative  and  expected  counts  must  be  postive     ");  }  double  sumSq  =  0.0d;  double  dev  =  0.0d;      [BUGGY]  int  expectedSq  =  observed.length  -  1;  Int  expectedSq  =  observed.length;  [BUGGY]      for  (int  i  =  0;  i  <  observed.length;  i++)  {  dev  =  ((double)  observed[i]  -  expected[i]);  sumSq  +=  dev  *  dev  /  expected[i];  }  return  sumSq;  }  [CLASS]  ChiSquareTestImpl  [METHOD]  chiSquare  [RETURN_TYPE]  double  double[]  expected  long[]  observed  [VARIABLES]  ChiSquaredDistribution  distribution  x  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  	projects/Math102/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java	1.0	76	76	6	replace	int  expectedSq  =  observed.length  -  1;  Int  expectedSq  =  observed.length;	          int    expectedSq    =    observed.length;    Int    expectedSq    =    observed.length;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
